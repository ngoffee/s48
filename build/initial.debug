; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 define-record-types)
(18 methods)
(19 number-i/o)
(20 fluids)
(21 wind)
(22 session-data)
(23 i/o)
(24 channel-i/o)
(25 conditions)
(26 writing)
(27 reading)
(28 scheme-level-2)
(29 features)
(30 templates)
(31 continuations)
(32 more-types)
(33 enumerated)
(34 architecture)
(35 exceptions)
(36 interrupts)
(37 threads)
(38 scheduler)
(39 root-scheduler)
(40 enum-case)
(41 queues)
(42 locks)
(43 usual-resumer)
(44 weak)
(45 display-conditions)
(46 meta-types)
(47 bindings)
(48 names)
(49 thingies)
(50 nodes)
(51 compiler-envs)
(52 syntactic)
(53 usual-macros)
(54 var-utilities)
(55 debug-data)
(56 stack-check)
(57 segments)
(58 primops)
(59 reconstruction)
(60 compiler)
(61 reading-forms)
(62 interfaces)
(63 packages)
(64 scan-package)
(65 optimizer)
(66 compile-packages)
(67 defpackage)
(68 types)
(69 module-system)
(70 usages)
(71 analysis)
(72 inline)
(73 strong)
(74 tables)
(75 filenames)
(76 environments)
(77 evaluation)
(78 ensures-loaded)
(79 for-reification)
(80 scheme)
(81 mini-command)
(82 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (define . 14))
(14 (primitive-procedure . 14))
(15 (if . 14))
(16 (letrec-syntax . 14))
(17 (%file-name% . 14))
(18 (let-syntax . 14))
(19 (structure-ref . 14))
(20 (loophole . 14))
(21 (letrec . 14))
(22 (lap . 14))
(23 (set! . 14))
(24 (call . 14))
(25 (atan . 14))
(26 (set-location-defined?! . 14))
(27 (acos . 14))
(28 (vm-extension . 14))
(29 (asin . 14))
(30 (location-defined? . 14))
(31 (time . 14))
(32 (template-set! . 14))
(33 (cons . 14))
(34 (wait . 14))
(35 (trap . 14))
(36 (assq . 14))
(37 (make-weak-pointer . 14))
(38 (push . 14))
(39 (set-contents! . 14))
(40 (read-char . 14))
(41 (make-cell . 14))
(42 (sqrt . 14))
(43 (* . 14))
(44 (contents . 14))
(45 (+ . 14))
(46 (peek-char . 14))
(47 (- . 14))
(48 (continuation-set! . 14))
(49 (/ . 14))
(50 (weak-pointer? . 14))
(51 (quotient . 14))
(52 (close-channel . 14))
(53 (channel-abort . 14))
(54 (char? . 14))
(55 (< . 14))
(56 (= . 14))
(57 (> . 14))
(58 (make-location . 14))
(59 (imag-part . 14))
(60 (set-port-data! . 14))
(61 (make-template . 14))
(62 (real? . 14))
(63 (real-part . 14))
(64 (get-cont-from-heap . 14))
(65 (external-call . 14))
(66 (record-length . 14))
(67 (make-external . 14))
(68 (port-data . 14))
(69 (pair? . 14))
(70 (external-name . 14))
(71 (make-port . 14))
(72 (set-port-lock! . 14))
(73 (return-from-exception . 14))
(74 (location? . 14))
(75 (channel-maybe-read . 14))
(76 (checked-record-ref . 14))
(77 (add-finalizer! . 14))
(78 (rational? . 14))
(79 (template? . 14))
(80 (port-lock . 14))
(81 (vector-length . 14))
(82 (make-continuation . 14))
(83 (external? . 14))
(84 (string-length . 14))
(85 (port? . 14))
(86 (angle . 14))
(87 (false . 14))
(88 (vm-return . 14))
(89 (remainder . 14))
(90 (continuation? . 14))
(91 (binary-reduce1 . 14))
(92 (binary-reduce2 . 14))
(93 (char<? . 14))
(94 (char=? . 14))
(95 (<= . 14))
(96 (magnitude . 14))
(97 (>= . 14))
(98 (with-continuation . 14))
(99 (floor . 14))
(100 (code-vector-length . 14))
(101 (apply . 14))
(102 (memory-status . 14))
(103 (checked-record-set! . 14))
(104 (inexact->exact . 14))
(105 (exact->inexact . 14))
(106 (error . 14))
(107 (extended-number-length . 14))
(108 (channel-id . 14))
(109 (numerator . 14))
(110 (eof-object . 14))
(111 (record-ref . 14))
(112 (make-polar . 14))
(113 (write-char . 14))
(114 (symbol->string . 14))
(115 (exact? . 14))
(116 (vector-ref . 14))
(117 (set-current-thread! . 14))
(118 (immutable? . 14))
(119 (set-exception-handlers! . 14))
(120 (string-ref . 14))
(121 (set-port-index! . 14))
(122 (current-thread . 14))
(123 (channel-status . 14))
(124 (set-port-limit! . 14))
(125 (make-immutable! . 14))
(126 (port-index . 14))
(127 (external-value . 14))
(128 (set-enabled-interrupts! . 14))
(129 (port-limit . 14))
(130 (ascii->char . 14))
(131 (char->ascii . 14))
(132 (record-set! . 14))
(133 (eof-object? . 14))
(134 (set-interrupt-handlers! . 14))
(135 (record . 14))
(136 (schedule-interrupt . 14))
(137 (code-vector-ref . 14))
(138 (channel-maybe-write . 14))
(139 (extended-number-ref . 14))
(140 (vector-set! . 14))
(141 (copy-bytes! . 14))
(142 (string-set! . 14))
(143 (values . 14))
(144 (intern . 14))
(145 (vector . 14))
(146 (make-record . 14))
(147 (set-location-id! . 14))
(148 (code-vector-set! . 14))
(149 (location-id . 14))
(150 (bitwise-and . 14))
(151 (eq? . 14))
(152 (write-image . 14))
(153 (extended-number-set! . 14))
(154 (make-vector . 14))
(155 (record? . 14))
(156 (make-string . 14))
(157 (set-port-buffer! . 14))
(158 (primitive-catch . 14))
(159 (string-hash . 14))
(160 (template-length . 14))
(161 (number? . 14))
(162 (port-buffer . 14))
(163 (bitwise-ior . 14))
(164 (set-car! . 14))
(165 (closure-env . 14))
(166 (vector? . 14))
(167 (bitwise-not . 14))
(168 (set-cdr! . 14))
(169 (symbol? . 14))
(170 (string? . 14))
(171 (car . 14))
(172 (bitwise-xor . 14))
(173 (cdr . 14))
(174 (make-code-vector . 14))
(175 (find-all-records . 14))
(176 (continuation-length . 14))
(177 (log . 14))
(178 (message . 14))
(179 (tan . 14))
(180 (external-lookup . 14))
(181 (collect . 14))
(182 (cos . 14))
(183 (channel-os-index . 14))
(184 (make-extended-number . 14))
(185 (set-port-status! . 14))
(186 (sin . 14))
(187 (exp . 14))
(188 (pop . 14))
(189 (port-status . 14))
(190 (code-vector? . 14))
(191 (find-all-symbols . 14))
(192 (set-port-locked?! . 14))
(193 (weak-pointer-ref . 14))
(194 (call-with-values . 14))
(195 (denominator . 14))
(196 (reverse-list->string . 14))
(197 (port-locked? . 14))
(198 (extended-number? . 14))
(199 (find-all . 14))
(200 (cell-ref . 14))
(201 (string=? . 14))
(202 (open-channel . 14))
(203 (channel? . 14))
(204 (make-rectangular . 14))
(205 (set-session-data! . 14))
(206 (template-ref . 14))
(207 (make-closure . 14))
(208 (session-data . 14))
(209 (integer? . 14))
(210 (signal-condition . 14))
(211 (port-handler . 14))
(212 (set-port-pending-eof?! . 14))
(213 (arithmetic-shift . 14))
(214 (complex? . 14))
(215 (port-pending-eof? . 14))
(216 (cell-set! . 14))
(217 (binary-comparison-reduce2 . 14))
(218 (closure? . 14))
(219 (continuation-ref . 14))
(220 (closure-template . 14))
(221 (current-cont . 14))
(222 (char->integer . 14))
(223 (integer->char . 14))
(224 (ascii-limit . 14))
(225 (ascii-whitespaces . 14))
(226 (procedure? . 14))
(227 (invoke-closure . 14))
(228 (primitive-cwcc . 14))
(229 (make-undefined-location . 14))
(230 (location-assigned? . 14))
(231 (vector-unassigned? . 14))
(232 (string-copy . 14))
(233 (string->symbol . 14))
(234 (*the-symbol-table* . 14))
(235 (flush-the-symbol-table! . 14))
(236 (restore-the-symbol-table! . 14))
(237 (input-port? . 14))
(238 (output-port? . 14))
(239 (channel-read . 14))
(240 (buffer-length . 14))
(241 (channel-write . 14))
(242 (user-message . 14))
(243 (make-condition . 14))
(244 (signal . 14))
(245 (warn . 14))
(246 (syntax-error . 14))
(247 (call-error . 14))
(248 (case . 15))
(249 (quasiquote . 15))
(250 (syntax-rules . 15))
(251 (not . 15))
(252 (boolean? . 15))
(253 (eqv? . 15))
(254 (equal? . 15))
(255 (max . 15))
(256 (min . 15))
(257 (max-or-min . 15))
(258 (abs . 15))
(259 (zero? . 15))
(260 (positive? . 15))
(261 (negative? . 15))
(262 (even? . 15))
(263 (odd? . 15))
(264 (caar . 15))
(265 (cadr . 15))
(266 (cdar . 15))
(267 (cddr . 15))
(268 (caaar . 15))
(269 (caadr . 15))
(270 (cadar . 15))
(271 (caddr . 15))
(272 (cdaar . 15))
(273 (cdadr . 15))
(274 (cddar . 15))
(275 (cdddr . 15))
(276 (caaaar . 15))
(277 (caaadr . 15))
(278 (caadar . 15))
(279 (caaddr . 15))
(280 (cadaar . 15))
(281 (cadadr . 15))
(282 (caddar . 15))
(283 (cadddr . 15))
(284 (cdaaar . 15))
(285 (cdaadr . 15))
(286 (cdadar . 15))
(287 (cdaddr . 15))
(288 (cddaar . 15))
(289 (cddadr . 15))
(290 (cdddar . 15))
(291 (cddddr . 15))
(292 (null? . 15))
(293 (list . 15))
(294 (length . 15))
(295 (real-length . 15))
(296 (append . 15))
(297 (reverse . 15))
(298 (append-reverse . 15))
(299 (list-tail . 15))
(300 (list-ref . 15))
(301 (mem . 15))
(302 (memq . 15))
(303 (memv . 15))
(304 (member . 15))
(305 (ass . 15))
(306 (assv . 15))
(307 (assoc . 15))
(308 (list? . 15))
(309 (char>? . 15))
(310 (char>=? . 15))
(311 (char<=? . 15))
(312 (char-whitespace? . 15))
(313 (char-lower-case? . 15))
(314 (char-upper-case? . 15))
(315 (char-numeric? . 15))
(316 (char-alphabetic? . 15))
(317 (char-case-delta . 15))
(318 (make-character-map . 15))
(319 (upcase-map . 15))
(320 (char-upcase . 15))
(321 (downcase-map . 15))
(322 (char-downcase . 15))
(323 (char-ci-compare . 15))
(324 (char-ci=? . 15))
(325 (char-ci<? . 15))
(326 (char-ci<=? . 15))
(327 (char-ci>? . 15))
(328 (char-ci>=? . 15))
(329 (string . 15))
(330 (substring . 15))
(331 (string-append . 15))
(332 (string->list . 15))
(333 (list->string . 15))
(334 (string-fill! . 15))
(335 (make-string=? . 15))
(336 (string-ci=? . 15))
(337 (make-string<? . 15))
(338 (string<? . 15))
(339 (string-ci<? . 15))
(340 (string>? . 15))
(341 (string<=? . 15))
(342 (string>=? . 15))
(343 (string-ci>? . 15))
(344 (string-ci<=? . 15))
(345 (string-ci>=? . 15))
(346 (vector->list . 15))
(347 (list->vector . 15))
(348 (vector-fill! . 15))
(349 (map . 15))
(350 (map1 . 15))
(351 (map2+ . 15))
(352 (for-each . 15))
(353 (for-each1 . 15))
(354 (for-each2+ . 15))
(355 (delay . 15))
(356 (make-promise . 15))
(357 (force . 15))
(358 (unspecific . 15))
(359 (reduce . 15))
(360 (filter . 15))
(361 (pos . 15))
(362 (posq . 15))
(363 (posv . 15))
(364 (position . 15))
(365 (any . 15))
(366 (every . 15))
(367 (sublist . 15))
(368 (last . 15))
(369 (insert . 15))
(370 (fold . 15))
(371 (fold->2 . 15))
(372 (fold->3 . 15))
(373 (inexact? . 15))
(374 (modulo . 15))
(375 (ceiling . 15))
(376 (truncate . 15))
(377 (round . 15))
(378 (gcd . 15))
(379 (euclid . 15))
(380 (lcm . 15))
(381 (expt . 15))
(382 (raise-to-integer-power . 15))
(383 (rationalize . 15))
(384 (simplest-rational . 15))
(385 (record-type . 16))
(386 (*record-type-uid* . 16))
(387 (*record-type* . 16))
(388 (make-record-type . 16))
(389 (record-type? . 16))
(390 (record-type-uid . 16))
(391 (record-type-name . 16))
(392 (record-type-field-names . 16))
(393 (record-type-discloser . 16))
(394 (record-field-index . 16))
(395 (record-constructor . 16))
(396 (record-accessor . 16))
(397 (record-modifier . 16))
(398 (record-predicate . 16))
(399 (define-record-discloser . 16))
(400 (disclose-record . 16))
(401 (default-record-discloser . 16))
(402 (:record-type . 16))
(403 (define-record-type . 17))
(404 (define-constructor . 17))
(405 (define-accessors . 17))
(406 (define-accessor . 17))
(407 (:simple-type . 18))
(408 (really-make-simple-type . 18))
(409 (simple-type-id . 18))
(410 (simple-type-priority . 18))
(411 (simple-type-predicate . 18))
(412 (simple-type-superiors . 18))
(413 (simple-type? . 18))
(414 (make-simple-type . 18))
(415 (compute-priority . 18))
(416 (*increment* . 18))
(417 (%type-priority . 18))
(418 (%type-predicate . 18))
(419 (%same-type? . 18))
(420 (define-simple-type . 18))
(421 (:syntax . 18))
(422 (:values . 18))
(423 (value? . 18))
(424 (:value . 18))
(425 (:zero . 18))
(426 (:number . 18))
(427 (:complex . 18))
(428 (:real . 18))
(429 (:rational . 18))
(430 (:integer . 18))
(431 (:exact-integer . 18))
(432 (:boolean . 18))
(433 (:symbol . 18))
(434 (:char . 18))
(435 (:null . 18))
(436 (:pair . 18))
(437 (:vector . 18))
(438 (:string . 18))
(439 (:procedure . 18))
(440 (:input-port . 18))
(441 (:output-port . 18))
(442 (:eof-object . 18))
(443 (:record . 18))
(444 (record-type-priority . 18))
(445 (:method-info . 18))
(446 (really-make-method-info . 18))
(447 (method-info-proc . 18))
(448 (method-info-n-ary? . 18))
(449 (method-info-types . 18))
(450 (method-info? . 18))
(451 (make-method-info . 18))
(452 (empty-method-list . 18))
(453 (insert-method . 18))
(454 (same-applicability? . 18))
(455 (every2 . 18))
(456 (more-specific? . 18))
(457 (more-specific-type? . 18))
(458 (:method-table . 18))
(459 (really-make-method-table . 18))
(460 (method-table-id . 18))
(461 (method-table-set-perform! . 18))
(462 (method-table-get-perform . 18))
(463 (make-generic . 18))
(464 (method-table-prototype . 18))
(465 (method-table-methods . 18))
(466 (set-method-table-methods! . 18))
(467 (method-table? . 18))
(468 (make-method-table . 18))
(469 (make-cell-for-generic . 18))
(470 (add-to-method-table! . 18))
(471 (set-final-method! . 18))
(472 (apply-generic . 18))
(473 (define-generic . 18))
(474 (methods->perform . 18))
(475 (last-action . 18))
(476 (one-action . 18))
(477 (argument-sequence-predicate . 18))
(478 (check-for-next . 18))
(479 (check-next . 18))
(480 (method-info . 18))
(481 (method-internal . 18))
(482 (with-next-method . 18))
(483 (define-method . 18))
(484 (&add-method! . 18))
(485 (add-method! . 18))
(486 (&type-predicate . 18))
(487 (type-predicate . 18))
(488 (&type-priority . 18))
(489 (type-priority . 18))
(490 (&type-superiors . 18))
(491 (type-superiors . 18))
(492 (&same-type? . 18))
(493 (same-type? . 18))
(494 (:singleton . 18))
(495 (singleton . 18))
(496 (singleton-value . 18))
(497 (compare-to . 18))
(498 (&disclose . 18))
(499 (disclose . 18))
(500 (proc->discloser . 18))
(501 (&number->string . 19))
(502 (number->string . 19))
(503 (integer->string . 19))
(504 (string->number . 19))
(505 (&really-string->number . 19))
(506 (really-string->number . 19))
(507 (:integer-string . 19))
(508 (set-exactness . 19))
(509 (string->integer . 19))
(510 (:thread . 20))
(511 (make-thread . 20))
(512 (thread-dynamic-point . 20))
(513 (thread-dynamic-env . 20))
(514 (get-dynamic-env . 20))
(515 (set-dynamic-env! . 20))
(516 (get-dynamic-point . 20))
(517 (set-dynamic-point! . 20))
(518 (initialize-dynamic-state! . 20))
(519 (with-dynamic-env . 20))
(520 (empty-dynamic-env . 20))
(521 (:fluid . 20))
(522 (make-fluid . 20))
(523 (fluid-top-level-value . 20))
(524 (set-fluid-top-level-value! . 20))
(525 (fluid . 20))
(526 (set-fluid! . 20))
(527 (let-fluid . 20))
(528 (let-fluids . 20))
(529 (define-enumeration . 33))
(530 (components . 33))
(531 (enum . 33))
(532 (enumerand->name . 33))
(533 (name->enumerand . 33))
(534 (lookup-enumerand . 33))
(535 (architecture-version . 34))
(536 (bits-used-per-byte . 34))
(537 (byte-limit . 34))
(538 (define-instruction-set . 34))
(539 (op . 34))
(540 (op-enumeration . 34))
(541 (op-count . 34))
(542 (opcode-arg-specs . 34))
(543 (interrupt . 34))
(544 (interrupt-enumeration . 34))
(545 (interrupt-count . 34))
(546 (exception . 34))
(547 (exception-enumeration . 34))
(548 (exception-count . 34))
(549 (current-port-marker . 34))
(550 (current-port-marker-enumeration . 34))
(551 (current-port-marker-count . 34))
(552 (maximum-stack-args . 34))
(553 (*last-protocol* . 34))
(554 (next-protocol . 34))
(555 (two-byte-nargs-protocol . 34))
(556 (two-byte-nargs+list-protocol . 34))
(557 (big-stack-protocol . 34))
(558 (args+nargs-protocol . 34))
(559 (nary-dispatch-protocol . 34))
(560 (default-stack-space . 34))
(561 (environment-stack-size . 34))
(562 (continuation-stack-size . 34))
(563 (available-stack-space . 34))
(564 (time-option . 34))
(565 (time-option-enumeration . 34))
(566 (time-option-count . 34))
(567 (memory-status-option . 34))
(568 (memory-status-option-enumeration . 34))
(569 (memory-status-option-count . 34))
(570 (channel-status-option . 34))
(571 (channel-status-option-enumeration . 34))
(572 (channel-status-option-count . 34))
(573 (port-status-options . 34))
(574 (port-status-options-enumeration . 34))
(575 (port-status-options-count . 34))
(576 (stob . 34))
(577 (stob-enumeration . 34))
(578 (stob-count . 34))
(579 (least-b-vector-type . 34))
(580 (stob-data . 34))
(581 (:queue . 41))
(582 (really-make-queue . 41))
(583 (queue-tail . 41))
(584 (set-queue-tail! . 41))
(585 (queue-head . 41))
(586 (set-queue-head! . 41))
(587 (queue-uid . 41))
(588 (queue? . 41))
(589 (*queue-uid* . 41))
(590 (make-queue . 41))
(591 (queue-empty? . 41))
(592 (enqueue! . 41))
(593 (queue-front . 41))
(594 (dequeue! . 41))
(595 (on-queue? . 41))
(596 (delete-from-queue! . 41))
(597 (delete-from-queue-if! . 41))
(598 (queue->list . 41))
(599 (queue-length . 41))
(600 (*condition-types* . 25))
(601 (condition-supertypes . 25))
(602 (define-condition-type . 25))
(603 (condition-predicate . 25))
(604 (condition? . 25))
(605 (condition-type . 25))
(606 (condition-stuff . 25))
(607 (error? . 25))
(608 (call-error? . 25))
(609 (read-error? . 25))
(610 (exception? . 25))
(611 (exception-opcode . 25))
(612 (exception-reason . 25))
(613 (exception-arguments . 25))
(614 (make-exception . 25))
(615 (warning? . 25))
(616 (syntax-error? . 25))
(617 (interrupt? . 25))
(618 (*session-data-initializers* . 22))
(619 (make-session-data-slot! . 22))
(620 (session-data-ref . 22))
(621 (session-data-set! . 22))
(622 (initialize-session-data! . 22))
(623 (initialize-interrupts! . 36))
(624 (interrupt-handlers . 36))
(625 (set-interrupt-handler! . 36))
(626 (no-interrupts . 36))
(627 (all-interrupts . 36))
(628 (with-interrupts-inhibited . 36))
(629 (with-interrupts-allowed . 36))
(630 (disable-interrupts! . 36))
(631 (enable-interrupts! . 36))
(632 (with-interrupts . 36))
(633 (enabled-interrupts . 36))
(634 (*post-gc-procedures* . 36))
(635 (call-after-gc! . 36))
(636 (post-gc-handler . 36))
(637 (required-post-gc-space . 36))
(638 (space-shortage-handler . 36))
(639 (call-before-heap-overflow! . 36))
(640 (dynamic-wind . 21))
(641 (call-with-current-continuation . 21))
(642 (continuation->procedure . 21))
(643 (:point . 21))
(644 (make-point . 21))
(645 (point-parent . 21))
(646 (point-dynamic-env . 21))
(647 (point-out . 21))
(648 (point-in . 21))
(649 (point-depth . 21))
(650 (travel-to-point! . 21))
(651 (template-overhead . 30))
(652 (template-code . 30))
(653 (template-info . 30))
(654 (set-template-code! . 30))
(655 (set-template-info! . 30))
(656 (:closure . 32))
(657 (:code-vector . 32))
(658 (:location . 32))
(659 (:template . 32))
(660 (:channel . 32))
(661 (:port . 32))
(662 (:weak-pointer . 32))
(663 (:external . 32))
(664 (continuation-cont . 31))
(665 (real-continuation-pc . 31))
(666 (real-continuation-template . 31))
(667 (continuation-env . 31))
(668 (exception-continuation-pc . 31))
(669 (exception-continuation-template . 31))
(670 (exception-continuation-exception . 31))
(671 (exception-continuation? . 31))
(672 (continuation-pc . 31))
(673 (continuation-template . 31))
(674 (normal-continuation-overhead . 31))
(675 (exception-continuation-overhead . 31))
(676 (continuation-arg . 31))
(677 (continuation-arg-count . 31))
(678 (:continuation . 31))
(679 (continuation-parent . 31))
(680 (define-exception-handler . 35))
(681 (signal-exception . 35))
(682 (exception-handlers . 35))
(683 (extend-opcode! . 35))
(684 (really-signal-condition . 35))
(685 (with-handler . 35))
(686 ($condition-handlers . 35))
(687 (initialize-exceptions! . 35))
(688 (last-resort-condition-handler . 35))
(689 (report-utter-lossage . 35))
(690 (continuation-preview . 35))
(691 (ignore-errors . 35))
(692 (report-errors-as-warnings . 35))
(693 (:thread . 37))
(694 (really-make-thread . 37))
(695 (thread-name . 37))
(696 (thread-uid . 37))
(697 (thread-current-task . 37))
(698 (set-thread-current-task! . 37))
(699 (thread-events . 37))
(700 (set-thread-events! . 37))
(701 (thread-data . 37))
(702 (set-thread-data! . 37))
(703 (thread-scheduler . 37))
(704 (set-thread-scheduler! . 37))
(705 (thread-time . 37))
(706 (set-thread-time! . 37))
(707 (thread-arguments . 37))
(708 (set-thread-arguments! . 37))
(709 (thread-queue . 37))
(710 (set-thread-queue! . 37))
(711 (thread-continuation . 37))
(712 (set-thread-continuation! . 37))
(713 (thread-dynamic-point . 37))
(714 (set-thread-dynamic-point! . 37))
(715 (thread-dynamic-env . 37))
(716 (thread? . 37))
(717 (*thread-uid* . 37))
(718 (make-thread . 37))
(719 (thread-top-level . 37))
(720 (thread-uid->thread . 37))
(721 (all-threads . 37))
(722 (add-event! . 37))
(723 (thunk->continuation . 37))
(724 (compose-continuation . 37))
(725 (make-thread-queue . 37))
(726 (thread-queue-empty? . 37))
(727 (enqueue-thread! . 37))
(728 (dequeue-thread! . 37))
(729 (remove-thread-from-queue! . 37))
(730 (current-thread . 37))
(731 (set-current-thread! . 37))
(732 (event-type . 37))
(733 (event-type-enumeration . 37))
(734 (event-type-count . 37))
(735 (run . 37))
(736 (find-and-run-next-thread . 37))
(737 (debit-thread-times-and-run! . 37))
(738 (handle-timer-interrupt . 37))
(739 (run-next-thread . 37))
(740 (min . 37))
(741 (switch-to-thread . 37))
(742 (run-thread . 37))
(743 (suspend . 37))
(744 (suspend-to . 37))
(745 (debit-down! . 37))
(746 (exit . 37))
(747 (wait . 37))
(748 (waiting? . 37))
(749 (block . 37))
(750 (relinquish-timeslice . 37))
(751 (upcall . 37))
(752 (propogate-upcall . 37))
(753 (kill-thread! . 37))
(754 (interrupt-thread . 37))
(755 (get-next-event! . 37))
(756 (event-pending? . 37))
(757 (schedule-event . 37))
(758 (schedule-wakeup . 37))
(759 (show-running . 37))
(760 (running? . 37))
(761 (spawn . 37))
(762 (spawn-on-root . 37))
(763 (spawn-on-scheduler . 37))
(764 (make-ready . 37))
(765 (schedule-interrupt! . 37))
(766 (cancel-timer-interrupt! . 37))
(767 (interrupt-timer-time . 37))
(768 (real-time . 37))
(769 (with-threads . 37))
(770 (start-multitasking . 37))
(771 (deadlock? . 37))
(772 (terminate? . 37))
(773 (terminate-current-thread . 37))
(774 (root-scheduler-slot . 37))
(775 (root-scheduler . 37))
(776 (sleep . 37))
(777 (*dozers* . 37))
(778 (insert . 37))
(779 (wake-some-threads . 37))
(780 (:lock . 42))
(781 (really-make-lock . 42))
(782 (lock-uid . 42))
(783 (lock-queue . 42))
(784 (lock-owner-uid . 42))
(785 (set-lock-owner-uid! . 42))
(786 (lock? . 42))
(787 (*lock-uid* . 42))
(788 (make-lock . 42))
(789 (obtain-lock . 42))
(790 (maybe-obtain-lock . 42))
(791 (release-lock . 42))
(792 (:port-handler . 23))
(793 (make-port-handler . 23))
(794 (port-handler-buffer-proc . 23))
(795 (port-handler-close . 23))
(796 (port-handler-discloser . 23))
(797 (port-handler? . 23))
(798 (disclose-port . 23))
(799 (obtain-port-lock . 23))
(800 (maybe-obtain-port-lock . 23))
(801 (release-port-lock . 23))
(802 (initialize-i/o-handlers! . 23))
(803 (one-arg-proc->handler . 23))
(804 (two-arg-proc->handler . 23))
(805 (read-char-handler . 23))
(806 (fill-port-buffer! . 23))
(807 (write-char-handler . 23))
(808 (empty-port-buffer! . 23))
(809 (port-flushed? . 23))
(810 (set-port-flushed?! . 23))
(811 (close-input-port . 23))
(812 (close-output-port . 23))
(813 (define-port-op . 23))
(814 (real-char-ready? . 23))
(815 (read-block . 23))
(816 (really-read-block . 23))
(817 (buffer-length . 23))
(818 (read-more . 23))
(819 (okay-limits? . 23))
(820 (write-block . 23))
(821 (write-string . 23))
(822 (write-buffered-block . 23))
(823 (write-unbuffered-block . 23))
(824 (force-output . 23))
(825 (really-force-output . 23))
(826 (default-buffer-size . 23))
(827 (open-port? . 23))
(828 (open-port-mask . 23))
(829 (input-port-mask . 23))
(830 (open-input-port-mask . 23))
(831 (open-input-port-status . 23))
(832 (open-input-port? . 23))
(833 (make-input-port-closed! . 23))
(834 (make-input-port . 23))
(835 (okay-buffer? . 23))
(836 (output-port-mask . 23))
(837 (open-output-port-mask . 23))
(838 (open-output-port-status . 23))
(839 (open-output-port? . 23))
(840 (make-output-port-closed! . 23))
(841 (make-output-port . 23))
(842 (make-unbuffered-output-port . 23))
(843 (null-output-port-handler . 23))
(844 (make-null-output-port . 23))
(845 (*flush-these-ports* . 23))
(846 (initialize-output-port-list! . 23))
(847 (periodically-force-output! . 23))
(848 (output-port-forcers . 23))
(849 (make-forcing-thunk . 23))
(850 ($current-input-port . 23))
(851 ($current-output-port . 23))
(852 ($current-error-port . 23))
(853 ($current-noise-port . 23))
(854 (current-input-port . 23))
(855 (current-output-port . 23))
(856 (current-error-port . 23))
(857 (current-noise-port . 23))
(858 (initialize-i/o . 23))
(859 (with-current-ports . 23))
(860 (call-with-current-input-port . 23))
(861 (call-with-current-output-port . 23))
(862 (call-with-current-noise-port . 23))
(863 (silently . 23))
(864 (newline . 23))
(865 (char-ready? . 23))
(866 (output-port-option . 23))
(867 (input-port-option . 23))
(868 (write . 26))
(869 (recurring-write . 26))
(870 (write-boolean . 26))
(871 (write-number . 26))
(872 (write-char-literal . 26))
(873 (character-name . 26))
(874 (write-string-literal . 26))
(875 (write-list . 26))
(876 (quotation? . 26))
(877 (write-vector . 26))
(878 (write-other . 26))
(879 (display-type-name . 26))
(880 (display . 26))
(881 (read . 27))
(882 (sub-read-carefully . 27))
(883 (reader-token-marker . 27))
(884 (make-reader-token . 27))
(885 (reader-token? . 27))
(886 (close-paren . 27))
(887 (dot . 27))
(888 (sub-read . 27))
(889 (read-dispatch-vector . 27))
(890 (read-terminating?-vector . 27))
(891 (set-standard-syntax! . 27))
(892 (set-standard-read-macro! . 27))
(893 (sub-read-list . 27))
(894 (gobble-line . 27))
(895 (*sharp-macros* . 27))
(896 (define-sharp-macro . 27))
(897 (sub-read-token . 27))
(898 (parse-token . 27))
(899 (strange-symbol-names . 27))
(900 (p-c-v . 27))
(901 (preferred-case . 27))
(902 (reading-error . 27))
(903 (input-channel-handler . 24))
(904 (input-channel->port . 24))
(905 (output-channel-handler . 24))
(906 (make-unbuffered-output-channel-handler . 24))
(907 (output-channel->port . 24))
(908 (maybe-force-output . 24))
(909 (maybe-open-file . 24))
(910 (open-input-file . 24))
(911 (open-output-file . 24))
(912 (call-with-input-file . 24))
(913 (call-with-output-file . 24))
(914 (with-input-from-file . 24))
(915 (with-output-to-file . 24))
(916 (steal-channel-port! . 24))
(917 (really-steal-channel-port! . 24))
(918 (initialize-channel-i/o! . 24))
(919 (i/o-completion-handler . 24))
(920 (waiting-for-i/o? . 24))
(921 (wait-for-channel . 24))
(922 (steal-channel! . 24))
(923 (i/o-wait-count-slot . 24))
(924 (i/o-wait-count . 24))
(925 (increment-i/o-wait-count! . 24))
(926 (decrement-i/o-wait-count! . 24))
(927 (i/o-wait-queues-slot . 24))
(928 (i/o-wait-queue . 24))
(929 (make-i/o-wait-queues . 24))
(930 (:table . 74))
(931 (really-make-table . 74))
(932 (table-set!-procedure . 74))
(933 (set-table-set!-procedure! . 74))
(934 (table-ref-procedure . 74))
(935 (set-table-ref-procedure! . 74))
(936 (table-data . 74))
(937 (set-table-data! . 74))
(938 (table-size . 74))
(939 (set-table-size! . 74))
(940 (table? . 74))
(941 (table-ref . 74))
(942 (table-set! . 74))
(943 (linear-table-size-limit . 74))
(944 (next-table-size . 74))
(945 (make-table-maker . 74))
(946 (null-entry . 74))
(947 (new-entry . 74))
(948 (entry-value . 74))
(949 (entry-key . 74))
(950 (set-entry-value! . 74))
(951 (delete-entry! . 74))
(952 (make-assoc . 74))
(953 (make-linear-table-ref . 74))
(954 (make-linear-table-set! . 74))
(955 (make->hash-table . 74))
(956 (make-hash-table-ref . 74))
(957 (make-hash-table-set! . 74))
(958 (expand-hash-table! . 74))
(959 (table-enter-alist! . 74))
(960 (table-expand-table! . 74))
(961 (table-walk . 74))
(962 (really-table-walk . 74))
(963 (alist-walk . 74))
(964 (make-table-immutable! . 74))
(965 (table->entry-list . 74))
(966 (default-table-hash-function . 74))
(967 (symbol-hash . 74))
(968 (make-table . 74))
(969 (make-string-table . 74))
(970 (make-symbol-table . 74))
(971 (make-integer-table . 74))
(972 (make-population . 44))
(973 (add-to-population! . 44))
(974 (weak-memq . 44))
(975 (population-reduce . 44))
(976 (population->list . 44))
(977 (walk-population . 44))
(978 (:meta-type . 46))
(979 (really-make-type . 46))
(980 (type-info . 46))
(981 (type-more . 46))
(982 (type-mask . 46))
(983 (meta-type? . 46))
(984 (make-type . 46))
(985 (name->type-table . 46))
(986 (mask->name-table . 46))
(987 (name->type . 46))
(988 (set-type-name! . 46))
(989 (*mask* . 46))
(990 (new-type-bit . 46))
(991 (mask->type . 46))
(992 (bottom-type . 46))
(993 (error-type . 46))
(994 (bottom-type? . 46))
(995 (new-atomic-type . 46))
(996 (named-atomic-type . 46))
(997 (syntax-type . 46))
(998 (other-static-type . 46))
(999 (empty-rail-type . 46))
(1000 (rail-type . 46))
(1001 (make-optional-type . 46))
(1002 (make-rest-type . 46))
(1003 (head-type . 46))
(1004 (head-type-really . 46))
(1005 (tail-type . 46))
(1006 (empty-rail-type? . 46))
(1007 (rest-type? . 46))
(1008 (optional-type? . 46))
(1009 (mask/no-values . 46))
(1010 (mask/two-or-more . 46))
(1011 (mask/&rest . 46))
(1012 (value-type . 46))
(1013 (mask/value . 46))
(1014 (value-type? . 46))
(1015 (any-values-type . 46))
(1016 (any-arguments-type . 46))
(1017 (mask/one-or-more . 46))
(1018 (same-type? . 46))
(1019 (subtype? . 46))
(1020 (meet-type . 46))
(1021 (other-type-info . 46))
(1022 (meet-rail . 46))
(1023 (meet-procedure . 46))
(1024 (meet? . 46))
(1025 (meet-procedure? . 46))
(1026 (join-type . 46))
(1027 (join-rail . 46))
(1028 (join-procedure . 46))
(1029 (number-hierarchy . 46))
(1030 (integer-type . 46))
(1031 (rational-type . 46))
(1032 (real-type . 46))
(1033 (complex-type . 46))
(1034 (number-type . 46))
(1035 (exact-type . 46))
(1036 (inexact-type . 46))
(1037 (exact-integer-type . 46))
(1038 (inexact-real-type . 46))
(1039 (boolean-type . 46))
(1040 (pair-type . 46))
(1041 (null-type . 46))
(1042 (record-type . 46))
(1043 (any-procedure-type . 46))
(1044 (other-value-type . 46))
(1045 (mask/other . 46))
(1046 (make-other-type . 46))
(1047 (char-type . 46))
(1048 (unspecific-type . 46))
(1049 (string-type . 46))
(1050 (symbol-type . 46))
(1051 (vector-type . 46))
(1052 (escape-type . 46))
(1053 (structure-type . 46))
(1054 (mask/procedure . 46))
(1055 (procedure-type . 46))
(1056 (make-procedure-type . 46))
(1057 (procedure-type-domain . 46))
(1058 (procedure-type-codomain . 46))
(1059 (restrictive? . 46))
(1060 (sexp->type . 46))
(1061 (sexp->values-type . 46))
(1062 (type->sexp . 46))
(1063 (atomic-type->sexp . 46))
(1064 (rail-type->sexp . 46))
(1065 (disjoin-type . 46))
(1066 (disjoin-rest . 46))
(1067 (mask/number . 46))
(1068 (make-some-values-type . 46))
(1069 (proc . 46))
(1070 (some-values . 46))
(1071 (procedure-type? . 46))
(1072 (fixed-arity-procedure-type? . 46))
(1073 (procedure-type-arity . 46))
(1074 (procedure-type-argument-types . 46))
(1075 (variable-type . 46))
(1076 (variable-type? . 46))
(1077 (variable-value-type . 46))
(1078 (usual-variable-type . 46))
(1079 (undeclared-type . 46))
(1080 (compatible-types? . 46))
(1081 (:interface . 62))
(1082 (really-make-interface . 62))
(1083 (interface-name . 62))
(1084 (set-interface-name! . 62))
(1085 (interface-clients . 62))
(1086 (walk-method . 62))
(1087 (ref-method . 62))
(1088 (interface? . 62))
(1089 (interface-ref . 62))
(1090 (for-each-declaration . 62))
(1091 (note-reference-to-interface! . 62))
(1092 (make-interface . 62))
(1093 (make-simple-interface . 62))
(1094 (really-make-simple-interface . 62))
(1095 (make-compound-interface . 62))
(1096 (note-interface-name! . 62))
(1097 (binding? . 47))
(1098 (binding-type . 47))
(1099 (binding-place . 47))
(1100 (binding-static . 47))
(1101 (binding-path . 47))
(1102 (set-binding-place! . 47))
(1103 (make-binding . 47))
(1104 (add-path . 47))
(1105 (clobber-binding! . 47))
(1106 (impose-type . 47))
(1107 (forget-integration . 47))
(1108 (same-denotation? . 47))
(1109 (maybe-fix-place! . 47))
(1110 (follow-forwarding-pointers . 47))
(1111 (name? . 48))
(1112 (:generated . 48))
(1113 (make-generated . 48))
(1114 (generated-parent-name . 48))
(1115 (generated-env . 48))
(1116 (generated-token . 48))
(1117 (generated-symbol . 48))
(1118 (generated? . 48))
(1119 (generate-name . 48))
(1120 (generated-uid . 48))
(1121 (*generated-uid* . 48))
(1122 (name->symbol . 48))
(1123 (name-hash . 48))
(1124 (make-name-table . 48))
(1125 (desyntaxify . 48))
(1126 (make-qualified . 48))
(1127 (qualified? . 48))
(1128 (qualified-parent-name . 48))
(1129 (qualified-symbol . 48))
(1130 (name->qualified . 48))
(1131 (qualify-parent . 48))
(1132 (:transform . 48))
(1133 (really-make-transform . 48))
(1134 (transform-id . 48))
(1135 (transform-source . 48))
(1136 (transform-aux-names . 48))
(1137 (transform-type . 48))
(1138 (transform-env . 48))
(1139 (transform-procedure . 48))
(1140 (transform? . 48))
(1141 (make-transform . 48))
(1142 (maybe-apply-macro-transform . 48))
(1143 (apply-inline-transform . 48))
(1144 (make-keyword-comparator . 48))
(1145 (name->source-name . 48))
(1146 (bind-aliases . 48))
(1147 (make-name-generator . 48))
(1148 (lookup . 48))
(1149 (lookup . 51))
(1150 (bind1 . 51))
(1151 (bind . 51))
(1152 (bindrec . 51))
(1153 (make-compiler-env . 51))
(1154 (funny-name/macro-eval . 51))
(1155 (environment-macro-eval . 51))
(1156 (funny-name/define! . 51))
(1157 (environment-define! . 51))
(1158 (funny-name/package . 51))
(1159 (extract-package-from-environment . 51))
(1160 (funny-name/source-file-name . 51))
(1161 (bind-source-file-name . 51))
(1162 (source-file-name . 51))
(1163 (:thingie . 49))
(1164 (make-thingie . 49))
(1165 (thingie-want-type . 49))
(1166 (thingie-name . 49))
(1167 (thingie-binding . 49))
(1168 (thingie? . 49))
(1169 (:structure . 63))
(1170 (really-make-structure . 63))
(1171 (structure-name . 63))
(1172 (set-structure-name! . 63))
(1173 (structure-clients . 63))
(1174 (structure-package . 63))
(1175 (structure-interface-really . 63))
(1176 (set-structure-interface! . 63))
(1177 (structure-interface-thunk . 63))
(1178 (structure? . 63))
(1179 (structure-interface . 63))
(1180 (initialize-structure! . 63))
(1181 (make-structure . 63))
(1182 (note-structure-name! . 63))
(1183 (structure-unstable? . 63))
(1184 (for-each-export . 63))
(1185 (:package . 63))
(1186 (really-make-package . 63))
(1187 (package-cached . 63))
(1188 (package-clients . 63))
(1189 (package-real-undefined-but-assigneds . 63))
(1190 (set-package-undefined-but-assigneds! . 63))
(1191 (package-real-undefineds . 63))
(1192 (set-package-undefineds! . 63))
(1193 (package-accesses-thunk . 63))
(1194 (package-opens-thunk . 63))
(1195 (set-package-opens-thunk! . 63))
(1196 (package->environment . 63))
(1197 (set-package->environment! . 63))
(1198 (package-loaded? . 63))
(1199 (set-package-loaded?! . 63))
(1200 (package-clauses . 63))
(1201 (package-file-name . 63))
(1202 (package-get-location . 63))
(1203 (set-package-get-location! . 63))
(1204 (package-integrate? . 63))
(1205 (set-package-integrate?! . 63))
(1206 (package-unstable? . 63))
(1207 (package-definitions . 63))
(1208 (package-opens-really . 63))
(1209 (set-package-opens! . 63))
(1210 (package-uid . 63))
(1211 (package? . 63))
(1212 (make-package . 63))
(1213 (really-package->environment . 63))
(1214 (lazy-table-accessor . 63))
(1215 (package-undefineds . 63))
(1216 (package-undefined-but-assigneds . 63))
(1217 (new-package-uid . 63))
(1218 (*package-uid* . 63))
(1219 (package-name-table . 63))
(1220 (package-name . 63))
(1221 (note-package-name! . 63))
(1222 (package-opens . 63))
(1223 (initialize-package-if-necessary! . 63))
(1224 (package-accesses . 63))
(1225 (make-simple-package . 63))
(1226 (package-definition . 63))
(1227 (package-define! . 63))
(1228 (package-add-static! . 63))
(1229 (package-refine-type! . 63))
(1230 (package-lookup . 63))
(1231 (really-package-lookup . 63))
(1232 (search-opens . 63))
(1233 (structure-lookup . 63))
(1234 (real-structure-lookup . 63))
(1235 (generic-lookup . 63))
(1236 (initialize-package! . 63))
(1237 (for-each-definition . 63))
(1238 (get-new-location . 63))
(1239 (make-new-location . 63))
(1240 ($get-location . 63))
(1241 (*location-uid* . 63))
(1242 (location-info-table . 63))
(1243 (flush-location-names . 63))
(1244 (link! . 63))
(1245 (really-link! . 63))
(1246 (get-location . 63))
(1247 (location-on-demand . 63))
(1248 (get-undefined . 63))
(1249 (location-for-assignment . 63))
(1250 (package-note-caching! . 63))
(1251 (note-caching! . 63))
(1252 (get-location-for-unassignable . 63))
(1253 (get-location-for-undefined . 63))
(1254 ($note-undefined . 63))
(1255 (cenv->package . 63))
(1256 (location-for-reference . 63))
(1257 (noting-undefined-variables . 63))
(1258 (print-undefined-names . 63))
(1259 (environment-ref . 76))
(1260 (environment-set! . 76))
(1261 (environment-define! . 76))
(1262 (*structure-ref . 76))
(1263 (carefully . 76))
(1264 ($interaction-environment . 76))
(1265 (interaction-environment . 76))
(1266 (set-interaction-environment! . 76))
(1267 (with-interaction-environment . 76))
(1268 (scheme-report-environment . 76))
(1269 (*scheme-report-environment* . 76))
(1270 (*null-environment* . 76))
(1271 (*scheme-report-number* . 76))
(1272 (set-scheme-report-environment! . 76))
(1273 (null-environment . 76))
(1274 (make-reflective-tower . 76))
(1275 (set-reflective-tower-maker! . 76))
(1276 (namestring . 75))
(1277 (directory-component-separator . 75))
(1278 (type-component-separator . 75))
(1279 (namestring-component . 75))
(1280 (file-name-preferred-case . 75))
(1281 (*scheme-file-type* . 75))
(1282 (*load-file-type* . 75))
(1283 (file-name-directory . 75))
(1284 (file-name-nondirectory . 75))
(1285 (file-nondirectory-position . 75))
(1286 (string-posq . 75))
(1287 (*translations* . 75))
(1288 (translations . 75))
(1289 (set-translation! . 75))
(1290 (translate . 75))
(1291 ($note-file-package . 61))
(1292 (read-forms . 61))
(1293 (really-read-forms . 61))
(1294 (:operator . 50))
(1295 (make-operator . 50))
(1296 (operator-name . 50))
(1297 (operator-uid . 50))
(1298 (operator-nargs . 50))
(1299 (operator-type . 50))
(1300 (set-operator-type! . 50))
(1301 (operator? . 50))
(1302 (usual-operator-type . 50))
(1303 (get-operator . 50))
(1304 (*operator-uid* . 50))
(1305 (operators-table . 50))
(1306 (number-of-operators . 50))
(1307 (the-operators . 50))
(1308 (make-operator-table . 50))
(1309 (operator-table-ref . 50))
(1310 (operator-lookup . 50))
(1311 (operator-define! . 50))
(1312 (:node . 50))
(1313 (really-make-node . 50))
(1314 (node-plist . 50))
(1315 (set-node-plist! . 50))
(1316 (node-form . 50))
(1317 (node-operator-id . 50))
(1318 (node? . 50))
(1319 (make-node . 50))
(1320 (node-ref . 50))
(1321 (node-set! . 50))
(1322 (node-operator . 50))
(1323 (node-predicate . 50))
(1324 (make-similar-node . 50))
(1325 (schemify . 50))
(1326 (schemifiers . 50))
(1327 (schemify-node . 50))
(1328 (schemify-nodes . 50))
(1329 (define-schemifier . 50))
(1330 (schemify-formals . 50))
(1331 (schemify-sexp . 50))
(1332 (number-of-required-args . 54))
(1333 (n-ary? . 54))
(1334 (normalize-formals . 54))
(1335 (scan-forms . 52))
(1336 (expand-form . 52))
(1337 (scan-define . 52))
(1338 (expand-define . 52))
(1339 (scan-define-syntax . 52))
(1340 (expand-head . 52))
(1341 (destructure-define . 52))
(1342 (make-operator-predicate . 52))
(1343 (define? . 52))
(1344 (begin? . 52))
(1345 (define-syntax? . 52))
(1346 (static-value . 52))
(1347 (expand-body . 52))
(1348 (scan-body-forms . 52))
(1349 (body-lossage . 52))
(1350 (expand . 52))
(1351 (expand-list . 52))
(1352 (expand-literal . 52))
(1353 (expand-call . 52))
(1354 (expand-name . 52))
(1355 (expand-macro-application . 52))
(1356 (expand-operator-form . 52))
(1357 (expanders . 52))
(1358 (define-expander . 52))
(1359 (unspecific-node . 52))
(1360 (expand-lambda . 52))
(1361 (bind-names . 52))
(1362 (names? . 52))
(1363 (expand-letrec . 52))
(1364 (process-syntax . 52))
(1365 (this-long? . 52))
(1366 (at-least-this-long? . 52))
(1367 (specs? . 52))
(1368 (literal? . 52))
(1369 (syntax? . 52))
(1370 (begin-node? . 52))
(1371 (call-node? . 52))
(1372 (name-node? . 52))
(1373 (operator/literal . 52))
(1374 (operator/quote . 52))
(1375 (operator/call . 52))
(1376 (operator/name . 52))
(1377 (operator/unspecific . 52))
(1378 (operator/unassigned . 52))
(1379 (operator/lambda . 52))
(1380 (operator/begin . 52))
(1381 (operator/letrec . 52))
(1382 (operator/define . 52))
(1383 (operator/primitive-procedure . 52))
(1384 (:primop . 58))
(1385 (make-primop . 58))
(1386 (primop-compilator . 58))
(1387 (primop-closed . 58))
(1388 (primop-type . 58))
(1389 (primop-name . 58))
(1390 (primop? . 58))
(1391 (primop-table . 58))
(1392 (walk-primops . 58))
(1393 (define-compiler-primitive . 58))
(1394 (get-primop . 58))
(1395 (:debug-data . 55))
(1396 (make-debug-data . 55))
(1397 (debug-data-source . 55))
(1398 (set-debug-data-source! . 55))
(1399 (debug-data-env-maps . 55))
(1400 (set-debug-data-env-maps! . 55))
(1401 (debug-data-pc-in-parent . 55))
(1402 (debug-data-parent . 55))
(1403 (debug-data-name . 55))
(1404 (debug-data-uid . 55))
(1405 (debug-data? . 55))
(1406 (maximum-stack-use . 56))
(1407 (protocol-skip . 56))
(1408 (stack-delta . 56))
(1409 (define-delta . 56))
(1410 (stack-max . 56))
(1411 (nothing . 56))
(1412 (popper . 56))
(1413 (pusher . 56))
(1414 (continue . 56))
(1415 (continuer . 56))
(1416 (do-make-cont . 56))
(1417 (stack-function . 56))
(1418 (arg-spec-size . 56))
(1419 (imax . 56))
(1420 (get-offset . 56))
(1421 (new-template-uid . 57))
(1422 (*template-uid* . 57))
(1423 (template-uid . 57))
(1424 (set-template-uid! . 57))
(1425 (debug-flag-names . 57))
(1426 (type/debug-flags . 57))
(1427 (make-debug-flags . 57))
(1428 ($debug-flags . 57))
(1429 (debug-flag-accessor . 57))
(1430 (debug-flag-modifier . 57))
(1431 (keep-source-code? . 57))
(1432 (keep-environment-maps? . 57))
(1433 (keep-procedure-names? . 57))
(1434 (keep-file-names? . 57))
(1435 (tabulate-debug-data? . 57))
(1436 (debug-data-table . 57))
(1437 (with-fresh-compiler-state . 57))
(1438 (saving-and-restoring . 57))
(1439 (debug-data->info . 57))
(1440 (get-debug-data . 57))
(1441 (note-debug-data! . 57))
(1442 (new-debug-data . 57))
(1443 (make-segment . 57))
(1444 (segment-size . 57))
(1445 (segment-emitter . 57))
(1446 (segment->template . 57))
(1447 (segment-data->template . 57))
(1448 (check-stack-use . 57))
(1449 (:assembly-state . 57))
(1450 (make-assembly-state . 57))
(1451 (astate-literals . 57))
(1452 (set-astate-literals! . 57))
(1453 (astate-count . 57))
(1454 (set-astate-count! . 57))
(1455 (astate-pc . 57))
(1456 (set-astate-pc! . 57))
(1457 (astate-code-vector . 57))
(1458 (make-astate . 57))
(1459 (emit-byte! . 57))
(1460 (literal->index . 57))
(1461 (emit-literal! . 57))
(1462 (emit-segment! . 57))
(1463 (empty-segment . 57))
(1464 (instruction . 57))
(1465 (sequentially . 57))
(1466 (sequentially-2 . 57))
(1467 (instruction-with-literal . 57))
(1468 (instruction-with-location . 57))
(1469 (instruction-with-template . 57))
(1470 (make-label . 57))
(1471 (instruction-using-label . 57))
(1472 (computed-goto-label-size . 57))
(1473 (computed-goto-instruction . 57))
(1474 (attach-label . 57))
(1475 (insert-label! . 57))
(1476 (code-vector-set2! . 57))
(1477 (two-byte-limit . 57))
(1478 (high-byte . 57))
(1479 (low-byte . 57))
(1480 ($debug-data . 57))
(1481 (note-source-code . 57))
(1482 (note-environment . 57))
(1483 (emit-with-environment-maps! . 57))
(1484 ($environment-maps . 57))
(1485 (environment-maps-table . 57))
(1486 (node-type . 59))
(1487 (reconstruct-type . 59))
(1488 (reconstruct . 59))
(1489 (examine . 59))
(1490 (reconstructors . 59))
(1491 (define-reconstructor . 59))
(1492 (reconstruct-lambda . 59))
(1493 (careful-codomain . 59))
(1494 (reconstruct-name . 59))
(1495 (reconstruct-call . 59))
(1496 (fork-constraints . 59))
(1497 (node->type . 59))
(1498 (name-node? . 59))
(1499 (lambda-node? . 59))
(1500 (primop-reconstructors . 59))
(1501 (define-primop-reconstructor . 59))
(1502 (reconstruct-apply . 59))
(1503 (constant-type . 59))
(1504 (compile-expression . 60))
(1505 (compile . 60))
(1506 (compilators . 60))
(1507 (define-compilator . 60))
(1508 (compile-constant . 60))
(1509 (compile-call . 60))
(1510 (compile-name-call . 60))
(1511 (compile-redex . 60))
(1512 (compile-unknown-call . 60))
(1513 (maybe-push-continuation . 60))
(1514 (fixup-source . 60))
(1515 (push-arguments . 60))
(1516 (push-all-with-names . 60))
(1517 (compile-lambda . 60))
(1518 (compile-lambda-code . 60))
(1519 (name-node->symbol . 60))
(1520 (set-lexical-offsets! . 60))
(1521 (make-cont . 60))
(1522 (cont-segment . 60))
(1523 (cont-source-info . 60))
(1524 (return-cont-segment . 60))
(1525 (return-cont . 60))
(1526 (return-cont? . 60))
(1527 (fall-through-cont . 60))
(1528 (fall-through-cont? . 60))
(1529 (ignore-values-segment . 60))
(1530 (ignore-values-cont . 60))
(1531 (ignore-values-cont? . 60))
(1532 (deliver-value . 60))
(1533 (named-cont . 60))
(1534 (cont-name . 60))
(1535 (name-node-binding . 60))
(1536 (generate-trap . 60))
(1537 (type-check . 60))
(1538 (set-type-check?! . 60))
(1539 (*type-check?* . 60))
(1540 (diagnose-call-error . 60))
(1541 (lambda-node? . 60))
(1542 (name-node? . 60))
(1543 (operator/lambda . 60))
(1544 (operator/set! . 60))
(1545 (operator/call . 60))
(1546 (operator/begin . 60))
(1547 (direct-compilator . 60))
(1548 (direct-closed-compilator . 60))
(1549 (nargs->domain . 60))
(1550 (get-primop-type . 60))
(1551 (primop-types . 60))
(1552 (define-simple-primitive . 60))
(1553 (simple-compilator . 60))
(1554 (simple-closed-compilator . 60))
(1555 (symbol-append . 60))
(1556 (define-stob-predicate . 60))
(1557 (define-data-struct-primitives . 60))
(1558 (define-vector-primitives . 60))
(1559 (define-n-ary-compiler-primitive . 60))
(1560 (n-ary-primitive-compilator . 60))
(1561 (call-on-arg-and-id . 60))
(1562 (call-on-args . 60))
(1563 (op/unspecific . 60))
(1564 (op/literal . 60))
(1565 (push-all-but-last . 60))
(1566 (dispatch-protocol-size . 60))
(1567 (make-dispatch-protocol . 60))
(1568 (compile-forms . 60))
(1569 (compile-form . 60))
(1570 (define-node? . 60))
(1571 (compile-definition . 60))
(1572 (location-contents-offset . 60))
(1573 (make-startup-procedure . 60))
(1574 (an-ignore-values-cont . 60))
(1575 (eval . 77))
(1576 (load-into . 77))
(1577 (eval-from-file . 77))
(1578 (load . 77))
(1579 (really-load-into . 77))
(1580 (compile-and-run . 77))
(1581 (display-condition . 45))
(1582 (really-display-condition . 45))
(1583 (*depth* . 45))
(1584 (*length* . 45))
(1585 (&disclose-condition . 45))
(1586 (disclose-condition . 45))
(1587 (limited-write . 45))
(1588 (command-processor . 81))
(1589 (mini-load . 81))
(1590 (read-string . 81))
(1591 (enum-case . 40))
(1592 (run-threads . 38))
(1593 (run-threads-with-housekeeper . 38))
(1594 (round-robin-event-handler . 38))
(1595 (make-counter . 38))
(1596 (counter-value . 38))
(1597 (increment-counter! . 38))
(1598 (decrement-counter! . 38))
(1599 (root-scheduler . 39))
(1600 (make-root-event-handler . 39))
(1601 (root-handler . 39))
(1602 (cheap-display-condition . 39))
(1603 (abort-token . 39))
(1604 (scheme-exit-now . 39))
(1605 (root-wait . 39))
(1606 (one-day-of-milliseconds . 39))
(1607 (do-some-waiting . 39))
(1608 (deadlock-handler . 39))
(1609 (call-when-deadlocked! . 39))
(1610 (spawn-output-forcers . 39))
(1611 (unspecific . 39))
(1612 (usual-resumer . 43))
(1613 (initialize-rts . 43))
(1614 (start . 82))
(1615 (make-built-in-structures . 82))
(1616 (initialize-interaction-environment! . 82))
(1617 (make-initial-package . 82))
(1618 (make-tower . 82))
(1619 (the-usual-transforms . 53))
(1620 (define-usual-macro . 53))
(1621 (usual-transform . 53))
(1622 (do-spec? . 53))
(1623 (specs? . 53))
(1624 (case-clause? . 53))
(1625 (process-rules . 53))
(1626 (segment-pattern? . 53))
(1627 (segment-template? . 53))
(1628 (indicators-for-zero-or-more . 53))
(1629 (find-free-names-in-syntax-rules . 53))
(1630 (strongly-connected-components . 73))
(1631 (find-next-vertex . 73))
(1632 (:vertex . 73))
(1633 (really-make-vertex . 73))
(1634 (vertex-lowpoint . 73))
(1635 (set-vertex-lowpoint! . 73))
(1636 (vertex-parent . 73))
(1637 (set-vertex-parent! . 73))
(1638 (vertex-index . 73))
(1639 (set-vertex-index! . 73))
(1640 (vertex-stack . 73))
(1641 (set-vertex-stack! . 73))
(1642 (vertex-edges . 73))
(1643 (set-vertex-edges! . 73))
(1644 (vertex-data . 73))
(1645 (vertex? . 73))
(1646 (make-vertex . 73))
(1647 (make-vertices . 73))
(1648 (do-vertex . 73))
(1649 (get-strong . 73))
(1650 (end-vertex . 73))
(1651 (unwind-stack . 73))
(1652 (follow-edge . 73))
(1653 (pop-vertex-edge! . 73))
(1654 (find-usages . 70))
(1655 (maybe-update-known-type . 70))
(1656 (find-node-usages . 70))
(1657 (analyze . 70))
(1658 (analyze-nodes . 70))
(1659 (usage-analyzers . 70))
(1660 (define-usage-analyzer . 70))
(1661 (add-if-free . 70))
(1662 (:usage . 70))
(1663 (really-make-usage . 70))
(1664 (usage-assignment-count . 70))
(1665 (set-assignment! . 70))
(1666 (usage-operator-count . 70))
(1667 (set-operator! . 70))
(1668 (usage-reference-count . 70))
(1669 (set-reference! . 70))
(1670 (usage-name-node . 70))
(1671 (usage? . 70))
(1672 (make-usage . 70))
(1673 (make-package-usage . 70))
(1674 (package-usage? . 70))
(1675 (usage-incrementator . 70))
(1676 (note-reference! . 70))
(1677 (note-operator! . 70))
(1678 (note-assignment! . 70))
(1679 (lambda-node? . 70))
(1680 (quote-node? . 70))
(1681 (literal-node? . 70))
(1682 (call-node? . 70))
(1683 (name-node? . 70))
(1684 (define-node? . 70))
(1685 (sort-forms . 70))
(1686 (stuff-count . 70))
(1687 (maybe-make-aliased . 70))
(1688 (topologically-sort . 70))
(1689 (:form . 70))
(1690 (really-make-form . 70))
(1691 (form-temp . 70))
(1692 (set-form-temp! . 70))
(1693 (form-free . 70))
(1694 (set-form-free! . 70))
(1695 (form-unaliased? . 70))
(1696 (set-form-unaliased?! . 70))
(1697 (form-aliases . 70))
(1698 (set-form-aliases! . 70))
(1699 (form-node . 70))
(1700 (form? . 70))
(1701 (make-form . 70))
(1702 (insert-aliases . 70))
(1703 (make-inline-transform . 72))
(1704 (clean-node . 72))
(1705 (clean-lambda . 72))
(1706 (clean-lookup . 72))
(1707 (unused-name . 72))
(1708 (inline-transform . 72))
(1709 (make-substitution . 72))
(1710 (reconstitute . 72))
(1711 (reconstitute-name . 72))
(1712 (operator/name . 72))
(1713 (operator/literal . 72))
(1714 (qualified->name . 72))
(1715 (get-qualified-env . 72))
(1716 (quote-node? . 72))
(1717 (call-node? . 72))
(1718 (lambda-node? . 72))
(1719 (name-node? . 72))
(1720 (loophole-node? . 72))
(1721 (operator . 79))
(1722 (primop . 79))
(1723 (simple-interface . 79))
(1724 (package . 79))
(1725 (transform . 79))
(1726 (package-define-static! . 79))
(1727 (:syntax . 68))
(1728 (:values . 68))
(1729 (:arguments . 68))
(1730 (:value . 68))
(1731 (procedure . 68))
(1732 (:boolean . 68))
(1733 (:char . 68))
(1734 (:null . 68))
(1735 (:unspecific . 68))
(1736 (:number . 68))
(1737 (:complex . 68))
(1738 (:real . 68))
(1739 (:rational . 68))
(1740 (:integer . 68))
(1741 (:exact-integer . 68))
(1742 (:pair . 68))
(1743 (:string . 68))
(1744 (:symbol . 68))
(1745 (:vector . 68))
(1746 (:procedure . 68))
(1747 (:input-port . 68))
(1748 (:output-port . 68))
(1749 (:error . 68))
(1750 (:escape . 68))
(1751 (:structure . 68))
(1752 (:type . 68))
(1753 (def . 67))
(1754 (really-def . 67))
(1755 (define-multiple . 67))
(1756 (define-interface . 67))
(1757 (compound-interface . 67))
(1758 (export . 67))
(1759 (define-structure . 67))
(1760 (define-structures . 67))
(1761 (structure . 67))
(1762 (structures . 67))
(1763 (a-package . 67))
(1764 (receive . 67))
(1765 (define-reflective-tower-maker . 67))
(1766 (export-reflective-tower-maker . 67))
(1767 (define-module . 67))
(1768 (make-a-package . 67))
(1769 (loser . 67))
(1770 (interface-of . 67))
(1771 (*verify-later!* . 67))
(1772 (verify-later! . 67))
(1773 (set-verify-later! . 67))
(1774 (note-name! . 67))
(1775 (optimizers-table . 65))
(1776 (set-optimizer! . 65))
(1777 (get-optimizer . 65))
(1778 (apply-optimizers . 65))
(1779 (*standard-optimizer-names* . 65))
(1780 (default-standard-optimizer . 65))
(1781 (*standard-optimizer* . 65))
(1782 (set-standard-optimizers! . 65))
(1783 (get-optimizers . 65))
(1784 (make-standard-optimizer . 65))
(1785 (collect-packages . 64))
(1786 (package-source . 64))
(1787 (read-files . 64))
(1788 (package-optimizer-names . 64))
(1789 (check-structure . 64))
(1790 (compile-package . 66))
(1791 (expand-package . 66))
(1792 (define-usual-transform . 66))
(1793 (define-primitives . 66))
(1794 (make-define-primitive-node . 66))
(1795 (operator/define . 66))
(1796 (operator/primitive-procedure . 66))
(1797 (analyze-forms . 71))
(1798 (analyze-form . 71))
(1799 (inlinable-rhs? . 71))
(1800 (simple-lambda? . 71))
(1801 (operator/name . 71))
(1802 (simple? . 71))
(1803 (simple-list? . 71))
(1804 (analyzers . 71))
(1805 (define-analyzer . 71))
(1806 (static-value . 71))
(1807 (really-simple-call? . 71))
(1808 (lexical-node? . 71))
(1809 (no-ret . 71))
(1810 (ret . 71))
(1811 (simple-literal? . 71))
(1812 (require . 71))
(1813 (*debug?* . 71))
(1814 (package-lookup-type . 71))
(1815 (lambda-node? . 71))
(1816 (name-node? . 71))
(1817 (loophole-node? . 71))
(1818 (define-node? . 71))
(1819 (ensure-loaded . 78))
-
; Template uid -> name, parent, pc in parent, env maps
(0 scheme-level-0 #f #f ())
(1 call-error 0 35 ())
(2 syntax-error 0 45 ())
(3 warn 0 55 ())
(4 signal 0 65 ())
(5 user-message 0 75 ())
(6 channel-write 0 85 ())
(7 loop 6 19 ())
(8 channel-read 0 95 ())
(9 #f 8 6 ())
(10 loop 9 19 ())
(11 buffer-length 0 105 ())
(12 output-port? 0 115 ())
(13 input-port? 0 125 ())
(14 flush-the-symbol-table! 0 135 ())
(15 string->symbol 0 145 ())
(16 restore-the-symbol-table! 0 155 ())
(17 string-copy 0 165 ())
(18 vector-unassigned? 0 175 ())
(19 location-assigned? 0 185 ())
(20 make-undefined-location 0 195 ())
(21 primitive-cwcc 0 205 ())
(22 #f 21 8 ())
(23 invoke-closure 0 215 ())
(24 integer->char 0 225 ())
(25 char->integer 0 235 ())
(26 current-cont 0 245 ())
(27 closure-template 0 255 ())
(28 continuation-ref 0 265 ())
(29 closure? 0 275 ())
(30 binary-comparison-reduce2 0 295 ())
(31 cell-set! 0 305 ())
(32 port-pending-eof? 0 315 ())
(33 complex? 0 325 ())
(34 arithmetic-shift 0 335 ())
(35 set-port-pending-eof?! 0 345 ())
(36 port-handler 0 355 ())
(37 signal-condition 0 365 ())
(38 integer? 0 375 ())
(39 session-data 0 385 ())
(40 make-closure 0 395 ())
(41 template-ref 0 405 ())
(42 set-session-data! 0 415 ())
(43 make-rectangular 0 425 ())
(44 channel? 0 435 ())
(45 open-channel 0 445 ())
(46 string=? 0 455 ())
(47 cell-ref 0 465 ())
(48 find-all 0 475 ())
(49 extended-number? 0 485 ())
(50 port-locked? 0 495 ())
(51 reverse-list->string 0 505 ())
(52 denominator 0 515 ())
(53 call-with-values 0 525 ())
(54 weak-pointer-ref 0 535 ())
(55 set-port-locked?! 0 545 ())
(56 find-all-symbols 0 555 ())
(57 code-vector? 0 565 ())
(58 port-status 0 575 ())
(59 pop 0 585 ())
(60 exp 0 595 ())
(61 sin 0 605 ())
(62 set-port-status! 0 615 ())
(63 make-extended-number 0 625 ())
(64 channel-os-index 0 635 ())
(65 cos 0 645 ())
(66 collect 0 655 ())
(67 external-lookup 0 665 ())
(68 tan 0 675 ())
(69 message 0 685 ())
(70 log 0 695 ())
(71 continuation-length 0 705 ())
(72 find-all-records 0 715 ())
(73 make-code-vector 0 725 ())
(74 cdr 0 735 ())
(75 bitwise-xor 0 745 ())
(76 car 0 755 ())
(77 string? 0 765 ())
(78 symbol? 0 775 ())
(79 set-cdr! 0 785 ())
(80 bitwise-not 0 795 ())
(81 vector? 0 805 ())
(82 closure-env 0 815 ())
(83 set-car! 0 825 ())
(84 bitwise-ior 0 835 ())
(85 port-buffer 0 845 ())
(86 number? 0 855 ())
(87 template-length 0 865 ())
(88 string-hash 0 875 ())
(89 primitive-catch 0 885 ())
(90 set-port-buffer! 0 895 ())
(91 make-string 0 905 ())
(92 record? 0 915 ())
(93 make-vector 0 925 ())
(94 extended-number-set! 0 935 ())
(95 write-image 0 945 ())
(96 eq? 0 955 ())
(97 bitwise-and 0 965 ())
(98 location-id 0 975 ())
(99 code-vector-set! 0 985 ())
(100 set-location-id! 0 995 ())
(101 make-record 0 1005 ())
(102 vector 0 1015 ())
(103 intern 0 1025 ())
(104 values 0 1035 ())
(105 unassigned 0 1045 ())
(106 string-set! 0 1055 ())
(107 copy-bytes! 0 1065 ())
(108 vector-set! 0 1075 ())
(109 extended-number-ref 0 1085 ())
(110 unspecific 0 1095 ())
(111 channel-maybe-write 0 1105 ())
(112 code-vector-ref 0 1115 ())
(113 schedule-interrupt 0 1125 ())
(114 record 0 1135 ())
(115 set-interrupt-handlers! 0 1145 ())
(116 eof-object? 0 1155 ())
(117 record-set! 0 1165 ())
(118 char->ascii 0 1175 ())
(119 ascii->char 0 1185 ())
(120 port-limit 0 1195 ())
(121 set-enabled-interrupts! 0 1205 ())
(122 external-value 0 1215 ())
(123 port-index 0 1225 ())
(124 make-immutable! 0 1235 ())
(125 set-port-limit! 0 1245 ())
(126 channel-status 0 1255 ())
(127 current-thread 0 1265 ())
(128 set-port-index! 0 1275 ())
(129 string-ref 0 1285 ())
(130 set-exception-handlers! 0 1295 ())
(131 immutable? 0 1305 ())
(132 set-current-thread! 0 1315 ())
(133 vector-ref 0 1325 ())
(134 exact? 0 1335 ())
(135 symbol->string 0 1345 ())
(136 write-char 0 1355 ())
(137 make-polar 0 1365 ())
(138 record-ref 0 1375 ())
(139 eof-object 0 1385 ())
(140 numerator 0 1395 ())
(141 channel-id 0 1405 ())
(142 extended-number-length 0 1415 ())
(143 error 0 1425 ())
(144 exact->inexact 0 1435 ())
(145 inexact->exact 0 1445 ())
(146 checked-record-set! 0 1455 ())
(147 memory-status 0 1465 ())
(148 apply 0 1475 ())
(149 code-vector-length 0 1485 ())
(150 floor 0 1495 ())
(151 with-continuation 0 1505 ())
(152 >= 0 1515 ())
(153 magnitude 0 1525 ())
(154 <= 0 1535 ())
(155 char=? 0 1545 ())
(156 char<? 0 1555 ())
(157 binary-reduce2 0 1565 ())
(158 binary-reduce1 0 1575 ())
(159 continuation? 0 1585 ())
(160 remainder 0 1595 ())
(161 vm-return 0 1605 ())
(162 false 0 1615 ())
(163 angle 0 1625 ())
(164 port? 0 1635 ())
(165 string-length 0 1645 ())
(166 external? 0 1655 ())
(167 make-continuation 0 1665 ())
(168 vector-length 0 1675 ())
(169 port-lock 0 1685 ())
(170 template? 0 1695 ())
(171 rational? 0 1705 ())
(172 add-finalizer! 0 1715 ())
(173 checked-record-ref 0 1725 ())
(174 channel-maybe-read 0 1735 ())
(175 location? 0 1745 ())
(176 return-from-exception 0 1755 ())
(177 set-port-lock! 0 1765 ())
(178 make-port 0 1775 ())
(179 external-name 0 1785 ())
(180 pair? 0 1795 ())
(181 port-data 0 1805 ())
(182 make-external 0 1815 ())
(183 record-length 0 1825 ())
(184 external-call 0 1835 ())
(185 get-cont-from-heap 0 1845 ())
(186 real-part 0 1855 ())
(187 real? 0 1865 ())
(188 make-template 0 1875 ())
(189 set-port-data! 0 1885 ())
(190 imag-part 0 1895 ())
(191 make-location 0 1905 ())
(192 > 0 1915 ())
(193 = 0 1925 ())
(194 < 0 1935 ())
(195 char? 0 1945 ())
(196 channel-abort 0 1955 ())
(197 close-channel 0 1965 ())
(198 quotient 0 1975 ())
(199 weak-pointer? 0 1985 ())
(200 / 0 1995 ())
(201 continuation-set! 0 2005 ())
(202 - 0 2015 ())
(203 peek-char 0 2025 ())
(204 + 0 2035 ())
(205 contents 0 2045 ())
(206 * 0 2055 ())
(207 sqrt 0 2065 ())
(208 make-cell 0 2075 ())
(209 read-char 0 2085 ())
(210 set-contents! 0 2095 ())
(211 push 0 2105 ())
(212 make-weak-pointer 0 2115 ())
(213 assq 0 2125 ())
(214 trap 0 2135 ())
(215 wait 0 2145 ())
(216 cons 0 2155 ())
(217 template-set! 0 2175 ())
(218 time 0 2185 ())
(219 location-defined? 0 2195 ())
(220 asin 0 2205 ())
(221 vm-extension 0 2215 ())
(222 acos 0 2225 ())
(223 set-location-defined?! 0 2235 ())
(224 atan 0 2245 ())
(225 scheme-level-1 #f #f ())
(226 rationalize 225 7 ())
(227 simplest-rational 225 17 ())
(228 simplest-rational-internal 227 11 ())
(229 expt 225 27 ())
(230 raise-to-integer-power 225 37 ())
(231 loop 230 39 ())
(232 lcm 225 47 ())
(233 #f 232 8 ())
(234 gcd 225 57 ())
(235 #f 234 8 ())
(236 euclid 225 67 ())
(237 round 225 77 ())
(238 truncate 225 87 ())
(239 ceiling 225 97 ())
(240 modulo 225 107 ())
(241 fold->3 225 117 ())
(242 loop 241 27 ())
(243 #f 242 28 ())
(244 fold->2 225 127 ())
(245 loop 244 24 ())
(246 #f 245 25 ())
(247 fold 225 137 ())
(248 loop##0 247 11 ())
(249 insert 225 147 ())
(250 last 225 157 ())
(251 sublist 225 167 ())
(252 recur 251 58 ())
(253 every 225 177 ())
(254 pos 225 187 ())
(255 #f 254 6 ())
(256 loop 255 22 ())
(257 filter 225 197 ())
(258 #f 257 6 ())
(259 force 225 207 ())
(260 make-promise 225 217 ())
(261 #f 260 11 ())
(262 for-each 225 227 ())
(263 for-each2+ 225 237 ())
(264 loop 263 21 ())
(265 for-each1 225 247 ())
(266 loop 265 18 ())
(267 map 225 257 ())
(268 map2+ 225 267 ())
(269 any 225 277 ())
(270 map1 225 287 ())
(271 vector-fill! 225 297 ())
(272 loop##4 271 19 ())
(273 list->vector 225 307 ())
(274 loop##5 273 35 ())
(275 vector->list 225 317 ())
(276 loop##6 275 11 ())
(277 string-ci>=? 225 327 ())
(278 string-ci<=? 225 337 ())
(279 string-ci>? 225 347 ())
(280 string>=? 225 357 ())
(281 string<=? 225 367 ())
(282 string>? 225 377 ())
(283 make-string<? 225 387 ())
(284 #f 283 6 ())
(285 loop 284 49 ())
(286 make-string=? 225 397 ())
(287 #f 286 6 ())
(288 loop 287 36 ())
(289 string-fill! 225 407 ())
(290 loop##8 289 18 ())
(291 unspecific 225 417 ())
(292 string->list 225 427 ())
(293 loop##9 292 18 ())
(294 string-append 225 437 ())
(295 #f 294 12 ())
(296 loop 294 59 ())
(297 loop##10 296 40 ())
(298 substring 225 447 ())
(299 loop##11 298 26 ())
(300 string 225 457 ())
(301 list->string 225 467 ())
(302 loop##12 301 36 ())
(303 char-ci-compare 225 477 ())
(304 #f 303 6 ())
(305 char-downcase 225 487 ())
(306 char-upcase 225 497 ())
(307 make-character-map 225 507 ())
(308 loop##13 307 27 ())
(309 char-alphabetic? 225 517 ())
(310 char-numeric? 225 527 ())
(311 char-upper-case? 225 537 ())
(312 char-lower-case? 225 547 ())
(313 char-whitespace? 225 557 ())
(314 char<=? 225 567 ())
(315 char>=? 225 577 ())
(316 char>? 225 587 ())
(317 list? 225 597 ())
(318 recur 317 21 ())
(319 ass 225 607 ())
(320 #f 319 6 ())
(321 loop 320 18 ())
(322 mem 225 617 ())
(323 #f 322 6 ())
(324 loop 323 18 ())
(325 list-ref 225 627 ())
(326 list-tail 225 637 ())
(327 reverse 225 647 ())
(328 append-reverse 225 657 ())
(329 append 225 667 ())
(330 recur 329 34 ())
(331 reduce 225 677 ())
(332 length 225 687 ())
(333 real-length 225 697 ())
(334 list 225 707 ())
(335 cddddr 225 717 ())
(336 cdddar 225 727 ())
(337 cddadr 225 737 ())
(338 cddaar 225 747 ())
(339 cdaddr 225 757 ())
(340 cdadar 225 767 ())
(341 cdaadr 225 777 ())
(342 cdaaar 225 787 ())
(343 cadddr 225 797 ())
(344 caddar 225 807 ())
(345 cadadr 225 817 ())
(346 cadaar 225 827 ())
(347 caaddr 225 837 ())
(348 caadar 225 847 ())
(349 caaadr 225 857 ())
(350 caaaar 225 867 ())
(351 cdddr 225 877 ())
(352 cddar 225 887 ())
(353 cdadr 225 897 ())
(354 cdaar 225 907 ())
(355 caddr 225 917 ())
(356 cadar 225 927 ())
(357 caadr 225 937 ())
(358 caaar 225 947 ())
(359 cddr 225 957 ())
(360 cdar 225 967 ())
(361 cadr 225 977 ())
(362 caar 225 987 ())
(363 odd? 225 997 ())
(364 even? 225 1007 ())
(365 negative? 225 1017 ())
(366 positive? 225 1027 ())
(367 zero? 225 1037 ())
(368 abs 225 1047 ())
(369 min 225 1057 ())
(370 max 225 1067 ())
(371 max-or-min 225 1077 ())
(372 loop 371 34 ())
(373 inexact? 225 1087 ())
(374 null? 225 1097 ())
(375 equal? 225 1107 ())
(376 loop 375 156 ())
(377 eqv? 225 1117 ())
(378 boolean? 225 1127 ())
(379 not 225 1137 ())
(380 #f 225 1268 ())
(381 #f 225 1288 ())
(382 records #f #f ())
(383 disclose-record 382 25 ())
(384 define-record-discloser 382 35 ())
(385 record-predicate 382 45 ())
(386 #f 385 6 ())
(387 record-modifier 382 55 ())
(388 #f 387 62 ())
(389 record-accessor 382 65 ())
(390 #f 389 62 ())
(391 record-constructor 382 75 ())
(392 #f 391 10 ())
(393 #f 391 54 ())
(394 loop 393 45 ())
(395 record-field-index 382 85 ())
(396 loop 395 28 ())
(397 record-type-discloser 382 95 ())
(398 record-type-field-names 382 105 ())
(399 record-type-name 382 115 ())
(400 record-type-uid 382 125 ())
(401 record-type? 382 135 ())
(402 make-record-type 382 145 ())
(403 default-record-discloser 382 155 ())
(404 record-type 382 165 ())
(405 #f 382 218 ())
(406 define-record-types #f #f ())
(407 methods #f #f ())
(408 proc->discloser 407 17 ())
(409 #f 408 6 ())
(410 #f 409 6 ())
(411 compare-to 407 27 ())
(412 #f 411 6 ())
(413 apply-generic 407 37 ())
(414 make-method-table 407 47 ())
(415 #f 414 53 ())
(416 #f 414 78 ())
(417 make-cell-for-generic 407 57 ())
(418 #f 417 8 ())
(419 #f 417 12 ())
(420 #f 417 16 ())
(421 set-final-method! 407 67 ())
(422 add-to-method-table! 407 77 ())
(423 methods->perform 407 87 ())
(424 recur 423 18 ())
(425 argument-sequence-predicate 407 97 ())
(426 recur 425 27 ())
(427 check-next 407 107 ())
(428 #f 427 6 ())
(429 check-for-next 407 117 ())
(430 #f 429 6 ())
(431 one-action 407 127 ())
(432 #f 431 6 ())
(433 #f 432 20 ())
(434 last-action 407 137 ())
(435 #f 434 6 ())
(436 method-table? 407 147 ())
(437 insert-method 407 157 ())
(438 recur 437 18 ())
(439 same-applicability? 407 167 ())
(440 every2 407 177 ())
(441 more-specific? 407 187 ())
(442 loop 441 148 ())
(443 more-specific-type? 407 197 ())
(444 empty-method-list 407 207 ())
(445 make-method-info 407 217 ())
(446 method-info? 407 227 ())
(447 value? 407 237 ())
(448 %same-type? 407 247 ())
(449 %type-predicate 407 257 ())
(450 make-simple-type 407 267 ())
(451 compute-priority 407 277 ())
(452 %type-priority 407 287 ())
(453 simple-type? 407 297 ())
(454 really-make-simple-type 407 331 ())
(455 simple-type-id 407 341 ())
(456 simple-type-priority 407 351 ())
(457 simple-type-predicate 407 361 ())
(458 simple-type-superiors 407 371 ())
(459 #f 407 385 ())
(460 #f 407 519 ())
(461 #f 407 747 ())
(462 record-type-priority 407 1267 ())
(463 really-make-method-info 407 1302 ())
(464 method-info-proc 407 1312 ())
(465 method-info-n-ary? 407 1322 ())
(466 method-info-types 407 1332 ())
(467 #f 407 1346 ())
(468 really-make-method-table 407 1384 ())
(469 method-table-id 407 1394 ())
(470 method-table-set-perform! 407 1404 ())
(471 method-table-get-perform 407 1414 ())
(472 make-generic 407 1424 ())
(473 method-table-prototype 407 1434 ())
(474 method-table-methods 407 1444 ())
(475 set-method-table-methods! 407 1454 ())
(476 #f 407 1468 ())
(477 add-method! 407 1535 ())
(478 add-method! 407 1628 ())
(479 type-predicate 407 1714 ())
(480 &type-predicate 407 1807 ())
(481 &type-predicate 407 1879 ())
(482 type-priority 407 1955 ())
(483 &type-priority 407 2048 ())
(484 &type-priority 407 2120 ())
(485 type-superiors 407 2196 ())
(486 &type-superiors 407 2289 ())
(487 &type-superiors 407 2361 ())
(488 same-type? 407 2441 ())
(489 &same-type? 407 2538 ())
(490 &same-type? 407 2614 ())
(491 singleton 407 2665 ())
(492 singleton-value 407 2675 ())
(493 #f 407 2689 ())
(494 &type-predicate 407 2748 ())
(495 &type-priority 407 2820 ())
(496 &same-type? 407 2896 ())
(497 disclose 407 2972 ())
(498 &disclose 407 3065 ())
(499 &disclose 407 3137 ())
(500 &add-method! 407 3216 ())
(501 number-i/o #f #f ())
(502 &number->string 501 91 ())
(503 &number->string 501 167 ())
(504 &number->string 501 243 ())
(505 integer->string 501 285 ())
(506 recur 505 52 ())
(507 integer->digit 501 292 ())
(508 string->number 501 330 ())
(509 loop 508 239 ())
(510 radix-is 509 55 ())
(511 exactness-is 509 59 ())
(512 loop 509 298 ())
(513 &really-string->number 501 432 ())
(514 #f 501 477 ())
(515 loop 514 31 ())
(516 &really-string->number 501 550 ())
(517 set-exactness 501 577 ())
(518 string->integer 501 604 ())
(519 do-it 501 611 ())
(520 loop 519 40 ())
(521 digit->integer 501 618 ())
(522 fluids #f #f ())
(523 let-fluids 522 7 ())
(524 loop 523 30 ())
(525 let-fluid 522 17 ())
(526 set-fluid! 522 27 ())
(527 fluid 522 37 ())
(528 with-dynamic-env 522 47 ())
(529 #f 528 37 ())
(530 initialize-dynamic-state! 522 57 ())
(531 empty-dynamic-env 522 67 ())
(532 set-dynamic-point! 522 77 ())
(533 get-dynamic-point 522 87 ())
(534 set-dynamic-env! 522 97 ())
(535 get-dynamic-env 522 107 ())
(536 make-thread 522 141 ())
(537 thread-dynamic-point 522 151 ())
(538 thread-dynamic-env 522 161 ())
(539 make-fluid 522 195 ())
(540 fluid-top-level-value 522 205 ())
(541 set-fluid-top-level-value! 522 215 ())
(542 enumerated #f #f ())
(543 lookup-enumerand 542 7 ())
(544 loop 543 27 ())
(545 architecture #f #f ())
(546 next-protocol 545 161 ())
(547 queues #f #f ())
(548 queue-length 547 17 ())
(549 queue->list 547 27 ())
(550 #f 549 6 ())
(551 delete-from-queue! 547 37 ())
(552 #f 551 9 ())
(553 delete-from-queue-if! 547 47 ())
(554 loop 553 130 ())
(555 on-queue? 547 57 ())
(556 dequeue! 547 67 ())
(557 queue-front 547 77 ())
(558 enqueue! 547 87 ())
(559 queue-empty? 547 97 ())
(560 make-queue 547 107 ())
(561 queue? 547 117 ())
(562 really-make-queue 547 151 ())
(563 queue-tail 547 161 ())
(564 set-queue-tail! 547 171 ())
(565 queue-head 547 181 ())
(566 set-queue-head! 547 191 ())
(567 queue-uid 547 201 ())
(568 conditions #f #f ())
(569 condition-supertypes 568 17 ())
(570 define-condition-type 568 27 ())
(571 #f 570 17 ())
(572 condition-predicate 568 37 ())
(573 #f 572 6 ())
(574 condition? 568 47 ())
(575 make-exception 568 259 ())
(576 session-data #f #f ())
(577 initialize-session-data! 576 17 ())
(578 session-data-set! 576 27 ())
(579 session-data-ref 576 37 ())
(580 make-session-data-slot! 576 47 ())
(581 interrupts #f #f ())
(582 call-before-heap-overflow! 581 27 ())
(583 call-after-gc! 581 37 ())
(584 enable-interrupts! 581 47 ())
(585 disable-interrupts! 581 57 ())
(586 with-interrupts-allowed 581 67 ())
(587 with-interrupts-inhibited 581 77 ())
(588 with-interrupts 581 87 ())
(589 #f 588 13 ())
(590 set-interrupt-handler! 581 97 ())
(591 initialize-interrupts! 581 107 ())
(592 #f 591 6 ())
(593 loop##67 592 32 ())
(594 #f 593 32 ())
(595 #f 592 76 ())
(596 #f 595 11 ())
(597 post-gc-handler 581 117 ())
(598 #f 597 6 ())
(599 #f 598 42 ())
(600 #f 598 57 ())
(601 #f 600 7 ())
(602 #f 600 20 ())
(603 enabled-interrupts 581 127 ())
(604 #f 581 201 ())
(605 wind #f #f ())
(606 call-with-current-continuation 605 7 ())
(607 #f 606 6 ())
(608 continuation->procedure 605 17 ())
(609 #f 608 6 ())
(610 #f 609 60 ())
(611 travel-to-point! 605 27 ())
(612 dynamic-wind 605 37 ())
(613 make-point 605 71 ())
(614 point-parent 605 81 ())
(615 point-dynamic-env 605 91 ())
(616 point-out 605 101 ())
(617 point-in 605 111 ())
(618 point-depth 605 121 ())
(619 templates #f #f ())
(620 set-template-info! 619 17 ())
(621 set-template-code! 619 27 ())
(622 template-info 619 37 ())
(623 template-code 619 47 ())
(624 more-types #f #f ())
(625 &disclose 624 318 ())
(626 &disclose 624 424 ())
(627 continuations #f #f ())
(628 continuation-parent 627 17 ())
(629 loop 628 105 ())
(630 continuation-arg-count 627 27 ())
(631 continuation-arg 627 37 ())
(632 continuation-template 627 47 ())
(633 continuation-pc 627 57 ())
(634 exception-continuation? 627 67 ())
(635 exception-continuation-exception 627 77 ())
(636 exception-continuation-template 627 87 ())
(637 exception-continuation-pc 627 97 ())
(638 continuation-env 627 107 ())
(639 real-continuation-template 627 117 ())
(640 real-continuation-pc 627 127 ())
(641 continuation-cont 627 137 ())
(642 &disclose 627 241 ())
(643 exceptions #f #f ())
(644 define-exception-handler 643 7 ())
(645 signal-exception 643 17 ())
(646 #f 643 47 ())
(647 extend-opcode! 643 61 ())
(648 except 647 6 ())
(649 #f 647 31 ())
(650 really-signal-condition 643 71 ())
(651 loop 650 29 ())
(652 #f 651 9 ())
(653 with-handler 643 81 ())
(654 initialize-exceptions! 643 106 ())
(655 #f 654 6 ())
(656 last-resort-condition-handler 643 116 ())
(657 #f 656 15 ())
(658 #f 657 23 ())
(659 report-utter-lossage 643 126 ())
(660 #f 659 183 ())
(661 continuation-preview 643 136 ())
(662 ignore-errors 643 146 ())
(663 #f 662 6 ())
(664 #f 663 6 ())
(665 report-errors-as-warnings 643 156 ())
(666 #f 665 12 ())
(667 &disclose 643 211 ())
(668 &disclose 643 279 ())
(669 threads #f #f ())
(670 wake-some-threads 669 47 ())
(671 loop 670 46 ())
(672 sleep 669 57 ())
(673 #f 672 71 ())
(674 insert 669 67 ())
(675 terminate-current-thread 669 77 ())
(676 with-threads 669 87 ())
(677 #f 676 10 ())
(678 #f 677 3 ())
(679 #f 677 7 ())
(680 #f 677 11 ())
(681 start-multitasking 669 97 ())
(682 #f 681 6 ())
(683 #f 682 6 ())
(684 #f 682 10 ())
(685 #f 684 7 ())
(686 #f 685 6 ())
(687 #f 685 10 ())
(688 real-time 669 107 ())
(689 cancel-timer-interrupt! 669 117 ())
(690 make-ready 669 127 ())
(691 spawn-on-root 669 137 ())
(692 root-scheduler 669 147 ())
(693 spawn 669 157 ())
(694 spawn-on-scheduler 669 167 ())
(695 show-running 669 177 ())
(696 loop##77 695 16 ())
(697 schedule-event 669 187 ())
(698 schedule-wakeup 669 197 ())
(699 get-next-event! 669 207 ())
(700 kill-thread! 669 217 ())
(701 #f 700 9 ())
(702 upcall 669 227 ())
(703 propogate-upcall 669 237 ())
(704 #f 703 62 ())
(705 interrupt-thread 669 247 ())
(706 running? 669 257 ())
(707 loop 706 25 ())
(708 relinquish-timeslice 669 267 ())
(709 block 669 277 ())
(710 waiting? 669 287 ())
(711 wait 669 297 ())
(712 exit 669 307 ())
(713 handle-timer-interrupt 669 317 ())
(714 run 669 327 ())
(715 find-and-run-next-thread 669 337 ())
(716 loop 715 35 ())
(717 debit-thread-times-and-run! 669 347 ())
(718 loop 717 41 ())
(719 run-next-thread 669 357 ())
(720 schedule-interrupt! 669 367 ())
(721 min 669 377 ())
(722 event-pending? 669 387 ())
(723 remove-thread-from-queue! 669 397 ())
(724 dequeue-thread! 669 407 ())
(725 enqueue-thread! 669 417 ())
(726 add-event! 669 427 ())
(727 thread-uid->thread 669 437 ())
(728 loop 727 27 ())
(729 all-threads 669 447 ())
(730 make-thread 669 457 ())
(731 thread-top-level 669 467 ())
(732 #f 731 6 ())
(733 #f 732 3 ())
(734 suspend 669 477 ())
(735 suspend-to 669 487 ())
(736 switch-to-thread 669 497 ())
(737 #f 736 6 ())
(738 run-thread 669 507 ())
(739 #f 738 44 ())
(740 debit-down! 669 517 ())
(741 loop 740 28 ())
(742 interrupt-timer-time 669 527 ())
(743 thunk->continuation 669 537 ())
(744 compose-continuation 669 547 ())
(745 #f 744 6 ())
(746 #f 745 27 ())
(747 #f 746 10 ())
(748 #f 747 9 ())
(749 thread? 669 557 ())
(750 really-make-thread 669 591 ())
(751 thread-name 669 601 ())
(752 thread-uid 669 611 ())
(753 thread-current-task 669 621 ())
(754 set-thread-current-task! 669 631 ())
(755 thread-events 669 641 ())
(756 set-thread-events! 669 651 ())
(757 thread-data 669 661 ())
(758 set-thread-data! 669 671 ())
(759 thread-scheduler 669 681 ())
(760 set-thread-scheduler! 669 691 ())
(761 thread-time 669 701 ())
(762 set-thread-time! 669 711 ())
(763 thread-arguments 669 721 ())
(764 set-thread-arguments! 669 731 ())
(765 thread-queue 669 741 ())
(766 set-thread-queue! 669 751 ())
(767 thread-continuation 669 761 ())
(768 set-thread-continuation! 669 771 ())
(769 thread-dynamic-point 669 781 ())
(770 set-thread-dynamic-point! 669 791 ())
(771 thread-dynamic-env 669 801 ())
(772 #f 669 815 ())
(773 locks #f #f ())
(774 release-lock 773 17 ())
(775 #f 774 10 ())
(776 maybe-obtain-lock 773 27 ())
(777 #f 776 10 ())
(778 obtain-lock 773 37 ())
(779 #f 778 10 ())
(780 make-lock 773 47 ())
(781 lock? 773 57 ())
(782 really-make-lock 773 91 ())
(783 lock-uid 773 101 ())
(784 lock-queue 773 111 ())
(785 lock-owner-uid 773 121 ())
(786 set-lock-owner-uid! 773 131 ())
(787 i/o #f #f ())
(788 newline 787 37 ())
(789 output-port-option 787 47 ())
(790 silently 787 57 ())
(791 call-with-current-noise-port 787 67 ())
(792 call-with-current-output-port 787 77 ())
(793 call-with-current-input-port 787 87 ())
(794 initialize-i/o 787 97 ())
(795 with-current-ports 787 107 ())
(796 current-noise-port 787 117 ())
(797 current-error-port 787 127 ())
(798 current-output-port 787 137 ())
(799 output-port-forcers 787 147 ())
(800 loop 799 30 ())
(801 make-forcing-thunk 787 157 ())
(802 #f 801 6 ())
(803 #f 802 7 ())
(804 #f 802 45 ())
(805 periodically-force-output! 787 167 ())
(806 initialize-output-port-list! 787 177 ())
(807 make-null-output-port 787 187 ())
(808 make-unbuffered-output-port 787 197 ())
(809 make-output-port 787 207 ())
(810 make-input-port 787 217 ())
(811 okay-buffer? 787 227 ())
(812 force-output 787 237 ())
(813 write-string 787 247 ())
(814 write-block 787 257 ())
(815 write-buffered-block 787 267 ())
(816 write-unbuffered-block 787 277 ())
(817 loop##111 816 40 ())
(818 read-block 787 287 ())
(819 really-read-block 787 297 ())
(820 buffer-length 787 307 ())
(821 read-more 787 317 ())
(822 okay-limits? 787 327 ())
(823 real-char-ready? 787 337 ())
(824 char-ready? 787 347 ())
(825 input-port-option 787 357 ())
(826 current-input-port 787 367 ())
(827 open-port? 787 377 ())
(828 close-output-port 787 387 ())
(829 make-output-port-closed! 787 397 ())
(830 really-force-output 787 407 ())
(831 open-output-port? 787 417 ())
(832 close-input-port 787 427 ())
(833 make-input-port-closed! 787 437 ())
(834 open-input-port? 787 447 ())
(835 initialize-i/o-handlers! 787 457 ())
(836 write-char-handler 787 467 ())
(837 empty-port-buffer! 787 477 ())
(838 two-arg-proc->handler 787 487 ())
(839 #f 838 6 ())
(840 read-char-handler 787 497 ())
(841 #f 840 6 ())
(842 fill-port-buffer! 787 507 ())
(843 one-arg-proc->handler 787 517 ())
(844 #f 843 6 ())
(845 release-port-lock 787 527 ())
(846 maybe-obtain-port-lock 787 537 ())
(847 obtain-port-lock 787 547 ())
(848 disclose-port 787 557 ())
(849 port-handler? 787 567 ())
(850 make-port-handler 787 601 ())
(851 port-handler-buffer-proc 787 611 ())
(852 port-handler-close 787 621 ())
(853 port-handler-discloser 787 631 ())
(854 &disclose 787 686 ())
(855 &disclose 787 758 ())
(856 #f 787 924 ())
(857 #f 787 928 ())
(858 #f 787 932 ())
(859 writing #f #f ())
(860 write 859 7 ())
(861 recur 860 36 ())
(862 recurring-write 859 17 ())
(863 write-boolean 859 27 ())
(864 write-number 859 37 ())
(865 write-char-literal 859 47 ())
(866 character-name 859 57 ())
(867 write-string-literal 859 67 ())
(868 loop##122 867 26 ())
(869 write-list 859 77 ())
(870 loop 869 92 ())
(871 quotation? 859 87 ())
(872 write-vector 859 97 ())
(873 loop 872 76 ())
(874 write-other 859 107 ())
(875 #f 874 73 ())
(876 display-type-name 859 117 ())
(877 loop##126 876 90 ())
(878 display 859 127 ())
(879 recur 878 36 ())
(880 reading #f #f ())
(881 parse-token 880 27 ())
(882 sub-read-token 880 37 ())
(883 loop 882 42 ())
(884 preferred-case 880 47 ())
(885 define-sharp-macro 880 57 ())
(886 gobble-line 880 67 ())
(887 loop 886 15 ())
(888 sub-read-list 880 77 ())
(889 recur 888 56 ())
(890 set-standard-read-macro! 880 87 ())
(891 set-standard-syntax! 880 97 ())
(892 make-reader-token 880 107 ())
(893 sub-read-carefully 880 117 ())
(894 read 880 127 ())
(895 loop 894 33 ())
(896 sub-read 880 137 ())
(897 reading-error 880 147 ())
(898 reader-token? 880 157 ())
(899 #f 880 225 ())
(900 sub-read-whitespace 880 253 ())
(901 #f 880 260 ())
(902 sub-read-constituent 880 278 ())
(903 #f 880 285 ())
(904 #f 880 357 ())
(905 #f 880 379 ())
(906 #f 880 401 ())
(907 #f 880 423 ())
(908 #f 880 445 ())
(909 loop 908 25 ())
(910 #f 880 467 ())
(911 #f 880 487 ())
(912 #f 880 505 ())
(913 #f 880 523 ())
(914 #f 880 541 ())
(915 #f 880 559 ())
(916 number-sharp-macro 880 573 ())
(917 #f 880 580 ())
(918 loop##136 880 646 ())
(919 channel-i/o #f #f ())
(920 #f 919 11 ())
(921 #f 919 15 ())
(922 #f 919 19 ())
(923 input-channel->port 919 32 ())
(924 #f 919 46 ())
(925 #f 919 50 ())
(926 #f 919 54 ())
(927 make-unbuffered-output-channel-handler 919 67 ())
(928 #f 927 19 ())
(929 #f 927 23 ())
(930 #f 927 27 ())
(931 output-channel->port 919 77 ())
(932 maybe-force-output 919 87 ())
(933 #f 932 28 ())
(934 maybe-open-file 919 97 ())
(935 open-input-file 919 107 ())
(936 open-output-file 919 117 ())
(937 call-with-input-file 919 127 ())
(938 call-with-output-file 919 137 ())
(939 with-input-from-file 919 147 ())
(940 #f 939 9 ())
(941 with-output-to-file 919 157 ())
(942 #f 941 9 ())
(943 steal-channel-port! 919 167 ())
(944 really-steal-channel-port! 919 177 ())
(945 #f 944 147 ())
(946 initialize-channel-i/o! 919 187 ())
(947 i/o-completion-handler 919 197 ())
(948 waiting-for-i/o? 919 207 ())
(949 wait-for-channel 919 217 ())
(950 steal-channel! 919 227 ())
(951 #f 919 241 ())
(952 #f 919 259 ())
(953 i/o-wait-count 919 293 ())
(954 increment-i/o-wait-count! 919 303 ())
(955 decrement-i/o-wait-count! 919 313 ())
(956 i/o-wait-queue 919 341 ())
(957 make-i/o-wait-queues 919 351 ())
(958 #f 957 10 ())
(959 loop##141 958 69 ())
(960 loop##143 958 94 ())
(961 scheme-level-2 #f #f ())
(962 features #f #f ())
(963 tables #f #f ())
(964 symbol-hash 963 27 ())
(965 default-table-hash-function 963 37 ())
(966 table->entry-list 963 47 ())
(967 #f 966 17 ())
(968 make-table-immutable! 963 57 ())
(969 table-walk 963 67 ())
(970 #f 969 6 ())
(971 really-table-walk 963 77 ())
(972 loop##146 971 63 ())
(973 alist-walk 963 87 ())
(974 loop##148 973 11 ())
(975 make-table-maker 963 97 ())
(976 #f 975 76 ())
(977 make-assoc 963 107 ())
(978 #f 977 20 ())
(979 loop 978 18 ())
(980 make-linear-table-ref 963 117 ())
(981 #f 980 6 ())
(982 make->hash-table 963 127 ())
(983 #f 982 41 ())
(984 make-hash-table-set! 963 137 ())
(985 #f 984 6 ())
(986 expand-hash-table! 963 147 ())
(987 loop##150 986 52 ())
(988 make-hash-table-ref 963 157 ())
(989 #f 988 6 ())
(990 table-enter-alist! 963 167 ())
(991 loop##152 990 26 ())
(992 table-expand-table! 963 177 ())
(993 make-linear-table-set! 963 187 ())
(994 #f 993 6 ())
(995 new-entry 963 197 ())
(996 delete-entry! 963 207 ())
(997 loop 996 40 ())
(998 next-table-size 963 217 ())
(999 table-set! 963 227 ())
(1000 table-ref 963 237 ())
(1001 table? 963 247 ())
(1002 really-make-table 963 281 ())
(1003 table-set!-procedure 963 291 ())
(1004 set-table-set!-procedure! 963 301 ())
(1005 table-ref-procedure 963 311 ())
(1006 set-table-ref-procedure! 963 321 ())
(1007 table-data 963 331 ())
(1008 set-table-data! 963 341 ())
(1009 table-size 963 351 ())
(1010 set-table-size! 963 361 ())
(1011 make-table 963 426 ())
(1012 weak #f #f ())
(1013 make-population 1012 7 ())
(1014 add-to-population! 1012 17 ())
(1015 weak-memq 1012 27 ())
(1016 population-reduce 1012 37 ())
(1017 loop##163 1016 11 ())
(1018 population->list 1012 47 ())
(1019 walk-population 1012 57 ())
(1020 #f 1019 6 ())
(1021 meta-types #f #f ())
(1022 compatible-types? 1021 37 ())
(1023 variable-type? 1021 47 ())
(1024 variable-type 1021 57 ())
(1025 procedure-type-argument-types 1021 67 ())
(1026 recur 1025 28 ())
(1027 procedure-type-arity 1021 77 ())
(1028 loop##164 1027 11 ())
(1029 fixed-arity-procedure-type? 1021 87 ())
(1030 loop 1029 43 ())
(1031 make-some-values-type 1021 97 ())
(1032 type->sexp 1021 107 ())
(1033 #f 1032 141 ())
(1034 rail-type->sexp 1021 117 ())
(1035 recur 1034 25 ())
(1036 atomic-type->sexp 1021 127 ())
(1037 disjoin-type 1021 137 ())
(1038 loop##167 1037 262 ())
(1039 disjoin-rest 1021 147 ())
(1040 sexp->type 1021 157 ())
(1041 #f 1040 285 ())
(1042 #f 1040 348 ())
(1043 sexp->values-type 1021 167 ())
(1044 procedure-type 1021 177 ())
(1045 join-type 1021 187 ())
(1046 join-rail 1021 197 ())
(1047 join-procedure 1021 207 ())
(1048 procedure-type? 1021 217 ())
(1049 meet? 1021 227 ())
(1050 meet-procedure? 1021 237 ())
(1051 subtype? 1021 247 ())
(1052 meet-type 1021 257 ())
(1053 meet-rail 1021 267 ())
(1054 meet-procedure 1021 277 ())
(1055 procedure-type-codomain 1021 287 ())
(1056 procedure-type-domain 1021 297 ())
(1057 make-procedure-type 1021 307 ())
(1058 restrictive? 1021 317 ())
(1059 other-type-info 1021 327 ())
(1060 value-type? 1021 337 ())
(1061 tail-type 1021 347 ())
(1062 head-type-really 1021 357 ())
(1063 make-rest-type 1021 367 ())
(1064 make-optional-type 1021 377 ())
(1065 rail-type 1021 387 ())
(1066 optional-type? 1021 397 ())
(1067 head-type 1021 407 ())
(1068 same-type? 1021 417 ())
(1069 rest-type? 1021 427 ())
(1070 empty-rail-type? 1021 437 ())
(1071 named-atomic-type 1021 447 ())
(1072 new-atomic-type 1021 457 ())
(1073 bottom-type? 1021 467 ())
(1074 mask->type 1021 477 ())
(1075 new-type-bit 1021 487 ())
(1076 name->type 1021 497 ())
(1077 make-other-type 1021 507 ())
(1078 set-type-name! 1021 517 ())
(1079 make-type 1021 527 ())
(1080 meta-type? 1021 537 ())
(1081 really-make-type 1021 571 ())
(1082 type-info 1021 581 ())
(1083 type-more 1021 591 ())
(1084 type-mask 1021 601 ())
(1085 #f 1021 615 ())
(1086 loop 1021 997 ())
(1087 interfaces #f #f ())
(1088 note-interface-name! 1087 7 ())
(1089 make-compound-interface 1087 17 ())
(1090 #f 1089 12 ())
(1091 loop 1090 18 ())
(1092 #f 1089 16 ())
(1093 #f 1092 6 ())
(1094 #f 1089 36 ())
(1095 make-simple-interface 1087 27 ())
(1096 #f 1095 23 ())
(1097 #f 1096 66 ())
(1098 really-make-simple-interface 1087 37 ())
(1099 #f 1098 6 ())
(1100 #f 1098 10 ())
(1101 make-interface 1087 47 ())
(1102 note-reference-to-interface! 1087 57 ())
(1103 for-each-declaration 1087 67 ())
(1104 interface-ref 1087 77 ())
(1105 interface? 1087 87 ())
(1106 really-make-interface 1087 121 ())
(1107 interface-name 1087 131 ())
(1108 set-interface-name! 1087 141 ())
(1109 interface-clients 1087 151 ())
(1110 walk-method 1087 161 ())
(1111 ref-method 1087 171 ())
(1112 #f 1087 181 ())
(1113 bindings #f #f ())
(1114 maybe-fix-place! 1113 7 ())
(1115 follow-forwarding-pointers 1113 17 ())
(1116 same-denotation? 1113 27 ())
(1117 forget-integration 1113 37 ())
(1118 impose-type 1113 47 ())
(1119 clobber-binding! 1113 57 ())
(1120 add-path 1113 67 ())
(1121 make-binding 1113 77 ())
(1122 set-binding-place! 1113 87 ())
(1123 binding-path 1113 97 ())
(1124 binding-static 1113 107 ())
(1125 binding-place 1113 117 ())
(1126 binding-type 1113 127 ())
(1127 names #f #f ())
(1128 apply-inline-transform 1127 17 ())
(1129 maybe-apply-macro-transform 1127 27 ())
(1130 bind-aliases 1127 37 ())
(1131 #f 1130 36 ())
(1132 make-name-generator 1127 47 ())
(1133 #f 1132 13 ())
(1134 make-keyword-comparator 1127 57 ())
(1135 #f 1134 6 ())
(1136 name->source-name 1127 67 ())
(1137 make-transform 1127 77 ())
(1138 name->qualified 1127 87 ())
(1139 qualify-parent 1127 97 ())
(1140 recur 1139 18 ())
(1141 transform? 1127 107 ())
(1142 lookup 1127 117 ())
(1143 qualified-symbol 1127 127 ())
(1144 qualified-parent-name 1127 137 ())
(1145 qualified? 1127 147 ())
(1146 make-qualified 1127 157 ())
(1147 desyntaxify 1127 167 ())
(1148 loop 1147 267 ())
(1149 name-hash 1127 177 ())
(1150 name->symbol 1127 187 ())
(1151 generated-uid 1127 197 ())
(1152 generate-name 1127 207 ())
(1153 name? 1127 217 ())
(1154 generated? 1127 227 ())
(1155 make-generated 1127 261 ())
(1156 generated-parent-name 1127 271 ())
(1157 generated-env 1127 281 ())
(1158 generated-token 1127 291 ())
(1159 generated-symbol 1127 301 ())
(1160 #f 1127 315 ())
(1161 really-make-transform 1127 377 ())
(1162 transform-id 1127 387 ())
(1163 transform-source 1127 397 ())
(1164 transform-aux-names 1127 407 ())
(1165 transform-type 1127 417 ())
(1166 transform-env 1127 427 ())
(1167 transform-procedure 1127 437 ())
(1168 #f 1127 447 ())
(1169 compiler-envs #f #f ())
(1170 source-file-name 1169 7 ())
(1171 bind-source-file-name 1169 17 ())
(1172 extract-package-from-environment 1169 27 ())
(1173 environment-define! 1169 37 ())
(1174 environment-macro-eval 1169 47 ())
(1175 make-compiler-env 1169 57 ())
(1176 #f 1175 6 ())
(1177 bindrec 1169 67 ())
(1178 #f 1177 17 ())
(1179 bind 1169 77 ())
(1180 bind1 1169 87 ())
(1181 #f 1180 6 ())
(1182 lookup 1169 97 ())
(1183 thingies #f #f ())
(1184 thingie? 1183 7 ())
(1185 make-thingie 1183 41 ())
(1186 thingie-want-type 1183 51 ())
(1187 thingie-name 1183 61 ())
(1188 thingie-binding 1183 71 ())
(1189 packages #f #f ())
(1190 location-on-demand 1189 27 ())
(1191 #f 1190 6 ())
(1192 link! 1189 37 ())
(1193 #f 1192 14 ())
(1194 really-link! 1189 47 ())
(1195 loop##221 1194 11 ())
(1196 get-location 1189 57 ())
(1197 get-location-for-undefined 1189 67 ())
(1198 #f 1197 105 ())
(1199 location-for-reference 1189 77 ())
(1200 loop 1199 28 ())
(1201 note-caching! 1189 87 ())
(1202 package-note-caching! 1189 97 ())
(1203 loop 1202 79 ())
(1204 get-location-for-unassignable 1189 107 ())
(1205 #f 1204 98 ())
(1206 #f 1204 102 ())
(1207 cenv->package 1189 117 ())
(1208 noting-undefined-variables 1189 127 ())
(1209 add-name 1208 13 ())
(1210 #f 1208 24 ())
(1211 #f 1208 28 ())
(1212 #f 1211 3 ())
(1213 #f 1211 10 ())
(1214 #f 1213 3 ())
(1215 print-undefined-names 1189 137 ())
(1216 #f 1215 10 ())
(1217 #f 1215 183 ())
(1218 flush-location-names 1189 147 ())
(1219 make-new-location 1189 157 ())
(1220 for-each-definition 1189 167 ())
(1221 #f 1220 6 ())
(1222 package-refine-type! 1189 177 ())
(1223 package-add-static! 1189 187 ())
(1224 make-simple-package 1189 197 ())
(1225 #f 1224 65 ())
(1226 #f 1224 69 ())
(1227 package-opens 1189 207 ())
(1228 package-name 1189 217 ())
(1229 lazy-table-accessor 1189 227 ())
(1230 #f 1229 6 ())
(1231 make-package 1189 237 ())
(1232 new-package-uid 1189 247 ())
(1233 really-package->environment 1189 257 ())
(1234 #f 1233 6 ())
(1235 #f 1233 10 ())
(1236 for-each-export 1189 267 ())
(1237 #f 1236 22 ())
(1238 real-structure-lookup 1189 277 ())
(1239 really-package-lookup 1189 287 ())
(1240 generic-lookup 1189 297 ())
(1241 package-lookup 1189 307 ())
(1242 structure-lookup 1189 317 ())
(1243 search-opens 1189 327 ())
(1244 loop 1243 18 ())
(1245 package-definition 1189 337 ())
(1246 initialize-package-if-necessary! 1189 347 ())
(1247 initialize-package! 1189 357 ())
(1248 #f 1247 45 ())
(1249 #f 1247 58 ())
(1250 package-accesses 1189 367 ())
(1251 package-define! 1189 377 ())
(1252 get-new-location 1189 387 ())
(1253 structure-unstable? 1189 397 ())
(1254 make-structure 1189 407 ())
(1255 #f 1254 85 ())
(1256 note-structure-name! 1189 417 ())
(1257 note-package-name! 1189 427 ())
(1258 package? 1189 437 ())
(1259 structure-interface 1189 447 ())
(1260 initialize-structure! 1189 457 ())
(1261 structure? 1189 467 ())
(1262 really-make-structure 1189 501 ())
(1263 structure-name 1189 511 ())
(1264 set-structure-name! 1189 521 ())
(1265 structure-clients 1189 531 ())
(1266 structure-package 1189 541 ())
(1267 structure-interface-really 1189 551 ())
(1268 set-structure-interface! 1189 561 ())
(1269 structure-interface-thunk 1189 571 ())
(1270 #f 1189 585 ())
(1271 really-make-package 1189 623 ())
(1272 package-cached 1189 633 ())
(1273 package-clients 1189 643 ())
(1274 package-real-undefined-but-assigneds 1189 653 ())
(1275 set-package-undefined-but-assigneds! 1189 663 ())
(1276 package-real-undefineds 1189 673 ())
(1277 set-package-undefineds! 1189 683 ())
(1278 package-accesses-thunk 1189 693 ())
(1279 package-opens-thunk 1189 703 ())
(1280 set-package-opens-thunk! 1189 713 ())
(1281 package->environment 1189 723 ())
(1282 set-package->environment! 1189 733 ())
(1283 package-loaded? 1189 743 ())
(1284 set-package-loaded?! 1189 753 ())
(1285 package-clauses 1189 763 ())
(1286 package-file-name 1189 773 ())
(1287 package-get-location 1189 783 ())
(1288 set-package-get-location! 1189 793 ())
(1289 package-integrate? 1189 803 ())
(1290 set-package-integrate?! 1189 813 ())
(1291 package-unstable? 1189 823 ())
(1292 package-definitions 1189 833 ())
(1293 package-opens-really 1189 843 ())
(1294 set-package-opens! 1189 853 ())
(1295 package-uid 1189 863 ())
(1296 #f 1189 877 ())
(1297 #f 1189 1032 ())
(1298 environments #f #f ())
(1299 environment-ref 1298 7 ())
(1300 #f 1299 22 ())
(1301 environment-set! 1298 17 ())
(1302 #f 1301 115 ())
(1303 environment-define! 1298 27 ())
(1304 *structure-ref 1298 37 ())
(1305 carefully 1298 47 ())
(1306 interaction-environment 1298 72 ())
(1307 set-interaction-environment! 1298 82 ())
(1308 with-interaction-environment 1298 92 ())
(1309 scheme-report-environment 1298 102 ())
(1310 set-scheme-report-environment! 1298 138 ())
(1311 null-environment 1298 148 ())
(1312 make-reflective-tower 1298 158 ())
(1313 recur 1312 19 ())
(1314 #f 1313 6 ())
(1315 set-reflective-tower-maker! 1298 189 ())
(1316 filenames #f #f ())
(1317 namestring 1316 7 ())
(1318 #f 1317 192 ())
(1319 namestring-component 1316 37 ())
(1320 file-name-directory 1316 77 ())
(1321 file-name-nondirectory 1316 87 ())
(1322 file-nondirectory-position 1316 97 ())
(1323 loop 1322 24 ())
(1324 string-posq 1316 107 ())
(1325 loop 1324 19 ())
(1326 translations 1316 127 ())
(1327 set-translation! 1316 137 ())
(1328 translate 1316 147 ())
(1329 loop 1328 26 ())
(1330 reading-forms #f #f ())
(1331 #f 1330 11 ())
(1332 read-forms 1330 24 ())
(1333 #f 1332 47 ())
(1334 really-read-forms 1330 34 ())
(1335 loop 1334 19 ())
(1336 nodes #f #f ())
(1337 schemify-formals 1336 27 ())
(1338 define-schemifier 1336 37 ())
(1339 schemify-nodes 1336 47 ())
(1340 #f 1339 6 ())
(1341 schemify 1336 57 ())
(1342 schemify-sexp 1336 67 ())
(1343 loop 1342 147 ())
(1344 schemify-node 1336 77 ())
(1345 make-similar-node 1336 87 ())
(1346 node-predicate 1336 97 ())
(1347 #f 1346 37 ())
(1348 node-operator 1336 107 ())
(1349 node-set! 1336 117 ())
(1350 loop 1349 103 ())
(1351 node-ref 1336 127 ())
(1352 make-node 1336 137 ())
(1353 node? 1336 147 ())
(1354 operator-define! 1336 157 ())
(1355 operator-lookup 1336 167 ())
(1356 make-operator-table 1336 177 ())
(1357 get-operator 1336 187 ())
(1358 operator? 1336 197 ())
(1359 make-operator 1336 231 ())
(1360 operator-name 1336 241 ())
(1361 operator-uid 1336 251 ())
(1362 operator-nargs 1336 261 ())
(1363 operator-type 1336 271 ())
(1364 set-operator-type! 1336 281 ())
(1365 #f 1336 295 ())
(1366 really-make-node 1336 403 ())
(1367 node-plist 1336 413 ())
(1368 set-node-plist! 1336 423 ())
(1369 node-form 1336 433 ())
(1370 node-operator-id 1336 443 ())
(1371 #f 1336 457 ())
(1372 #f 1336 475 ())
(1373 #f 1336 499 ())
(1374 #f 1336 525 ())
(1375 #f 1336 551 ())
(1376 #f 1375 6 ())
(1377 #f 1336 577 ())
(1378 #f 1336 603 ())
(1379 #f 1378 29 ())
(1380 #f 1378 56 ())
(1381 #f 1336 629 ())
(1382 #f 1336 651 ())
(1383 var-utilities #f #f ())
(1384 number-of-required-args 1383 7 ())
(1385 loop##276 1384 11 ())
(1386 n-ary? 1383 17 ())
(1387 normalize-formals 1383 27 ())
(1388 syntactic #f #f ())
(1389 syntax? 1388 7 ())
(1390 specs? 1388 17 ())
(1391 expand-lambda 1388 27 ())
(1392 #f 1391 6 ())
(1393 bind-names 1388 37 ())
(1394 loop 1393 26 ())
(1395 unspecific-node 1388 47 ())
(1396 define-expander 1388 57 ())
(1397 expand-body 1388 67 ())
(1398 #f 1397 33 ())
(1399 expand-letrec 1388 77 ())
(1400 #f 1399 10 ())
(1401 scan-body-forms 1388 87 ())
(1402 #f 1401 231 ())
(1403 body-lossage 1388 97 ())
(1404 make-operator-predicate 1388 107 ())
(1405 #f 1404 26 ())
(1406 static-value 1388 117 ())
(1407 expand-form 1388 127 ())
(1408 expand-define 1388 137 ())
(1409 scan-forms 1388 147 ())
(1410 loop 1409 22 ())
(1411 expand-head 1388 157 ())
(1412 expand-macro-application 1388 167 ())
(1413 #f 1412 6 ())
(1414 expand 1388 177 ())
(1415 expand-call 1388 187 ())
(1416 expand-list 1388 197 ())
(1417 #f 1416 6 ())
(1418 expand-literal 1388 207 ())
(1419 literal? 1388 217 ())
(1420 expand-operator-form 1388 227 ())
(1421 expand-name 1388 237 ())
(1422 scan-define-syntax 1388 247 ())
(1423 process-syntax 1388 257 ())
(1424 this-long? 1388 267 ())
(1425 scan-define 1388 277 ())
(1426 destructure-define 1388 287 ())
(1427 names? 1388 297 ())
(1428 at-least-this-long? 1388 307 ())
(1429 #f 1388 381 ())
(1430 #f 1388 405 ())
(1431 #f 1388 431 ())
(1432 #f 1388 457 ())
(1433 #f 1388 483 ())
(1434 #f 1388 509 ())
(1435 lose 1434 32 ())
(1436 #f 1388 535 ())
(1437 #f 1388 561 ())
(1438 #f 1388 587 ())
(1439 #f 1388 613 ())
(1440 #f 1439 87 ())
(1441 #f 1388 639 ())
(1442 #f 1388 665 ())
(1443 #f 1442 108 ())
(1444 #f 1388 691 ())
(1445 #f 1444 104 ())
(1446 #f 1445 6 ())
(1447 #f 1388 717 ())
(1448 #f 1447 113 ())
(1449 primops #f #f ())
(1450 get-primop 1449 7 ())
(1451 define-compiler-primitive 1449 17 ())
(1452 walk-primops 1449 27 ())
(1453 #f 1452 6 ())
(1454 primop? 1449 37 ())
(1455 make-primop 1449 71 ())
(1456 primop-compilator 1449 81 ())
(1457 primop-closed 1449 91 ())
(1458 primop-type 1449 101 ())
(1459 primop-name 1449 111 ())
(1460 #f 1449 125 ())
(1461 debug-data #f #f ())
(1462 debug-data? 1461 7 ())
(1463 make-debug-data 1461 41 ())
(1464 debug-data-source 1461 51 ())
(1465 set-debug-data-source! 1461 61 ())
(1466 debug-data-env-maps 1461 71 ())
(1467 set-debug-data-env-maps! 1461 81 ())
(1468 debug-data-pc-in-parent 1461 91 ())
(1469 debug-data-parent 1461 101 ())
(1470 debug-data-name 1461 111 ())
(1471 debug-data-uid 1461 121 ())
(1472 #f 1461 131 ())
(1473 stack-check #f #f ())
(1474 stack-function 1473 7 ())
(1475 loop 1474 22 ())
(1476 arg-spec-size 1473 17 ())
(1477 do-make-cont 1473 27 ())
(1478 #f 1477 6 ())
(1479 get-offset 1473 37 ())
(1480 continuer 1473 47 ())
(1481 #f 1480 6 ())
(1482 continue 1473 57 ())
(1483 pusher 1473 67 ())
(1484 #f 1483 6 ())
(1485 imax 1473 77 ())
(1486 popper 1473 87 ())
(1487 #f 1486 6 ())
(1488 nothing 1473 97 ())
(1489 #f 1488 6 ())
(1490 maximum-stack-use 1473 107 ())
(1491 loop##303 1490 74 ())
(1492 protocol-skip 1473 117 ())
(1493 stack-max 1473 127 ())
(1494 #f 1473 508 ())
(1495 #f 1473 521 ())
(1496 #f 1473 534 ())
(1497 #f 1473 547 ())
(1498 #f 1473 560 ())
(1499 #f 1473 619 ())
(1500 #f 1473 632 ())
(1501 #f 1473 645 ())
(1502 loop 1501 48 ())
(1503 loop##305 1473 655 ())
(1504 segments #f #f ())
(1505 note-environment 1504 37 ())
(1506 #f 1505 31 ())
(1507 note-source-code 1504 47 ())
(1508 #f 1507 19 ())
(1509 attach-label 1504 57 ())
(1510 #f 1509 19 ())
(1511 #f 1510 37 ())
(1512 computed-goto-instruction 1504 67 ())
(1513 #f 1512 68 ())
(1514 loop##307 1513 75 ())
(1515 instruction-using-label 1504 77 ())
(1516 #f 1515 49 ())
(1517 insert-label! 1504 87 ())
(1518 make-label 1504 97 ())
(1519 instruction-with-template 1504 107 ())
(1520 #f 1519 10 ())
(1521 instruction-with-location 1504 117 ())
(1522 #f 1521 10 ())
(1523 instruction-with-literal 1504 127 ())
(1524 #f 1523 30 ())
(1525 #f 1524 160 ())
(1526 sequentially 1504 137 ())
(1527 loop 1526 105 ())
(1528 #f 1526 118 ())
(1529 loop 1528 18 ())
(1530 sequentially-2 1504 147 ())
(1531 #f 1530 59 ())
(1532 instruction 1504 157 ())
(1533 #f 1532 30 ())
(1534 #f 1533 22 ())
(1535 emit-literal! 1504 167 ())
(1536 literal->index 1504 177 ())
(1537 emit-byte! 1504 187 ())
(1538 segment->template 1504 197 ())
(1539 #f 1538 124 ())
(1540 make-astate 1504 207 ())
(1541 emit-with-environment-maps! 1504 217 ())
(1542 #f 1541 14 ())
(1543 emit-segment! 1504 227 ())
(1544 check-stack-use 1504 237 ())
(1545 loop##309 1544 77 ())
(1546 code-vector-set2! 1504 247 ())
(1547 low-byte 1504 257 ())
(1548 high-byte 1504 267 ())
(1549 segment-data->template 1504 277 ())
(1550 loop##311 1549 68 ())
(1551 new-debug-data 1504 287 ())
(1552 get-debug-data 1504 297 ())
(1553 debug-data->info 1504 307 ())
(1554 note-debug-data! 1504 317 ())
(1555 with-fresh-compiler-state 1504 327 ())
(1556 #f 1555 44 ())
(1557 #f 1556 3 ())
(1558 #f 1556 7 ())
(1559 saving-and-restoring 1504 337 ())
(1560 swap 1559 6 ())
(1561 debug-flag-modifier 1504 347 ())
(1562 #f 1561 26 ())
(1563 debug-flag-accessor 1504 357 ())
(1564 #f 1563 26 ())
(1565 set-template-uid! 1504 367 ())
(1566 template-uid 1504 377 ())
(1567 new-template-uid 1504 387 ())
(1568 make-assembly-state 1504 664 ())
(1569 astate-literals 1504 674 ())
(1570 set-astate-literals! 1504 684 ())
(1571 astate-count 1504 694 ())
(1572 set-astate-count! 1504 704 ())
(1573 astate-pc 1504 714 ())
(1574 set-astate-pc! 1504 724 ())
(1575 astate-code-vector 1504 734 ())
(1576 #f 1504 752 ())
(1577 reconstruction #f #f ())
(1578 node-type 1577 7 ())
(1579 reconstruct-type 1577 17 ())
(1580 reconstruct 1577 27 ())
(1581 examine 1577 37 ())
(1582 #f 1577 51 ())
(1583 define-reconstructor 1577 63 ())
(1584 #f 1577 81 ())
(1585 reconstruct-lambda 1577 95 ())
(1586 #f 1585 71 ())
(1587 careful-codomain 1577 105 ())
(1588 #f 1577 123 ())
(1589 reconstruct-name 1577 137 ())
(1590 #f 1577 155 ())
(1591 reconstruct-call 1577 169 ())
(1592 lose 1591 112 ())
(1593 #f 1592 3 ())
(1594 loop 1591 178 ())
(1595 #f 1577 187 ())
(1596 #f 1577 209 ())
(1597 #f 1577 229 ())
(1598 #f 1577 249 ())
(1599 #f 1577 271 ())
(1600 #f 1599 153 ())
(1601 fork-constraints 1577 285 ())
(1602 #f 1601 13 ())
(1603 #f 1577 306 ())
(1604 loop##321 1603 11 ())
(1605 #f 1577 328 ())
(1606 #f 1577 350 ())
(1607 #f 1606 60 ())
(1608 #f 1577 372 ())
(1609 node->type 1577 386 ())
(1610 #f 1577 404 ())
(1611 #f 1577 426 ())
(1612 define-primop-reconstructor 1577 504 ())
(1613 #f 1577 522 ())
(1614 #f 1577 540 ())
(1615 #f 1614 10 ())
(1616 #f 1577 558 ())
(1617 reconstruct-apply 1577 572 ())
(1618 #f 1617 56 ())
(1619 constant-type 1577 618 ())
(1620 compiler #f #f ())
(1621 make-startup-procedure 1620 17 ())
(1622 #f 1621 38 ())
(1623 compile-forms 1620 27 ())
(1624 recur 1623 89 ())
(1625 compile-form 1620 37 ())
(1626 compile-definition 1620 47 ())
(1627 make-dispatch-protocol 1620 57 ())
(1628 call-on-args 1620 67 ())
(1629 do-arg 1628 6 ())
(1630 loop 1628 51 ())
(1631 call-on-arg-and-id 1620 77 ())
(1632 define-n-ary-compiler-primitive 1620 87 ())
(1633 n-ary-primitive-compilator 1620 97 ())
(1634 #f 1633 6 ())
(1635 define-vector-primitives 1620 107 ())
(1636 def-prim 1635 26 ())
(1637 define-data-struct-primitives 1620 117 ())
(1638 def-prim 1637 8 ())
(1639 loop##322 1637 189 ())
(1640 define-stob-predicate 1620 127 ())
(1641 symbol-append 1620 137 ())
(1642 define-simple-primitive 1620 147 ())
(1643 simple-closed-compilator 1620 157 ())
(1644 #f 1643 6 ())
(1645 simple-compilator 1620 167 ())
(1646 #f 1645 6 ())
(1647 get-primop-type 1620 177 ())
(1648 #f 1647 10 ())
(1649 nargs->domain 1620 187 ())
(1650 loop##325 1649 11 ())
(1651 direct-closed-compilator 1620 197 ())
(1652 #f 1651 6 ())
(1653 direct-compilator 1620 207 ())
(1654 #f 1653 6 ())
(1655 push-all-but-last 1620 217 ())
(1656 recur 1655 25 ())
(1657 set-type-check?! 1620 227 ())
(1658 name-node-binding 1620 237 ())
(1659 ignore-values-cont 1620 247 ())
(1660 fall-through-cont? 1620 257 ())
(1661 compile-lambda 1620 267 ())
(1662 compile-call 1620 277 ())
(1663 compile-redex 1620 287 ())
(1664 #f 1663 127 ())
(1665 cont-name 1620 297 ())
(1666 compile-lambda-code 1620 307 ())
(1667 return-cont 1620 317 ())
(1668 name-node->symbol 1620 327 ())
(1669 set-lexical-offsets! 1620 337 ())
(1670 loop 1669 21 ())
(1671 push-all-with-names 1620 347 ())
(1672 named-cont 1620 357 ())
(1673 generate-trap 1620 367 ())
(1674 compile-name-call 1620 377 ())
(1675 compile-unknown-call 1620 387 ())
(1676 push-arguments 1620 397 ())
(1677 recur 1676 37 ())
(1678 fall-through-cont 1620 407 ())
(1679 make-cont 1620 417 ())
(1680 maybe-push-continuation 1620 427 ())
(1681 fixup-source 1620 437 ())
(1682 return-cont? 1620 447 ())
(1683 compile-constant 1620 457 ())
(1684 deliver-value 1620 467 ())
(1685 ignore-values-cont? 1620 477 ())
(1686 define-compilator 1620 487 ())
(1687 compile-expression 1620 497 ())
(1688 compile 1620 507 ())
(1689 type-check 1620 517 ())
(1690 #f 1689 121 ())
(1691 diagnose-call-error 1620 527 ())
(1692 #f 1691 173 ())
(1693 #f 1620 541 ())
(1694 #f 1620 565 ())
(1695 #f 1620 613 ())
(1696 #f 1620 661 ())
(1697 #f 1620 687 ())
(1698 #f 1620 713 ())
(1699 #f 1620 739 ())
(1700 #f 1620 765 ())
(1701 #f 1620 791 ())
(1702 loop 1701 89 ())
(1703 #f 1620 843 ())
(1704 #f 1620 869 ())
(1705 #f 1704 73 ())
(1706 #f 1704 156 ())
(1707 #f 1620 955 ())
(1708 #f 1620 1125 ())
(1709 loop##328 1620 2274 ())
(1710 #f 1620 2330 ())
(1711 #f 1620 2581 ())
(1712 #f 1620 2703 ())
(1713 #f 1620 2707 ())
(1714 #f 1620 2785 ())
(1715 #f 1620 2789 ())
(1716 #f 1620 2869 ())
(1717 #f 1620 2879 ())
(1718 #f 1620 2903 ())
(1719 #f 1620 2907 ())
(1720 #f 1620 2958 ())
(1721 #f 1720 112 ())
(1722 #f 1620 2962 ())
(1723 #f 1620 2990 ())
(1724 n-ary-constructor 1620 3004 ())
(1725 #f 1724 16 ())
(1726 #f 1724 20 ())
(1727 define-char-io 1620 3051 ())
(1728 #f 1727 12 ())
(1729 #f 1727 16 ())
(1730 define-char-io 1620 3192 ())
(1731 #f 1730 12 ())
(1732 #f 1730 16 ())
(1733 define+* 1620 3280 ())
(1734 #f 1733 43 ())
(1735 #f 1733 47 ())
(1736 define=< 1620 3412 ())
(1737 #f 1736 73 ())
(1738 #f 1736 77 ())
(1739 define-one-or-two 1620 3544 ())
(1740 #f 1739 73 ())
(1741 #f 1739 77 ())
(1742 define-one-or-two 1620 3593 ())
(1743 #f 1742 12 ())
(1744 #f 1742 16 ())
(1745 loop 1620 3981 ())
(1746 evaluation #f #f ())
(1747 eval 1746 7 ())
(1748 load-into 1746 17 ())
(1749 eval-from-file 1746 27 ())
(1750 load 1746 37 ())
(1751 really-load-into 1746 47 ())
(1752 compile-and-run 1746 57 ())
(1753 #f 1752 61 ())
(1754 scheme #f #f ())
(1755 display-conditions #f #f ())
(1756 display-condition 1755 22 ())
(1757 #f 1756 10 ())
(1758 really-display-condition 1755 33 ())
(1759 #f 1758 246 ())
(1760 &disclose-condition 1755 147 ())
(1761 limited-write 1755 174 ())
(1762 recur 1761 22 ())
(1763 #f 1762 145 ())
(1764 #f 1763 24 ())
(1765 mini-command #f #f ())
(1766 command-processor 1765 7 ())
(1767 loop 1766 77 ())
(1768 #f 1767 7 ())
(1769 #f 1768 6 ())
(1770 #f 1769 68 ())
(1771 #f 1768 10 ())
(1772 #f 1771 75 ())
(1773 #f 1771 200 ())
(1774 #f 1771 244 ())
(1775 #f 1774 12 ())
(1776 mini-load 1765 17 ())
(1777 read-string 1765 27 ())
(1778 loop 1777 23 ())
(1779 enum-case #f #f ())
(1780 scheduler #f #f ())
(1781 run-threads 1780 7 ())
(1782 #f 1781 6 ())
(1783 loop 1782 26 ())
(1784 #f 1783 6 ())
(1785 #f 1784 8 ())
(1786 run-threads-with-housekeeper 1780 17 ())
(1787 #f 1786 6 ())
(1788 loop 1787 29 ())
(1789 #f 1788 6 ())
(1790 #f 1789 98 ())
(1791 round-robin-event-handler 1780 27 ())
(1792 thread-event-handler 1791 15 ())
(1793 #f 1792 111 ())
(1794 asynchronous-event-handler 1791 22 ())
(1795 next-thread 1791 29 ())
(1796 #f 1795 18 ())
(1797 make-counter 1780 37 ())
(1798 increment-counter! 1780 57 ())
(1799 decrement-counter! 1780 67 ())
(1800 root-scheduler #f #f ())
(1801 root-scheduler 1800 7 ())
(1802 #f 1801 13 ())
(1803 #f 1802 24 ())
(1804 #f 1802 40 ())
(1805 make-root-event-handler 1800 17 ())
(1806 #f 1805 115 ())
(1807 #f 1805 119 ())
(1808 root-handler 1800 27 ())
(1809 cheap-display-condition 1800 37 ())
(1810 #f 1809 164 ())
(1811 scheme-exit-now 1800 67 ())
(1812 root-wait 1800 77 ())
(1813 #f 1812 22 ())
(1814 do-some-waiting 1800 112 ())
(1815 call-when-deadlocked! 1800 140 ())
(1816 spawn-output-forcers 1800 150 ())
(1817 usual-resumer #f #f ())
(1818 usual-resumer 1817 7 ())
(1819 #f 1818 6 ())
(1820 #f 1819 15 ())
(1821 initialize-rts 1817 17 ())
(1822 #f 1821 44 ())
(1823 #f 1822 7 ())
(1824 #f 1823 46 ())
(1825 #f 1824 3 ())
(1826 initial-system #f #f ())
(1827 start 1826 7 ())
(1828 #f 1827 6 ())
(1829 #f 1828 6 ())
(1830 #f 1829 64 ())
(1831 make-built-in-structures 1826 17 ())
(1832 #f 1831 38 ())
(1833 #f 1831 59 ())
(1834 initialize-interaction-environment! 1826 27 ())
(1835 make-initial-package 1826 37 ())
(1836 #f 1835 17 ())
(1837 make-tower 1826 47 ())
(1838 usual-macros #f #f ())
(1839 define-usual-macro 1838 23 ())
(1840 usual-transform 1838 33 ())
(1841 #f 1838 47 ())
(1842 #f 1838 69 ())
(1843 recur 1842 85 ())
(1844 #f 1838 91 ())
(1845 #f 1844 238 ())
(1846 do-spec? 1838 109 ())
(1847 #f 1838 123 ())
(1848 #f 1838 145 ())
(1849 specs? 1838 163 ())
(1850 #f 1838 177 ())
(1851 #f 1838 199 ())
(1852 #f 1851 28 ())
(1853 #f 1851 217 ())
(1854 case-clause? 1838 217 ())
(1855 #f 1838 231 ())
(1856 expand-quasiquote 1855 147 ())
(1857 finalize-quasiquote 1855 154 ())
(1858 descend-quasiquote 1855 161 ())
(1859 descend-quasiquote-pair 1855 168 ())
(1860 #f 1859 15 ())
(1861 #f 1860 15 ())
(1862 descend-quasiquote-vector 1855 175 ())
(1863 #f 1862 22 ())
(1864 interesting-to-quasiquote? 1855 182 ())
(1865 #f 1838 253 ())
(1866 process-rules 1838 271 ())
(1867 make-transformer 1866 385 ())
(1868 process-rule 1866 392 ())
(1869 #f 1868 114 ())
(1870 process-match 1866 399 ())
(1871 process-segment-match 1866 406 ())
(1872 process-pattern 1866 413 ())
(1873 #f 1872 97 ())
(1874 process-template 1866 420 ())
(1875 meta-variables 1866 427 ())
(1876 free-meta-variables 1866 434 ())
(1877 segment-pattern? 1838 281 ())
(1878 segment-template? 1838 291 ())
(1879 find-free-names-in-syntax-rules 1838 331 ())
(1880 meta-variables 1879 13 ())
(1881 free-names 1879 20 ())
(1882 loop##363 1879 32 ())
(1883 strong #f #f ())
(1884 strongly-connected-components 1883 7 ())
(1885 loop 1884 52 ())
(1886 #f 1885 39 ())
(1887 #f 1885 56 ())
(1888 find-next-vertex 1883 17 ())
(1889 loop##364 1888 11 ())
(1890 really-make-vertex 1883 51 ())
(1891 vertex-lowpoint 1883 61 ())
(1892 set-vertex-lowpoint! 1883 71 ())
(1893 vertex-parent 1883 81 ())
(1894 set-vertex-parent! 1883 91 ())
(1895 vertex-index 1883 101 ())
(1896 set-vertex-index! 1883 111 ())
(1897 vertex-stack 1883 121 ())
(1898 set-vertex-stack! 1883 131 ())
(1899 vertex-edges 1883 141 ())
(1900 set-vertex-edges! 1883 151 ())
(1901 vertex-data 1883 161 ())
(1902 vertex? 1883 171 ())
(1903 make-vertex 1883 181 ())
(1904 make-vertices 1883 191 ())
(1905 maybe-slot 1904 6 ())
(1906 #f 1904 17 ())
(1907 #f 1904 34 ())
(1908 do-vertex 1883 201 ())
(1909 get-strong 1883 211 ())
(1910 end-vertex 1883 221 ())
(1911 #f 1910 6 ())
(1912 unwind-stack 1883 231 ())
(1913 loop 1912 22 ())
(1914 follow-edge 1883 241 ())
(1915 pop-vertex-edge! 1883 251 ())
(1916 usages #f #f ())
(1917 find-usages 1916 7 ())
(1918 #f 1917 23 ())
(1919 #f 1917 40 ())
(1920 #f 1919 24 ())
(1921 #f 1917 57 ())
(1922 maybe-update-known-type 1916 17 ())
(1923 find-node-usages 1916 27 ())
(1924 #f 1923 30 ())
(1925 #f 1923 43 ())
(1926 analyze 1916 37 ())
(1927 analyze-nodes 1916 47 ())
(1928 #f 1927 6 ())
(1929 #f 1916 61 ())
(1930 define-usage-analyzer 1916 73 ())
(1931 #f 1916 89 ())
(1932 #f 1916 109 ())
(1933 #f 1916 131 ())
(1934 #f 1916 151 ())
(1935 add-if-free 1916 165 ())
(1936 #f 1916 181 ())
(1937 #f 1916 203 ())
(1938 #f 1937 41 ())
(1939 #f 1916 225 ())
(1940 #f 1939 57 ())
(1941 #f 1916 247 ())
(1942 #f 1916 269 ())
(1943 #f 1916 291 ())
(1944 #f 1916 313 ())
(1945 #f 1916 335 ())
(1946 #f 1916 357 ())
(1947 #f 1916 379 ())
(1948 really-make-usage 1916 417 ())
(1949 usage-assignment-count 1916 427 ())
(1950 set-assignment! 1916 437 ())
(1951 usage-operator-count 1916 447 ())
(1952 set-operator! 1916 457 ())
(1953 usage-reference-count 1916 467 ())
(1954 set-reference! 1916 477 ())
(1955 usage-name-node 1916 487 ())
(1956 usage? 1916 497 ())
(1957 make-usage 1916 507 ())
(1958 make-package-usage 1916 517 ())
(1959 package-usage? 1916 527 ())
(1960 usage-incrementator 1916 537 ())
(1961 #f 1960 6 ())
(1962 sort-forms 1916 747 ())
(1963 #f 1962 39 ())
(1964 #f 1962 70 ())
(1965 stuff-count 1916 757 ())
(1966 #f 1965 10 ())
(1967 maybe-make-aliased 1916 767 ())
(1968 topologically-sort 1916 777 ())
(1969 #f 1968 13 ())
(1970 #f 1969 6 ())
(1971 #f 1969 14 ())
(1972 really-make-form 1916 811 ())
(1973 form-temp 1916 821 ())
(1974 set-form-temp! 1916 831 ())
(1975 form-free 1916 841 ())
(1976 set-form-free! 1916 851 ())
(1977 form-unaliased? 1916 861 ())
(1978 set-form-unaliased?! 1916 871 ())
(1979 form-aliases 1916 881 ())
(1980 set-form-aliases! 1916 891 ())
(1981 form-node 1916 901 ())
(1982 form? 1916 911 ())
(1983 #f 1916 925 ())
(1984 make-form 1916 939 ())
(1985 insert-aliases 1916 949 ())
(1986 loop 1985 22 ())
(1987 inline #f #f ())
(1988 make-inline-transform 1987 7 ())
(1989 #f 1988 41 ())
(1990 #f 1988 95 ())
(1991 loop##400 1990 11 ())
(1992 clean-node 1987 17 ())
(1993 #f 1992 132 ())
(1994 #f 1992 295 ())
(1995 clean-lambda 1987 27 ())
(1996 #f 1995 41 ())
(1997 recur 1995 90 ())
(1998 clean-lookup 1987 37 ())
(1999 unused-name 1987 47 ())
(2000 loop##401 1999 46 ())
(2001 #f 2000 10 ())
(2002 inline-transform 1987 57 ())
(2003 #f 2002 63 ())
(2004 #f 2002 70 ())
(2005 make-substitution 1987 67 ())
(2006 #f 2005 29 ())
(2007 reconstitute 1987 77 ())
(2008 label 2007 18 ())
(2009 reconstitute-name 1987 87 ())
(2010 qualified->name 1987 137 ())
(2011 recur 2010 18 ())
(2012 get-qualified-env 1987 147 ())
(2013 for-reification #f #f ())
(2014 operator 2013 7 ())
(2015 primop 2013 17 ())
(2016 simple-interface 2013 27 ())
(2017 #f 2016 12 ())
(2018 package 2013 37 ())
(2019 loop##403 2018 73 ())
(2020 transform 2013 47 ())
(2021 package-define-static! 2013 57 ())
(2022 types #f #f ())
(2023 procedure 2022 47 ())
(2024 defpackage #f #f ())
(2025 make-a-package 2024 7 ())
(2026 loser 2024 17 ())
(2027 *verify-later!* 2024 37 ())
(2028 verify-later! 2024 47 ())
(2029 set-verify-later! 2024 57 ())
(2030 note-name! 2024 67 ())
(2031 optimizer #f #f ())
(2032 set-optimizer! 2031 23 ())
(2033 get-optimizer 2031 33 ())
(2034 #f 2033 6 ())
(2035 #f 2034 10 ())
(2036 #f 2035 55 ())
(2037 apply-optimizers 2031 43 ())
(2038 #f 2037 6 ())
(2039 default-standard-optimizer 2031 63 ())
(2040 set-standard-optimizers! 2031 83 ())
(2041 get-optimizers 2031 93 ())
(2042 #f 2041 6 ())
(2043 make-standard-optimizer 2031 103 ())
(2044 #f 2043 22 ())
(2045 scan-package #f #f ())
(2046 collect-packages 2045 7 ())
(2047 recur 2046 26 ())
(2048 #f 2047 148 ())
(2049 package-source 2045 17 ())
(2050 #f 2049 46 ())
(2051 read-files 2045 27 ())
(2052 #f 2051 30 ())
(2053 package-optimizer-names 2045 37 ())
(2054 #f 2053 36 ())
(2055 #f 2053 74 ())
(2056 check-structure 2045 47 ())
(2057 #f 2056 17 ())
(2058 compile-packages #f #f ())
(2059 compile-package 2058 7 ())
(2060 expand-package 2058 17 ())
(2061 #f 2060 21 ())
(2062 #f 2061 10 ())
(2063 #f 2061 27 ())
(2064 #f 2061 80 ())
(2065 #f 2064 15 ())
(2066 define-usual-transform 2058 27 ())
(2067 define-primitives 2058 37 ())
(2068 #f 2067 17 ())
(2069 #f 2067 35 ())
(2070 make-define-primitive-node 2058 47 ())
(2071 module-system #f #f ())
(2072 analysis #f #f ())
(2073 #f 2072 11 ())
(2074 analyze-forms 2072 25 ())
(2075 #f 2074 17 ())
(2076 analyze-form 2072 35 ())
(2077 inlinable-rhs? 2072 45 ())
(2078 simple-lambda? 2072 55 ())
(2079 #f 2078 128 ())
(2080 simple? 2072 89 ())
(2081 simple-list? 2072 99 ())
(2082 #f 2072 113 ())
(2083 define-analyzer 2072 125 ())
(2084 #f 2072 139 ())
(2085 #f 2072 157 ())
(2086 #f 2072 175 ())
(2087 #f 2072 193 ())
(2088 #f 2072 211 ())
(2089 #f 2072 229 ())
(2090 #f 2072 247 ())
(2091 #f 2072 265 ())
(2092 #f 2072 283 ())
(2093 #f 2072 301 ())
(2094 #f 2072 319 ())
(2095 loop 2094 21 ())
(2096 #f 2072 337 ())
(2097 static-value 2072 351 ())
(2098 really-simple-call? 2072 361 ())
(2099 lexical-node? 2072 371 ())
(2100 simple-literal? 2072 399 ())
(2101 require 2072 409 ())
(2102 package-lookup-type 2072 427 ())
(2103 ensures-loaded #f #f ())
(2104 ensure-loaded 2103 7 ())
(2105 #f 2104 49 ())
(2106 #f 2105 56 ())
(2107 #f 2104 60 ())
(2108 #f #f #f ())
(2109 #f 2108 3 ())
(2110 get-location 2109 3 ())
(2111 #f 2109 9428 ())
(2112 #f 2109 9476 ())
(2113 #f 2109 9588 ())
(2114 #f 2109 9705 ())
(2115 #f 2109 9785 ())
(2116 conc 2115 42 ())
(2117 #f 2116 16 ())
(2118 #f 2109 11094 ())
(2119 loop 2118 115 ())
(2120 #f 2118 200 ())
(2121 #f 2118 230 ())
(2122 #f 2118 409 ())
(2123 #f 2118 466 ())
(2124 #f 2109 11481 ())
(2125 mem? 2124 197 ())
(2126 every? 2124 204 ())
(2127 #f 2124 215 ())
(2128 #f 2124 277 ())
(2129 #f 2109 11676 ())
(2130 loop##418 2129 66 ())
(2131 #f 2109 11724 ())
(2132 #f 2109 13465 ())
(2133 #f 2109 20557 ())
(2134 #f 2133 456 ())
(2135 #f 2109 21490 ())
(2136 loop 2135 95 ())
(2137 #f 2109 21646 ())
(2138 loop 2137 95 ())
(2139 #f 2109 21770 ())
(2140 loop 2139 95 ())
(2141 #f 2109 21862 ())
(2142 loop 2141 95 ())
(2143 #f 2109 21954 ())
(2144 loop 2143 95 ())
(2145 #f 2109 22046 ())
(2146 loop 2145 95 ())
(2147 #f 2109 22138 ())
(2148 loop 2147 95 ())
(2149 #f 2109 22230 ())
(2150 loop 2149 95 ())
(2151 #f 2109 22322 ())
(2152 loop 2151 95 ())
(2153 #f 2109 23017 ())
(2154 loop 2153 95 ())
(2155 #f 2109 25268 ())
(2156 #f 2109 25430 ())
(2157 #f 2109 25478 ())
(2158 #f 2109 25526 ())
(2159 #f 2109 25670 ())
(2160 #f 2109 25887 ())
(2161 #f 2109 28727 ())
(2162 #f 2109 28926 ())
(2163 #f 2109 28974 ())
(2164 #f 2109 29022 ())
(2165 #f 2164 146 ())
(2166 #f 2109 29070 ())
(2167 #f 2166 329 ())
(2168 #f 2166 402 ())
(2169 #f 2109 29448 ())
(2170 #f 2109 29496 ())
(2171 #f 2170 176 ())
(2172 parse-package-clauses 2109 29553 ())
(2173 loop 2172 76 ())
(2174 #f 2109 29560 ())
(2175 #f 2174 35 ())
(2176 #f 2175 146 ())
(2177 #f 2109 29815 ())
(2178 #f 2109 29863 ())
(2179 loop 2178 35 ())
(2180 #f 2109 29975 ())
(2181 #f 2109 30055 ())
(2182 #f 2109 30135 ())
(2183 loop 2182 51 ())
(2184 #f 2182 88 ())
(2185 #f 2182 111 ())
(2186 #f 2109 30215 ())
(2187 #f 2109 31471 ())
(2188 #f 2109 31606 ())
(2189 #f #f #f ())
-
