; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 record-types)
(17 export-the-record-type)
(18 define-record-types)
(19 methods)
(20 number-i/o)
(21 fluids)
(22 wind)
(23 session-data)
(24 i/o)
(25 channel-i/o)
(26 channel-ports)
(27 conditions)
(28 writing)
(29 reading)
(30 scheme-level-2)
(31 features)
(32 templates)
(33 continuations)
(34 more-types)
(35 enumerated)
(36 architecture)
(37 vm-data)
(38 exceptions)
(39 interrupts)
(40 threads)
(41 proposals)
(42 scheduler)
(43 root-scheduler)
(44 enum-case)
(45 queues)
(46 locks)
(47 condvars)
(48 usual-resumer)
(49 weak)
(50 display-conditions)
(51 meta-types)
(52 bindings)
(53 names)
(54 thingies)
(55 nodes)
(56 compiler-envs)
(57 syntactic)
(58 usual-macros)
(59 var-utilities)
(60 debug-data)
(61 segments)
(62 primops)
(63 reconstruction)
(64 compiler)
(65 frames)
(66 reading-forms)
(67 flat-environments)
(68 interfaces)
(69 packages)
(70 scan-package)
(71 optimizer)
(72 compile-packages)
(73 defpackage)
(74 types)
(75 module-system)
(76 usages)
(77 analysis)
(78 inline)
(79 strong)
(80 tables)
(81 filenames)
(82 environments)
(83 evaluation)
(84 ensures-loaded)
(85 for-reification)
(86 scheme)
(87 mini-command)
(88 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (flat-lambda . 14))
(14 (primitive-procedure . 14))
(15 (define . 14))
(16 (if . 14))
(17 (pure-letrec . 14))
(18 (letrec-syntax . 14))
(19 (%file-name% . 14))
(20 (let-syntax . 14))
(21 (structure-ref . 14))
(22 (loophole . 14))
(23 (letrec . 14))
(24 (lap . 14))
(25 (set! . 14))
(26 (call . 14))
(27 (atan . 14))
(28 (set-location-defined?! . 14))
(29 (acos . 14))
(30 (vm-extension . 14))
(31 (asin . 14))
(32 (location-defined? . 14))
(33 (time . 14))
(34 (template-set! . 14))
(35 (set-current-proposal! . 14))
(36 (cons . 14))
(37 (wait . 14))
(38 (trap . 14))
(39 (assq . 14))
(40 (current-proposal . 14))
(41 (make-weak-pointer . 14))
(42 (lookup-shared-binding . 14))
(43 (push . 14))
(44 (provisional-set-contents! . 14))
(45 (set-contents! . 14))
(46 (read-char . 14))
(47 (provisional-contents . 14))
(48 (make-cell . 14))
(49 (sqrt . 14))
(50 (* . 14))
(51 (contents . 14))
(52 (+ . 14))
(53 (peek-char . 14))
(54 (- . 14))
(55 (continuation-set! . 14))
(56 (/ . 14))
(57 (weak-pointer? . 14))
(58 (atan1 . 14))
(59 (atan2 . 14))
(60 (quotient . 14))
(61 (close-channel . 14))
(62 (channel-abort . 14))
(63 (char? . 14))
(64 (< . 14))
(65 (= . 14))
(66 (provisional-set-port-data! . 14))
(67 (cell? . 14))
(68 (> . 14))
(69 (make-location . 14))
(70 (imag-part . 14))
(71 (set-port-data! . 14))
(72 (make-template . 14))
(73 (real? . 14))
(74 (real-part . 14))
(75 (provisional-port-data . 14))
(76 (record-length . 14))
(77 (port-data . 14))
(78 (pair? . 14))
(79 (provisional-set-port-lock! . 14))
(80 (make-port . 14))
(81 (set-port-lock! . 14))
(82 (bit-count . 14))
(83 (provisional-checked-record-ref . 14))
(84 (return-from-exception . 14))
(85 (provisional-port-lock . 14))
(86 (location? . 14))
(87 (checked-record-ref . 14))
(88 (channel-maybe-read . 14))
(89 (add-finalizer! . 14))
(90 (rational? . 14))
(91 (template? . 14))
(92 (port-lock . 14))
(93 (vector-length . 14))
(94 (make-continuation . 14))
(95 (provisional-shared-binding-ref . 14))
(96 (string-length . 14))
(97 (shared-binding-ref . 14))
(98 (port? . 14))
(99 (angle . 14))
(100 (false . 14))
(101 (remainder . 14))
(102 (continuation? . 14))
(103 (channel-ready? . 14))
(104 (binary-reduce1 . 14))
(105 (binary-reduce2 . 14))
(106 (char<? . 14))
(107 (char=? . 14))
(108 (<= . 14))
(109 (magnitude . 14))
(110 (>= . 14))
(111 (with-continuation . 14))
(112 (floor . 14))
(113 (provisional-checked-record-set! . 14))
(114 (apply . 14))
(115 (memory-status . 14))
(116 (checked-record-set! . 14))
(117 (inexact->exact . 14))
(118 (exact->inexact . 14))
(119 (error . 14))
(120 (extended-number-length . 14))
(121 (open-channels-list . 14))
(122 (provisional-shared-binding-set! . 14))
(123 (channel-id . 14))
(124 (shared-binding-set! . 14))
(125 (numerator . 14))
(126 (eof-object . 14))
(127 (byte-vector-length . 14))
(128 (record-ref . 14))
(129 (make-polar . 14))
(130 (write-char . 14))
(131 (symbol->string . 14))
(132 (exact? . 14))
(133 (push-false . 14))
(134 (provisional-vector-ref . 14))
(135 (vector-ref . 14))
(136 (set-current-thread! . 14))
(137 (provisional-set-port-index! . 14))
(138 (immutable? . 14))
(139 (set-exception-handlers! . 14))
(140 (string-ref . 14))
(141 (set-port-index! . 14))
(142 (provisional-set-port-limit! . 14))
(143 (make-shared-binding . 14))
(144 (current-thread . 14))
(145 (provisional-port-index . 14))
(146 (channel-status . 14))
(147 (set-port-limit! . 14))
(148 (shared-binding-name . 14))
(149 (port-index . 14))
(150 (make-immutable! . 14))
(151 (byte-vector-logging-ref . 14))
(152 (set-enabled-interrupts! . 14))
(153 (provisional-port-limit . 14))
(154 (port-limit . 14))
(155 (ascii->char . 14))
(156 (char->ascii . 14))
(157 (undefine-shared-binding . 14))
(158 (attempt-copy-bytes! . 14))
(159 (record-set! . 14))
(160 (shared-binding? . 14))
(161 (eof-object? . 14))
(162 (set-interrupt-handlers! . 14))
(163 (record . 14))
(164 (schedule-interrupt . 14))
(165 (channel-maybe-write . 14))
(166 (provisional-vector-set! . 14))
(167 (extended-number-ref . 14))
(168 (vector-set! . 14))
(169 (copy-bytes! . 14))
(170 (string-set! . 14))
(171 (call-external-value . 14))
(172 (values . 14))
(173 (intern . 14))
(174 (vector . 14))
(175 (write-image-low . 14))
(176 (provisional-byte-vector-ref . 14))
(177 (byte-vector-logging-set! . 14))
(178 (byte-vector-ref . 14))
(179 (make-double . 14))
(180 (provisional-set-location-id! . 14))
(181 (make-record . 14))
(182 (set-location-id! . 14))
(183 (provisional-location-id . 14))
(184 (location-id . 14))
(185 (bitwise-and . 14))
(186 (eq? . 14))
(187 (double? . 14))
(188 (extended-number-set! . 14))
(189 (make-vector . 14))
(190 (record? . 14))
(191 (provisional-set-port-buffer! . 14))
(192 (make-string . 14))
(193 (set-port-buffer! . 14))
(194 (primitive-catch . 14))
(195 (string-hash . 14))
(196 (provisional-byte-vector-set! . 14))
(197 (template-length . 14))
(198 (provisional-port-buffer . 14))
(199 (number? . 14))
(200 (port-buffer . 14))
(201 (byte-vector-set! . 14))
(202 (bitwise-ior . 14))
(203 (provisional-set-car! . 14))
(204 (provisional-set-cdr! . 14))
(205 (set-car! . 14))
(206 (closure-env . 14))
(207 (vector? . 14))
(208 (bitwise-not . 14))
(209 (set-cdr! . 14))
(210 (provisional-car . 14))
(211 (symbol? . 14))
(212 (string? . 14))
(213 (provisional-cdr . 14))
(214 (car . 14))
(215 (bitwise-xor . 14))
(216 (cdr . 14))
(217 (find-all-records . 14))
(218 (continuation-length . 14))
(219 (log . 14))
(220 (message . 14))
(221 (tan . 14))
(222 (collect . 14))
(223 (cos . 14))
(224 (channel-os-index . 14))
(225 (provisional-set-port-status! . 14))
(226 (make-extended-number . 14))
(227 (set-port-status! . 14))
(228 (sin . 14))
(229 (exp . 14))
(230 (provisional-port-status . 14))
(231 (pop . 14))
(232 (port-status . 14))
(233 (return-from-callback . 14))
(234 (make-byte-vector . 14))
(235 (weak-pointer-ref . 14))
(236 (call-with-values . 14))
(237 (denominator . 14))
(238 (reverse-list->string . 14))
(239 (extended-number? . 14))
(240 (shared-binding-is-import? . 14))
(241 (provisional-cell-ref . 14))
(242 (find-all . 14))
(243 (cell-ref . 14))
(244 (byte-vector? . 14))
(245 (string=? . 14))
(246 (open-channel . 14))
(247 (channel? . 14))
(248 (unassigned-check . 14))
(249 (make-rectangular . 14))
(250 (set-session-data! . 14))
(251 (maybe-commit . 14))
(252 (template-ref . 14))
(253 (make-closure . 14))
(254 (session-data . 14))
(255 (integer? . 14))
(256 (signal-condition . 14))
(257 (provisional-set-port-pending-eof?! . 14))
(258 (port-handler . 14))
(259 (set-port-pending-eof?! . 14))
(260 (arithmetic-shift . 14))
(261 (provisional-port-pending-eof? . 14))
(262 (provisional-cell-set! . 14))
(263 (complex? . 14))
(264 (port-pending-eof? . 14))
(265 (cell-set! . 14))
(266 (binary-comparison-reduce2 . 14))
(267 (closure? . 14))
(268 (continuation-ref . 14))
(269 (closure-template . 14))
(270 (current-cont . 14))
(271 (char->integer . 14))
(272 (integer->char . 14))
(273 (ascii-limit . 14))
(274 (ascii-whitespaces . 14))
(275 (procedure? . 14))
(276 (invoke-closure . 14))
(277 (primitive-cwcc . 14))
(278 (make-undefined-location . 14))
(279 (location-assigned? . 14))
(280 (cell-unassigned? . 14))
(281 (vector-unassigned? . 14))
(282 (string-copy . 14))
(283 (string->symbol . 14))
(284 (input-port? . 14))
(285 (output-port? . 14))
(286 (record-type . 14))
(287 (make-code-vector . 14))
(288 (code-vector? . 14))
(289 (code-vector-length . 14))
(290 (code-vector-ref . 14))
(291 (code-vector-set! . 14))
(292 (lookup-imported-binding . 14))
(293 (lookup-exported-binding . 14))
(294 (define-imported-binding . 14))
(295 (define-exported-binding . 14))
(296 (undefine-imported-binding . 14))
(297 (undefine-exported-binding . 14))
(298 (byte-vector . 14))
(299 (secret-length . 14))
(300 (debug-message . 14))
(301 (write-image . 14))
(302 (vector-prefix->list . 14))
(303 (empty-log . 14))
(304 (make-proposal . 14))
(305 (make-condition . 14))
(306 (signal . 14))
(307 (warn . 14))
(308 (note . 14))
(309 (syntax-error . 14))
(310 (call-error . 14))
(311 (case . 15))
(312 (quasiquote . 15))
(313 (syntax-rules . 15))
(314 (not . 15))
(315 (boolean? . 15))
(316 (eqv? . 15))
(317 (equal? . 15))
(318 (max . 15))
(319 (min . 15))
(320 (max-or-min . 15))
(321 (abs . 15))
(322 (zero? . 15))
(323 (positive? . 15))
(324 (negative? . 15))
(325 (even? . 15))
(326 (odd? . 15))
(327 (caar . 15))
(328 (cadr . 15))
(329 (cdar . 15))
(330 (cddr . 15))
(331 (caaar . 15))
(332 (caadr . 15))
(333 (cadar . 15))
(334 (caddr . 15))
(335 (cdaar . 15))
(336 (cdadr . 15))
(337 (cddar . 15))
(338 (cdddr . 15))
(339 (caaaar . 15))
(340 (caaadr . 15))
(341 (caadar . 15))
(342 (caaddr . 15))
(343 (cadaar . 15))
(344 (cadadr . 15))
(345 (caddar . 15))
(346 (cadddr . 15))
(347 (cdaaar . 15))
(348 (cdaadr . 15))
(349 (cdadar . 15))
(350 (cdaddr . 15))
(351 (cddaar . 15))
(352 (cddadr . 15))
(353 (cdddar . 15))
(354 (cddddr . 15))
(355 (null? . 15))
(356 (list . 15))
(357 (length . 15))
(358 (real-length . 15))
(359 (append . 15))
(360 (reverse . 15))
(361 (append-reverse . 15))
(362 (list-tail . 15))
(363 (list-ref . 15))
(364 (mem . 15))
(365 (memq . 15))
(366 (memv . 15))
(367 (member . 15))
(368 (ass . 15))
(369 (assv . 15))
(370 (assoc . 15))
(371 (list? . 15))
(372 (char>? . 15))
(373 (char>=? . 15))
(374 (char<=? . 15))
(375 (char-whitespace? . 15))
(376 (char-lower-case? . 15))
(377 (char-upper-case? . 15))
(378 (char-numeric? . 15))
(379 (char-alphabetic? . 15))
(380 (char-case-delta . 15))
(381 (make-character-map . 15))
(382 (upcase-map . 15))
(383 (char-upcase . 15))
(384 (downcase-map . 15))
(385 (char-downcase . 15))
(386 (char-ci-compare . 15))
(387 (char-ci=? . 15))
(388 (char-ci<? . 15))
(389 (char-ci<=? . 15))
(390 (char-ci>? . 15))
(391 (char-ci>=? . 15))
(392 (string . 15))
(393 (substring . 15))
(394 (string-append . 15))
(395 (string->list . 15))
(396 (list->string . 15))
(397 (string-fill! . 15))
(398 (make-string=? . 15))
(399 (string-ci=? . 15))
(400 (make-string<? . 15))
(401 (string<? . 15))
(402 (string-ci<? . 15))
(403 (string>? . 15))
(404 (string<=? . 15))
(405 (string>=? . 15))
(406 (string-ci>? . 15))
(407 (string-ci<=? . 15))
(408 (string-ci>=? . 15))
(409 (vector->list . 15))
(410 (list->vector . 15))
(411 (vector-fill! . 15))
(412 (map . 15))
(413 (map1 . 15))
(414 (map2+ . 15))
(415 (for-each . 15))
(416 (for-each1 . 15))
(417 (for-each2+ . 15))
(418 (delay . 15))
(419 (make-promise . 15))
(420 (force . 15))
(421 (unspecific . 15))
(422 (reduce . 15))
(423 (filter . 15))
(424 (pos . 15))
(425 (posq . 15))
(426 (posv . 15))
(427 (position . 15))
(428 (any . 15))
(429 (every . 15))
(430 (sublist . 15))
(431 (last . 15))
(432 (insert . 15))
(433 (fold . 15))
(434 (fold->2 . 15))
(435 (fold->3 . 15))
(436 (mvlet . 15))
(437 (mvlet-helper . 15))
(438 (copy-vars . 15))
(439 (mvlet* . 15))
(440 (inexact? . 15))
(441 (modulo . 15))
(442 (ceiling . 15))
(443 (truncate . 15))
(444 (round . 15))
(445 (gcd . 15))
(446 (euclid . 15))
(447 (lcm . 15))
(448 (expt . 15))
(449 (raise-to-integer-power . 15))
(450 (rationalize . 15))
(451 (simplest-rational . 15))
(452 (*record-type-uid* . 16))
(453 (*record-type* . 16))
(454 (make-record-type . 16))
(455 (record-type? . 16))
(456 (record-type-resumer . 16))
(457 (set-record-type-resumer! . 16))
(458 (record-type-uid . 16))
(459 (record-type-name . 16))
(460 (record-type-field-names . 16))
(461 (record-type-number-of-fields . 16))
(462 (record-type-discloser . 16))
(463 (set-record-type-discloser! . 16))
(464 (record-type-fields . 16))
(465 (record-field-index . 16))
(466 (record-constructor . 16))
(467 (record-accessor . 16))
(468 (record-modifier . 16))
(469 (record-predicate . 16))
(470 (define-record-discloser . 16))
(471 (make-default-record-discloser . 16))
(472 (disclose-record . 16))
(473 (define-record-resumer . 16))
(474 (default-record-resumer . 16))
(475 (initialize-records! . 16))
(476 (resume-record . 16))
(477 (:record-type . 16))
(478 (define-record-type . 18))
(479 (define-synchronized-record-type . 18))
(480 (define-constructor . 18))
(481 (define-accessors . 18))
(482 (define-accessor . 18))
(483 (ref-proc . 18))
(484 (set-proc . 18))
(485 (:simple-type . 19))
(486 (really-make-simple-type . 19))
(487 (simple-type-id . 19))
(488 (simple-type-priority . 19))
(489 (simple-type-predicate . 19))
(490 (simple-type-superiors . 19))
(491 (simple-type? . 19))
(492 (make-simple-type . 19))
(493 (compute-priority . 19))
(494 (*increment* . 19))
(495 (%type-priority . 19))
(496 (%type-predicate . 19))
(497 (%same-type? . 19))
(498 (define-simple-type . 19))
(499 (:syntax . 19))
(500 (:values . 19))
(501 (value? . 19))
(502 (:value . 19))
(503 (:zero . 19))
(504 (:number . 19))
(505 (:complex . 19))
(506 (:real . 19))
(507 (:rational . 19))
(508 (:integer . 19))
(509 (:exact-integer . 19))
(510 (:boolean . 19))
(511 (:symbol . 19))
(512 (:char . 19))
(513 (:null . 19))
(514 (:pair . 19))
(515 (:vector . 19))
(516 (:string . 19))
(517 (:procedure . 19))
(518 (:input-port . 19))
(519 (:output-port . 19))
(520 (:eof-object . 19))
(521 (:record . 19))
(522 (record-type-priority . 19))
(523 (:method-info . 19))
(524 (really-make-method-info . 19))
(525 (method-info-proc . 19))
(526 (method-info-n-ary? . 19))
(527 (method-info-types . 19))
(528 (method-info? . 19))
(529 (make-method-info . 19))
(530 (empty-method-list . 19))
(531 (insert-method . 19))
(532 (same-applicability? . 19))
(533 (every2 . 19))
(534 (more-specific? . 19))
(535 (more-specific-type? . 19))
(536 (:method-table . 19))
(537 (really-make-method-table . 19))
(538 (method-table-id . 19))
(539 (method-table-set-perform! . 19))
(540 (method-table-get-perform . 19))
(541 (make-generic . 19))
(542 (method-table-prototype . 19))
(543 (method-table-methods . 19))
(544 (set-method-table-methods! . 19))
(545 (method-table? . 19))
(546 (make-method-table . 19))
(547 (make-cell-for-generic . 19))
(548 (add-to-method-table! . 19))
(549 (set-final-method! . 19))
(550 (apply-generic . 19))
(551 (define-generic . 19))
(552 (methods->perform . 19))
(553 (last-action . 19))
(554 (one-action . 19))
(555 (argument-sequence-predicate . 19))
(556 (check-for-next . 19))
(557 (check-next . 19))
(558 (method-info . 19))
(559 (method-internal . 19))
(560 (with-next-method . 19))
(561 (define-method . 19))
(562 (&add-method! . 19))
(563 (add-method! . 19))
(564 (&type-predicate . 19))
(565 (type-predicate . 19))
(566 (&type-priority . 19))
(567 (type-priority . 19))
(568 (&type-superiors . 19))
(569 (type-superiors . 19))
(570 (&same-type? . 19))
(571 (same-type? . 19))
(572 (:singleton . 19))
(573 (singleton . 19))
(574 (singleton-value . 19))
(575 (compare-to . 19))
(576 (&disclose . 19))
(577 (disclose . 19))
(578 (proc->discloser . 19))
(579 (&number->string . 20))
(580 (real-number->string . 20))
(581 (number->string . 20))
(582 (integer->string . 20))
(583 (string->number . 20))
(584 (&really-string->number . 20))
(585 (really-string->number . 20))
(586 (:integer-string . 20))
(587 (set-exactness . 20))
(588 (string->integer . 20))
(589 (:thread . 21))
(590 (make-thread . 21))
(591 (thread-proposal . 21))
(592 (thread-dynamic-point . 21))
(593 (thread-dynamic-env . 21))
(594 (get-dynamic-env . 21))
(595 (set-dynamic-env! . 21))
(596 (get-dynamic-point . 21))
(597 (set-dynamic-point! . 21))
(598 (initialize-dynamic-state! . 21))
(599 (with-dynamic-env . 21))
(600 (empty-dynamic-env . 21))
(601 (:fluid . 21))
(602 (make-fluid . 21))
(603 (fluid-top-level-value . 21))
(604 (set-fluid-top-level-value! . 21))
(605 (fluid . 21))
(606 (set-fluid! . 21))
(607 (let-fluid . 21))
(608 (let-fluids . 21))
(609 (fluid-cell-ref . 21))
(610 (fluid-cell-set! . 21))
(611 (define-enumeration . 35))
(612 (components . 35))
(613 (enum . 35))
(614 (enumerand->name . 35))
(615 (name->enumerand . 35))
(616 (lookup-enumerand . 35))
(617 (architecture-version . 36))
(618 (bits-used-per-byte . 36))
(619 (byte-limit . 36))
(620 (two-byte-limit . 36))
(621 (define-instruction-set . 36))
(622 (op . 36))
(623 (op-enumeration . 36))
(624 (op-count . 36))
(625 (opcode-arg-specs . 36))
(626 (interrupt . 36))
(627 (interrupt-enumeration . 36))
(628 (interrupt-count . 36))
(629 (exception . 36))
(630 (exception-enumeration . 36))
(631 (exception-count . 36))
(632 (current-port-marker . 36))
(633 (current-port-marker-enumeration . 36))
(634 (current-port-marker-count . 36))
(635 (maximum-stack-args . 36))
(636 (*last-protocol* . 36))
(637 (next-protocol . 36))
(638 (two-byte-nargs-protocol . 36))
(639 (two-byte-nargs+list-protocol . 36))
(640 (ignore-values-protocol . 36))
(641 (big-stack-protocol . 36))
(642 (args+nargs-protocol . 36))
(643 (nary-dispatch-protocol . 36))
(644 (call-with-values-protocol . 36))
(645 (bottom-of-stack-protocol . 36))
(646 (native-protocol-mask . 36))
(647 (maximum-external-call-args . 36))
(648 (default-stack-space . 36))
(649 (continuation-stack-size . 36))
(650 (available-stack-space . 36))
(651 (continuation-cells . 36))
(652 (continuation-pc-index . 36))
(653 (continuation-code-index . 36))
(654 (continuation-cont-index . 36))
(655 (exception-continuation-cells . 36))
(656 (exception-cont-size-index . 36))
(657 (exception-cont-pc-index . 36))
(658 (exception-cont-code-index . 36))
(659 (exception-cont-exception-index . 36))
(660 (exception-cont-instruction-size-index . 36))
(661 (time-option . 36))
(662 (time-option-enumeration . 36))
(663 (time-option-count . 36))
(664 (memory-status-option . 36))
(665 (memory-status-option-enumeration . 36))
(666 (memory-status-option-count . 36))
(667 (channel-status-option . 36))
(668 (channel-status-option-enumeration . 36))
(669 (channel-status-option-count . 36))
(670 (port-status-options . 36))
(671 (port-status-options-enumeration . 36))
(672 (port-status-options-count . 36))
(673 (stob . 36))
(674 (stob-enumeration . 36))
(675 (stob-count . 36))
(676 (least-b-vector-type . 36))
(677 (stob-data . 36))
(678 (call-atomically . 41))
(679 (call-atomically! . 41))
(680 (call-ensuring-atomicity . 41))
(681 (call-ensuring-atomicity! . 41))
(682 (atomically . 41))
(683 (atomically! . 41))
(684 (ensure-atomicity . 41))
(685 (ensure-atomicity! . 41))
(686 (with-new-proposal . 41))
(687 (remove-current-proposal! . 41))
(688 (invalidate-current-proposal! . 41))
(689 (j-random-pair . 41))
(690 (*session-data-initializers* . 23))
(691 (make-session-data-slot! . 23))
(692 (session-data-ref . 23))
(693 (session-data-set! . 23))
(694 (initialize-session-data! . 23))
(695 (*condition-types* . 27))
(696 (condition-supertypes . 27))
(697 (define-condition-type . 27))
(698 (condition-predicate . 27))
(699 (condition? . 27))
(700 (condition-type . 27))
(701 (condition-stuff . 27))
(702 (error? . 27))
(703 (call-error? . 27))
(704 (read-error? . 27))
(705 (exception? . 27))
(706 (exception-opcode . 27))
(707 (exception-reason . 27))
(708 (exception-arguments . 27))
(709 (make-exception . 27))
(710 (warning? . 27))
(711 (syntax-error? . 27))
(712 (note? . 27))
(713 (interrupt? . 27))
(714 (dynamic-wind . 22))
(715 (call-with-current-continuation . 22))
(716 (continuation->procedure . 22))
(717 (:point . 22))
(718 (make-point . 22))
(719 (point-parent . 22))
(720 (point-dynamic-env . 22))
(721 (point-out . 22))
(722 (point-in . 22))
(723 (point-depth . 22))
(724 (travel-to-point! . 22))
(725 (template-overhead . 32))
(726 (template-code . 32))
(727 (template-info . 32))
(728 (template-package-id . 32))
(729 (set-template-code! . 32))
(730 (set-template-info! . 32))
(731 (set-template-package-id! . 32))
(732 (:closure . 34))
(733 (:code-vector . 34))
(734 (:location . 34))
(735 (:cell . 34))
(736 (:template . 34))
(737 (:channel . 34))
(738 (:port . 34))
(739 (:double . 34))
(740 (:weak-pointer . 34))
(741 (:shared-binding . 34))
(742 (make-ref . 33))
(743 (continuation-cont . 33))
(744 (real-continuation-code . 33))
(745 (real-continuation-pc . 33))
(746 (exception-cont-pc . 33))
(747 (exception-cont-code . 33))
(748 (exception-continuation-exception . 33))
(749 (exception-continuation? . 33))
(750 (call-with-values-continuation? . 33))
(751 (continuation-pc . 33))
(752 (continuation-code . 33))
(753 (continuation-template . 33))
(754 (continuation-arg . 33))
(755 (continuation-arg-count . 33))
(756 (:continuation . 33))
(757 (define-exception-handler . 38))
(758 (signal-exception . 38))
(759 (exception-handlers . 38))
(760 (extend-opcode! . 38))
(761 (really-signal-condition . 38))
(762 (with-handler . 38))
(763 ($condition-handlers . 38))
(764 (initialize-exceptions! . 38))
(765 (last-resort-condition-handler . 38))
(766 (report-utter-lossage . 38))
(767 (continuation-preview . 38))
(768 (ignore-errors . 38))
(769 (report-errors-as-warnings . 38))
(770 (:port-handler . 24))
(771 (make-port-handler . 24))
(772 (port-handler-force . 24))
(773 (port-handler-ready? . 24))
(774 (port-handler-block . 24))
(775 (port-handler-char . 24))
(776 (port-handler-close . 24))
(777 (port-handler-discloser . 24))
(778 (port-handler? . 24))
(779 (disclose-port . 24))
(780 (initialize-i/o-handlers! . 24))
(781 (one-arg-proc->handler . 24))
(782 (two-arg-proc->handler . 24))
(783 (real-char-ready? . 24))
(784 (read-block . 24))
(785 (write-block . 24))
(786 (write-string . 24))
(787 (output-port-ready? . 24))
(788 (force-output . 24))
(789 (force-output-if-open . 24))
(790 (close-input-port . 24))
(791 (close-output-port . 24))
(792 (okay-limits? . 24))
(793 (open-port? . 24))
(794 (open-port-mask . 24))
(795 (input-port-mask . 24))
(796 (open-input-port-mask . 24))
(797 (open-input-port-status . 24))
(798 (open-input-port? . 24))
(799 (make-input-port-closed! . 24))
(800 (make-unbuffered-input-port . 24))
(801 (output-port-mask . 24))
(802 (open-output-port-mask . 24))
(803 (open-output-port-status . 24))
(804 (open-output-port? . 24))
(805 (make-output-port-closed! . 24))
(806 (make-unbuffered-output-port . 24))
(807 (null-output-port-handler . 24))
(808 (null-output-buffer . 24))
(809 (make-null-output-port . 24))
(810 (make-buffered-input-port . 24))
(811 (make-buffered-output-port . 24))
(812 (okay-buffer? . 24))
(813 (make-buffered-input-port-handler . 24))
(814 (note-buffer-reuse! . 24))
(815 (check-buffer-timestamp! . 24))
(816 (port-flushed? . 24))
(817 (set-port-flushed?! . 24))
(818 (make-one-char-input . 24))
(819 (make-char-ready? . 24))
(820 (make-read-block . 24))
(821 (get-available-bytes! . 24))
(822 (buffer-length . 24))
(823 (make-buffered-output-port-handler . 24))
(824 (make-closer . 24))
(825 (make-one-char-output . 24))
(826 (make-write-block . 24))
(827 (copy-bytes-out! . 24))
(828 (make-forcer . 24))
(829 (default-buffer-size . 24))
(830 (flush-these-ports . 24))
(831 (periodically-force-output! . 24))
(832 (output-port-forcers . 24))
(833 (periodically-flushed-ports . 24))
(834 (make-forcing-thunk . 24))
(835 ($current-input-port . 24))
(836 ($current-output-port . 24))
(837 ($current-error-port . 24))
(838 ($current-noise-port . 24))
(839 (current-input-port . 24))
(840 (current-output-port . 24))
(841 (current-error-port . 24))
(842 (current-noise-port . 24))
(843 (initialize-i/o . 24))
(844 (with-current-ports . 24))
(845 (call-with-current-input-port . 24))
(846 (call-with-current-output-port . 24))
(847 (call-with-current-noise-port . 24))
(848 (silently . 24))
(849 (newline . 24))
(850 (char-ready? . 24))
(851 (output-port-option . 24))
(852 (input-port-option . 24))
(853 (write . 28))
(854 (recurring-write . 28))
(855 (write-boolean . 28))
(856 (write-number . 28))
(857 (write-char-literal . 28))
(858 (character-name . 28))
(859 (write-string-literal . 28))
(860 (write-list . 28))
(861 (quotation? . 28))
(862 (write-vector . 28))
(863 (write-other . 28))
(864 (display-type-name . 28))
(865 (display . 28))
(866 (read . 29))
(867 (sub-read-carefully . 29))
(868 (reader-token-marker . 29))
(869 (make-reader-token . 29))
(870 (reader-token? . 29))
(871 (close-paren . 29))
(872 (dot . 29))
(873 (sub-read . 29))
(874 (read-dispatch-vector . 29))
(875 (read-terminating?-vector . 29))
(876 (set-standard-syntax! . 29))
(877 (set-standard-read-macro! . 29))
(878 (sub-read-list . 29))
(879 (gobble-line . 29))
(880 (*sharp-macros* . 29))
(881 (define-sharp-macro . 29))
(882 (proper-list? . 29))
(883 (sub-read-token . 29))
(884 (parse-token . 29))
(885 (strange-symbol-names . 29))
(886 (p-c-v . 29))
(887 (preferred-case . 29))
(888 (reading-error . 29))
(889 (:queue . 45))
(890 (really-make-queue . 45))
(891 (queue? . 45))
(892 (queue-tail . 45))
(893 (set-queue-tail! . 45))
(894 (queue-head . 45))
(895 (set-queue-head! . 45))
(896 (queue-uid . 45))
(897 (next-uid . 45))
(898 (make-queue . 45))
(899 (queue-empty? . 45))
(900 (enqueue! . 45))
(901 (queue-front . 45))
(902 (dequeue! . 45))
(903 (empty-queue! . 45))
(904 (on-queue? . 45))
(905 (delete-from-queue! . 45))
(906 (delete-from-queue-if! . 45))
(907 (queue->list . 45))
(908 (list->queue . 45))
(909 (queue-length . 45))
(910 (initialize-interrupts! . 39))
(911 (interrupt-handlers . 39))
(912 (set-interrupt-handler! . 39))
(913 (no-interrupts . 39))
(914 (all-interrupts . 39))
(915 (with-interrupts-inhibited . 39))
(916 (with-interrupts-allowed . 39))
(917 (disable-interrupts! . 39))
(918 (enable-interrupts! . 39))
(919 (with-interrupts . 39))
(920 (enabled-interrupts . 39))
(921 (*post-gc-procedures* . 39))
(922 (call-after-gc! . 39))
(923 (post-gc-handler . 39))
(924 (required-post-gc-space . 39))
(925 (space-shortage-handler . 39))
(926 (call-before-heap-overflow! . 39))
(927 (:thread . 40))
(928 (really-make-thread . 40))
(929 (thread-name . 40))
(930 (thread-uid . 40))
(931 (thread-queue . 40))
(932 (set-thread-queue! . 40))
(933 (thread-data . 40))
(934 (set-thread-data! . 40))
(935 (thread-events . 40))
(936 (set-thread-events! . 40))
(937 (thread-current-task . 40))
(938 (set-thread-current-task! . 40))
(939 (thread-scheduler . 40))
(940 (set-thread-scheduler! . 40))
(941 (thread-arguments . 40))
(942 (set-thread-arguments! . 40))
(943 (thread-continuation . 40))
(944 (set-thread-continuation! . 40))
(945 (thread-time . 40))
(946 (set-thread-time! . 40))
(947 (thread-proposal . 40))
(948 (thread-dynamic-point . 40))
(949 (set-thread-dynamic-point! . 40))
(950 (thread-dynamic-env . 40))
(951 (thread? . 40))
(952 (*thread-uid* . 40))
(953 (make-thread . 40))
(954 (thread-top-level . 40))
(955 (thread-uid->thread . 40))
(956 (all-threads . 40))
(957 (add-event! . 40))
(958 (next-event! . 40))
(959 (thunk->continuation . 40))
(960 (compose-continuation . 40))
(961 (make-thread-queue . 40))
(962 (thread-queue-empty? . 40))
(963 (enqueue-thread! . 40))
(964 (dequeue-thread! . 40))
(965 (remove-thread-from-queue! . 40))
(966 (event-type . 40))
(967 (event-type-enumeration . 40))
(968 (event-type-count . 40))
(969 (run . 40))
(970 (find-and-run-next-thread . 40))
(971 (debit-thread-times-and-run! . 40))
(972 (handle-timer-interrupt . 40))
(973 (run-next-thread . 40))
(974 (min . 40))
(975 (switch-to-thread . 40))
(976 (run-thread . 40))
(977 (suspend . 40))
(978 (suspend-to . 40))
(979 (debit-down! . 40))
(980 (exit . 40))
(981 (wait . 40))
(982 (waiting? . 40))
(983 (relinquish-timeslice . 40))
(984 (block . 40))
(985 (maybe-commit-and-block . 40))
(986 (upcall . 40))
(987 (propogate-upcall . 40))
(988 (kill-thread! . 40))
(989 (interrupt-thread . 40))
(990 (get-next-event! . 40))
(991 (event-pending? . 40))
(992 (schedule-event . 40))
(993 (maybe-suspend . 40))
(994 (really-schedule-event . 40))
(995 (schedule-wakeup . 40))
(996 (show-running . 40))
(997 (running? . 40))
(998 (spawn . 40))
(999 (spawn-on-root . 40))
(1000 (spawn-on-scheduler . 40))
(1001 (make-ready . 40))
(1002 (maybe-commit-and-make-ready . 40))
(1003 (make-threads-ready . 40))
(1004 (schedule-interrupt! . 40))
(1005 (cancel-timer-interrupt! . 40))
(1006 (interrupt-timer-time . 40))
(1007 (real-time . 40))
(1008 (with-threads . 40))
(1009 (start-multitasking . 40))
(1010 (deadlock? . 40))
(1011 (terminate? . 40))
(1012 (terminate-current-thread . 40))
(1013 (root-scheduler-slot . 40))
(1014 (root-scheduler . 40))
(1015 (max2 . 40))
(1016 (sleep . 40))
(1017 (coerce-to-nonnegative-integer . 40))
(1018 (dozers . 40))
(1019 (insert . 40))
(1020 (wake-some-threads . 40))
(1021 (:condvar . 47))
(1022 (really-make-condvar . 47))
(1023 (condvar? . 47))
(1024 (condvar-id . 47))
(1025 (condvar-value . 47))
(1026 (set-condvar-value! . 47))
(1027 (condvar-has-value? . 47))
(1028 (set-condvar-has-value?! . 47))
(1029 (condvar-queue . 47))
(1030 (make-condvar . 47))
(1031 (maybe-commit-and-wait-for-condvar . 47))
(1032 (maybe-commit-and-set-condvar! . 47))
(1033 (condvar-has-waiters? . 47))
(1034 (channel-maybe-commit-and-do-it . 25))
(1035 (channel-maybe-commit-and-read . 25))
(1036 (channel-maybe-commit-and-write . 25))
(1037 (note-channel-result! . 25))
(1038 (channel-write . 25))
(1039 (channel-maybe-commit-and-close . 25))
(1040 (input-channel? . 25))
(1041 (initialize-channel-i/o! . 25))
(1042 (i/o-completion-handler . 25))
(1043 (waiting-for-i/o? . 25))
(1044 (channel-wait-condvars-slot . 25))
(1045 (channel-condvars . 25))
(1046 (set-channel-condvars! . 25))
(1047 (add-channel-condvar! . 25))
(1048 (wait-for-channel . 25))
(1049 (fetch-channel-condvar! . 25))
(1050 (abort-unwanted-i/o! . 25))
(1051 (:channel-cell . 26))
(1052 (really-make-channel-cell . 26))
(1053 (channel-cell? . 26))
(1054 (channel-cell-sent . 26))
(1055 (set-channel-cell-sent! . 26))
(1056 (channel-cell-in-use? . 26))
(1057 (set-channel-cell-in-use?! . 26))
(1058 (channel-cell-condvar . 26))
(1059 (channel-cell-closer . 26))
(1060 (channel-cell-ref . 26))
(1061 (make-channel-cell . 26))
(1062 (port->channel . 26))
(1063 (port-channel-closer . 26))
(1064 (fill-buffer! . 26))
(1065 (channel-port-ready? . 26))
(1066 (input-channel-handler . 26))
(1067 (input-channel->port . 26))
(1068 (input-channel+closer->port . 26))
(1069 (real-input-channel->port . 26))
(1070 (empty-buffer! . 26))
(1071 (send-some . 26))
(1072 (output-channel-handler . 26))
(1073 (output-channel->port . 26))
(1074 (output-channel+closer->port . 26))
(1075 (real-output-channel->port . 26))
(1076 (maybe-open-file . 26))
(1077 (open-input-file . 26))
(1078 (open-output-file . 26))
(1079 (call-with-input-file . 26))
(1080 (call-with-output-file . 26))
(1081 (with-input-from-file . 26))
(1082 (with-output-to-file . 26))
(1083 (force-channel-output-ports! . 26))
(1084 (one-char-handler . 26))
(1085 (write-block-handler . 26))
(1086 (unbuffered-output-handler . 26))
(1087 (:table . 80))
(1088 (really-make-table . 80))
(1089 (table-set!-procedure . 80))
(1090 (set-table-set!-procedure! . 80))
(1091 (table-ref-procedure . 80))
(1092 (set-table-ref-procedure! . 80))
(1093 (table-data . 80))
(1094 (set-table-data! . 80))
(1095 (table-size . 80))
(1096 (set-table-size! . 80))
(1097 (table? . 80))
(1098 (table-ref . 80))
(1099 (table-set! . 80))
(1100 (linear-table-size-limit . 80))
(1101 (next-table-size . 80))
(1102 (make-table-maker . 80))
(1103 (assoc->table-maker . 80))
(1104 (null-entry . 80))
(1105 (new-entry . 80))
(1106 (entry-value . 80))
(1107 (entry-key . 80))
(1108 (set-entry-value! . 80))
(1109 (delete-entry! . 80))
(1110 (make-assoc . 80))
(1111 (make-linear-table-ref . 80))
(1112 (make-linear-table-set! . 80))
(1113 (make->hash-table . 80))
(1114 (make-hash-table-ref . 80))
(1115 (make-hash-table-set! . 80))
(1116 (expand-hash-table! . 80))
(1117 (table-enter-alist! . 80))
(1118 (table-expand-table! . 80))
(1119 (table-walk . 80))
(1120 (really-table-walk . 80))
(1121 (alist-walk . 80))
(1122 (make-table-immutable! . 80))
(1123 (table->entry-list . 80))
(1124 (default-table-hash-function . 80))
(1125 (eqv?-assoc . 80))
(1126 (default-table-assoc . 80))
(1127 (symbol-hash . 80))
(1128 (make-table . 80))
(1129 (make-string-table . 80))
(1130 (make-symbol-table . 80))
(1131 (make-integer-table . 80))
(1132 (make-population . 49))
(1133 (add-to-population! . 49))
(1134 (weak-memq . 49))
(1135 (population-reduce . 49))
(1136 (population->list . 49))
(1137 (walk-population . 49))
(1138 (:meta-type . 51))
(1139 (really-make-type . 51))
(1140 (type-info . 51))
(1141 (type-more . 51))
(1142 (type-mask . 51))
(1143 (meta-type? . 51))
(1144 (make-type . 51))
(1145 (name->type-table . 51))
(1146 (mask->name-table . 51))
(1147 (name->type . 51))
(1148 (set-type-name! . 51))
(1149 (*mask* . 51))
(1150 (new-type-bit . 51))
(1151 (mask->type . 51))
(1152 (bottom-type . 51))
(1153 (error-type . 51))
(1154 (bottom-type? . 51))
(1155 (new-atomic-type . 51))
(1156 (named-atomic-type . 51))
(1157 (syntax-type . 51))
(1158 (other-static-type . 51))
(1159 (empty-rail-type . 51))
(1160 (rail-type . 51))
(1161 (make-optional-type . 51))
(1162 (make-rest-type . 51))
(1163 (head-type . 51))
(1164 (head-type-really . 51))
(1165 (tail-type . 51))
(1166 (empty-rail-type? . 51))
(1167 (rest-type? . 51))
(1168 (optional-type? . 51))
(1169 (mask/no-values . 51))
(1170 (mask/two-or-more . 51))
(1171 (mask/&rest . 51))
(1172 (value-type . 51))
(1173 (mask/value . 51))
(1174 (value-type? . 51))
(1175 (any-values-type . 51))
(1176 (any-arguments-type . 51))
(1177 (mask/one-or-more . 51))
(1178 (same-type? . 51))
(1179 (subtype? . 51))
(1180 (meet-type . 51))
(1181 (other-type-info . 51))
(1182 (meet-rail . 51))
(1183 (meet-procedure . 51))
(1184 (meet? . 51))
(1185 (meet-procedure? . 51))
(1186 (join-type . 51))
(1187 (join-rail . 51))
(1188 (join-procedure . 51))
(1189 (number-hierarchy . 51))
(1190 (integer-type . 51))
(1191 (rational-type . 51))
(1192 (real-type . 51))
(1193 (complex-type . 51))
(1194 (number-type . 51))
(1195 (exact-type . 51))
(1196 (inexact-type . 51))
(1197 (exact-integer-type . 51))
(1198 (inexact-real-type . 51))
(1199 (boolean-type . 51))
(1200 (pair-type . 51))
(1201 (null-type . 51))
(1202 (record-type . 51))
(1203 (any-procedure-type . 51))
(1204 (other-value-type . 51))
(1205 (mask/other . 51))
(1206 (make-other-type . 51))
(1207 (char-type . 51))
(1208 (unspecific-type . 51))
(1209 (string-type . 51))
(1210 (symbol-type . 51))
(1211 (vector-type . 51))
(1212 (escape-type . 51))
(1213 (structure-type . 51))
(1214 (mask/procedure . 51))
(1215 (procedure-type . 51))
(1216 (make-procedure-type . 51))
(1217 (procedure-type-domain . 51))
(1218 (procedure-type-codomain . 51))
(1219 (restrictive? . 51))
(1220 (sexp->type . 51))
(1221 (sexp->values-type . 51))
(1222 (type->sexp . 51))
(1223 (atomic-type->sexp . 51))
(1224 (rail-type->sexp . 51))
(1225 (disjoin-type . 51))
(1226 (disjoin-rest . 51))
(1227 (mask/number . 51))
(1228 (make-some-values-type . 51))
(1229 (proc . 51))
(1230 (some-values . 51))
(1231 (procedure-type? . 51))
(1232 (fixed-arity-procedure-type? . 51))
(1233 (procedure-type-arity . 51))
(1234 (procedure-type-argument-types . 51))
(1235 (variable-type . 51))
(1236 (variable-type? . 51))
(1237 (variable-value-type . 51))
(1238 (usual-variable-type . 51))
(1239 (undeclared-type . 51))
(1240 (compatible-types? . 51))
(1241 (:interface . 68))
(1242 (really-make-interface . 68))
(1243 (interface-name . 68))
(1244 (set-interface-name! . 68))
(1245 (interface-clients . 68))
(1246 (walk-method . 68))
(1247 (ref-method . 68))
(1248 (interface? . 68))
(1249 (make-interface . 68))
(1250 (interface-ref . 68))
(1251 (interface-member? . 68))
(1252 (for-each-declaration . 68))
(1253 (note-reference-to-interface! . 68))
(1254 (note-interface-name! . 68))
(1255 (make-simple-interface . 68))
(1256 (make-simple-interface-table . 68))
(1257 (make-compound-interface . 68))
(1258 (make-modified-interface . 68))
(1259 (process-commands . 68))
(1260 (okay-command? . 68))
(1261 (proper-list? . 68))
(1262 (process-prefix . 68))
(1263 (process-expose . 68))
(1264 (process-hide . 68))
(1265 (process-alias . 68))
(1266 (process-rename . 68))
(1267 (interface-lookup . 68))
(1268 (make-lookup . 68))
(1269 (prefix-match? . 68))
(1270 (remove-prefix . 68))
(1271 (make-default-walker . 68))
(1272 (cdr-assq . 68))
(1273 (make-alist-walker . 68))
(1274 (symbol-append . 68))
(1275 (binding? . 52))
(1276 (binding-type . 52))
(1277 (binding-place . 52))
(1278 (binding-static . 52))
(1279 (binding-path . 52))
(1280 (set-binding-place! . 52))
(1281 (make-binding . 52))
(1282 (add-path . 52))
(1283 (clobber-binding! . 52))
(1284 (impose-type . 52))
(1285 (forget-integration . 52))
(1286 (same-denotation? . 52))
(1287 (maybe-fix-place! . 52))
(1288 (follow-forwarding-pointers . 52))
(1289 (name? . 53))
(1290 (:generated . 53))
(1291 (make-generated . 53))
(1292 (generated-parent-name . 53))
(1293 (generated-env . 53))
(1294 (generated-token . 53))
(1295 (generated-name . 53))
(1296 (generated? . 53))
(1297 (generate-name . 53))
(1298 (generated-uid . 53))
(1299 (*generated-uid* . 53))
(1300 (name->symbol . 53))
(1301 (name-hash . 53))
(1302 (make-name-table . 53))
(1303 (desyntaxify . 53))
(1304 (make-qualified . 53))
(1305 (qualified? . 53))
(1306 (qualified-parent-name . 53))
(1307 (qualified-symbol . 53))
(1308 (qualified-uid . 53))
(1309 (name->qualified . 53))
(1310 (qualify-parent . 53))
(1311 (:transform . 53))
(1312 (really-make-transform . 53))
(1313 (transform-id . 53))
(1314 (transform-source . 53))
(1315 (transform-aux-names . 53))
(1316 (transform-type . 53))
(1317 (transform-env . 53))
(1318 (transform-procedure . 53))
(1319 (transform? . 53))
(1320 (make-transform . 53))
(1321 (maybe-apply-macro-transform . 53))
(1322 (apply-inline-transform . 53))
(1323 (make-keyword-comparator . 53))
(1324 (name->source-name . 53))
(1325 (bind-aliases . 53))
(1326 (make-name-generator . 53))
(1327 (lookup . 53))
(1328 (lookup . 56))
(1329 (bind1 . 56))
(1330 (bind . 56))
(1331 (bindrec . 56))
(1332 (make-compiler-env . 56))
(1333 (funny-name/macro-eval . 56))
(1334 (environment-macro-eval . 56))
(1335 (funny-name/define! . 56))
(1336 (environment-define! . 56))
(1337 (funny-name/package . 56))
(1338 (extract-package-from-environment . 56))
(1339 (funny-name/source-file-name . 56))
(1340 (bind-source-file-name . 56))
(1341 (source-file-name . 56))
(1342 (:thingie . 54))
(1343 (make-thingie . 54))
(1344 (thingie-want-type . 54))
(1345 (thingie-name . 54))
(1346 (thingie-binding . 54))
(1347 (thingie? . 54))
(1348 (:structure . 69))
(1349 (really-make-structure . 69))
(1350 (structure-name . 69))
(1351 (set-structure-name! . 69))
(1352 (structure-clients . 69))
(1353 (structure-package . 69))
(1354 (structure-interface-really . 69))
(1355 (set-structure-interface! . 69))
(1356 (structure-interface-thunk . 69))
(1357 (structure? . 69))
(1358 (structure-interface . 69))
(1359 (initialize-structure! . 69))
(1360 (make-structure . 69))
(1361 (make-modified-structure . 69))
(1362 (note-structure-name! . 69))
(1363 (structure-unstable? . 69))
(1364 (for-each-export . 69))
(1365 (:package . 69))
(1366 (really-make-package . 69))
(1367 (package-cached . 69))
(1368 (package-clients . 69))
(1369 (package-real-undefined-but-assigneds . 69))
(1370 (set-package-undefined-but-assigneds! . 69))
(1371 (package-real-undefineds . 69))
(1372 (set-package-undefineds! . 69))
(1373 (package-accesses-thunk . 69))
(1374 (package-opens-thunk . 69))
(1375 (set-package-opens-thunk! . 69))
(1376 (package->environment . 69))
(1377 (set-package->environment! . 69))
(1378 (package-loaded? . 69))
(1379 (set-package-loaded?! . 69))
(1380 (package-clauses . 69))
(1381 (package-file-name . 69))
(1382 (package-get-location . 69))
(1383 (set-package-get-location! . 69))
(1384 (package-integrate? . 69))
(1385 (set-package-integrate?! . 69))
(1386 (package-unstable? . 69))
(1387 (package-definitions . 69))
(1388 (package-opens-really . 69))
(1389 (set-package-opens! . 69))
(1390 (package-uid . 69))
(1391 (package? . 69))
(1392 (make-package . 69))
(1393 (really-package->environment . 69))
(1394 (lazy-table-accessor . 69))
(1395 (package-undefineds . 69))
(1396 (package-undefined-but-assigneds . 69))
(1397 (new-package-uid . 69))
(1398 (*package-uid* . 69))
(1399 (package-name-table . 69))
(1400 (package-name . 69))
(1401 (note-package-name! . 69))
(1402 (package-opens . 69))
(1403 (initialize-package-if-necessary! . 69))
(1404 (package-accesses . 69))
(1405 (make-simple-package . 69))
(1406 (package-definition . 69))
(1407 (package-define! . 69))
(1408 (package-add-static! . 69))
(1409 (package-refine-type! . 69))
(1410 (package-lookup . 69))
(1411 (really-package-lookup . 69))
(1412 (search-opens . 69))
(1413 (structure-lookup . 69))
(1414 (real-structure-lookup . 69))
(1415 (generic-lookup . 69))
(1416 (initialize-package! . 69))
(1417 (for-each-definition . 69))
(1418 (get-new-location . 69))
(1419 (make-new-location . 69))
(1420 ($get-location . 69))
(1421 (*location-uid* . 69))
(1422 (location-info-table . 69))
(1423 (flush-location-names . 69))
(1424 (link! . 69))
(1425 (really-link! . 69))
(1426 (get-location . 69))
(1427 (location-on-demand . 69))
(1428 (get-undefined . 69))
(1429 (location-for-assignment . 69))
(1430 (package-note-caching! . 69))
(1431 (note-caching! . 69))
(1432 (get-location-for-unassignable . 69))
(1433 (get-location-for-undefined . 69))
(1434 ($note-undefined . 69))
(1435 (cenv->package . 69))
(1436 (location-for-reference . 69))
(1437 (noting-undefined-variables . 69))
(1438 (print-undefined-names . 69))
(1439 (environment-ref . 82))
(1440 (environment-set! . 82))
(1441 (environment-define! . 82))
(1442 (*structure-ref . 82))
(1443 (carefully . 82))
(1444 ($interaction-environment . 82))
(1445 (interaction-environment . 82))
(1446 (set-interaction-environment! . 82))
(1447 (with-interaction-environment . 82))
(1448 (scheme-report-environment . 82))
(1449 (*scheme-report-environment* . 82))
(1450 (*null-environment* . 82))
(1451 (*scheme-report-number* . 82))
(1452 (set-scheme-report-environment! . 82))
(1453 (null-environment . 82))
(1454 (make-reflective-tower . 82))
(1455 (set-reflective-tower-maker! . 82))
(1456 (namestring . 81))
(1457 (directory-component-separator . 81))
(1458 (type-component-separator . 81))
(1459 (namestring-component . 81))
(1460 (file-name-preferred-case . 81))
(1461 (*scheme-file-type* . 81))
(1462 (*load-file-type* . 81))
(1463 (file-name-directory . 81))
(1464 (file-name-nondirectory . 81))
(1465 (file-nondirectory-position . 81))
(1466 (string-posq . 81))
(1467 (*translations* . 81))
(1468 (translations . 81))
(1469 (set-translation! . 81))
(1470 (translate . 81))
(1471 ($note-file-package . 66))
(1472 (read-forms . 66))
(1473 (really-read-forms . 66))
(1474 (:operator . 55))
(1475 (make-operator . 55))
(1476 (operator-name . 55))
(1477 (operator-uid . 55))
(1478 (operator-nargs . 55))
(1479 (operator-type . 55))
(1480 (set-operator-type! . 55))
(1481 (operator? . 55))
(1482 (usual-operator-type . 55))
(1483 (get-operator . 55))
(1484 (*operator-uid* . 55))
(1485 (operators-table . 55))
(1486 (number-of-operators . 55))
(1487 (the-operators . 55))
(1488 (make-operator-table . 55))
(1489 (operator-table-ref . 55))
(1490 (operator-lookup . 55))
(1491 (operator-define! . 55))
(1492 (:node . 55))
(1493 (really-make-node . 55))
(1494 (node-plist . 55))
(1495 (set-node-plist! . 55))
(1496 (node-form . 55))
(1497 (node-operator-id . 55))
(1498 (node? . 55))
(1499 (make-node . 55))
(1500 (node-ref . 55))
(1501 (node-set! . 55))
(1502 (node-operator . 55))
(1503 (node-predicate . 55))
(1504 (make-similar-node . 55))
(1505 (force-node . 55))
(1506 (schemify . 55))
(1507 (schemifiers . 55))
(1508 (schemify-node . 55))
(1509 (schemify-nodes . 55))
(1510 (define-schemifier . 55))
(1511 (schemify-lambda . 55))
(1512 (schemify-formals . 55))
(1513 (schemify-letrec . 55))
(1514 (schemify-sexp . 55))
(1515 (number-of-required-args . 59))
(1516 (n-ary? . 59))
(1517 (normalize-formals . 59))
(1518 (scan-forms . 57))
(1519 (expand-scanned-form . 57))
(1520 (scan-define . 57))
(1521 (expand-define . 57))
(1522 (scan-define-syntax . 57))
(1523 (expand-form . 57))
(1524 (expand-head . 57))
(1525 (destructure-define . 57))
(1526 (make-operator-predicate . 57))
(1527 (define? . 57))
(1528 (begin? . 57))
(1529 (define-syntax? . 57))
(1530 (static-value . 57))
(1531 (expand-body . 57))
(1532 (scan-body-forms . 57))
(1533 (body-lossage . 57))
(1534 (expand . 57))
(1535 (expand-list . 57))
(1536 (expand-literal . 57))
(1537 (expand-call . 57))
(1538 (expand-name . 57))
(1539 (expand-macro-application . 57))
(1540 (expand-operator-form . 57))
(1541 (expanders . 57))
(1542 (define-expander . 57))
(1543 (unspecific-node . 57))
(1544 (expand-structure-ref . 57))
(1545 (expand-lambda . 57))
(1546 (bind-names . 57))
(1547 (names? . 57))
(1548 (expand-letrec . 57))
(1549 (process-syntax . 57))
(1550 (this-long? . 57))
(1551 (at-least-this-long? . 57))
(1552 (specs? . 57))
(1553 (literal? . 57))
(1554 (syntax? . 57))
(1555 (begin-node? . 57))
(1556 (call-node? . 57))
(1557 (name-node? . 57))
(1558 (operator/literal . 57))
(1559 (operator/quote . 57))
(1560 (operator/call . 57))
(1561 (operator/name . 57))
(1562 (operator/unspecific . 57))
(1563 (operator/unassigned . 57))
(1564 (operator/lambda . 57))
(1565 (operator/begin . 57))
(1566 (operator/letrec . 57))
(1567 (operator/define . 57))
(1568 (operator/define-syntax . 57))
(1569 (operator/primitive-procedure . 57))
(1570 (operator/structure-ref . 57))
(1571 (:primop . 62))
(1572 (make-primop . 62))
(1573 (primop-compilator . 62))
(1574 (primop-closed . 62))
(1575 (primop-type . 62))
(1576 (primop-name . 62))
(1577 (primop? . 62))
(1578 (primop-table . 62))
(1579 (walk-primops . 62))
(1580 (define-compiler-primitive . 62))
(1581 (get-primop . 62))
(1582 (:debug-data . 60))
(1583 (make-debug-data . 60))
(1584 (debug-data-source . 60))
(1585 (set-debug-data-source! . 60))
(1586 (debug-data-env-maps . 60))
(1587 (set-debug-data-env-maps! . 60))
(1588 (debug-data-parent . 60))
(1589 (debug-data-name . 60))
(1590 (debug-data-uid . 60))
(1591 (debug-data? . 60))
(1592 (debug-data-env-shape . 60))
(1593 (new-template-uid . 60))
(1594 (*template-uid* . 60))
(1595 (template-uid . 60))
(1596 (set-template-uid! . 60))
(1597 (debug-flag-names . 60))
(1598 (type/debug-flags . 60))
(1599 (make-debug-flags . 60))
(1600 ($debug-flags . 60))
(1601 (debug-flag-accessor . 60))
(1602 (debug-flag-modifier . 60))
(1603 (keep-source-code? . 60))
(1604 (keep-environment-maps? . 60))
(1605 (keep-procedure-names? . 60))
(1606 (keep-file-names? . 60))
(1607 (tabulate-debug-data? . 60))
(1608 (debug-data-table . 60))
(1609 (with-fresh-compiler-state . 60))
(1610 (saving-and-restoring . 60))
(1611 (debug-data->info . 60))
(1612 (get-debug-data . 60))
(1613 (note-debug-data! . 60))
(1614 (new-debug-data . 60))
(1615 (:frame . 65))
(1616 (really-make-frame . 65))
(1617 (frame-debug-data . 65))
(1618 (frame-count . 65))
(1619 (set-frame-count! . 65))
(1620 (frame-literals . 65))
(1621 (set-frame-literals! . 65))
(1622 (frame-size . 65))
(1623 (set-frame-size! . 65))
(1624 (frame-template-index . 65))
(1625 (frame-env-index . 65))
(1626 (frame? . 65))
(1627 (make-frame . 65))
(1628 (adjust-procedure-name . 65))
(1629 (index->offset . 65))
(1630 (template-offset . 65))
(1631 (environment-offset . 65))
(1632 (depth-check! . 65))
(1633 (binding->index . 65))
(1634 (literal->index . 65))
(1635 (literal-position . 65))
(1636 (position . 65))
(1637 (make-segment . 61))
(1638 (segment-size . 61))
(1639 (segment-emitter . 61))
(1640 (segment->template . 61))
(1641 (segment-data->template . 61))
(1642 ($package-key . 61))
(1643 (with-package-key . 61))
(1644 (check-stack-use . 61))
(1645 (add-big-stack-protocol! . 61))
(1646 (:assembly-state . 61))
(1647 (make-assembly-state . 61))
(1648 (astate-env-maps . 61))
(1649 (set-astate-env-maps! . 61))
(1650 (astate-pc . 61))
(1651 (set-astate-pc! . 61))
(1652 (astate-code-vector . 61))
(1653 (make-astate . 61))
(1654 (emit-byte! . 61))
(1655 (emit-segment! . 61))
(1656 (empty-segment . 61))
(1657 (instruction . 61))
(1658 (sequentially . 61))
(1659 (sequentially-2 . 61))
(1660 (continuation-data-size . 61))
(1661 (continuation-data . 61))
(1662 (make-label . 61))
(1663 (label-reference . 61))
(1664 (instruction-using-label . 61))
(1665 (optional-label-reference . 61))
(1666 (using-optional-label . 61))
(1667 (bytes->segment . 61))
(1668 (computed-goto-label-size . 61))
(1669 (computed-goto-instruction . 61))
(1670 (attach-label . 61))
(1671 (insert-label! . 61))
(1672 (code-vector-set2! . 61))
(1673 (high-byte . 61))
(1674 (low-byte . 61))
(1675 (note-source-code . 61))
(1676 (note-environment . 61))
(1677 (optimizers-table . 71))
(1678 (set-optimizer! . 71))
(1679 (get-optimizer . 71))
(1680 (apply-optimizers . 71))
(1681 (flatten-form . 67))
(1682 (flatten-node . 67))
(1683 (flatteners . 67))
(1684 (define-flattener . 67))
(1685 (flatten-list . 67))
(1686 (no-free-vars . 67))
(1687 (flatten-lambda . 67))
(1688 (convert-lambda-body . 67))
(1689 (add-cells . 67))
(1690 (flatten-letrec . 67))
(1691 (flatten-pure-letrec . 67))
(1692 (flatten-impure-letrec . 67))
(1693 (assigned? . 67))
(1694 (mark-set-variables! . 67))
(1695 (mark-sets . 67))
(1696 (define-set-marker . 67))
(1697 (no-sets . 67))
(1698 (mark-letrec-sets . 67))
(1699 (make-make-cell . 67))
(1700 (make-unassigned-cell . 67))
(1701 (make-cell-ref . 67))
(1702 (really-make-cell-ref . 67))
(1703 (make-cell-set! . 67))
(1704 (make-primop-call . 67))
(1705 (operator/flat-lambda . 67))
(1706 (operator/lambda . 67))
(1707 (operator/letrec . 67))
(1708 (operator/pure-letrec . 67))
(1709 (operator/begin . 67))
(1710 (operator/literal . 67))
(1711 (operator/call . 67))
(1712 (operator/unassigned . 67))
(1713 (operator/set! . 67))
(1714 (define-node? . 67))
(1715 (lambda-node? . 67))
(1716 (flat-lambda-node? . 67))
(1717 (define-primop . 67))
(1718 (temp0 . 67))
(1719 (make-cell-primop . 67))
(1720 (temp1 . 67))
(1721 (cell-ref-primop . 67))
(1722 (temp2 . 67))
(1723 (cell-set!-primop . 67))
(1724 (temp3 . 67))
(1725 (unassigned-check-primop . 67))
(1726 (install-new-set! . 67))
(1727 (install-set! . 67))
(1728 (set->list . 67))
(1729 (set-add-element! . 67))
(1730 (set-union! . 67))
(1731 (set-difference! . 67))
(1732 (clean-var-list . 67))
(1733 (clear-var-set! . 67))
(1734 (node-type . 63))
(1735 (reconstruct-type . 63))
(1736 (reconstruct . 63))
(1737 (examine . 63))
(1738 (reconstructors . 63))
(1739 (define-reconstructor . 63))
(1740 (reconstruct-lambda . 63))
(1741 (careful-codomain . 63))
(1742 (reconstruct-name . 63))
(1743 (proc->reconstructor . 63))
(1744 (reconstruct-call . 63))
(1745 (fork-constraints . 63))
(1746 (reconstruct-letrec . 63))
(1747 (node->type . 63))
(1748 (name-node? . 63))
(1749 (lambda-node? . 63))
(1750 (literal-node? . 63))
(1751 (primop-reconstructors . 63))
(1752 (define-primop-reconstructor . 63))
(1753 (reconstruct-apply . 63))
(1754 (constant-type . 63))
(1755 (compile-expression . 64))
(1756 (compile . 64))
(1757 (compilators . 64))
(1758 (define-compilator . 64))
(1759 (compile-constant . 64))
(1760 (small-integer? . 64))
(1761 (integer-literal-instruction . 64))
(1762 (compile-local-name . 64))
(1763 (index->offset . 64))
(1764 (maybe-compile-with-push . 64))
(1765 (constant-with-push . 64))
(1766 (lexical-ref-with-push . 64))
(1767 (push+stack-ref-instruction . 64))
(1768 (push+stack-indirect-instruction . 64))
(1769 (compile-call . 64))
(1770 (compile-name-call . 64))
(1771 (compile-unknown-call . 64))
(1772 (compile-redex . 64))
(1773 (compile-inline-body . 64))
(1774 (letrec-template-maker . 64))
(1775 (maybe-push-continuation . 64))
(1776 (push-continuation . 64))
(1777 (push-continuation-no-protocol . 64))
(1778 (really-push-continuation . 64))
(1779 (fixup-source . 64))
(1780 (push-arguments . 64))
(1781 (push-all-but-last . 64))
(1782 (push-all-with-names . 64))
(1783 (push-argument . 64))
(1784 (really-push-arguments . 64))
(1785 (compile-argument . 64))
(1786 (pre-push . 64))
(1787 (push-instruction . 64))
(1788 (call-instruction . 64))
(1789 (stack-ref-instruction . 64))
(1790 (stack-set!-instruction . 64))
(1791 (stack-indirect-instruction . 64))
(1792 (make-cont . 64))
(1793 (cont-kind . 64))
(1794 (cont-source-info . 64))
(1795 (return-cont . 64))
(1796 (return-cont? . 64))
(1797 (fall-through-cont . 64))
(1798 (plain-fall-through-cont . 64))
(1799 (fall-through-cont? . 64))
(1800 (ignore-values-segment . 64))
(1801 (ignore-values-cont . 64))
(1802 (ignore-values-cont? . 64))
(1803 (accept-values-cont . 64))
(1804 (accept-values-cont? . 64))
(1805 (deliver-value . 64))
(1806 (named-cont . 64))
(1807 (cont-name . 64))
(1808 (name-node-binding . 64))
(1809 (generate-trap . 64))
(1810 (type-check . 64))
(1811 (set-type-check?! . 64))
(1812 (*type-check?* . 64))
(1813 (diagnose-call-error . 64))
(1814 (lambda-node? . 64))
(1815 (flat-lambda-node? . 64))
(1816 (name-node? . 64))
(1817 (literal-node? . 64))
(1818 (quote-node? . 64))
(1819 (operator/lambda . 64))
(1820 (operator/set! . 64))
(1821 (operator/call . 64))
(1822 (operator/begin . 64))
(1823 (receive . 64))
(1824 (compile-flat-lambda . 64))
(1825 (really-compile-flat-lambda . 64))
(1826 (compile-lambda . 64))
(1827 (set-lexical-offsets! . 64))
(1828 (lambda-protocol . 64))
(1829 (compile-lambda-code . 64))
(1830 (set-frame-locations! . 64))
(1831 (name-node->symbol . 64))
(1832 (compile-environment . 64))
(1833 (compile-recursive-environment . 64))
(1834 (finish-flat-env . 64))
(1835 (one-byte->two-byte . 64))
(1836 (flat-environment-code . 64))
(1837 (get-variables-locations . 64))
(1838 (add-variable . 64))
(1839 (figure-env-data . 64))
(1840 (primop-closed-template . 64))
(1841 (direct-compilator . 64))
(1842 (direct-closed-compilator . 64))
(1843 (nargs->domain . 64))
(1844 (get-primop-type . 64))
(1845 (primop-types . 64))
(1846 (define-simple-primitive . 64))
(1847 (simple-compilator . 64))
(1848 (simple-closed-compilator . 64))
(1849 (symbol-append . 64))
(1850 (define-stob-predicate . 64))
(1851 (define-data-struct-primitives . 64))
(1852 (define-vector-primitives . 64))
(1853 (define-more-vector-primitives . 64))
(1854 (thunk-node? . 64))
(1855 (thunk-body . 64))
(1856 (unflatten-form . 64))
(1857 (define-n-ary-compiler-primitive . 64))
(1858 (n-ary-primitive-compilator . 64))
(1859 (evaluate-arguments-for-effect . 64))
(1860 (call-on-arg-and-id . 64))
(1861 (call-on-args . 64))
(1862 (push-and-compile . 64))
(1863 (op/unspecific . 64))
(1864 (op/literal . 64))
(1865 (dispatch-protocol-size . 64))
(1866 (make-dispatch-protocol . 64))
(1867 (empty-segment? . 64))
(1868 (compile-forms . 64))
(1869 (compile-forms-loop . 64))
(1870 (compile-form . 64))
(1871 (call-template-inst . 64))
(1872 (template-call . 64))
(1873 (define-node? . 64))
(1874 (compile-definition . 64))
(1875 (location-contents-offset . 64))
(1876 (make-startup-procedure . 64))
(1877 (append-templates . 64))
(1878 (an-ignore-values-cont . 64))
(1879 (eval . 83))
(1880 (load-into . 83))
(1881 (eval-from-file . 83))
(1882 (load . 83))
(1883 (really-load-into . 83))
(1884 (compile-and-run . 83))
(1885 (display-condition . 50))
(1886 (really-display-condition . 50))
(1887 (*depth* . 50))
(1888 (*length* . 50))
(1889 (&disclose-condition . 50))
(1890 (disclose-condition . 50))
(1891 (limited-write . 50))
(1892 (command-processor . 87))
(1893 (mini-load . 87))
(1894 (read-string . 87))
(1895 (enum-case . 44))
(1896 (run-threads . 42))
(1897 (run-threads-with-housekeeper . 42))
(1898 (round-robin-event-handler . 42))
(1899 (make-counter . 42))
(1900 (counter-value . 42))
(1901 (increment-counter! . 42))
(1902 (decrement-counter! . 42))
(1903 (root-scheduler . 43))
(1904 (make-root-event-handler . 43))
(1905 (root-handler . 43))
(1906 (cheap-display-condition . 43))
(1907 (abort-token . 43))
(1908 (scheme-exit-now . 43))
(1909 (root-wait . 43))
(1910 (do-some-waiting . 43))
(1911 (one-minute-of-milliseconds . 43))
(1912 (one-day-of-milliseconds . 43))
(1913 (one-year-of-minutes . 43))
(1914 (deadlock-handler . 43))
(1915 (call-when-deadlocked! . 43))
(1916 (spawn-output-forcers . 43))
(1917 (usual-resumer . 48))
(1918 (initialize-rts . 48))
(1919 (start . 88))
(1920 (make-built-in-structures . 88))
(1921 (initialize-interaction-environment! . 88))
(1922 (make-initial-package . 88))
(1923 (make-tower . 88))
(1924 (the-usual-transforms . 58))
(1925 (define-usual-macro . 58))
(1926 (usual-transform . 58))
(1927 (do-spec? . 58))
(1928 (specs? . 58))
(1929 (case-clause? . 58))
(1930 (process-rules . 58))
(1931 (segment-pattern? . 58))
(1932 (segment-template? . 58))
(1933 (segment-depth . 58))
(1934 (segment-tail . 58))
(1935 (indicators-for-zero-or-more . 58))
(1936 (find-free-names-in-syntax-rules . 58))
(1937 (strongly-connected-components . 79))
(1938 (find-next-vertex . 79))
(1939 (:vertex . 79))
(1940 (really-make-vertex . 79))
(1941 (vertex-lowpoint . 79))
(1942 (set-vertex-lowpoint! . 79))
(1943 (vertex-parent . 79))
(1944 (set-vertex-parent! . 79))
(1945 (vertex-index . 79))
(1946 (set-vertex-index! . 79))
(1947 (vertex-stack . 79))
(1948 (set-vertex-stack! . 79))
(1949 (vertex-edges . 79))
(1950 (set-vertex-edges! . 79))
(1951 (vertex-data . 79))
(1952 (vertex? . 79))
(1953 (make-vertex . 79))
(1954 (make-vertices . 79))
(1955 (do-vertex . 79))
(1956 (get-strong . 79))
(1957 (end-vertex . 79))
(1958 (unwind-stack . 79))
(1959 (follow-edge . 79))
(1960 (pop-vertex-edge! . 79))
(1961 (find-usages . 76))
(1962 (maybe-update-known-type . 76))
(1963 (find-node-usages . 76))
(1964 (analyze . 76))
(1965 (analyze-nodes . 76))
(1966 (usage-analyzers . 76))
(1967 (define-usage-analyzer . 76))
(1968 (nothing . 76))
(1969 (add-if-free . 76))
(1970 (analyze-letrec . 76))
(1971 (:usage . 76))
(1972 (really-make-usage . 76))
(1973 (usage-assignment-count . 76))
(1974 (set-assignment! . 76))
(1975 (usage-operator-count . 76))
(1976 (set-operator! . 76))
(1977 (usage-reference-count . 76))
(1978 (set-reference! . 76))
(1979 (usage-name-node . 76))
(1980 (usage? . 76))
(1981 (make-usage . 76))
(1982 (make-package-usage . 76))
(1983 (package-usage? . 76))
(1984 (usage-incrementator . 76))
(1985 (note-reference! . 76))
(1986 (note-operator! . 76))
(1987 (note-assignment! . 76))
(1988 (lambda-node? . 76))
(1989 (quote-node? . 76))
(1990 (literal-node? . 76))
(1991 (call-node? . 76))
(1992 (name-node? . 76))
(1993 (define-node? . 76))
(1994 (sort-forms . 76))
(1995 (stuff-count . 76))
(1996 (maybe-make-aliased . 76))
(1997 (topologically-sort . 76))
(1998 (:form . 76))
(1999 (really-make-form . 76))
(2000 (form-temp . 76))
(2001 (set-form-temp! . 76))
(2002 (form-free . 76))
(2003 (set-form-free! . 76))
(2004 (form-unaliased? . 76))
(2005 (set-form-unaliased?! . 76))
(2006 (form-aliases . 76))
(2007 (set-form-aliases! . 76))
(2008 (form-node . 76))
(2009 (form? . 76))
(2010 (make-form . 76))
(2011 (insert-aliases . 76))
(2012 (make-inline-transform . 78))
(2013 (clean-node . 78))
(2014 (clean-lambda . 78))
(2015 (clean-lookup . 78))
(2016 (unused-name . 78))
(2017 (remove-bindings . 78))
(2018 (inline-transform . 78))
(2019 (make-substitution . 78))
(2020 (reconstitute . 78))
(2021 (reconstitute-name . 78))
(2022 (operator/name . 78))
(2023 (operator/literal . 78))
(2024 (qualified->name . 78))
(2025 (get-qualified-env . 78))
(2026 (quote-node? . 78))
(2027 (call-node? . 78))
(2028 (lambda-node? . 78))
(2029 (name-node? . 78))
(2030 (loophole-node? . 78))
(2031 (operator . 85))
(2032 (primop . 85))
(2033 (simple-interface . 85))
(2034 (package . 85))
(2035 (transform . 85))
(2036 (package-define-static! . 85))
(2037 (:lock . 46))
(2038 (really-make-lock . 46))
(2039 (lock? . 46))
(2040 (lock-uid . 46))
(2041 (lock-queue . 46))
(2042 (lock-owner-uid . 46))
(2043 (set-lock-owner-uid! . 46))
(2044 (next-uid . 46))
(2045 (make-lock . 46))
(2046 (obtain-lock . 46))
(2047 (maybe-obtain-lock . 46))
(2048 (release-lock . 46))
(2049 (arithmetic-shift-right . 37))
(2050 (shift-left . 37))
(2051 (adjoin-bits . 37))
(2052 (low-bits . 37))
(2053 (high-bits . 37))
(2054 (unsigned-high-bits . 37))
(2055 (assert . 37))
(2056 (useful-bits-per-word . 37))
(2057 (bits-per-byte . 37))
(2058 (bytes-per-cell . 37))
(2059 (bits-per-cell . 37))
(2060 (bytes->cells . 37))
(2061 (cells->bytes . 37))
(2062 (unused-field-width . 37))
(2063 (addressing-units-per-cell . 37))
(2064 (cells->a-units . 37))
(2065 (a-units->cells . 37))
(2066 (bytes->a-units . 37))
(2067 (tag-field-width . 37))
(2068 (data-field-width . 37))
(2069 (make-descriptor . 37))
(2070 (descriptor-tag . 37))
(2071 (descriptor-data . 37))
(2072 (unsigned-descriptor-data . 37))
(2073 (set-descriptor-tag . 37))
(2074 (vm-eq? . 37))
(2075 (tag . 37))
(2076 (tag-enumeration . 37))
(2077 (tag-count . 37))
(2078 (fixnum? . 37))
(2079 (immediate? . 37))
(2080 (header? . 37))
(2081 (stob? . 37))
(2082 (bits-per-fixnum . 37))
(2083 (least-fixnum-value . 37))
(2084 (greatest-fixnum-value . 37))
(2085 (too-big-for-fixnum? . 37))
(2086 (too-small-for-fixnum? . 37))
(2087 (enter-fixnum . 37))
(2088 (extract-fixnum . 37))
(2089 (descriptor->fixnum . 37))
(2090 (fixnum->stob . 37))
(2091 (fixnum= . 37))
(2092 (fixnum< . 37))
(2093 (fixnum> . 37))
(2094 (fixnum<= . 37))
(2095 (fixnum>= . 37))
(2096 (fixnum-bitwise-not . 37))
(2097 (fixnum-bitwise-and . 37))
(2098 (fixnum-bitwise-ior . 37))
(2099 (fixnum-bitwise-xor . 37))
(2100 (immediate-type-field-width . 37))
(2101 (make-immediate . 37))
(2102 (immediate-type . 37))
(2103 (immediate-info . 37))
(2104 (tag&immediate-type . 37))
(2105 (make-tag&immediate-type . 37))
(2106 (imm . 37))
(2107 (imm-enumeration . 37))
(2108 (imm-count . 37))
(2109 (immediate-predicate . 37))
(2110 (vm-char? . 37))
(2111 (undefined? . 37))
(2112 (true . 37))
(2113 (false . 37))
(2114 (eof-object . 37))
(2115 (null . 37))
(2116 (unspecific-value . 37))
(2117 (quiescent . 37))
(2118 (unbound-marker . 37))
(2119 (unassigned-marker . 37))
(2120 (unreleased-value . 37))
(2121 (false? . 37))
(2122 (enter-boolean . 37))
(2123 (extract-boolean . 37))
(2124 (vm-boolean? . 37))
(2125 (enter-char . 37))
(2126 (extract-char . 37))
(2127 (vm-char=? . 37))
(2128 (vm-char<? . 37))
(2129 (header-type-field-width . 37))
(2130 (header-size-field-width . 37))
(2131 (max-stob-contents-size-in-cells . 37))
(2132 (make-header . 37))
(2133 (header-immutable-bit-mask . 37))
(2134 (make-header-immutable . 37))
(2135 (header-type . 37))
(2136 (immutable-header? . 37))
(2137 (header-length-in-bytes . 37))
(2138 (header-length-in-cells . 37))
(2139 (header-length-in-a-units . 37))
(2140 (d-vector-header? . 37))
(2141 (b-vector-header? . 37))
(2142 (add-stob-tag . 37))
(2143 (remove-stob-tag . 37))
(2144 (:syntax . 74))
(2145 (:values . 74))
(2146 (:arguments . 74))
(2147 (:value . 74))
(2148 (procedure . 74))
(2149 (:boolean . 74))
(2150 (:char . 74))
(2151 (:null . 74))
(2152 (:unspecific . 74))
(2153 (:number . 74))
(2154 (:complex . 74))
(2155 (:real . 74))
(2156 (:rational . 74))
(2157 (:integer . 74))
(2158 (:exact-integer . 74))
(2159 (:pair . 74))
(2160 (:string . 74))
(2161 (:symbol . 74))
(2162 (:vector . 74))
(2163 (:procedure . 74))
(2164 (:input-port . 74))
(2165 (:output-port . 74))
(2166 (:error . 74))
(2167 (:escape . 74))
(2168 (:structure . 74))
(2169 (:type . 74))
(2170 (def . 73))
(2171 (really-def . 73))
(2172 (define-multiple . 73))
(2173 (define-interface . 73))
(2174 (compound-interface . 73))
(2175 (export . 73))
(2176 (define-structure . 73))
(2177 (define-structures . 73))
(2178 (structure . 73))
(2179 (structures . 73))
(2180 (modify . 73))
(2181 (subset . 73))
(2182 (with-prefix . 73))
(2183 (a-package . 73))
(2184 (receive . 73))
(2185 (define-reflective-tower-maker . 73))
(2186 (export-reflective-tower-maker . 73))
(2187 (define-module . 73))
(2188 (make-a-package . 73))
(2189 (loser . 73))
(2190 (interface-of . 73))
(2191 (*verify-later!* . 73))
(2192 (verify-later! . 73))
(2193 (set-verify-later! . 73))
(2194 (note-name! . 73))
(2195 (collect-packages . 70))
(2196 (package-source . 70))
(2197 (read-files . 70))
(2198 (package-optimizer-names . 70))
(2199 (check-structure . 70))
(2200 (compile-package . 72))
(2201 (expand-package . 72))
(2202 (define-usual-transform . 72))
(2203 (define-primitives . 72))
(2204 (make-define-primitive-node . 72))
(2205 (operator/define . 72))
(2206 (operator/primitive-procedure . 72))
(2207 (analyze-forms . 77))
(2208 (analyze-form . 77))
(2209 (inlinable-rhs? . 77))
(2210 (simple-lambda? . 77))
(2211 (operator/name . 77))
(2212 (simple? . 77))
(2213 (simple-list? . 77))
(2214 (analyzers . 77))
(2215 (define-analyzer . 77))
(2216 (static-value . 77))
(2217 (really-simple-call? . 77))
(2218 (primitive-proc? . 77))
(2219 (no-ret . 77))
(2220 (ret . 77))
(2221 (simple-literal? . 77))
(2222 (require . 77))
(2223 (*debug?* . 77))
(2224 (package-lookup-type . 77))
(2225 (lambda-node? . 77))
(2226 (name-node? . 77))
(2227 (loophole-node? . 77))
(2228 (define-node? . 77))
(2229 (literal-node? . 77))
(2230 (ensure-loaded . 84))
-
; Template uid -> name, parent, env maps
(0 scheme-level-0 #f ())
(1 atan #f ())
(2 scheme-level-0 #f ())
(3 set-location-defined?! #f ())
(4 scheme-level-0 #f ())
(5 acos #f ())
(6 scheme-level-0 #f ())
(7 vm-extension #f ())
(8 scheme-level-0 #f ())
(9 asin #f ())
(10 scheme-level-0 #f ())
(11 location-defined? #f ())
(12 scheme-level-0 #f ())
(13 time #f ())
(14 scheme-level-0 #f ())
(15 template-set! #f ())
(16 scheme-level-0 #f ())
(17 set-current-proposal! #f ())
(18 scheme-level-0 #f ())
(19 scheme-level-0 #f ())
(20 cons #f ())
(21 scheme-level-0 #f ())
(22 wait #f ())
(23 scheme-level-0 #f ())
(24 trap #f ())
(25 scheme-level-0 #f ())
(26 assq #f ())
(27 scheme-level-0 #f ())
(28 current-proposal #f ())
(29 scheme-level-0 #f ())
(30 make-weak-pointer #f ())
(31 scheme-level-0 #f ())
(32 lookup-shared-binding #f ())
(33 scheme-level-0 #f ())
(34 push #f ())
(35 scheme-level-0 #f ())
(36 provisional-set-contents! #f ())
(37 scheme-level-0 #f ())
(38 set-contents! #f ())
(39 scheme-level-0 #f ())
(40 read-char #f ())
(41 scheme-level-0 #f ())
(42 provisional-contents #f ())
(43 scheme-level-0 #f ())
(44 make-cell #f ())
(45 scheme-level-0 #f ())
(46 sqrt #f ())
(47 scheme-level-0 #f ())
(48 * #f ())
(49 scheme-level-0 #f ())
(50 contents #f ())
(51 scheme-level-0 #f ())
(52 + #f ())
(53 scheme-level-0 #f ())
(54 peek-char #f ())
(55 scheme-level-0 #f ())
(56 - #f ())
(57 scheme-level-0 #f ())
(58 continuation-set! #f ())
(59 scheme-level-0 #f ())
(60 / #f ())
(61 scheme-level-0 #f ())
(62 weak-pointer? #f ())
(63 scheme-level-0 #f ())
(64 atan1 #f ())
(65 scheme-level-0 #f ())
(66 atan2 #f ())
(67 scheme-level-0 #f ())
(68 quotient #f ())
(69 scheme-level-0 #f ())
(70 close-channel #f ())
(71 scheme-level-0 #f ())
(72 channel-abort #f ())
(73 scheme-level-0 #f ())
(74 char? #f ())
(75 scheme-level-0 #f ())
(76 < #f ())
(77 scheme-level-0 #f ())
(78 = #f ())
(79 scheme-level-0 #f ())
(80 provisional-set-port-data! #f ())
(81 scheme-level-0 #f ())
(82 cell? #f ())
(83 scheme-level-0 #f ())
(84 > #f ())
(85 scheme-level-0 #f ())
(86 make-location #f ())
(87 scheme-level-0 #f ())
(88 imag-part #f ())
(89 scheme-level-0 #f ())
(90 set-port-data! #f ())
(91 scheme-level-0 #f ())
(92 make-template #f ())
(93 scheme-level-0 #f ())
(94 real? #f ())
(95 scheme-level-0 #f ())
(96 real-part #f ())
(97 scheme-level-0 #f ())
(98 provisional-port-data #f ())
(99 scheme-level-0 #f ())
(100 record-length #f ())
(101 scheme-level-0 #f ())
(102 port-data #f ())
(103 scheme-level-0 #f ())
(104 pair? #f ())
(105 scheme-level-0 #f ())
(106 provisional-set-port-lock! #f ())
(107 scheme-level-0 #f ())
(108 make-port #f ())
(109 scheme-level-0 #f ())
(110 set-port-lock! #f ())
(111 scheme-level-0 #f ())
(112 bit-count #f ())
(113 scheme-level-0 #f ())
(114 provisional-checked-record-ref #f ())
(115 scheme-level-0 #f ())
(116 return-from-exception #f ())
(117 scheme-level-0 #f ())
(118 provisional-port-lock #f ())
(119 scheme-level-0 #f ())
(120 location? #f ())
(121 scheme-level-0 #f ())
(122 checked-record-ref #f ())
(123 scheme-level-0 #f ())
(124 channel-maybe-read #f ())
(125 scheme-level-0 #f ())
(126 add-finalizer! #f ())
(127 scheme-level-0 #f ())
(128 rational? #f ())
(129 scheme-level-0 #f ())
(130 template? #f ())
(131 scheme-level-0 #f ())
(132 port-lock #f ())
(133 scheme-level-0 #f ())
(134 vector-length #f ())
(135 scheme-level-0 #f ())
(136 make-continuation #f ())
(137 scheme-level-0 #f ())
(138 provisional-shared-binding-ref #f ())
(139 scheme-level-0 #f ())
(140 string-length #f ())
(141 scheme-level-0 #f ())
(142 shared-binding-ref #f ())
(143 scheme-level-0 #f ())
(144 port? #f ())
(145 scheme-level-0 #f ())
(146 angle #f ())
(147 scheme-level-0 #f ())
(148 false #f ())
(149 scheme-level-0 #f ())
(150 remainder #f ())
(151 scheme-level-0 #f ())
(152 continuation? #f ())
(153 scheme-level-0 #f ())
(154 channel-ready? #f ())
(155 scheme-level-0 #f ())
(156 binary-reduce1 #f ())
(157 scheme-level-0 #f ())
(158 binary-reduce2 #f ())
(159 scheme-level-0 #f ())
(160 char<? #f ())
(161 scheme-level-0 #f ())
(162 char=? #f ())
(163 scheme-level-0 #f ())
(164 <= #f ())
(165 scheme-level-0 #f ())
(166 magnitude #f ())
(167 scheme-level-0 #f ())
(168 >= #f ())
(169 scheme-level-0 #f ())
(170 with-continuation #f ())
(171 scheme-level-0 #f ())
(172 floor #f ())
(173 scheme-level-0 #f ())
(174 provisional-checked-record-set! #f ())
(175 scheme-level-0 #f ())
(176 apply #f ())
(177 scheme-level-0 #f ())
(178 memory-status #f ())
(179 scheme-level-0 #f ())
(180 checked-record-set! #f ())
(181 scheme-level-0 #f ())
(182 inexact->exact #f ())
(183 scheme-level-0 #f ())
(184 exact->inexact #f ())
(185 scheme-level-0 #f ())
(186 error #f ())
(187 scheme-level-0 #f ())
(188 extended-number-length #f ())
(189 scheme-level-0 #f ())
(190 open-channels-list #f ())
(191 scheme-level-0 #f ())
(192 provisional-shared-binding-set! #f ())
(193 scheme-level-0 #f ())
(194 channel-id #f ())
(195 scheme-level-0 #f ())
(196 shared-binding-set! #f ())
(197 scheme-level-0 #f ())
(198 numerator #f ())
(199 scheme-level-0 #f ())
(200 eof-object #f ())
(201 scheme-level-0 #f ())
(202 byte-vector-length #f ())
(203 scheme-level-0 #f ())
(204 record-ref #f ())
(205 scheme-level-0 #f ())
(206 make-polar #f ())
(207 scheme-level-0 #f ())
(208 write-char #f ())
(209 scheme-level-0 #f ())
(210 symbol->string #f ())
(211 scheme-level-0 #f ())
(212 exact? #f ())
(213 scheme-level-0 #f ())
(214 push-false #f ())
(215 scheme-level-0 #f ())
(216 provisional-vector-ref #f ())
(217 scheme-level-0 #f ())
(218 vector-ref #f ())
(219 scheme-level-0 #f ())
(220 set-current-thread! #f ())
(221 scheme-level-0 #f ())
(222 provisional-set-port-index! #f ())
(223 scheme-level-0 #f ())
(224 immutable? #f ())
(225 scheme-level-0 #f ())
(226 set-exception-handlers! #f ())
(227 scheme-level-0 #f ())
(228 string-ref #f ())
(229 scheme-level-0 #f ())
(230 set-port-index! #f ())
(231 scheme-level-0 #f ())
(232 provisional-set-port-limit! #f ())
(233 scheme-level-0 #f ())
(234 make-shared-binding #f ())
(235 scheme-level-0 #f ())
(236 current-thread #f ())
(237 scheme-level-0 #f ())
(238 provisional-port-index #f ())
(239 scheme-level-0 #f ())
(240 channel-status #f ())
(241 scheme-level-0 #f ())
(242 set-port-limit! #f ())
(243 scheme-level-0 #f ())
(244 shared-binding-name #f ())
(245 scheme-level-0 #f ())
(246 port-index #f ())
(247 scheme-level-0 #f ())
(248 make-immutable! #f ())
(249 scheme-level-0 #f ())
(250 byte-vector-logging-ref #f ())
(251 scheme-level-0 #f ())
(252 set-enabled-interrupts! #f ())
(253 scheme-level-0 #f ())
(254 provisional-port-limit #f ())
(255 scheme-level-0 #f ())
(256 port-limit #f ())
(257 scheme-level-0 #f ())
(258 ascii->char #f ())
(259 scheme-level-0 #f ())
(260 char->ascii #f ())
(261 scheme-level-0 #f ())
(262 undefine-shared-binding #f ())
(263 scheme-level-0 #f ())
(264 attempt-copy-bytes! #f ())
(265 scheme-level-0 #f ())
(266 record-set! #f ())
(267 scheme-level-0 #f ())
(268 shared-binding? #f ())
(269 scheme-level-0 #f ())
(270 eof-object? #f ())
(271 scheme-level-0 #f ())
(272 set-interrupt-handlers! #f ())
(273 scheme-level-0 #f ())
(274 record #f ())
(275 scheme-level-0 #f ())
(276 schedule-interrupt #f ())
(277 scheme-level-0 #f ())
(278 channel-maybe-write #f ())
(279 scheme-level-0 #f ())
(280 unspecific #f ())
(281 scheme-level-0 #f ())
(282 provisional-vector-set! #f ())
(283 scheme-level-0 #f ())
(284 extended-number-ref #f ())
(285 scheme-level-0 #f ())
(286 vector-set! #f ())
(287 scheme-level-0 #f ())
(288 copy-bytes! #f ())
(289 scheme-level-0 #f ())
(290 string-set! #f ())
(291 scheme-level-0 #f ())
(292 unassigned #f ())
(293 scheme-level-0 #f ())
(294 call-external-value #f ())
(295 scheme-level-0 #f ())
(296 values #f ())
(297 scheme-level-0 #f ())
(298 intern #f ())
(299 scheme-level-0 #f ())
(300 vector #f ())
(301 scheme-level-0 #f ())
(302 write-image-low #f ())
(303 scheme-level-0 #f ())
(304 provisional-byte-vector-ref #f ())
(305 scheme-level-0 #f ())
(306 byte-vector-logging-set! #f ())
(307 scheme-level-0 #f ())
(308 byte-vector-ref #f ())
(309 scheme-level-0 #f ())
(310 make-double #f ())
(311 scheme-level-0 #f ())
(312 provisional-set-location-id! #f ())
(313 scheme-level-0 #f ())
(314 make-record #f ())
(315 scheme-level-0 #f ())
(316 set-location-id! #f ())
(317 scheme-level-0 #f ())
(318 provisional-location-id #f ())
(319 scheme-level-0 #f ())
(320 location-id #f ())
(321 scheme-level-0 #f ())
(322 bitwise-and #f ())
(323 scheme-level-0 #f ())
(324 eq? #f ())
(325 scheme-level-0 #f ())
(326 double? #f ())
(327 scheme-level-0 #f ())
(328 extended-number-set! #f ())
(329 scheme-level-0 #f ())
(330 make-vector #f ())
(331 scheme-level-0 #f ())
(332 record? #f ())
(333 scheme-level-0 #f ())
(334 provisional-set-port-buffer! #f ())
(335 scheme-level-0 #f ())
(336 make-string #f ())
(337 scheme-level-0 #f ())
(338 set-port-buffer! #f ())
(339 scheme-level-0 #f ())
(340 primitive-catch #f ())
(341 scheme-level-0 #f ())
(342 string-hash #f ())
(343 scheme-level-0 #f ())
(344 provisional-byte-vector-set! #f ())
(345 scheme-level-0 #f ())
(346 template-length #f ())
(347 scheme-level-0 #f ())
(348 provisional-port-buffer #f ())
(349 scheme-level-0 #f ())
(350 number? #f ())
(351 scheme-level-0 #f ())
(352 port-buffer #f ())
(353 scheme-level-0 #f ())
(354 byte-vector-set! #f ())
(355 scheme-level-0 #f ())
(356 bitwise-ior #f ())
(357 scheme-level-0 #f ())
(358 provisional-set-car! #f ())
(359 scheme-level-0 #f ())
(360 provisional-set-cdr! #f ())
(361 scheme-level-0 #f ())
(362 set-car! #f ())
(363 scheme-level-0 #f ())
(364 closure-env #f ())
(365 scheme-level-0 #f ())
(366 vector? #f ())
(367 scheme-level-0 #f ())
(368 bitwise-not #f ())
(369 scheme-level-0 #f ())
(370 set-cdr! #f ())
(371 scheme-level-0 #f ())
(372 provisional-car #f ())
(373 scheme-level-0 #f ())
(374 symbol? #f ())
(375 scheme-level-0 #f ())
(376 string? #f ())
(377 scheme-level-0 #f ())
(378 provisional-cdr #f ())
(379 scheme-level-0 #f ())
(380 car #f ())
(381 scheme-level-0 #f ())
(382 bitwise-xor #f ())
(383 scheme-level-0 #f ())
(384 cdr #f ())
(385 scheme-level-0 #f ())
(386 find-all-records #f ())
(387 scheme-level-0 #f ())
(388 continuation-length #f ())
(389 scheme-level-0 #f ())
(390 log #f ())
(391 scheme-level-0 #f ())
(392 message #f ())
(393 scheme-level-0 #f ())
(394 tan #f ())
(395 scheme-level-0 #f ())
(396 collect #f ())
(397 scheme-level-0 #f ())
(398 cos #f ())
(399 scheme-level-0 #f ())
(400 channel-os-index #f ())
(401 scheme-level-0 #f ())
(402 provisional-set-port-status! #f ())
(403 scheme-level-0 #f ())
(404 make-extended-number #f ())
(405 scheme-level-0 #f ())
(406 set-port-status! #f ())
(407 scheme-level-0 #f ())
(408 sin #f ())
(409 scheme-level-0 #f ())
(410 exp #f ())
(411 scheme-level-0 #f ())
(412 provisional-port-status #f ())
(413 scheme-level-0 #f ())
(414 pop #f ())
(415 scheme-level-0 #f ())
(416 port-status #f ())
(417 scheme-level-0 #f ())
(418 return-from-callback #f ())
(419 scheme-level-0 #f ())
(420 make-byte-vector #f ())
(421 scheme-level-0 #f ())
(422 weak-pointer-ref #f ())
(423 scheme-level-0 #f ())
(424 call-with-values #f ())
(425 scheme-level-0 #f ())
(426 denominator #f ())
(427 scheme-level-0 #f ())
(428 reverse-list->string #f ())
(429 scheme-level-0 #f ())
(430 extended-number? #f ())
(431 scheme-level-0 #f ())
(432 shared-binding-is-import? #f ())
(433 scheme-level-0 #f ())
(434 provisional-cell-ref #f ())
(435 scheme-level-0 #f ())
(436 find-all #f ())
(437 scheme-level-0 #f ())
(438 cell-ref #f ())
(439 scheme-level-0 #f ())
(440 byte-vector? #f ())
(441 scheme-level-0 #f ())
(442 string=? #f ())
(443 scheme-level-0 #f ())
(444 open-channel #f ())
(445 scheme-level-0 #f ())
(446 channel? #f ())
(447 scheme-level-0 #f ())
(448 unassigned-check #f ())
(449 scheme-level-0 #f ())
(450 make-rectangular #f ())
(451 scheme-level-0 #f ())
(452 set-session-data! #f ())
(453 scheme-level-0 #f ())
(454 maybe-commit #f ())
(455 scheme-level-0 #f ())
(456 template-ref #f ())
(457 scheme-level-0 #f ())
(458 make-closure #f ())
(459 scheme-level-0 #f ())
(460 session-data #f ())
(461 scheme-level-0 #f ())
(462 integer? #f ())
(463 scheme-level-0 #f ())
(464 signal-condition #f ())
(465 scheme-level-0 #f ())
(466 provisional-set-port-pending-eof?! #f ())
(467 scheme-level-0 #f ())
(468 port-handler #f ())
(469 scheme-level-0 #f ())
(470 set-port-pending-eof?! #f ())
(471 scheme-level-0 #f ())
(472 arithmetic-shift #f ())
(473 scheme-level-0 #f ())
(474 provisional-port-pending-eof? #f ())
(475 scheme-level-0 #f ())
(476 provisional-cell-set! #f ())
(477 scheme-level-0 #f ())
(478 complex? #f ())
(479 scheme-level-0 #f ())
(480 port-pending-eof? #f ())
(481 scheme-level-0 #f ())
(482 cell-set! #f ())
(483 scheme-level-0 #f ())
(484 binary-comparison-reduce2 #f ())
(485 scheme-level-0 #f ())
(486 scheme-level-0 #f ())
(487 closure? #f ())
(488 scheme-level-0 #f ())
(489 continuation-ref #f ())
(490 scheme-level-0 #f ())
(491 closure-template #f ())
(492 scheme-level-0 #f ())
(493 current-cont #f ())
(494 scheme-level-0 #f ())
(495 char->integer 494 ())
(496 scheme-level-0 #f ())
(497 integer->char 496 ())
(498 scheme-level-0 #f ())
(499 invoke-closure 498 ())
(500 scheme-level-0 #f ())
(501 primitive-cwcc 500 ())
(502 #f 501 ())
(503 scheme-level-0 #f ())
(504 make-undefined-location 503 ())
(505 scheme-level-0 #f ())
(506 location-assigned? 505 ())
(507 scheme-level-0 #f ())
(508 cell-unassigned? 507 ())
(509 scheme-level-0 #f ())
(510 vector-unassigned? 509 ())
(511 scheme-level-0 #f ())
(512 string-copy 511 ())
(513 scheme-level-0 #f ())
(514 string->symbol 513 ())
(515 scheme-level-0 #f ())
(516 input-port? 515 ())
(517 scheme-level-0 #f ())
(518 output-port? 517 ())
(519 scheme-level-0 #f ())
(520 record-type 519 ())
(521 scheme-level-0 #f ())
(522 make-code-vector 521 ())
(523 scheme-level-0 #f ())
(524 code-vector? 523 ())
(525 scheme-level-0 #f ())
(526 code-vector-length 525 ())
(527 scheme-level-0 #f ())
(528 code-vector-ref 527 ())
(529 scheme-level-0 #f ())
(530 code-vector-set! 529 ())
(531 scheme-level-0 #f ())
(532 lookup-imported-binding 531 ())
(533 scheme-level-0 #f ())
(534 lookup-exported-binding 533 ())
(535 scheme-level-0 #f ())
(536 define-imported-binding 535 ())
(537 scheme-level-0 #f ())
(538 define-exported-binding 537 ())
(539 scheme-level-0 #f ())
(540 undefine-imported-binding 539 ())
(541 scheme-level-0 #f ())
(542 undefine-exported-binding 541 ())
(543 scheme-level-0 #f ())
(544 secret-length 543 ())
(545 scheme-level-0 #f ())
(546 byte-vector 545 ())
(547 loop##0 546 ())
(548 scheme-level-0 #f ())
(549 debug-message 548 ())
(550 scheme-level-0 #f ())
(551 signal 550 ())
(552 scheme-level-0 #f ())
(553 vector-prefix->list 552 ())
(554 loop##1 553 ())
(555 scheme-level-0 #f ())
(556 write-image 555 ())
(557 scheme-level-0 #f ())
(558 make-proposal 557 ())
(559 scheme-level-0 #f ())
(560 warn 559 ())
(561 scheme-level-0 #f ())
(562 note 561 ())
(563 scheme-level-0 #f ())
(564 syntax-error 563 ())
(565 scheme-level-0 #f ())
(566 call-error 565 ())
(567 scheme-level-0 #f ())
(568 scheme-level-0 #f ())
(569 scheme-level-0 #f ())
(570 scheme-level-1 #f ())
(571 scheme-level-1 #f ())
(572 scheme-level-1 #f ())
(573 scheme-level-1 #f ())
(574 scheme-level-1 #f ())
(575 scheme-level-1 #f ())
(576 scheme-level-1 #f ())
(577 scheme-level-1 #f ())
(578 scheme-level-1 #f ())
(579 scheme-level-1 #f ())
(580 scheme-level-1 #f ())
(581 scheme-level-1 #f ())
(582 #f 581 ())
(583 scheme-level-1 #f ())
(584 #f 583 ())
(585 scheme-level-1 #f ())
(586 scheme-level-1 #f ())
(587 scheme-level-1 #f ())
(588 scheme-level-1 #f ())
(589 scheme-level-1 #f ())
(590 scheme-level-1 #f ())
(591 scheme-level-1 #f ())
(592 not 591 ())
(593 scheme-level-1 #f ())
(594 boolean? 593 ())
(595 scheme-level-1 #f ())
(596 eqv? 595 ())
(597 scheme-level-1 #f ())
(598 equal? 597 ())
(599 loop 598 ())
(600 scheme-level-1 #f ())
(601 null? 600 ())
(602 scheme-level-1 #f ())
(603 inexact? 602 ())
(604 scheme-level-1 #f ())
(605 max-or-min 604 ())
(606 loop 605 ())
(607 scheme-level-1 #f ())
(608 max 607 ())
(609 scheme-level-1 #f ())
(610 min 609 ())
(611 scheme-level-1 #f ())
(612 abs 611 ())
(613 scheme-level-1 #f ())
(614 zero? 613 ())
(615 scheme-level-1 #f ())
(616 positive? 615 ())
(617 scheme-level-1 #f ())
(618 negative? 617 ())
(619 scheme-level-1 #f ())
(620 even? 619 ())
(621 scheme-level-1 #f ())
(622 odd? 621 ())
(623 scheme-level-1 #f ())
(624 caar 623 ())
(625 scheme-level-1 #f ())
(626 cadr 625 ())
(627 scheme-level-1 #f ())
(628 cdar 627 ())
(629 scheme-level-1 #f ())
(630 cddr 629 ())
(631 scheme-level-1 #f ())
(632 caaar 631 ())
(633 scheme-level-1 #f ())
(634 caadr 633 ())
(635 scheme-level-1 #f ())
(636 cadar 635 ())
(637 scheme-level-1 #f ())
(638 caddr 637 ())
(639 scheme-level-1 #f ())
(640 cdaar 639 ())
(641 scheme-level-1 #f ())
(642 cdadr 641 ())
(643 scheme-level-1 #f ())
(644 cddar 643 ())
(645 scheme-level-1 #f ())
(646 cdddr 645 ())
(647 scheme-level-1 #f ())
(648 caaaar 647 ())
(649 scheme-level-1 #f ())
(650 caaadr 649 ())
(651 scheme-level-1 #f ())
(652 caadar 651 ())
(653 scheme-level-1 #f ())
(654 caaddr 653 ())
(655 scheme-level-1 #f ())
(656 cadaar 655 ())
(657 scheme-level-1 #f ())
(658 cadadr 657 ())
(659 scheme-level-1 #f ())
(660 caddar 659 ())
(661 scheme-level-1 #f ())
(662 cadddr 661 ())
(663 scheme-level-1 #f ())
(664 cdaaar 663 ())
(665 scheme-level-1 #f ())
(666 cdaadr 665 ())
(667 scheme-level-1 #f ())
(668 cdadar 667 ())
(669 scheme-level-1 #f ())
(670 cdaddr 669 ())
(671 scheme-level-1 #f ())
(672 cddaar 671 ())
(673 scheme-level-1 #f ())
(674 cddadr 673 ())
(675 scheme-level-1 #f ())
(676 cdddar 675 ())
(677 scheme-level-1 #f ())
(678 cddddr 677 ())
(679 scheme-level-1 #f ())
(680 list 679 ())
(681 scheme-level-1 #f ())
(682 real-length 681 ())
(683 scheme-level-1 #f ())
(684 length 683 ())
(685 scheme-level-1 #f ())
(686 reduce 685 ())
(687 scheme-level-1 #f ())
(688 append 687 ())
(689 recur 688 ())
(690 scheme-level-1 #f ())
(691 append-reverse 690 ())
(692 scheme-level-1 #f ())
(693 reverse 692 ())
(694 scheme-level-1 #f ())
(695 list-tail 694 ())
(696 scheme-level-1 #f ())
(697 list-ref 696 ())
(698 scheme-level-1 #f ())
(699 mem 698 ())
(700 #f 699 ())
(701 loop 700 ())
(702 scheme-level-1 #f ())
(703 ass 702 ())
(704 #f 703 ())
(705 loop 704 ())
(706 scheme-level-1 #f ())
(707 list? 706 ())
(708 recur 707 ())
(709 scheme-level-1 #f ())
(710 char>? 709 ())
(711 scheme-level-1 #f ())
(712 char>=? 711 ())
(713 scheme-level-1 #f ())
(714 char<=? 713 ())
(715 scheme-level-1 #f ())
(716 char-whitespace? 715 ())
(717 scheme-level-1 #f ())
(718 char-lower-case? 717 ())
(719 scheme-level-1 #f ())
(720 char-upper-case? 719 ())
(721 scheme-level-1 #f ())
(722 char-numeric? 721 ())
(723 scheme-level-1 #f ())
(724 char-alphabetic? 723 ())
(725 scheme-level-1 #f ())
(726 make-character-map 725 ())
(727 loop##9 726 ())
(728 scheme-level-1 #f ())
(729 char-upcase 728 ())
(730 scheme-level-1 #f ())
(731 char-downcase 730 ())
(732 scheme-level-1 #f ())
(733 char-ci-compare 732 ())
(734 #f 733 ())
(735 scheme-level-1 #f ())
(736 list->string 735 ())
(737 loop##11 736 ())
(738 scheme-level-1 #f ())
(739 string 738 ())
(740 scheme-level-1 #f ())
(741 substring 740 ())
(742 loop##12 741 ())
(743 scheme-level-1 #f ())
(744 string-append 743 ())
(745 #f 744 ())
(746 loop 744 ())
(747 loop##13 746 ())
(748 scheme-level-1 #f ())
(749 string->list 748 ())
(750 loop##14 749 ())
(751 scheme-level-1 #f ())
(752 unspecific 751 ())
(753 scheme-level-1 #f ())
(754 string-fill! 753 ())
(755 loop##15 754 ())
(756 scheme-level-1 #f ())
(757 make-string=? 756 ())
(758 #f 757 ())
(759 loop 758 ())
(760 scheme-level-1 #f ())
(761 make-string<? 760 ())
(762 #f 761 ())
(763 loop 762 ())
(764 scheme-level-1 #f ())
(765 string>? 764 ())
(766 scheme-level-1 #f ())
(767 string<=? 766 ())
(768 scheme-level-1 #f ())
(769 string>=? 768 ())
(770 scheme-level-1 #f ())
(771 string-ci>? 770 ())
(772 scheme-level-1 #f ())
(773 string-ci<=? 772 ())
(774 scheme-level-1 #f ())
(775 string-ci>=? 774 ())
(776 scheme-level-1 #f ())
(777 vector->list 776 ())
(778 loop##17 777 ())
(779 scheme-level-1 #f ())
(780 list->vector 779 ())
(781 loop##18 780 ())
(782 scheme-level-1 #f ())
(783 vector-fill! 782 ())
(784 loop##19 783 ())
(785 scheme-level-1 #f ())
(786 map1 785 ())
(787 scheme-level-1 #f ())
(788 any 787 ())
(789 scheme-level-1 #f ())
(790 map2+ 789 ())
(791 scheme-level-1 #f ())
(792 map 791 ())
(793 scheme-level-1 #f ())
(794 for-each1 793 ())
(795 loop 794 ())
(796 scheme-level-1 #f ())
(797 for-each2+ 796 ())
(798 loop 797 ())
(799 scheme-level-1 #f ())
(800 for-each 799 ())
(801 scheme-level-1 #f ())
(802 make-promise 801 ())
(803 #f 802 ())
(804 scheme-level-1 #f ())
(805 force 804 ())
(806 scheme-level-1 #f ())
(807 filter 806 ())
(808 #f 807 ())
(809 scheme-level-1 #f ())
(810 pos 809 ())
(811 #f 810 ())
(812 loop 811 ())
(813 scheme-level-1 #f ())
(814 every 813 ())
(815 scheme-level-1 #f ())
(816 sublist 815 ())
(817 recur 816 ())
(818 scheme-level-1 #f ())
(819 last 818 ())
(820 scheme-level-1 #f ())
(821 insert 820 ())
(822 scheme-level-1 #f ())
(823 fold 822 ())
(824 loop##23 823 ())
(825 scheme-level-1 #f ())
(826 fold->2 825 ())
(827 loop 826 ())
(828 #f 827 ())
(829 #f 827 ())
(830 scheme-level-1 #f ())
(831 fold->3 830 ())
(832 loop 831 ())
(833 #f 832 ())
(834 #f 832 ())
(835 scheme-level-1 #f ())
(836 modulo 835 ())
(837 scheme-level-1 #f ())
(838 ceiling 837 ())
(839 scheme-level-1 #f ())
(840 truncate 839 ())
(841 scheme-level-1 #f ())
(842 round 841 ())
(843 scheme-level-1 #f ())
(844 euclid 843 ())
(845 scheme-level-1 #f ())
(846 gcd 845 ())
(847 #f 846 ())
(848 scheme-level-1 #f ())
(849 lcm 848 ())
(850 #f 849 ())
(851 scheme-level-1 #f ())
(852 raise-to-integer-power 851 ())
(853 loop 852 ())
(854 scheme-level-1 #f ())
(855 expt 854 ())
(856 scheme-level-1 #f ())
(857 simplest-rational 856 ())
(858 simplest-rational-internal 857 ())
(859 scheme-level-1 #f ())
(860 rationalize 859 ())
(861 record-types #f ())
(862 #f 861 ())
(863 record-types #f ())
(864 record-types #f ())
(865 record-types #f ())
(866 record-types #f ())
(867 record-type-name 866 ())
(868 record-types #f ())
(869 make-default-record-discloser 868 ())
(870 #f 869 ())
(871 record-types #f ())
(872 make-record-type 871 ())
(873 record-types #f ())
(874 record-type? 873 ())
(875 record-types #f ())
(876 record-type-resumer 875 ())
(877 record-types #f ())
(878 set-record-type-resumer! 877 ())
(879 record-types #f ())
(880 record-type-uid 879 ())
(881 record-types #f ())
(882 record-type-field-names 881 ())
(883 record-types #f ())
(884 record-type-number-of-fields 883 ())
(885 record-types #f ())
(886 record-type-discloser 885 ())
(887 record-types #f ())
(888 set-record-type-discloser! 887 ())
(889 record-types #f ())
(890 record-field-index 889 ())
(891 loop 890 ())
(892 record-types #f ())
(893 record-constructor 892 ())
(894 #f 893 ())
(895 #f 893 ())
(896 loop 895 ())
(897 record-types #f ())
(898 record-accessor 897 ())
(899 #f 898 ())
(900 record-types #f ())
(901 record-modifier 900 ())
(902 #f 901 ())
(903 record-types #f ())
(904 record-predicate 903 ())
(905 #f 904 ())
(906 record-types #f ())
(907 define-record-discloser 906 ())
(908 record-types #f ())
(909 disclose-record 908 ())
(910 record-types #f ())
(911 define-record-resumer 910 ())
(912 record-types #f ())
(913 resume-record 912 ())
(914 record-types #f ())
(915 initialize-records! 914 ())
(916 loop##26 915 ())
(917 record-types #f ())
(918 record-types #f ())
(919 record-types #f ())
(920 record-types #f ())
(921 define-record-types #f ())
(922 methods #f ())
(923 &add-method! 922 ())
(924 methods #f ())
(925 &disclose 924 ())
(926 methods #f ())
(927 &disclose 926 ())
(928 methods #f ())
(929 methods #f ())
(930 disclose 929 ())
(931 methods #f ())
(932 &same-type? 931 ())
(933 methods #f ())
(934 &type-priority 933 ())
(935 methods #f ())
(936 &type-predicate 935 ())
(937 methods #f ())
(938 #f 937 ())
(939 methods #f ())
(940 singleton-value 939 ())
(941 methods #f ())
(942 singleton 941 ())
(943 methods #f ())
(944 methods #f ())
(945 &same-type? 944 ())
(946 methods #f ())
(947 &same-type? 946 ())
(948 methods #f ())
(949 methods #f ())
(950 same-type? 949 ())
(951 methods #f ())
(952 &type-superiors 951 ())
(953 methods #f ())
(954 &type-superiors 953 ())
(955 methods #f ())
(956 methods #f ())
(957 type-superiors 956 ())
(958 methods #f ())
(959 &type-priority 958 ())
(960 methods #f ())
(961 &type-priority 960 ())
(962 methods #f ())
(963 methods #f ())
(964 type-priority 963 ())
(965 methods #f ())
(966 &type-predicate 965 ())
(967 methods #f ())
(968 &type-predicate 967 ())
(969 methods #f ())
(970 methods #f ())
(971 type-predicate 970 ())
(972 methods #f ())
(973 add-method! 972 ())
(974 methods #f ())
(975 methods #f ())
(976 add-method! 975 ())
(977 methods #f ())
(978 #f 977 ())
(979 methods #f ())
(980 set-method-table-methods! 979 ())
(981 methods #f ())
(982 method-table-methods 981 ())
(983 methods #f ())
(984 method-table-prototype 983 ())
(985 methods #f ())
(986 make-generic 985 ())
(987 methods #f ())
(988 method-table-get-perform 987 ())
(989 methods #f ())
(990 method-table-set-perform! 989 ())
(991 methods #f ())
(992 method-table-id 991 ())
(993 methods #f ())
(994 really-make-method-table 993 ())
(995 methods #f ())
(996 methods #f ())
(997 #f 996 ())
(998 methods #f ())
(999 method-info-types 998 ())
(1000 methods #f ())
(1001 method-info-n-ary? 1000 ())
(1002 methods #f ())
(1003 method-info-proc 1002 ())
(1004 methods #f ())
(1005 really-make-method-info 1004 ())
(1006 methods #f ())
(1007 methods #f ())
(1008 record-type-priority 1007 ())
(1009 methods #f ())
(1010 methods #f ())
(1011 methods #f ())
(1012 methods #f ())
(1013 methods #f ())
(1014 methods #f ())
(1015 methods #f ())
(1016 methods #f ())
(1017 methods #f ())
(1018 methods #f ())
(1019 methods #f ())
(1020 methods #f ())
(1021 methods #f ())
(1022 #f 1021 ())
(1023 methods #f ())
(1024 methods #f ())
(1025 methods #f ())
(1026 methods #f ())
(1027 methods #f ())
(1028 methods #f ())
(1029 #f 1028 ())
(1030 methods #f ())
(1031 methods #f ())
(1032 methods #f ())
(1033 methods #f ())
(1034 #f 1033 ())
(1035 methods #f ())
(1036 simple-type-superiors 1035 ())
(1037 methods #f ())
(1038 simple-type-predicate 1037 ())
(1039 methods #f ())
(1040 simple-type-priority 1039 ())
(1041 methods #f ())
(1042 simple-type-id 1041 ())
(1043 methods #f ())
(1044 really-make-simple-type 1043 ())
(1045 methods #f ())
(1046 methods #f ())
(1047 simple-type? 1046 ())
(1048 methods #f ())
(1049 %type-priority 1048 ())
(1050 methods #f ())
(1051 compute-priority 1050 ())
(1052 methods #f ())
(1053 make-simple-type 1052 ())
(1054 methods #f ())
(1055 %type-predicate 1054 ())
(1056 methods #f ())
(1057 %same-type? 1056 ())
(1058 methods #f ())
(1059 value? 1058 ())
(1060 methods #f ())
(1061 method-info? 1060 ())
(1062 methods #f ())
(1063 make-method-info 1062 ())
(1064 methods #f ())
(1065 empty-method-list 1064 ())
(1066 methods #f ())
(1067 more-specific-type? 1066 ())
(1068 methods #f ())
(1069 more-specific? 1068 ())
(1070 loop 1069 ())
(1071 methods #f ())
(1072 every2 1071 ())
(1073 methods #f ())
(1074 same-applicability? 1073 ())
(1075 methods #f ())
(1076 insert-method 1075 ())
(1077 recur 1076 ())
(1078 methods #f ())
(1079 method-table? 1078 ())
(1080 methods #f ())
(1081 last-action 1080 ())
(1082 #f 1081 ())
(1083 methods #f ())
(1084 one-action 1083 ())
(1085 #f 1084 ())
(1086 #f 1085 ())
(1087 methods #f ())
(1088 check-for-next 1087 ())
(1089 #f 1088 ())
(1090 methods #f ())
(1091 check-next 1090 ())
(1092 #f 1091 ())
(1093 methods #f ())
(1094 argument-sequence-predicate 1093 ())
(1095 recur 1094 ())
(1096 methods #f ())
(1097 methods->perform 1096 ())
(1098 recur 1097 ())
(1099 methods #f ())
(1100 add-to-method-table! 1099 ())
(1101 methods #f ())
(1102 set-final-method! 1101 ())
(1103 methods #f ())
(1104 make-cell-for-generic 1103 ())
(1105 #f 1104 ())
(1106 #f 1104 ())
(1107 #f 1104 ())
(1108 methods #f ())
(1109 make-method-table 1108 ())
(1110 #f 1109 ())
(1111 #f 1109 ())
(1112 methods #f ())
(1113 apply-generic 1112 ())
(1114 methods #f ())
(1115 compare-to 1114 ())
(1116 #f 1115 ())
(1117 methods #f ())
(1118 proc->discloser 1117 ())
(1119 #f 1118 ())
(1120 #f 1119 ())
(1121 methods #f ())
(1122 number-i/o #f ())
(1123 string->integer 1122 ())
(1124 do-it 1122 ())
(1125 loop 1124 ())
(1126 digit->integer 1122 ())
(1127 number-i/o #f ())
(1128 set-exactness 1127 ())
(1129 number-i/o #f ())
(1130 &really-string->number 1129 ())
(1131 number-i/o #f ())
(1132 #f 1131 ())
(1133 loop 1132 ())
(1134 number-i/o #f ())
(1135 &really-string->number 1134 ())
(1136 number-i/o #f ())
(1137 number-i/o #f ())
(1138 number-i/o #f ())
(1139 string->number 1138 ())
(1140 loop 1139 ())
(1141 radix-is 1140 ())
(1142 radix-is 1140 ())
(1143 loop 1140 ())
(1144 number-i/o #f ())
(1145 integer->string 1144 ())
(1146 recur 1145 ())
(1147 integer->digit 1144 ())
(1148 number-i/o #f ())
(1149 &number->string 1148 ())
(1150 number-i/o #f ())
(1151 &number->string 1150 ())
(1152 number-i/o #f ())
(1153 number->string 1152 ())
(1154 number-i/o #f ())
(1155 number-i/o #f ())
(1156 fluids #f ())
(1157 fluids #f ())
(1158 set-fluid-top-level-value! 1157 ())
(1159 fluids #f ())
(1160 fluid-top-level-value 1159 ())
(1161 fluids #f ())
(1162 make-fluid 1161 ())
(1163 fluids #f ())
(1164 fluids #f ())
(1165 thread-dynamic-env 1164 ())
(1166 fluids #f ())
(1167 thread-dynamic-point 1166 ())
(1168 fluids #f ())
(1169 thread-proposal 1168 ())
(1170 fluids #f ())
(1171 make-thread 1170 ())
(1172 fluids #f ())
(1173 fluids #f ())
(1174 get-dynamic-env 1173 ())
(1175 fluids #f ())
(1176 set-dynamic-env! 1175 ())
(1177 fluids #f ())
(1178 get-dynamic-point 1177 ())
(1179 fluids #f ())
(1180 set-dynamic-point! 1179 ())
(1181 fluids #f ())
(1182 empty-dynamic-env 1181 ())
(1183 fluids #f ())
(1184 initialize-dynamic-state! 1183 ())
(1185 fluids #f ())
(1186 with-dynamic-env 1185 ())
(1187 #f 1186 ())
(1188 fluids #f ())
(1189 fluid 1188 ())
(1190 fluids #f ())
(1191 set-fluid! 1190 ())
(1192 fluids #f ())
(1193 let-fluid 1192 ())
(1194 fluids #f ())
(1195 let-fluids 1194 ())
(1196 loop 1195 ())
(1197 fluids #f ())
(1198 fluid-cell-ref 1197 ())
(1199 fluids #f ())
(1200 fluid-cell-set! 1199 ())
(1201 enumerated #f ())
(1202 lookup-enumerand 1201 ())
(1203 loop 1202 ())
(1204 architecture #f ())
(1205 architecture #f ())
(1206 architecture #f ())
(1207 architecture #f ())
(1208 architecture #f ())
(1209 architecture #f ())
(1210 architecture #f ())
(1211 architecture #f ())
(1212 architecture #f ())
(1213 architecture #f ())
(1214 architecture #f ())
(1215 architecture #f ())
(1216 architecture #f ())
(1217 architecture #f ())
(1218 architecture #f ())
(1219 architecture #f ())
(1220 architecture #f ())
(1221 architecture #f ())
(1222 architecture #f ())
(1223 architecture #f ())
(1224 architecture #f ())
(1225 architecture #f ())
(1226 architecture #f ())
(1227 architecture #f ())
(1228 architecture #f ())
(1229 architecture #f ())
(1230 architecture #f ())
(1231 architecture #f ())
(1232 architecture #f ())
(1233 architecture #f ())
(1234 architecture #f ())
(1235 architecture #f ())
(1236 architecture #f ())
(1237 architecture #f ())
(1238 architecture #f ())
(1239 architecture #f ())
(1240 next-protocol 1239 ())
(1241 architecture #f ())
(1242 architecture #f ())
(1243 architecture #f ())
(1244 architecture #f ())
(1245 architecture #f ())
(1246 architecture #f ())
(1247 architecture #f ())
(1248 architecture #f ())
(1249 architecture #f ())
(1250 architecture #f ())
(1251 architecture #f ())
(1252 architecture #f ())
(1253 architecture #f ())
(1254 architecture #f ())
(1255 architecture #f ())
(1256 proposals #f ())
(1257 proposals #f ())
(1258 invalidate-current-proposal! 1257 ())
(1259 proposals #f ())
(1260 remove-current-proposal! 1259 ())
(1261 proposals #f ())
(1262 call-ensuring-atomicity! 1261 ())
(1263 proposals #f ())
(1264 call-ensuring-atomicity 1263 ())
(1265 proposals #f ())
(1266 call-atomically! 1265 ())
(1267 #f 1266 ())
(1268 #f 1266 ())
(1269 lose 1268 ())
(1270 proposals #f ())
(1271 call-atomically 1270 ())
(1272 loop 1271 ())
(1273 #f 1272 ())
(1274 session-data #f ())
(1275 make-session-data-slot! 1274 ())
(1276 session-data #f ())
(1277 session-data-ref 1276 ())
(1278 session-data #f ())
(1279 session-data-set! 1278 ())
(1280 session-data #f ())
(1281 initialize-session-data! 1280 ())
(1282 session-data #f ())
(1283 conditions #f ())
(1284 conditions #f ())
(1285 conditions #f ())
(1286 conditions #f ())
(1287 conditions #f ())
(1288 conditions #f ())
(1289 conditions #f ())
(1290 conditions #f ())
(1291 conditions #f ())
(1292 make-exception 1291 ())
(1293 conditions #f ())
(1294 conditions #f ())
(1295 conditions #f ())
(1296 conditions #f ())
(1297 conditions #f ())
(1298 conditions #f ())
(1299 conditions #f ())
(1300 conditions #f ())
(1301 conditions #f ())
(1302 conditions #f ())
(1303 conditions #f ())
(1304 conditions #f ())
(1305 conditions #f ())
(1306 conditions #f ())
(1307 condition? 1306 ())
(1308 conditions #f ())
(1309 condition-predicate 1308 ())
(1310 #f 1309 ())
(1311 conditions #f ())
(1312 define-condition-type 1311 ())
(1313 #f 1312 ())
(1314 conditions #f ())
(1315 condition-supertypes 1314 ())
(1316 conditions #f ())
(1317 wind #f ())
(1318 point-depth 1317 ())
(1319 wind #f ())
(1320 point-in 1319 ())
(1321 wind #f ())
(1322 point-out 1321 ())
(1323 wind #f ())
(1324 point-dynamic-env 1323 ())
(1325 wind #f ())
(1326 point-parent 1325 ())
(1327 wind #f ())
(1328 make-point 1327 ())
(1329 wind #f ())
(1330 wind #f ())
(1331 dynamic-wind 1330 ())
(1332 wind #f ())
(1333 travel-to-point! 1332 ())
(1334 wind #f ())
(1335 continuation->procedure 1334 ())
(1336 #f 1335 ())
(1337 #f 1336 ())
(1338 wind #f ())
(1339 call-with-current-continuation 1338 ())
(1340 #f 1339 ())
(1341 templates #f ())
(1342 template-code 1341 ())
(1343 templates #f ())
(1344 template-info 1343 ())
(1345 templates #f ())
(1346 template-package-id 1345 ())
(1347 templates #f ())
(1348 set-template-code! 1347 ())
(1349 templates #f ())
(1350 set-template-info! 1349 ())
(1351 templates #f ())
(1352 set-template-package-id! 1351 ())
(1353 templates #f ())
(1354 more-types #f ())
(1355 &disclose 1354 ())
(1356 more-types #f ())
(1357 more-types #f ())
(1358 &disclose 1357 ())
(1359 more-types #f ())
(1360 more-types #f ())
(1361 more-types #f ())
(1362 more-types #f ())
(1363 more-types #f ())
(1364 more-types #f ())
(1365 more-types #f ())
(1366 more-types #f ())
(1367 more-types #f ())
(1368 continuations #f ())
(1369 &disclose 1368 ())
(1370 continuations #f ())
(1371 continuations #f ())
(1372 continuations #f ())
(1373 continuations #f ())
(1374 continuations #f ())
(1375 continuations #f ())
(1376 continuations #f ())
(1377 continuations #f ())
(1378 make-ref 1377 ())
(1379 #f 1378 ())
(1380 continuations #f ())
(1381 exception-continuation? 1380 ())
(1382 continuations #f ())
(1383 call-with-values-continuation? 1382 ())
(1384 continuations #f ())
(1385 continuation-pc 1384 ())
(1386 continuations #f ())
(1387 continuation-code 1386 ())
(1388 continuations #f ())
(1389 continuation-arg 1388 ())
(1390 continuations #f ())
(1391 continuation-template 1390 ())
(1392 loop 1391 ())
(1393 continuations #f ())
(1394 continuation-arg-count 1393 ())
(1395 exceptions #f ())
(1396 &disclose 1395 ())
(1397 exceptions #f ())
(1398 &disclose 1397 ())
(1399 exceptions #f ())
(1400 report-errors-as-warnings 1399 ())
(1401 #f 1400 ())
(1402 exceptions #f ())
(1403 ignore-errors 1402 ())
(1404 #f 1403 ())
(1405 #f 1404 ())
(1406 exceptions #f ())
(1407 continuation-preview 1406 ())
(1408 exceptions #f ())
(1409 report-utter-lossage 1408 ())
(1410 #f 1409 ())
(1411 exceptions #f ())
(1412 last-resort-condition-handler 1411 ())
(1413 #f 1412 ())
(1414 #f 1413 ())
(1415 exceptions #f ())
(1416 initialize-exceptions! 1415 ())
(1417 #f 1416 ())
(1418 exceptions #f ())
(1419 exceptions #f ())
(1420 with-handler 1419 ())
(1421 exceptions #f ())
(1422 really-signal-condition 1421 ())
(1423 loop 1422 ())
(1424 #f 1423 ())
(1425 exceptions #f ())
(1426 extend-opcode! 1425 ())
(1427 except 1426 ())
(1428 #f 1426 ())
(1429 exceptions #f ())
(1430 #f 1429 ())
(1431 exceptions #f ())
(1432 #f 1431 ())
(1433 exceptions #f ())
(1434 exceptions #f ())
(1435 signal-exception 1434 ())
(1436 exceptions #f ())
(1437 define-exception-handler 1436 ())
(1438 i/o #f ())
(1439 i/o #f ())
(1440 i/o #f ())
(1441 i/o #f ())
(1442 i/o #f ())
(1443 i/o #f ())
(1444 i/o #f ())
(1445 i/o #f ())
(1446 #f 1445 ())
(1447 #f 1445 ())
(1448 #f 1445 ())
(1449 #f 1445 ())
(1450 #f 1445 ())
(1451 i/o #f ())
(1452 i/o #f ())
(1453 i/o #f ())
(1454 i/o #f ())
(1455 i/o #f ())
(1456 i/o #f ())
(1457 i/o #f ())
(1458 i/o #f ())
(1459 &disclose 1458 ())
(1460 i/o #f ())
(1461 &disclose 1460 ())
(1462 i/o #f ())
(1463 port-handler-discloser 1462 ())
(1464 i/o #f ())
(1465 port-handler-close 1464 ())
(1466 i/o #f ())
(1467 port-handler-char 1466 ())
(1468 i/o #f ())
(1469 port-handler-block 1468 ())
(1470 i/o #f ())
(1471 port-handler-ready? 1470 ())
(1472 i/o #f ())
(1473 port-handler-force 1472 ())
(1474 i/o #f ())
(1475 make-port-handler 1474 ())
(1476 i/o #f ())
(1477 i/o #f ())
(1478 port-handler? 1477 ())
(1479 i/o #f ())
(1480 disclose-port 1479 ())
(1481 i/o #f ())
(1482 one-arg-proc->handler 1481 ())
(1483 #f 1482 ())
(1484 i/o #f ())
(1485 two-arg-proc->handler 1484 ())
(1486 #f 1485 ())
(1487 i/o #f ())
(1488 initialize-i/o-handlers! 1487 ())
(1489 #f 1488 ())
(1490 #f 1488 ())
(1491 #f 1488 ())
(1492 i/o #f ())
(1493 open-input-port? 1492 ())
(1494 i/o #f ())
(1495 current-input-port 1494 ())
(1496 i/o #f ())
(1497 input-port-option 1496 ())
(1498 i/o #f ())
(1499 char-ready? 1498 ())
(1500 i/o #f ())
(1501 real-char-ready? 1500 ())
(1502 i/o #f ())
(1503 okay-limits? 1502 ())
(1504 i/o #f ())
(1505 read-block 1504 ())
(1506 i/o #f ())
(1507 open-output-port? 1506 ())
(1508 i/o #f ())
(1509 write-block 1508 ())
(1510 i/o #f ())
(1511 write-string 1510 ())
(1512 i/o #f ())
(1513 output-port-ready? 1512 ())
(1514 i/o #f ())
(1515 force-output 1514 ())
(1516 i/o #f ())
(1517 force-output-if-open 1516 ())
(1518 i/o #f ())
(1519 close-input-port 1518 ())
(1520 i/o #f ())
(1521 close-output-port 1520 ())
(1522 i/o #f ())
(1523 open-port? 1522 ())
(1524 i/o #f ())
(1525 make-input-port-closed! 1524 ())
(1526 i/o #f ())
(1527 make-unbuffered-input-port 1526 ())
(1528 i/o #f ())
(1529 make-output-port-closed! 1528 ())
(1530 i/o #f ())
(1531 make-unbuffered-output-port 1530 ())
(1532 i/o #f ())
(1533 make-null-output-port 1532 ())
(1534 i/o #f ())
(1535 okay-buffer? 1534 ())
(1536 i/o #f ())
(1537 make-buffered-input-port 1536 ())
(1538 i/o #f ())
(1539 make-buffered-output-port 1538 ())
(1540 i/o #f ())
(1541 make-one-char-input 1540 ())
(1542 #f 1541 ())
(1543 #f 1542 ())
(1544 #f 1542 ())
(1545 lose 1544 ())
(1546 i/o #f ())
(1547 get-available-bytes! 1546 ())
(1548 i/o #f ())
(1549 make-read-block 1548 ())
(1550 #f 1549 ())
(1551 loop 1550 ())
(1552 #f 1551 ())
(1553 #f 1551 ())
(1554 lose 1553 ())
(1555 i/o #f ())
(1556 make-char-ready? 1555 ())
(1557 #f 1556 ())
(1558 #f 1557 ())
(1559 #f 1557 ())
(1560 lose 1559 ())
(1561 #f 1560 ())
(1562 #f 1560 ())
(1563 i/o #f ())
(1564 make-buffered-input-port-handler 1563 ())
(1565 #f 1564 ())
(1566 #f 1564 ())
(1567 #f 1566 ())
(1568 #f 1566 ())
(1569 lose 1568 ())
(1570 i/o #f ())
(1571 note-buffer-reuse! 1570 ())
(1572 i/o #f ())
(1573 buffer-length 1572 ())
(1574 i/o #f ())
(1575 make-closer 1574 ())
(1576 #f 1575 ())
(1577 #f 1576 ())
(1578 #f 1576 ())
(1579 lose 1578 ())
(1580 i/o #f ())
(1581 make-one-char-output 1580 ())
(1582 #f 1581 ())
(1583 #f 1582 ())
(1584 #f 1582 ())
(1585 lose 1584 ())
(1586 i/o #f ())
(1587 copy-bytes-out! 1586 ())
(1588 i/o #f ())
(1589 make-write-block 1588 ())
(1590 #f 1589 ())
(1591 loop 1590 ())
(1592 #f 1591 ())
(1593 #f 1591 ())
(1594 lose 1593 ())
(1595 i/o #f ())
(1596 make-forcer 1595 ())
(1597 #f 1596 ())
(1598 #f 1597 ())
(1599 #f 1597 ())
(1600 lose 1599 ())
(1601 i/o #f ())
(1602 make-buffered-output-port-handler 1601 ())
(1603 #f 1602 ())
(1604 i/o #f ())
(1605 periodically-force-output! 1604 ())
(1606 i/o #f ())
(1607 make-forcing-thunk 1606 ())
(1608 #f 1607 ())
(1609 #f 1608 ())
(1610 #f 1608 ())
(1611 #f 1610 ())
(1612 i/o #f ())
(1613 output-port-forcers 1612 ())
(1614 loop 1613 ())
(1615 i/o #f ())
(1616 periodically-flushed-ports 1615 ())
(1617 loop 1616 ())
(1618 i/o #f ())
(1619 current-output-port 1618 ())
(1620 i/o #f ())
(1621 current-error-port 1620 ())
(1622 i/o #f ())
(1623 current-noise-port 1622 ())
(1624 i/o #f ())
(1625 with-current-ports 1624 ())
(1626 i/o #f ())
(1627 initialize-i/o 1626 ())
(1628 i/o #f ())
(1629 call-with-current-input-port 1628 ())
(1630 i/o #f ())
(1631 call-with-current-output-port 1630 ())
(1632 i/o #f ())
(1633 call-with-current-noise-port 1632 ())
(1634 i/o #f ())
(1635 silently 1634 ())
(1636 i/o #f ())
(1637 output-port-option 1636 ())
(1638 i/o #f ())
(1639 newline 1638 ())
(1640 i/o #f ())
(1641 i/o #f ())
(1642 i/o #f ())
(1643 writing #f ())
(1644 display 1643 ())
(1645 recur 1644 ())
(1646 writing #f ())
(1647 display-type-name 1646 ())
(1648 loop##108 1647 ())
(1649 writing #f ())
(1650 write-other 1649 ())
(1651 #f 1650 ())
(1652 writing #f ())
(1653 write-vector 1652 ())
(1654 loop 1653 ())
(1655 writing #f ())
(1656 quotation? 1655 ())
(1657 writing #f ())
(1658 write-list 1657 ())
(1659 loop 1658 ())
(1660 writing #f ())
(1661 write-string-literal 1660 ())
(1662 loop##112 1661 ())
(1663 writing #f ())
(1664 character-name 1663 ())
(1665 writing #f ())
(1666 write-char-literal 1665 ())
(1667 writing #f ())
(1668 write-number 1667 ())
(1669 writing #f ())
(1670 write-boolean 1669 ())
(1671 writing #f ())
(1672 recurring-write 1671 ())
(1673 writing #f ())
(1674 write 1673 ())
(1675 recur 1674 ())
(1676 reading #f ())
(1677 loop##114 1676 ())
(1678 reading #f ())
(1679 reading #f ())
(1680 number-sharp-macro 1679 ())
(1681 #f 1679 ())
(1682 reading #f ())
(1683 #f 1682 ())
(1684 reading #f ())
(1685 #f 1684 ())
(1686 reading #f ())
(1687 #f 1686 ())
(1688 reading #f ())
(1689 #f 1688 ())
(1690 reading #f ())
(1691 #f 1690 ())
(1692 reading #f ())
(1693 #f 1692 ())
(1694 reading #f ())
(1695 #f 1694 ())
(1696 loop 1695 ())
(1697 reading #f ())
(1698 #f 1697 ())
(1699 reading #f ())
(1700 #f 1699 ())
(1701 reading #f ())
(1702 #f 1701 ())
(1703 reading #f ())
(1704 #f 1703 ())
(1705 reading #f ())
(1706 reading #f ())
(1707 sub-read-constituent 1706 ())
(1708 #f 1706 ())
(1709 reading #f ())
(1710 sub-read-whitespace 1709 ())
(1711 #f 1709 ())
(1712 reading #f ())
(1713 reading #f ())
(1714 #f 1713 ())
(1715 reading #f ())
(1716 reading #f ())
(1717 reading #f ())
(1718 reading #f ())
(1719 reader-token? 1718 ())
(1720 reading #f ())
(1721 reading-error 1720 ())
(1722 reading #f ())
(1723 sub-read 1722 ())
(1724 reading #f ())
(1725 read 1724 ())
(1726 loop 1725 ())
(1727 reading #f ())
(1728 sub-read-carefully 1727 ())
(1729 reading #f ())
(1730 make-reader-token 1729 ())
(1731 reading #f ())
(1732 set-standard-syntax! 1731 ())
(1733 reading #f ())
(1734 set-standard-read-macro! 1733 ())
(1735 reading #f ())
(1736 sub-read-list 1735 ())
(1737 recur 1736 ())
(1738 reading #f ())
(1739 gobble-line 1738 ())
(1740 loop 1739 ())
(1741 reading #f ())
(1742 define-sharp-macro 1741 ())
(1743 reading #f ())
(1744 proper-list? 1743 ())
(1745 reading #f ())
(1746 preferred-case 1745 ())
(1747 reading #f ())
(1748 sub-read-token 1747 ())
(1749 loop 1748 ())
(1750 reading #f ())
(1751 parse-token 1750 ())
(1752 reading #f ())
(1753 reading #f ())
(1754 queues #f ())
(1755 queues #f ())
(1756 queue-uid 1755 ())
(1757 queues #f ())
(1758 set-queue-head! 1757 ())
(1759 queues #f ())
(1760 queue-head 1759 ())
(1761 queues #f ())
(1762 set-queue-tail! 1761 ())
(1763 queues #f ())
(1764 queue-tail 1763 ())
(1765 queues #f ())
(1766 really-make-queue 1765 ())
(1767 queues #f ())
(1768 queues #f ())
(1769 queue? 1768 ())
(1770 queues #f ())
(1771 next-uid 1770 ())
(1772 #f 1771 ())
(1773 queues #f ())
(1774 make-queue 1773 ())
(1775 queues #f ())
(1776 queue-empty? 1775 ())
(1777 queues #f ())
(1778 enqueue! 1777 ())
(1779 #f 1778 ())
(1780 queues #f ())
(1781 queue-front 1780 ())
(1782 #f 1781 ())
(1783 queues #f ())
(1784 dequeue! 1783 ())
(1785 #f 1784 ())
(1786 queues #f ())
(1787 empty-queue! 1786 ())
(1788 #f 1787 ())
(1789 queues #f ())
(1790 on-queue? 1789 ())
(1791 queues #f ())
(1792 delete-from-queue-if! 1791 ())
(1793 #f 1792 ())
(1794 loop 1793 ())
(1795 queues #f ())
(1796 delete-from-queue! 1795 ())
(1797 #f 1796 ())
(1798 queues #f ())
(1799 queue->list 1798 ())
(1800 #f 1799 ())
(1801 #f 1800 ())
(1802 queues #f ())
(1803 list->queue 1802 ())
(1804 loop 1803 ())
(1805 queues #f ())
(1806 queue-length 1805 ())
(1807 #f 1806 ())
(1808 interrupts #f ())
(1809 #f 1808 ())
(1810 interrupts #f ())
(1811 interrupts #f ())
(1812 interrupts #f ())
(1813 interrupts #f ())
(1814 enabled-interrupts 1813 ())
(1815 interrupts #f ())
(1816 post-gc-handler 1815 ())
(1817 #f 1816 ())
(1818 #f 1817 ())
(1819 #f 1817 ())
(1820 #f 1819 ())
(1821 #f 1819 ())
(1822 interrupts #f ())
(1823 initialize-interrupts! 1822 ())
(1824 #f 1823 ())
(1825 loop##136 1824 ())
(1826 #f 1825 ())
(1827 #f 1824 ())
(1828 #f 1827 ())
(1829 interrupts #f ())
(1830 set-interrupt-handler! 1829 ())
(1831 interrupts #f ())
(1832 with-interrupts 1831 ())
(1833 #f 1832 ())
(1834 interrupts #f ())
(1835 with-interrupts-inhibited 1834 ())
(1836 interrupts #f ())
(1837 with-interrupts-allowed 1836 ())
(1838 interrupts #f ())
(1839 disable-interrupts! 1838 ())
(1840 interrupts #f ())
(1841 enable-interrupts! 1840 ())
(1842 interrupts #f ())
(1843 call-after-gc! 1842 ())
(1844 interrupts #f ())
(1845 call-before-heap-overflow! 1844 ())
(1846 interrupts #f ())
(1847 interrupts #f ())
(1848 threads #f ())
(1849 threads #f ())
(1850 threads #f ())
(1851 threads #f ())
(1852 threads #f ())
(1853 threads #f ())
(1854 threads #f ())
(1855 threads #f ())
(1856 threads #f ())
(1857 #f 1856 ())
(1858 threads #f ())
(1859 thread-dynamic-env 1858 ())
(1860 threads #f ())
(1861 set-thread-dynamic-point! 1860 ())
(1862 threads #f ())
(1863 thread-dynamic-point 1862 ())
(1864 threads #f ())
(1865 thread-proposal 1864 ())
(1866 threads #f ())
(1867 set-thread-time! 1866 ())
(1868 threads #f ())
(1869 thread-time 1868 ())
(1870 threads #f ())
(1871 set-thread-continuation! 1870 ())
(1872 threads #f ())
(1873 thread-continuation 1872 ())
(1874 threads #f ())
(1875 set-thread-arguments! 1874 ())
(1876 threads #f ())
(1877 thread-arguments 1876 ())
(1878 threads #f ())
(1879 set-thread-scheduler! 1878 ())
(1880 threads #f ())
(1881 thread-scheduler 1880 ())
(1882 threads #f ())
(1883 set-thread-current-task! 1882 ())
(1884 threads #f ())
(1885 thread-current-task 1884 ())
(1886 threads #f ())
(1887 set-thread-events! 1886 ())
(1888 threads #f ())
(1889 thread-events 1888 ())
(1890 threads #f ())
(1891 set-thread-data! 1890 ())
(1892 threads #f ())
(1893 thread-data 1892 ())
(1894 threads #f ())
(1895 set-thread-queue! 1894 ())
(1896 threads #f ())
(1897 thread-queue 1896 ())
(1898 threads #f ())
(1899 thread-uid 1898 ())
(1900 threads #f ())
(1901 thread-name 1900 ())
(1902 threads #f ())
(1903 really-make-thread 1902 ())
(1904 threads #f ())
(1905 threads #f ())
(1906 thread? 1905 ())
(1907 threads #f ())
(1908 compose-continuation 1907 ())
(1909 #f 1908 ())
(1910 #f 1909 ())
(1911 #f 1910 ())
(1912 #f 1911 ())
(1913 #f 1912 ())
(1914 threads #f ())
(1915 thunk->continuation 1914 ())
(1916 threads #f ())
(1917 max2 1916 ())
(1918 threads #f ())
(1919 interrupt-timer-time 1918 ())
(1920 threads #f ())
(1921 debit-down! 1920 ())
(1922 loop 1921 ())
(1923 threads #f ())
(1924 run-thread 1923 ())
(1925 #f 1924 ())
(1926 threads #f ())
(1927 switch-to-thread 1926 ())
(1928 #f 1927 ())
(1929 threads #f ())
(1930 suspend-to 1929 ())
(1931 threads #f ())
(1932 suspend 1931 ())
(1933 threads #f ())
(1934 thread-top-level 1933 ())
(1935 thread-start 1934 ())
(1936 #f 1935 ())
(1937 threads #f ())
(1938 make-thread 1937 ())
(1939 threads #f ())
(1940 all-threads 1939 ())
(1941 threads #f ())
(1942 thread-uid->thread 1941 ())
(1943 loop 1942 ())
(1944 threads #f ())
(1945 add-event! 1944 ())
(1946 threads #f ())
(1947 next-event! 1946 ())
(1948 threads #f ())
(1949 enqueue-thread! 1948 ())
(1950 threads #f ())
(1951 dequeue-thread! 1950 ())
(1952 threads #f ())
(1953 remove-thread-from-queue! 1952 ())
(1954 threads #f ())
(1955 event-pending? 1954 ())
(1956 threads #f ())
(1957 min 1956 ())
(1958 threads #f ())
(1959 schedule-interrupt! 1958 ())
(1960 threads #f ())
(1961 run-next-thread 1960 ())
(1962 threads #f ())
(1963 debit-thread-times-and-run! 1962 ())
(1964 loop 1963 ())
(1965 threads #f ())
(1966 find-and-run-next-thread 1965 ())
(1967 loop 1966 ())
(1968 threads #f ())
(1969 run 1968 ())
(1970 threads #f ())
(1971 handle-timer-interrupt 1970 ())
(1972 threads #f ())
(1973 exit 1972 ())
(1974 threads #f ())
(1975 wait 1974 ())
(1976 threads #f ())
(1977 waiting? 1976 ())
(1978 threads #f ())
(1979 relinquish-timeslice 1978 ())
(1980 threads #f ())
(1981 block 1980 ())
(1982 threads #f ())
(1983 maybe-commit-and-block 1982 ())
(1984 threads #f ())
(1985 running? 1984 ())
(1986 loop 1985 ())
(1987 threads #f ())
(1988 interrupt-thread 1987 ())
(1989 threads #f ())
(1990 propogate-upcall 1989 ())
(1991 #f 1990 ())
(1992 threads #f ())
(1993 upcall 1992 ())
(1994 threads #f ())
(1995 kill-thread! 1994 ())
(1996 #f 1995 ())
(1997 threads #f ())
(1998 get-next-event! 1997 ())
(1999 threads #f ())
(2000 schedule-wakeup 1999 ())
(2001 threads #f ())
(2002 really-schedule-event 2001 ())
(2003 threads #f ())
(2004 root-scheduler 2003 ())
(2005 threads #f ())
(2006 maybe-suspend 2005 ())
(2007 loop 2006 ())
(2008 threads #f ())
(2009 schedule-event 2008 ())
(2010 threads #f ())
(2011 show-running 2010 ())
(2012 loop##188 2011 ())
(2013 threads #f ())
(2014 spawn-on-scheduler 2013 ())
(2015 threads #f ())
(2016 spawn 2015 ())
(2017 threads #f ())
(2018 spawn-on-root 2017 ())
(2019 threads #f ())
(2020 make-ready 2019 ())
(2021 threads #f ())
(2022 make-threads-ready 2021 ())
(2023 loop 2022 ())
(2024 threads #f ())
(2025 maybe-commit-and-make-ready 2024 ())
(2026 threads #f ())
(2027 cancel-timer-interrupt! 2026 ())
(2028 threads #f ())
(2029 real-time 2028 ())
(2030 threads #f ())
(2031 start-multitasking 2030 ())
(2032 #f 2031 ())
(2033 #f 2032 ())
(2034 #f 2032 ())
(2035 #f 2034 ())
(2036 #f 2035 ())
(2037 #f 2035 ())
(2038 threads #f ())
(2039 with-threads 2038 ())
(2040 #f 2039 ())
(2041 #f 2040 ())
(2042 #f 2040 ())
(2043 #f 2040 ())
(2044 threads #f ())
(2045 terminate-current-thread 2044 ())
(2046 threads #f ())
(2047 insert 2046 ())
(2048 threads #f ())
(2049 coerce-to-nonnegative-integer 2048 ())
(2050 threads #f ())
(2051 sleep 2050 ())
(2052 #f 2051 ())
(2053 threads #f ())
(2054 wake-some-threads 2053 ())
(2055 loop 2054 ())
(2056 threads #f ())
(2057 threads #f ())
(2058 threads #f ())
(2059 condvars #f ())
(2060 #f 2059 ())
(2061 condvars #f ())
(2062 condvar-queue 2061 ())
(2063 condvars #f ())
(2064 set-condvar-has-value?! 2063 ())
(2065 condvars #f ())
(2066 condvar-has-value? 2065 ())
(2067 condvars #f ())
(2068 set-condvar-value! 2067 ())
(2069 condvars #f ())
(2070 condvar-value 2069 ())
(2071 condvars #f ())
(2072 condvar-id 2071 ())
(2073 condvars #f ())
(2074 really-make-condvar 2073 ())
(2075 condvars #f ())
(2076 condvars #f ())
(2077 condvar? 2076 ())
(2078 condvars #f ())
(2079 make-condvar 2078 ())
(2080 condvars #f ())
(2081 maybe-commit-and-wait-for-condvar 2080 ())
(2082 condvars #f ())
(2083 maybe-commit-and-set-condvar! 2082 ())
(2084 condvars #f ())
(2085 condvar-has-waiters? 2084 ())
(2086 channel-i/o #f ())
(2087 abort-unwanted-i/o! 2086 ())
(2088 loop 2087 ())
(2089 channel-i/o #f ())
(2090 fetch-channel-condvar! 2089 ())
(2091 loop 2090 ())
(2092 channel-i/o #f ())
(2093 channel-i/o #f ())
(2094 add-channel-condvar! 2093 ())
(2095 channel-i/o #f ())
(2096 set-channel-condvars! 2095 ())
(2097 channel-i/o #f ())
(2098 channel-condvars 2097 ())
(2099 channel-i/o #f ())
(2100 channel-i/o #f ())
(2101 waiting-for-i/o? 2100 ())
(2102 channel-i/o #f ())
(2103 i/o-completion-handler 2102 ())
(2104 channel-i/o #f ())
(2105 initialize-channel-i/o! 2104 ())
(2106 channel-i/o #f ())
(2107 input-channel? 2106 ())
(2108 channel-i/o #f ())
(2109 channel-maybe-commit-and-close 2108 ())
(2110 channel-i/o #f ())
(2111 channel-write 2110 ())
(2112 #f 2111 ())
(2113 #f 2111 ())
(2114 lose 2113 ())
(2115 channel-i/o #f ())
(2116 note-channel-result! 2115 ())
(2117 #f 2116 ())
(2118 #f 2116 ())
(2119 lose 2118 ())
(2120 channel-i/o #f ())
(2121 channel-i/o #f ())
(2122 channel-i/o #f ())
(2123 channel-maybe-commit-and-do-it 2122 ())
(2124 #f 2123 ())
(2125 channel-ports #f ())
(2126 #f 2125 ())
(2127 #f 2125 ())
(2128 #f 2125 ())
(2129 #f 2125 ())
(2130 channel-ports #f ())
(2131 write-block-handler 2130 ())
(2132 loop 2131 ())
(2133 channel-ports #f ())
(2134 one-char-handler 2133 ())
(2135 loop 2134 ())
(2136 channel-ports #f ())
(2137 force-channel-output-ports! 2136 ())
(2138 #f 2137 ())
(2139 channel-ports #f ())
(2140 with-output-to-file 2139 ())
(2141 #f 2140 ())
(2142 channel-ports #f ())
(2143 with-input-from-file 2142 ())
(2144 #f 2143 ())
(2145 channel-ports #f ())
(2146 call-with-output-file 2145 ())
(2147 #f 2146 ())
(2148 channel-ports #f ())
(2149 call-with-input-file 2148 ())
(2150 #f 2149 ())
(2151 channel-ports #f ())
(2152 open-output-file 2151 ())
(2153 channel-ports #f ())
(2154 open-input-file 2153 ())
(2155 channel-ports #f ())
(2156 maybe-open-file 2155 ())
(2157 channel-ports #f ())
(2158 real-output-channel->port 2157 ())
(2159 channel-ports #f ())
(2160 output-channel+closer->port 2159 ())
(2161 channel-ports #f ())
(2162 output-channel->port 2161 ())
(2163 channel-ports #f ())
(2164 #f 2163 ())
(2165 channel-ports #f ())
(2166 send-some 2165 ())
(2167 channel-ports #f ())
(2168 empty-buffer! 2167 ())
(2169 channel-ports #f ())
(2170 real-input-channel->port 2169 ())
(2171 channel-ports #f ())
(2172 input-channel+closer->port 2171 ())
(2173 channel-ports #f ())
(2174 input-channel->port 2173 ())
(2175 channel-ports #f ())
(2176 #f 2175 ())
(2177 channel-ports #f ())
(2178 channel-port-ready? 2177 ())
(2179 channel-ports #f ())
(2180 fill-buffer! 2179 ())
(2181 channel-ports #f ())
(2182 port-channel-closer 2181 ())
(2183 channel-ports #f ())
(2184 port->channel 2183 ())
(2185 channel-ports #f ())
(2186 make-channel-cell 2185 ())
(2187 channel-ports #f ())
(2188 channel-cell-ref 2187 ())
(2189 channel-ports #f ())
(2190 channel-cell-closer 2189 ())
(2191 channel-ports #f ())
(2192 channel-cell-condvar 2191 ())
(2193 channel-ports #f ())
(2194 set-channel-cell-in-use?! 2193 ())
(2195 channel-ports #f ())
(2196 channel-cell-in-use? 2195 ())
(2197 channel-ports #f ())
(2198 set-channel-cell-sent! 2197 ())
(2199 channel-ports #f ())
(2200 channel-cell-sent 2199 ())
(2201 channel-ports #f ())
(2202 channel-cell? 2201 ())
(2203 channel-ports #f ())
(2204 really-make-channel-cell 2203 ())
(2205 channel-ports #f ())
(2206 scheme-level-2 #f ())
(2207 features #f ())
(2208 tables #f ())
(2209 tables #f ())
(2210 tables #f ())
(2211 tables #f ())
(2212 make-table 2211 ())
(2213 tables #f ())
(2214 tables #f ())
(2215 set-table-size! 2214 ())
(2216 tables #f ())
(2217 table-size 2216 ())
(2218 tables #f ())
(2219 set-table-data! 2218 ())
(2220 tables #f ())
(2221 table-data 2220 ())
(2222 tables #f ())
(2223 set-table-ref-procedure! 2222 ())
(2224 tables #f ())
(2225 table-ref-procedure 2224 ())
(2226 tables #f ())
(2227 set-table-set!-procedure! 2226 ())
(2228 tables #f ())
(2229 table-set!-procedure 2228 ())
(2230 tables #f ())
(2231 really-make-table 2230 ())
(2232 tables #f ())
(2233 tables #f ())
(2234 table? 2233 ())
(2235 tables #f ())
(2236 table-ref 2235 ())
(2237 tables #f ())
(2238 table-set! 2237 ())
(2239 tables #f ())
(2240 next-table-size 2239 ())
(2241 tables #f ())
(2242 set-entry-value! 2241 ())
(2243 tables #f ())
(2244 delete-entry! 2243 ())
(2245 loop 2244 ())
(2246 tables #f ())
(2247 new-entry 2246 ())
(2248 tables #f ())
(2249 make-linear-table-set! 2248 ())
(2250 #f 2249 ())
(2251 tables #f ())
(2252 table-expand-table! 2251 ())
(2253 tables #f ())
(2254 table-enter-alist! 2253 ())
(2255 loop##237 2254 ())
(2256 tables #f ())
(2257 entry-value 2256 ())
(2258 tables #f ())
(2259 make-hash-table-ref 2258 ())
(2260 #f 2259 ())
(2261 tables #f ())
(2262 expand-hash-table! 2261 ())
(2263 loop##239 2262 ())
(2264 tables #f ())
(2265 make-hash-table-set! 2264 ())
(2266 #f 2265 ())
(2267 tables #f ())
(2268 make->hash-table 2267 ())
(2269 #f 2268 ())
(2270 tables #f ())
(2271 make-linear-table-ref 2270 ())
(2272 #f 2271 ())
(2273 tables #f ())
(2274 assoc->table-maker 2273 ())
(2275 #f 2274 ())
(2276 tables #f ())
(2277 make-assoc 2276 ())
(2278 #f 2277 ())
(2279 loop 2278 ())
(2280 tables #f ())
(2281 make-table-maker 2280 ())
(2282 tables #f ())
(2283 entry-key 2282 ())
(2284 tables #f ())
(2285 alist-walk 2284 ())
(2286 loop##241 2285 ())
(2287 tables #f ())
(2288 really-table-walk 2287 ())
(2289 loop##244 2288 ())
(2290 tables #f ())
(2291 table-walk 2290 ())
(2292 #f 2291 ())
(2293 tables #f ())
(2294 make-table-immutable! 2293 ())
(2295 tables #f ())
(2296 table->entry-list 2295 ())
(2297 #f 2296 ())
(2298 tables #f ())
(2299 default-table-hash-function 2298 ())
(2300 tables #f ())
(2301 default-table-assoc 2300 ())
(2302 tables #f ())
(2303 symbol-hash 2302 ())
(2304 tables #f ())
(2305 tables #f ())
(2306 weak #f ())
(2307 walk-population 2306 ())
(2308 #f 2307 ())
(2309 weak #f ())
(2310 population->list 2309 ())
(2311 weak #f ())
(2312 population-reduce 2311 ())
(2313 loop##246 2312 ())
(2314 weak #f ())
(2315 weak-memq 2314 ())
(2316 weak #f ())
(2317 add-to-population! 2316 ())
(2318 weak #f ())
(2319 make-population 2318 ())
(2320 meta-types #f ())
(2321 meta-types #f ())
(2322 meta-types #f ())
(2323 meta-types #f ())
(2324 meta-types #f ())
(2325 meta-types #f ())
(2326 meta-types #f ())
(2327 meta-types #f ())
(2328 meta-types #f ())
(2329 meta-types #f ())
(2330 meta-types #f ())
(2331 meta-types #f ())
(2332 meta-types #f ())
(2333 meta-types #f ())
(2334 meta-types #f ())
(2335 meta-types #f ())
(2336 meta-types #f ())
(2337 meta-types #f ())
(2338 meta-types #f ())
(2339 meta-types #f ())
(2340 meta-types #f ())
(2341 meta-types #f ())
(2342 meta-types #f ())
(2343 meta-types #f ())
(2344 meta-types #f ())
(2345 meta-types #f ())
(2346 meta-types #f ())
(2347 meta-types #f ())
(2348 meta-types #f ())
(2349 meta-types #f ())
(2350 loop 2349 ())
(2351 meta-types #f ())
(2352 meta-types #f ())
(2353 meta-types #f ())
(2354 meta-types #f ())
(2355 meta-types #f ())
(2356 meta-types #f ())
(2357 meta-types #f ())
(2358 meta-types #f ())
(2359 meta-types #f ())
(2360 meta-types #f ())
(2361 meta-types #f ())
(2362 meta-types #f ())
(2363 meta-types #f ())
(2364 meta-types #f ())
(2365 meta-types #f ())
(2366 meta-types #f ())
(2367 meta-types #f ())
(2368 meta-types #f ())
(2369 meta-types #f ())
(2370 meta-types #f ())
(2371 #f 2370 ())
(2372 meta-types #f ())
(2373 type-mask 2372 ())
(2374 meta-types #f ())
(2375 type-more 2374 ())
(2376 meta-types #f ())
(2377 type-info 2376 ())
(2378 meta-types #f ())
(2379 really-make-type 2378 ())
(2380 meta-types #f ())
(2381 meta-types #f ())
(2382 meta-type? 2381 ())
(2383 meta-types #f ())
(2384 make-type 2383 ())
(2385 meta-types #f ())
(2386 set-type-name! 2385 ())
(2387 meta-types #f ())
(2388 make-other-type 2387 ())
(2389 meta-types #f ())
(2390 name->type 2389 ())
(2391 meta-types #f ())
(2392 new-type-bit 2391 ())
(2393 meta-types #f ())
(2394 mask->type 2393 ())
(2395 meta-types #f ())
(2396 bottom-type? 2395 ())
(2397 meta-types #f ())
(2398 new-atomic-type 2397 ())
(2399 meta-types #f ())
(2400 named-atomic-type 2399 ())
(2401 meta-types #f ())
(2402 empty-rail-type? 2401 ())
(2403 meta-types #f ())
(2404 rest-type? 2403 ())
(2405 meta-types #f ())
(2406 same-type? 2405 ())
(2407 meta-types #f ())
(2408 head-type 2407 ())
(2409 meta-types #f ())
(2410 optional-type? 2409 ())
(2411 meta-types #f ())
(2412 rail-type 2411 ())
(2413 meta-types #f ())
(2414 make-optional-type 2413 ())
(2415 meta-types #f ())
(2416 make-rest-type 2415 ())
(2417 meta-types #f ())
(2418 head-type-really 2417 ())
(2419 meta-types #f ())
(2420 tail-type 2419 ())
(2421 meta-types #f ())
(2422 value-type? 2421 ())
(2423 meta-types #f ())
(2424 other-type-info 2423 ())
(2425 meta-types #f ())
(2426 restrictive? 2425 ())
(2427 meta-types #f ())
(2428 make-procedure-type 2427 ())
(2429 meta-types #f ())
(2430 procedure-type-domain 2429 ())
(2431 meta-types #f ())
(2432 procedure-type-codomain 2431 ())
(2433 meta-types #f ())
(2434 meet-procedure 2433 ())
(2435 meta-types #f ())
(2436 meet-rail 2435 ())
(2437 meta-types #f ())
(2438 meet-type 2437 ())
(2439 meta-types #f ())
(2440 subtype? 2439 ())
(2441 meta-types #f ())
(2442 meet-procedure? 2441 ())
(2443 meta-types #f ())
(2444 meet? 2443 ())
(2445 meta-types #f ())
(2446 procedure-type? 2445 ())
(2447 meta-types #f ())
(2448 join-procedure 2447 ())
(2449 meta-types #f ())
(2450 join-rail 2449 ())
(2451 meta-types #f ())
(2452 join-type 2451 ())
(2453 meta-types #f ())
(2454 procedure-type 2453 ())
(2455 meta-types #f ())
(2456 sexp->values-type 2455 ())
(2457 meta-types #f ())
(2458 sexp->type 2457 ())
(2459 #f 2458 ())
(2460 #f 2458 ())
(2461 meta-types #f ())
(2462 disjoin-rest 2461 ())
(2463 meta-types #f ())
(2464 disjoin-type 2463 ())
(2465 loop##268 2464 ())
(2466 meta-types #f ())
(2467 atomic-type->sexp 2466 ())
(2468 meta-types #f ())
(2469 rail-type->sexp 2468 ())
(2470 recur 2469 ())
(2471 meta-types #f ())
(2472 type->sexp 2471 ())
(2473 #f 2472 ())
(2474 meta-types #f ())
(2475 make-some-values-type 2474 ())
(2476 meta-types #f ())
(2477 fixed-arity-procedure-type? 2476 ())
(2478 loop 2477 ())
(2479 meta-types #f ())
(2480 procedure-type-arity 2479 ())
(2481 loop##271 2480 ())
(2482 meta-types #f ())
(2483 procedure-type-argument-types 2482 ())
(2484 recur 2483 ())
(2485 meta-types #f ())
(2486 variable-type 2485 ())
(2487 meta-types #f ())
(2488 variable-type? 2487 ())
(2489 meta-types #f ())
(2490 compatible-types? 2489 ())
(2491 meta-types #f ())
(2492 meta-types #f ())
(2493 meta-types #f ())
(2494 interfaces #f ())
(2495 #f 2494 ())
(2496 interfaces #f ())
(2497 ref-method 2496 ())
(2498 interfaces #f ())
(2499 walk-method 2498 ())
(2500 interfaces #f ())
(2501 interface-clients 2500 ())
(2502 interfaces #f ())
(2503 set-interface-name! 2502 ())
(2504 interfaces #f ())
(2505 interface-name 2504 ())
(2506 interfaces #f ())
(2507 really-make-interface 2506 ())
(2508 interfaces #f ())
(2509 interfaces #f ())
(2510 interface? 2509 ())
(2511 interfaces #f ())
(2512 make-interface 2511 ())
(2513 interfaces #f ())
(2514 interface-ref 2513 ())
(2515 interfaces #f ())
(2516 interface-member? 2515 ())
(2517 #f 2516 ())
(2518 #f 2516 ())
(2519 interfaces #f ())
(2520 for-each-declaration 2519 ())
(2521 interfaces #f ())
(2522 note-reference-to-interface! 2521 ())
(2523 interfaces #f ())
(2524 note-interface-name! 2523 ())
(2525 interfaces #f ())
(2526 make-simple-interface-table 2525 ())
(2527 #f 2526 ())
(2528 #f 2527 ())
(2529 interfaces #f ())
(2530 make-simple-interface 2529 ())
(2531 #f 2530 ())
(2532 #f 2530 ())
(2533 #f 2532 ())
(2534 interfaces #f ())
(2535 make-compound-interface 2534 ())
(2536 #f 2535 ())
(2537 loop 2536 ())
(2538 #f 2537 ())
(2539 #f 2537 ())
(2540 #f 2535 ())
(2541 #f 2540 ())
(2542 #f 2535 ())
(2543 interfaces #f ())
(2544 proper-list? 2543 ())
(2545 interfaces #f ())
(2546 okay-command? 2545 ())
(2547 #f 2546 ())
(2548 interfaces #f ())
(2549 symbol-append 2548 ())
(2550 interfaces #f ())
(2551 process-prefix 2550 ())
(2552 #f 2551 ())
(2553 #f 2551 ())
(2554 interfaces #f ())
(2555 prefix-match? 2554 ())
(2556 loop 2555 ())
(2557 interfaces #f ())
(2558 remove-prefix 2557 ())
(2559 interfaces #f ())
(2560 interface-lookup 2559 ())
(2561 interfaces #f ())
(2562 process-expose 2561 ())
(2563 loop 2562 ())
(2564 interfaces #f ())
(2565 process-hide 2564 ())
(2566 interfaces #f ())
(2567 process-alias 2566 ())
(2568 #f 2567 ())
(2569 interfaces #f ())
(2570 process-rename 2569 ())
(2571 #f 2570 ())
(2572 interfaces #f ())
(2573 process-commands 2572 ())
(2574 loop 2573 ())
(2575 #f 2574 ())
(2576 #f 2574 ())
(2577 #f 2574 ())
(2578 interfaces #f ())
(2579 make-lookup 2578 ())
(2580 #f 2579 ())
(2581 interfaces #f ())
(2582 cdr-assq 2581 ())
(2583 loop 2582 ())
(2584 interfaces #f ())
(2585 make-default-walker 2584 ())
(2586 #f 2585 ())
(2587 #f 2586 ())
(2588 interfaces #f ())
(2589 make-alist-walker 2588 ())
(2590 #f 2589 ())
(2591 #f 2590 ())
(2592 #f 2591 ())
(2593 #f 2591 ())
(2594 interfaces #f ())
(2595 make-modified-interface 2594 ())
(2596 #f 2595 ())
(2597 #f 2595 ())
(2598 bindings #f ())
(2599 bindings #f ())
(2600 binding-type 2599 ())
(2601 bindings #f ())
(2602 binding-place 2601 ())
(2603 bindings #f ())
(2604 binding-static 2603 ())
(2605 bindings #f ())
(2606 binding-path 2605 ())
(2607 bindings #f ())
(2608 set-binding-place! 2607 ())
(2609 bindings #f ())
(2610 make-binding 2609 ())
(2611 bindings #f ())
(2612 add-path 2611 ())
(2613 bindings #f ())
(2614 clobber-binding! 2613 ())
(2615 bindings #f ())
(2616 impose-type 2615 ())
(2617 bindings #f ())
(2618 forget-integration 2617 ())
(2619 bindings #f ())
(2620 same-denotation? 2619 ())
(2621 bindings #f ())
(2622 follow-forwarding-pointers 2621 ())
(2623 bindings #f ())
(2624 maybe-fix-place! 2623 ())
(2625 names #f ())
(2626 #f 2625 ())
(2627 names #f ())
(2628 transform-procedure 2627 ())
(2629 names #f ())
(2630 transform-env 2629 ())
(2631 names #f ())
(2632 transform-type 2631 ())
(2633 names #f ())
(2634 transform-aux-names 2633 ())
(2635 names #f ())
(2636 transform-source 2635 ())
(2637 names #f ())
(2638 transform-id 2637 ())
(2639 names #f ())
(2640 really-make-transform 2639 ())
(2641 names #f ())
(2642 names #f ())
(2643 names #f ())
(2644 #f 2643 ())
(2645 names #f ())
(2646 generated-name 2645 ())
(2647 names #f ())
(2648 generated-token 2647 ())
(2649 names #f ())
(2650 generated-env 2649 ())
(2651 names #f ())
(2652 generated-parent-name 2651 ())
(2653 names #f ())
(2654 make-generated 2653 ())
(2655 names #f ())
(2656 names #f ())
(2657 generated? 2656 ())
(2658 names #f ())
(2659 name? 2658 ())
(2660 names #f ())
(2661 generate-name 2660 ())
(2662 names #f ())
(2663 generated-uid 2662 ())
(2664 names #f ())
(2665 name->symbol 2664 ())
(2666 names #f ())
(2667 name-hash 2666 ())
(2668 names #f ())
(2669 desyntaxify 2668 ())
(2670 loop 2669 ())
(2671 names #f ())
(2672 make-qualified 2671 ())
(2673 names #f ())
(2674 qualified? 2673 ())
(2675 names #f ())
(2676 qualified-parent-name 2675 ())
(2677 names #f ())
(2678 qualified-symbol 2677 ())
(2679 names #f ())
(2680 qualified-uid 2679 ())
(2681 names #f ())
(2682 lookup 2681 ())
(2683 names #f ())
(2684 transform? 2683 ())
(2685 names #f ())
(2686 qualify-parent 2685 ())
(2687 recur 2686 ())
(2688 names #f ())
(2689 name->qualified 2688 ())
(2690 names #f ())
(2691 make-transform 2690 ())
(2692 names #f ())
(2693 name->source-name 2692 ())
(2694 names #f ())
(2695 make-keyword-comparator 2694 ())
(2696 #f 2695 ())
(2697 names #f ())
(2698 make-name-generator 2697 ())
(2699 #f 2698 ())
(2700 names #f ())
(2701 bind-aliases 2700 ())
(2702 #f 2701 ())
(2703 names #f ())
(2704 maybe-apply-macro-transform 2703 ())
(2705 names #f ())
(2706 apply-inline-transform 2705 ())
(2707 names #f ())
(2708 compiler-envs #f ())
(2709 compiler-envs #f ())
(2710 compiler-envs #f ())
(2711 compiler-envs #f ())
(2712 compiler-envs #f ())
(2713 lookup 2712 ())
(2714 compiler-envs #f ())
(2715 bind1 2714 ())
(2716 #f 2715 ())
(2717 compiler-envs #f ())
(2718 bind 2717 ())
(2719 compiler-envs #f ())
(2720 bindrec 2719 ())
(2721 #f 2720 ())
(2722 compiler-envs #f ())
(2723 make-compiler-env 2722 ())
(2724 #f 2723 ())
(2725 compiler-envs #f ())
(2726 environment-macro-eval 2725 ())
(2727 compiler-envs #f ())
(2728 environment-define! 2727 ())
(2729 compiler-envs #f ())
(2730 extract-package-from-environment 2729 ())
(2731 compiler-envs #f ())
(2732 bind-source-file-name 2731 ())
(2733 compiler-envs #f ())
(2734 source-file-name 2733 ())
(2735 thingies #f ())
(2736 thingie-binding 2735 ())
(2737 thingies #f ())
(2738 thingie-name 2737 ())
(2739 thingies #f ())
(2740 thingie-want-type 2739 ())
(2741 thingies #f ())
(2742 make-thingie 2741 ())
(2743 thingies #f ())
(2744 thingies #f ())
(2745 thingie? 2744 ())
(2746 packages #f ())
(2747 #f 2746 ())
(2748 packages #f ())
(2749 packages #f ())
(2750 packages #f ())
(2751 packages #f ())
(2752 packages #f ())
(2753 packages #f ())
(2754 packages #f ())
(2755 packages #f ())
(2756 #f 2755 ())
(2757 packages #f ())
(2758 package-uid 2757 ())
(2759 packages #f ())
(2760 set-package-opens! 2759 ())
(2761 packages #f ())
(2762 package-opens-really 2761 ())
(2763 packages #f ())
(2764 package-definitions 2763 ())
(2765 packages #f ())
(2766 package-unstable? 2765 ())
(2767 packages #f ())
(2768 set-package-integrate?! 2767 ())
(2769 packages #f ())
(2770 package-integrate? 2769 ())
(2771 packages #f ())
(2772 set-package-get-location! 2771 ())
(2773 packages #f ())
(2774 package-get-location 2773 ())
(2775 packages #f ())
(2776 package-file-name 2775 ())
(2777 packages #f ())
(2778 package-clauses 2777 ())
(2779 packages #f ())
(2780 set-package-loaded?! 2779 ())
(2781 packages #f ())
(2782 package-loaded? 2781 ())
(2783 packages #f ())
(2784 set-package->environment! 2783 ())
(2785 packages #f ())
(2786 package->environment 2785 ())
(2787 packages #f ())
(2788 set-package-opens-thunk! 2787 ())
(2789 packages #f ())
(2790 package-opens-thunk 2789 ())
(2791 packages #f ())
(2792 package-accesses-thunk 2791 ())
(2793 packages #f ())
(2794 set-package-undefineds! 2793 ())
(2795 packages #f ())
(2796 package-real-undefineds 2795 ())
(2797 packages #f ())
(2798 set-package-undefined-but-assigneds! 2797 ())
(2799 packages #f ())
(2800 package-real-undefined-but-assigneds 2799 ())
(2801 packages #f ())
(2802 package-clients 2801 ())
(2803 packages #f ())
(2804 package-cached 2803 ())
(2805 packages #f ())
(2806 really-make-package 2805 ())
(2807 packages #f ())
(2808 packages #f ())
(2809 #f 2808 ())
(2810 packages #f ())
(2811 structure-interface-thunk 2810 ())
(2812 packages #f ())
(2813 set-structure-interface! 2812 ())
(2814 packages #f ())
(2815 structure-interface-really 2814 ())
(2816 packages #f ())
(2817 structure-package 2816 ())
(2818 packages #f ())
(2819 structure-clients 2818 ())
(2820 packages #f ())
(2821 set-structure-name! 2820 ())
(2822 packages #f ())
(2823 structure-name 2822 ())
(2824 packages #f ())
(2825 really-make-structure 2824 ())
(2826 packages #f ())
(2827 packages #f ())
(2828 structure? 2827 ())
(2829 packages #f ())
(2830 initialize-structure! 2829 ())
(2831 packages #f ())
(2832 structure-interface 2831 ())
(2833 packages #f ())
(2834 package? 2833 ())
(2835 packages #f ())
(2836 note-package-name! 2835 ())
(2837 packages #f ())
(2838 note-structure-name! 2837 ())
(2839 packages #f ())
(2840 make-structure 2839 ())
(2841 #f 2840 ())
(2842 packages #f ())
(2843 structure-unstable? 2842 ())
(2844 packages #f ())
(2845 make-modified-structure 2844 ())
(2846 #f 2845 ())
(2847 packages #f ())
(2848 get-new-location 2847 ())
(2849 packages #f ())
(2850 package-define! 2849 ())
(2851 packages #f ())
(2852 package-accesses 2851 ())
(2853 packages #f ())
(2854 initialize-package! 2853 ())
(2855 #f 2854 ())
(2856 #f 2854 ())
(2857 packages #f ())
(2858 initialize-package-if-necessary! 2857 ())
(2859 packages #f ())
(2860 package-definition 2859 ())
(2861 packages #f ())
(2862 search-opens 2861 ())
(2863 loop 2862 ())
(2864 packages #f ())
(2865 structure-lookup 2864 ())
(2866 #f 2865 ())
(2867 #f 2865 ())
(2868 packages #f ())
(2869 package-lookup 2868 ())
(2870 packages #f ())
(2871 generic-lookup 2870 ())
(2872 packages #f ())
(2873 really-package-lookup 2872 ())
(2874 packages #f ())
(2875 real-structure-lookup 2874 ())
(2876 packages #f ())
(2877 for-each-export 2876 ())
(2878 #f 2877 ())
(2879 packages #f ())
(2880 really-package->environment 2879 ())
(2881 #f 2880 ())
(2882 #f 2880 ())
(2883 packages #f ())
(2884 new-package-uid 2883 ())
(2885 packages #f ())
(2886 make-package 2885 ())
(2887 packages #f ())
(2888 lazy-table-accessor 2887 ())
(2889 #f 2888 ())
(2890 packages #f ())
(2891 package-name 2890 ())
(2892 packages #f ())
(2893 package-opens 2892 ())
(2894 packages #f ())
(2895 make-simple-package 2894 ())
(2896 #f 2895 ())
(2897 #f 2895 ())
(2898 packages #f ())
(2899 package-add-static! 2898 ())
(2900 packages #f ())
(2901 package-refine-type! 2900 ())
(2902 packages #f ())
(2903 for-each-definition 2902 ())
(2904 #f 2903 ())
(2905 packages #f ())
(2906 make-new-location 2905 ())
(2907 packages #f ())
(2908 flush-location-names 2907 ())
(2909 packages #f ())
(2910 print-undefined-names 2909 ())
(2911 #f 2910 ())
(2912 #f 2910 ())
(2913 packages #f ())
(2914 noting-undefined-variables 2913 ())
(2915 add-name 2914 ())
(2916 #f 2914 ())
(2917 #f 2914 ())
(2918 #f 2917 ())
(2919 #f 2917 ())
(2920 #f 2919 ())
(2921 packages #f ())
(2922 cenv->package 2921 ())
(2923 packages #f ())
(2924 get-location-for-unassignable 2923 ())
(2925 #f 2924 ())
(2926 #f 2924 ())
(2927 packages #f ())
(2928 package-note-caching! 2927 ())
(2929 loop 2928 ())
(2930 packages #f ())
(2931 note-caching! 2930 ())
(2932 packages #f ())
(2933 location-for-reference 2932 ())
(2934 loop 2933 ())
(2935 packages #f ())
(2936 get-location-for-undefined 2935 ())
(2937 #f 2936 ())
(2938 packages #f ())
(2939 get-location 2938 ())
(2940 packages #f ())
(2941 really-link! 2940 ())
(2942 loop##416 2941 ())
(2943 packages #f ())
(2944 link! 2943 ())
(2945 #f 2944 ())
(2946 packages #f ())
(2947 location-on-demand 2946 ())
(2948 #f 2947 ())
(2949 packages #f ())
(2950 packages #f ())
(2951 environments #f ())
(2952 set-reflective-tower-maker! 2951 ())
(2953 environments #f ())
(2954 make-reflective-tower 2953 ())
(2955 recur 2954 ())
(2956 #f 2955 ())
(2957 environments #f ())
(2958 null-environment 2957 ())
(2959 environments #f ())
(2960 set-scheme-report-environment! 2959 ())
(2961 environments #f ())
(2962 environments #f ())
(2963 environments #f ())
(2964 environments #f ())
(2965 scheme-report-environment 2964 ())
(2966 environments #f ())
(2967 with-interaction-environment 2966 ())
(2968 environments #f ())
(2969 set-interaction-environment! 2968 ())
(2970 environments #f ())
(2971 interaction-environment 2970 ())
(2972 environments #f ())
(2973 environments #f ())
(2974 carefully 2973 ())
(2975 environments #f ())
(2976 *structure-ref 2975 ())
(2977 environments #f ())
(2978 environment-define! 2977 ())
(2979 environments #f ())
(2980 environment-set! 2979 ())
(2981 #f 2980 ())
(2982 environments #f ())
(2983 environment-ref 2982 ())
(2984 #f 2983 ())
(2985 filenames #f ())
(2986 translate 2985 ())
(2987 loop 2986 ())
(2988 filenames #f ())
(2989 set-translation! 2988 ())
(2990 filenames #f ())
(2991 translations 2990 ())
(2992 filenames #f ())
(2993 filenames #f ())
(2994 string-posq 2993 ())
(2995 loop 2994 ())
(2996 filenames #f ())
(2997 file-nondirectory-position 2996 ())
(2998 loop 2997 ())
(2999 filenames #f ())
(3000 file-name-nondirectory 2999 ())
(3001 filenames #f ())
(3002 file-name-directory 3001 ())
(3003 filenames #f ())
(3004 filenames #f ())
(3005 filenames #f ())
(3006 filenames #f ())
(3007 namestring-component 3006 ())
(3008 filenames #f ())
(3009 filenames #f ())
(3010 filenames #f ())
(3011 namestring 3010 ())
(3012 #f 3011 ())
(3013 reading-forms #f ())
(3014 really-read-forms 3013 ())
(3015 loop 3014 ())
(3016 reading-forms #f ())
(3017 read-forms 3016 ())
(3018 #f 3017 ())
(3019 reading-forms #f ())
(3020 #f 3019 ())
(3021 nodes #f ())
(3022 #f 3021 ())
(3023 nodes #f ())
(3024 #f 3023 ())
(3025 nodes #f ())
(3026 #f 3025 ())
(3027 nodes #f ())
(3028 #f 3027 ())
(3029 nodes #f ())
(3030 nodes #f ())
(3031 nodes #f ())
(3032 #f 3031 ())
(3033 #f 3032 ())
(3034 nodes #f ())
(3035 #f 3034 ())
(3036 nodes #f ())
(3037 #f 3036 ())
(3038 nodes #f ())
(3039 #f 3038 ())
(3040 nodes #f ())
(3041 #f 3040 ())
(3042 nodes #f ())
(3043 node-operator-id 3042 ())
(3044 nodes #f ())
(3045 node-form 3044 ())
(3046 nodes #f ())
(3047 set-node-plist! 3046 ())
(3048 nodes #f ())
(3049 node-plist 3048 ())
(3050 nodes #f ())
(3051 really-make-node 3050 ())
(3052 nodes #f ())
(3053 nodes #f ())
(3054 nodes #f ())
(3055 nodes #f ())
(3056 nodes #f ())
(3057 nodes #f ())
(3058 #f 3057 ())
(3059 nodes #f ())
(3060 set-operator-type! 3059 ())
(3061 nodes #f ())
(3062 operator-type 3061 ())
(3063 nodes #f ())
(3064 operator-nargs 3063 ())
(3065 nodes #f ())
(3066 operator-uid 3065 ())
(3067 nodes #f ())
(3068 operator-name 3067 ())
(3069 nodes #f ())
(3070 make-operator 3069 ())
(3071 nodes #f ())
(3072 nodes #f ())
(3073 operator? 3072 ())
(3074 nodes #f ())
(3075 get-operator 3074 ())
(3076 nodes #f ())
(3077 make-operator-table 3076 ())
(3078 nodes #f ())
(3079 operator-lookup 3078 ())
(3080 nodes #f ())
(3081 operator-define! 3080 ())
(3082 nodes #f ())
(3083 node? 3082 ())
(3084 nodes #f ())
(3085 make-node 3084 ())
(3086 nodes #f ())
(3087 node-ref 3086 ())
(3088 nodes #f ())
(3089 node-set! 3088 ())
(3090 loop 3089 ())
(3091 nodes #f ())
(3092 node-operator 3091 ())
(3093 nodes #f ())
(3094 node-predicate 3093 ())
(3095 #f 3094 ())
(3096 nodes #f ())
(3097 make-similar-node 3096 ())
(3098 nodes #f ())
(3099 force-node 3098 ())
(3100 nodes #f ())
(3101 schemify-node 3100 ())
(3102 nodes #f ())
(3103 schemify-sexp 3102 ())
(3104 loop 3103 ())
(3105 nodes #f ())
(3106 schemify 3105 ())
(3107 nodes #f ())
(3108 schemify-nodes 3107 ())
(3109 #f 3108 ())
(3110 nodes #f ())
(3111 define-schemifier 3110 ())
(3112 nodes #f ())
(3113 schemify-formals 3112 ())
(3114 nodes #f ())
(3115 schemify-lambda 3114 ())
(3116 nodes #f ())
(3117 schemify-letrec 3116 ())
(3118 #f 3117 ())
(3119 nodes #f ())
(3120 nodes #f ())
(3121 var-utilities #f ())
(3122 normalize-formals 3121 ())
(3123 var-utilities #f ())
(3124 n-ary? 3123 ())
(3125 var-utilities #f ())
(3126 number-of-required-args 3125 ())
(3127 loop##444 3126 ())
(3128 syntactic #f ())
(3129 syntactic #f ())
(3130 syntactic #f ())
(3131 syntactic #f ())
(3132 syntactic #f ())
(3133 syntactic #f ())
(3134 syntactic #f ())
(3135 syntactic #f ())
(3136 syntactic #f ())
(3137 syntactic #f ())
(3138 syntactic #f ())
(3139 syntactic #f ())
(3140 syntactic #f ())
(3141 syntactic #f ())
(3142 syntactic #f ())
(3143 syntactic #f ())
(3144 syntactic #f ())
(3145 #f 3144 ())
(3146 #f 3145 ())
(3147 syntactic #f ())
(3148 #f 3147 ())
(3149 #f 3148 ())
(3150 #f 3149 ())
(3151 syntactic #f ())
(3152 #f 3151 ())
(3153 #f 3152 ())
(3154 syntactic #f ())
(3155 #f 3154 ())
(3156 syntactic #f ())
(3157 #f 3156 ())
(3158 #f 3157 ())
(3159 syntactic #f ())
(3160 #f 3159 ())
(3161 syntactic #f ())
(3162 #f 3161 ())
(3163 syntactic #f ())
(3164 #f 3163 ())
(3165 syntactic #f ())
(3166 #f 3165 ())
(3167 syntactic #f ())
(3168 #f 3167 ())
(3169 syntactic #f ())
(3170 #f 3169 ())
(3171 syntactic #f ())
(3172 #f 3171 ())
(3173 syntactic #f ())
(3174 #f 3173 ())
(3175 syntactic #f ())
(3176 #f 3175 ())
(3177 syntactic #f ())
(3178 syntactic #f ())
(3179 syntactic #f ())
(3180 syntactic #f ())
(3181 at-least-this-long? 3180 ())
(3182 syntactic #f ())
(3183 names? 3182 ())
(3184 syntactic #f ())
(3185 destructure-define 3184 ())
(3186 syntactic #f ())
(3187 scan-define 3186 ())
(3188 syntactic #f ())
(3189 this-long? 3188 ())
(3190 syntactic #f ())
(3191 process-syntax 3190 ())
(3192 syntactic #f ())
(3193 scan-define-syntax 3192 ())
(3194 syntactic #f ())
(3195 expand-name 3194 ())
(3196 syntactic #f ())
(3197 expand-operator-form 3196 ())
(3198 syntactic #f ())
(3199 literal? 3198 ())
(3200 syntactic #f ())
(3201 expand-literal 3200 ())
(3202 syntactic #f ())
(3203 expand-list 3202 ())
(3204 #f 3203 ())
(3205 syntactic #f ())
(3206 expand-call 3205 ())
(3207 syntactic #f ())
(3208 expand 3207 ())
(3209 syntactic #f ())
(3210 expand-macro-application 3209 ())
(3211 #f 3210 ())
(3212 #f 3210 ())
(3213 syntactic #f ())
(3214 expand-structure-ref 3213 ())
(3215 struct-node 3214 ())
(3216 syntactic #f ())
(3217 expand-head 3216 ())
(3218 syntactic #f ())
(3219 scan-forms 3218 ())
(3220 loop 3219 ())
(3221 syntactic #f ())
(3222 expand-define 3221 ())
(3223 syntactic #f ())
(3224 expand-scanned-form 3223 ())
(3225 syntactic #f ())
(3226 expand-form 3225 ())
(3227 loop 3226 ())
(3228 syntactic #f ())
(3229 static-value 3228 ())
(3230 syntactic #f ())
(3231 make-operator-predicate 3230 ())
(3232 #f 3231 ())
(3233 syntactic #f ())
(3234 body-lossage 3233 ())
(3235 syntactic #f ())
(3236 scan-body-forms 3235 ())
(3237 #f 3236 ())
(3238 #f 3236 ())
(3239 syntactic #f ())
(3240 expand-letrec 3239 ())
(3241 #f 3240 ())
(3242 syntactic #f ())
(3243 expand-body 3242 ())
(3244 #f 3243 ())
(3245 #f 3244 ())
(3246 #f 3244 ())
(3247 #f 3243 ())
(3248 syntactic #f ())
(3249 define-expander 3248 ())
(3250 syntactic #f ())
(3251 unspecific-node 3250 ())
(3252 syntactic #f ())
(3253 bind-names 3252 ())
(3254 loop 3253 ())
(3255 syntactic #f ())
(3256 expand-lambda 3255 ())
(3257 #f 3256 ())
(3258 #f 3256 ())
(3259 syntactic #f ())
(3260 specs? 3259 ())
(3261 syntactic #f ())
(3262 syntax? 3261 ())
(3263 primops #f ())
(3264 primops #f ())
(3265 #f 3264 ())
(3266 primops #f ())
(3267 primop-name 3266 ())
(3268 primops #f ())
(3269 primop-type 3268 ())
(3270 primops #f ())
(3271 primop-closed 3270 ())
(3272 primops #f ())
(3273 primop-compilator 3272 ())
(3274 primops #f ())
(3275 make-primop 3274 ())
(3276 primops #f ())
(3277 primops #f ())
(3278 primop? 3277 ())
(3279 primops #f ())
(3280 walk-primops 3279 ())
(3281 #f 3280 ())
(3282 primops #f ())
(3283 define-compiler-primitive 3282 ())
(3284 primops #f ())
(3285 get-primop 3284 ())
(3286 debug-data #f ())
(3287 debug-data #f ())
(3288 debug-data #f ())
(3289 debug-data #f ())
(3290 debug-data #f ())
(3291 debug-data #f ())
(3292 debug-data #f ())
(3293 debug-data #f ())
(3294 debug-data #f ())
(3295 debug-data #f ())
(3296 #f 3295 ())
(3297 debug-data #f ())
(3298 debug-data-uid 3297 ())
(3299 debug-data #f ())
(3300 debug-data-name 3299 ())
(3301 debug-data #f ())
(3302 debug-data-parent 3301 ())
(3303 debug-data #f ())
(3304 set-debug-data-env-maps! 3303 ())
(3305 debug-data #f ())
(3306 debug-data-env-maps 3305 ())
(3307 debug-data #f ())
(3308 set-debug-data-source! 3307 ())
(3309 debug-data #f ())
(3310 debug-data-source 3309 ())
(3311 debug-data #f ())
(3312 make-debug-data 3311 ())
(3313 debug-data #f ())
(3314 debug-data #f ())
(3315 debug-data? 3314 ())
(3316 debug-data #f ())
(3317 debug-data-env-shape 3316 ())
(3318 loop 3317 ())
(3319 debug-data #f ())
(3320 new-template-uid 3319 ())
(3321 debug-data #f ())
(3322 template-uid 3321 ())
(3323 debug-data #f ())
(3324 set-template-uid! 3323 ())
(3325 debug-data #f ())
(3326 debug-flag-accessor 3325 ())
(3327 #f 3326 ())
(3328 debug-data #f ())
(3329 debug-flag-modifier 3328 ())
(3330 #f 3329 ())
(3331 debug-data #f ())
(3332 saving-and-restoring 3331 ())
(3333 swap 3332 ())
(3334 debug-data #f ())
(3335 with-fresh-compiler-state 3334 ())
(3336 #f 3335 ())
(3337 #f 3336 ())
(3338 #f 3336 ())
(3339 debug-data #f ())
(3340 note-debug-data! 3339 ())
(3341 debug-data #f ())
(3342 debug-data->info 3341 ())
(3343 debug-data #f ())
(3344 get-debug-data 3343 ())
(3345 debug-data #f ())
(3346 new-debug-data 3345 ())
(3347 debug-data #f ())
(3348 debug-data #f ())
(3349 frames #f ())
(3350 frame-env-index 3349 ())
(3351 frames #f ())
(3352 frame-template-index 3351 ())
(3353 frames #f ())
(3354 set-frame-size! 3353 ())
(3355 frames #f ())
(3356 frame-size 3355 ())
(3357 frames #f ())
(3358 set-frame-literals! 3357 ())
(3359 frames #f ())
(3360 frame-literals 3359 ())
(3361 frames #f ())
(3362 set-frame-count! 3361 ())
(3363 frames #f ())
(3364 frame-count 3363 ())
(3365 frames #f ())
(3366 frame-debug-data 3365 ())
(3367 frames #f ())
(3368 really-make-frame 3367 ())
(3369 frames #f ())
(3370 frames #f ())
(3371 frame? 3370 ())
(3372 frames #f ())
(3373 adjust-procedure-name 3372 ())
(3374 frames #f ())
(3375 make-frame 3374 ())
(3376 finish 3375 ())
(3377 frames #f ())
(3378 index->offset 3377 ())
(3379 frames #f ())
(3380 template-offset 3379 ())
(3381 frames #f ())
(3382 environment-offset 3381 ())
(3383 frames #f ())
(3384 depth-check! 3383 ())
(3385 frames #f ())
(3386 position 3385 ())
(3387 loop 3386 ())
(3388 frames #f ())
(3389 literal-position 3388 ())
(3390 #f 3389 ())
(3391 frames #f ())
(3392 literal->index 3391 ())
(3393 frames #f ())
(3394 binding->index 3393 ())
(3395 segments #f ())
(3396 #f 3395 ())
(3397 segments #f ())
(3398 astate-code-vector 3397 ())
(3399 segments #f ())
(3400 set-astate-pc! 3399 ())
(3401 segments #f ())
(3402 astate-pc 3401 ())
(3403 segments #f ())
(3404 set-astate-env-maps! 3403 ())
(3405 segments #f ())
(3406 astate-env-maps 3405 ())
(3407 segments #f ())
(3408 make-assembly-state 3407 ())
(3409 segments #f ())
(3410 segments #f ())
(3411 segments #f ())
(3412 segments #f ())
(3413 segments #f ())
(3414 segments #f ())
(3415 emit-segment! 3414 ())
(3416 segments #f ())
(3417 high-byte 3416 ())
(3418 segments #f ())
(3419 low-byte 3418 ())
(3420 segments #f ())
(3421 add-big-stack-protocol! 3420 ())
(3422 segments #f ())
(3423 segment-data->template 3422 ())
(3424 loop##513 3423 ())
(3425 segments #f ())
(3426 make-astate 3425 ())
(3427 segments #f ())
(3428 check-stack-use 3427 ())
(3429 segments #f ())
(3430 segment->template 3429 ())
(3431 segments #f ())
(3432 with-package-key 3431 ())
(3433 segments #f ())
(3434 emit-byte! 3433 ())
(3435 segments #f ())
(3436 instruction 3435 ())
(3437 #f 3436 ())
(3438 #f 3437 ())
(3439 segments #f ())
(3440 sequentially-2 3439 ())
(3441 #f 3440 ())
(3442 segments #f ())
(3443 sequentially 3442 ())
(3444 loop 3443 ())
(3445 #f 3443 ())
(3446 loop 3445 ())
(3447 segments #f ())
(3448 continuation-data 3447 ())
(3449 #f 3448 ())
(3450 segments #f ())
(3451 make-label 3450 ())
(3452 segments #f ())
(3453 code-vector-set2! 3452 ())
(3454 segments #f ())
(3455 insert-label! 3454 ())
(3456 segments #f ())
(3457 label-reference 3456 ())
(3458 #f 3457 ())
(3459 segments #f ())
(3460 bytes->segment 3459 ())
(3461 #f 3460 ())
(3462 #f 3461 ())
(3463 segments #f ())
(3464 instruction-using-label 3463 ())
(3465 segments #f ())
(3466 optional-label-reference 3465 ())
(3467 segments #f ())
(3468 using-optional-label 3467 ())
(3469 segments #f ())
(3470 computed-goto-instruction 3469 ())
(3471 #f 3470 ())
(3472 loop##514 3471 ())
(3473 segments #f ())
(3474 attach-label 3473 ())
(3475 #f 3474 ())
(3476 #f 3475 ())
(3477 segments #f ())
(3478 note-source-code 3477 ())
(3479 #f 3478 ())
(3480 segments #f ())
(3481 note-environment 3480 ())
(3482 #f 3481 ())
(3483 segments #f ())
(3484 segments #f ())
(3485 optimizer #f ())
(3486 apply-optimizers 3485 ())
(3487 #f 3486 ())
(3488 optimizer #f ())
(3489 get-optimizer 3488 ())
(3490 #f 3489 ())
(3491 #f 3490 ())
(3492 #f 3491 ())
(3493 optimizer #f ())
(3494 set-optimizer! 3493 ())
(3495 optimizer #f ())
(3496 flat-environments #f ())
(3497 clear-var-set! 3496 ())
(3498 flat-environments #f ())
(3499 clean-var-list 3498 ())
(3500 flat-environments #f ())
(3501 set-difference! 3500 ())
(3502 flat-environments #f ())
(3503 set-union! 3502 ())
(3504 #f 3503 ())
(3505 flat-environments #f ())
(3506 set-add-element! 3505 ())
(3507 flat-environments #f ())
(3508 flat-environments #f ())
(3509 install-set! 3508 ())
(3510 #f 3509 ())
(3511 flat-environments #f ())
(3512 install-new-set! 3511 ())
(3513 flat-environments #f ())
(3514 unassigned-check-primop 3513 ())
(3515 flat-environments #f ())
(3516 flat-environments #f ())
(3517 cell-set!-primop 3516 ())
(3518 flat-environments #f ())
(3519 flat-environments #f ())
(3520 cell-ref-primop 3519 ())
(3521 flat-environments #f ())
(3522 flat-environments #f ())
(3523 make-cell-primop 3522 ())
(3524 flat-environments #f ())
(3525 flat-environments #f ())
(3526 flat-environments #f ())
(3527 flat-environments #f ())
(3528 flat-environments #f ())
(3529 flat-environments #f ())
(3530 flat-environments #f ())
(3531 flat-environments #f ())
(3532 flat-environments #f ())
(3533 flat-environments #f ())
(3534 flat-environments #f ())
(3535 flat-environments #f ())
(3536 flat-environments #f ())
(3537 flat-environments #f ())
(3538 make-primop-call 3537 ())
(3539 flat-environments #f ())
(3540 make-cell-set! 3539 ())
(3541 flat-environments #f ())
(3542 really-make-cell-ref 3541 ())
(3543 flat-environments #f ())
(3544 make-cell-ref 3543 ())
(3545 flat-environments #f ())
(3546 make-unassigned-cell 3545 ())
(3547 flat-environments #f ())
(3548 make-make-cell 3547 ())
(3549 flat-environments #f ())
(3550 mark-letrec-sets 3549 ())
(3551 #f 3550 ())
(3552 flat-environments #f ())
(3553 #f 3552 ())
(3554 flat-environments #f ())
(3555 #f 3554 ())
(3556 flat-environments #f ())
(3557 #f 3556 ())
(3558 flat-environments #f ())
(3559 #f 3558 ())
(3560 flat-environments #f ())
(3561 #f 3560 ())
(3562 flat-environments #f ())
(3563 #f 3562 ())
(3564 flat-environments #f ())
(3565 #f 3564 ())
(3566 flat-environments #f ())
(3567 flat-environments #f ())
(3568 flat-environments #f ())
(3569 flat-environments #f ())
(3570 flat-environments #f ())
(3571 flat-environments #f ())
(3572 no-sets 3571 ())
(3573 flat-environments #f ())
(3574 define-set-marker 3573 ())
(3575 flat-environments #f ())
(3576 #f 3575 ())
(3577 flat-environments #f ())
(3578 mark-set-variables! 3577 ())
(3579 flat-environments #f ())
(3580 assigned? 3579 ())
(3581 flat-environments #f ())
(3582 #f 3581 ())
(3583 #f 3582 ())
(3584 flat-environments #f ())
(3585 flatten-impure-letrec 3584 ())
(3586 #f 3585 ())
(3587 #f 3585 ())
(3588 flat-environments #f ())
(3589 flatten-pure-letrec 3588 ())
(3590 flat-environments #f ())
(3591 flatten-letrec 3590 ())
(3592 #f 3591 ())
(3593 flat-environments #f ())
(3594 #f 3593 ())
(3595 flat-environments #f ())
(3596 #f 3595 ())
(3597 flat-environments #f ())
(3598 #f 3597 ())
(3599 flat-environments #f ())
(3600 #f 3599 ())
(3601 flat-environments #f ())
(3602 #f 3601 ())
(3603 flat-environments #f ())
(3604 #f 3603 ())
(3605 flat-environments #f ())
(3606 add-cells 3605 ())
(3607 loop##522 3606 ())
(3608 flat-environments #f ())
(3609 convert-lambda-body 3608 ())
(3610 flat-environments #f ())
(3611 flatten-lambda 3610 ())
(3612 flat-environments #f ())
(3613 #f 3612 ())
(3614 flat-environments #f ())
(3615 #f 3614 ())
(3616 flat-environments #f ())
(3617 flat-environments #f ())
(3618 flat-environments #f ())
(3619 flat-environments #f ())
(3620 no-free-vars 3619 ())
(3621 flat-environments #f ())
(3622 flatten-list 3621 ())
(3623 #f 3622 ())
(3624 flat-environments #f ())
(3625 define-flattener 3624 ())
(3626 flat-environments #f ())
(3627 #f 3626 ())
(3628 flat-environments #f ())
(3629 flatten-node 3628 ())
(3630 flat-environments #f ())
(3631 flatten-form 3630 ())
(3632 flat-environments #f ())
(3633 #f 3632 ())
(3634 #f 3633 ())
(3635 reconstruction #f ())
(3636 constant-type 3635 ())
(3637 reconstruction #f ())
(3638 reconstruction #f ())
(3639 reconstruction #f ())
(3640 reconstruct-apply 3639 ())
(3641 #f 3640 ())
(3642 reconstruction #f ())
(3643 #f 3642 ())
(3644 reconstruction #f ())
(3645 #f 3644 ())
(3646 #f 3645 ())
(3647 reconstruction #f ())
(3648 #f 3647 ())
(3649 reconstruction #f ())
(3650 define-primop-reconstructor 3649 ())
(3651 reconstruction #f ())
(3652 reconstruction #f ())
(3653 reconstruction #f ())
(3654 reconstruction #f ())
(3655 reconstruction #f ())
(3656 #f 3655 ())
(3657 reconstruction #f ())
(3658 #f 3657 ())
(3659 reconstruction #f ())
(3660 node->type 3659 ())
(3661 reconstruction #f ())
(3662 #f 3661 ())
(3663 reconstruction #f ())
(3664 reconstruct-letrec 3663 ())
(3665 #f 3664 ())
(3666 reconstruction #f ())
(3667 #f 3666 ())
(3668 reconstruction #f ())
(3669 #f 3668 ())
(3670 reconstruction #f ())
(3671 #f 3670 ())
(3672 reconstruction #f ())
(3673 #f 3672 ())
(3674 loop##523 3673 ())
(3675 reconstruction #f ())
(3676 reconstruction #f ())
(3677 fork-constraints 3676 ())
(3678 #f 3677 ())
(3679 reconstruction #f ())
(3680 #f 3679 ())
(3681 #f 3680 ())
(3682 reconstruction #f ())
(3683 #f 3682 ())
(3684 reconstruction #f ())
(3685 #f 3684 ())
(3686 reconstruction #f ())
(3687 #f 3686 ())
(3688 reconstruction #f ())
(3689 #f 3688 ())
(3690 reconstruction #f ())
(3691 reconstruct-call 3690 ())
(3692 lose 3691 ())
(3693 #f 3692 ())
(3694 loop 3691 ())
(3695 reconstruction #f ())
(3696 proc->reconstructor 3695 ())
(3697 reconstruction #f ())
(3698 #f 3697 ())
(3699 reconstruction #f ())
(3700 reconstruct-name 3699 ())
(3701 reconstruction #f ())
(3702 #f 3701 ())
(3703 reconstruction #f ())
(3704 careful-codomain 3703 ())
(3705 reconstruction #f ())
(3706 reconstruct-lambda 3705 ())
(3707 #f 3706 ())
(3708 reconstruction #f ())
(3709 #f 3708 ())
(3710 reconstruction #f ())
(3711 #f 3710 ())
(3712 reconstruction #f ())
(3713 define-reconstructor 3712 ())
(3714 reconstruction #f ())
(3715 #f 3714 ())
(3716 reconstruction #f ())
(3717 examine 3716 ())
(3718 reconstruction #f ())
(3719 reconstruct 3718 ())
(3720 reconstruction #f ())
(3721 reconstruct-type 3720 ())
(3722 reconstruction #f ())
(3723 node-type 3722 ())
(3724 compiler #f ())
(3725 compiler #f ())
(3726 loop 3725 ())
(3727 compiler #f ())
(3728 compiler #f ())
(3729 compiler #f ())
(3730 define-one-or-two 3729 ())
(3731 #f 3730 ())
(3732 #f 3730 ())
(3733 compiler #f ())
(3734 #f 3733 ())
(3735 #f 3733 ())
(3736 compiler #f ())
(3737 define-one-or-two 3736 ())
(3738 #f 3737 ())
(3739 #f 3737 ())
(3740 compiler #f ())
(3741 compiler #f ())
(3742 compiler #f ())
(3743 define=< 3742 ())
(3744 #f 3743 ())
(3745 #f 3743 ())
(3746 compiler #f ())
(3747 define+* 3746 ())
(3748 #f 3747 ())
(3749 #f 3747 ())
(3750 compiler #f ())
(3751 define-char-io 3750 ())
(3752 #f 3751 ())
(3753 #f 3751 ())
(3754 compiler #f ())
(3755 define-char-io 3754 ())
(3756 #f 3755 ())
(3757 #f 3755 ())
(3758 compiler #f ())
(3759 n-ary-constructor 3758 ())
(3760 #f 3759 ())
(3761 #f 3759 ())
(3762 compiler #f ())
(3763 #f 3762 ())
(3764 compiler #f ())
(3765 #f 3764 ())
(3766 #f 3765 ())
(3767 #f 3764 ())
(3768 compiler #f ())
(3769 #f 3768 ())
(3770 #f 3768 ())
(3771 compiler #f ())
(3772 #f 3771 ())
(3773 #f 3772 ())
(3774 #f 3772 ())
(3775 #f 3771 ())
(3776 compiler #f ())
(3777 #f 3776 ())
(3778 #f 3777 ())
(3779 #f 3778 ())
(3780 #f 3778 ())
(3781 #f 3777 ())
(3782 #f 3776 ())
(3783 #f 3782 ())
(3784 #f 3782 ())
(3785 compiler #f ())
(3786 #f 3785 ())
(3787 #f 3786 ())
(3788 #f 3786 ())
(3789 #f 3785 ())
(3790 compiler #f ())
(3791 compiler #f ())
(3792 compiler #f ())
(3793 compiler #f ())
(3794 compiler #f ())
(3795 compiler #f ())
(3796 compiler #f ())
(3797 compiler #f ())
(3798 #f 3797 ())
(3799 compiler #f ())
(3800 #f 3799 ())
(3801 compiler #f ())
(3802 #f 3801 ())
(3803 compiler #f ())
(3804 #f 3803 ())
(3805 #f 3803 ())
(3806 compiler #f ())
(3807 compiler #f ())
(3808 compiler #f ())
(3809 compiler #f ())
(3810 loop##527 3809 ())
(3811 compiler #f ())
(3812 compiler #f ())
(3813 #f 3812 ())
(3814 compiler #f ())
(3815 #f 3814 ())
(3816 compiler #f ())
(3817 #f 3816 ())
(3818 compiler #f ())
(3819 compiler #f ())
(3820 compiler #f ())
(3821 compiler #f ())
(3822 compiler #f ())
(3823 compiler #f ())
(3824 compiler #f ())
(3825 compiler #f ())
(3826 compiler #f ())
(3827 compiler #f ())
(3828 #f 3827 ())
(3829 compiler #f ())
(3830 compiler #f ())
(3831 compiler #f ())
(3832 compiler #f ())
(3833 compiler #f ())
(3834 #f 3833 ())
(3835 #f 3834 ())
(3836 #f 3835 ())
(3837 #f 3834 ())
(3838 compiler #f ())
(3839 compiler #f ())
(3840 #f 3839 ())
(3841 loop 3840 ())
(3842 compiler #f ())
(3843 #f 3842 ())
(3844 compiler #f ())
(3845 #f 3844 ())
(3846 compiler #f ())
(3847 #f 3846 ())
(3848 compiler #f ())
(3849 #f 3848 ())
(3850 compiler #f ())
(3851 #f 3850 ())
(3852 compiler #f ())
(3853 #f 3852 ())
(3854 compiler #f ())
(3855 #f 3854 ())
(3856 compiler #f ())
(3857 #f 3856 ())
(3858 compiler #f ())
(3859 diagnose-call-error 3858 ())
(3860 #f 3859 ())
(3861 compiler #f ())
(3862 type-check 3861 ())
(3863 #f 3862 ())
(3864 compiler #f ())
(3865 compile 3864 ())
(3866 compiler #f ())
(3867 compile-expression 3866 ())
(3868 compiler #f ())
(3869 define-compilator 3868 ())
(3870 compiler #f ())
(3871 return-cont? 3870 ())
(3872 compiler #f ())
(3873 deliver-value 3872 ())
(3874 compiler #f ())
(3875 ignore-values-cont? 3874 ())
(3876 compiler #f ())
(3877 small-integer? 3876 ())
(3878 compiler #f ())
(3879 integer-literal-instruction 3878 ())
(3880 compiler #f ())
(3881 stack-indirect-instruction 3880 ())
(3882 compiler #f ())
(3883 compile-constant 3882 ())
(3884 compiler #f ())
(3885 stack-ref-instruction 3884 ())
(3886 compiler #f ())
(3887 index->offset 3886 ())
(3888 compiler #f ())
(3889 compile-local-name 3888 ())
(3890 compiler #f ())
(3891 push+stack-indirect-instruction 3890 ())
(3892 compiler #f ())
(3893 constant-with-push 3892 ())
(3894 compiler #f ())
(3895 push+stack-ref-instruction 3894 ())
(3896 compiler #f ())
(3897 lexical-ref-with-push 3896 ())
(3898 compiler #f ())
(3899 name-node-binding 3898 ())
(3900 compiler #f ())
(3901 maybe-compile-with-push 3900 ())
(3902 compiler #f ())
(3903 fixup-source 3902 ())
(3904 compiler #f ())
(3905 really-push-continuation 3904 ())
(3906 compiler #f ())
(3907 push-continuation 3906 ())
(3908 compiler #f ())
(3909 maybe-push-continuation 3908 ())
(3910 compiler #f ())
(3911 pre-push 3910 ())
(3912 compiler #f ())
(3913 make-cont 3912 ())
(3914 compiler #f ())
(3915 named-cont 3914 ())
(3916 compiler #f ())
(3917 fall-through-cont 3916 ())
(3918 compiler #f ())
(3919 compile-argument 3918 ())
(3920 compiler #f ())
(3921 really-push-arguments 3920 ())
(3922 recur 3921 ())
(3923 #f 3922 ())
(3924 #f 3922 ())
(3925 compiler #f ())
(3926 push-arguments 3925 ())
(3927 compiler #f ())
(3928 call-instruction 3927 ())
(3929 compiler #f ())
(3930 compile-unknown-call 3929 ())
(3931 #f 3930 ())
(3932 #f 3930 ())
(3933 compiler #f ())
(3934 compile-name-call 3933 ())
(3935 compiler #f ())
(3936 generate-trap 3935 ())
(3937 compiler #f ())
(3938 set-frame-locations! 3937 ())
(3939 loop 3938 ())
(3940 compiler #f ())
(3941 push-all-with-names 3940 ())
(3942 compiler #f ())
(3943 compile-inline-body 3942 ())
(3944 compiler #f ())
(3945 name-node->symbol 3944 ())
(3946 compiler #f ())
(3947 compile-redex 3946 ())
(3948 compiler #f ())
(3949 compile-call 3948 ())
(3950 compiler #f ())
(3951 set-lexical-offsets! 3950 ())
(3952 loop 3951 ())
(3953 compiler #f ())
(3954 lambda-protocol 3953 ())
(3955 compiler #f ())
(3956 return-cont 3955 ())
(3957 compiler #f ())
(3958 compile-lambda-code 3957 ())
(3959 compiler #f ())
(3960 compile-lambda 3959 ())
(3961 compiler #f ())
(3962 unflatten-form 3961 ())
(3963 compiler #f ())
(3964 letrec-template-maker 3963 ())
(3965 #f 3964 ())
(3966 #f 3965 ())
(3967 #f 3966 ())
(3968 #f 3966 ())
(3969 compiler #f ())
(3970 push-continuation-no-protocol 3969 ())
(3971 compiler #f ())
(3972 push-all-but-last 3971 ())
(3973 compiler #f ())
(3974 push-argument 3973 ())
(3975 #f 3974 ())
(3976 #f 3974 ())
(3977 compiler #f ())
(3978 stack-set!-instruction 3977 ())
(3979 compiler #f ())
(3980 plain-fall-through-cont 3979 ())
(3981 compiler #f ())
(3982 fall-through-cont? 3981 ())
(3983 compiler #f ())
(3984 ignore-values-cont 3983 ())
(3985 compiler #f ())
(3986 accept-values-cont 3985 ())
(3987 compiler #f ())
(3988 accept-values-cont? 3987 ())
(3989 compiler #f ())
(3990 cont-name 3989 ())
(3991 compiler #f ())
(3992 set-type-check?! 3991 ())
(3993 compiler #f ())
(3994 add-variable 3993 ())
(3995 compiler #f ())
(3996 get-variables-locations 3995 ())
(3997 loop 3996 ())
(3998 compiler #f ())
(3999 figure-env-data 3998 ())
(4000 loop 3999 ())
(4001 compiler #f ())
(4002 flat-environment-code 4001 ())
(4003 #f 4002 ())
(4004 #f 4003 ())
(4005 #f 4002 ())
(4006 compiler #f ())
(4007 one-byte->two-byte 4006 ())
(4008 loop 4007 ())
(4009 compiler #f ())
(4010 finish-flat-env 4009 ())
(4011 #f 4010 ())
(4012 compiler #f ())
(4013 compile-recursive-environment 4012 ())
(4014 #f 4013 ())
(4015 #f 4013 ())
(4016 compiler #f ())
(4017 compile-environment 4016 ())
(4018 #f 4017 ())
(4019 compiler #f ())
(4020 really-compile-flat-lambda 4019 ())
(4021 #f 4020 ())
(4022 #f 4021 ())
(4023 #f 4020 ())
(4024 compiler #f ())
(4025 compile-flat-lambda 4024 ())
(4026 #f 4025 ())
(4027 #f 4025 ())
(4028 compiler #f ())
(4029 primop-closed-template 4028 ())
(4030 #f 4029 ())
(4031 #f 4029 ())
(4032 compiler #f ())
(4033 direct-compilator 4032 ())
(4034 #f 4033 ())
(4035 compiler #f ())
(4036 direct-closed-compilator 4035 ())
(4037 #f 4036 ())
(4038 compiler #f ())
(4039 nargs->domain 4038 ())
(4040 loop##536 4039 ())
(4041 compiler #f ())
(4042 get-primop-type 4041 ())
(4043 #f 4042 ())
(4044 compiler #f ())
(4045 simple-compilator 4044 ())
(4046 #f 4045 ())
(4047 compiler #f ())
(4048 simple-closed-compilator 4047 ())
(4049 #f 4048 ())
(4050 compiler #f ())
(4051 define-simple-primitive 4050 ())
(4052 compiler #f ())
(4053 symbol-append 4052 ())
(4054 compiler #f ())
(4055 define-stob-predicate 4054 ())
(4056 compiler #f ())
(4057 define-data-struct-primitives 4056 ())
(4058 def-prim 4057 ())
(4059 loop##538 4057 ())
(4060 compiler #f ())
(4061 define-vector-primitives 4060 ())
(4062 def-prim 4061 ())
(4063 compiler #f ())
(4064 thunk-node? 4063 ())
(4065 compiler #f ())
(4066 thunk-body 4065 ())
(4067 compiler #f ())
(4068 n-ary-primitive-compilator 4067 ())
(4069 #f 4068 ())
(4070 compiler #f ())
(4071 define-n-ary-compiler-primitive 4070 ())
(4072 compiler #f ())
(4073 evaluate-arguments-for-effect 4072 ())
(4074 loop##541 4073 ())
(4075 compiler #f ())
(4076 call-on-arg-and-id 4075 ())
(4077 compiler #f ())
(4078 push-and-compile 4077 ())
(4079 compiler #f ())
(4080 call-on-args 4079 ())
(4081 loop 4080 ())
(4082 compiler #f ())
(4083 empty-segment? 4082 ())
(4084 compiler #f ())
(4085 make-dispatch-protocol 4084 ())
(4086 loop 4085 ())
(4087 compiler #f ())
(4088 compile-definition 4087 ())
(4089 compiler #f ())
(4090 call-template-inst 4089 ())
(4091 compiler #f ())
(4092 compile-form 4091 ())
(4093 compiler #f ())
(4094 compile-forms-loop 4093 ())
(4095 compiler #f ())
(4096 compile-forms 4095 ())
(4097 #f 4096 ())
(4098 compiler #f ())
(4099 template-call 4098 ())
(4100 #f 4099 ())
(4101 #f 4099 ())
(4102 compiler #f ())
(4103 append-templates 4102 ())
(4104 #f 4103 ())
(4105 compiler #f ())
(4106 make-startup-procedure 4105 ())
(4107 compiler #f ())
(4108 evaluation #f ())
(4109 compile-and-run 4108 ())
(4110 #f 4109 ())
(4111 #f 4110 ())
(4112 evaluation #f ())
(4113 really-load-into 4112 ())
(4114 evaluation #f ())
(4115 load 4114 ())
(4116 evaluation #f ())
(4117 eval-from-file 4116 ())
(4118 evaluation #f ())
(4119 load-into 4118 ())
(4120 evaluation #f ())
(4121 eval 4120 ())
(4122 scheme #f ())
(4123 display-conditions #f ())
(4124 limited-write 4123 ())
(4125 recur 4124 ())
(4126 #f 4125 ())
(4127 #f 4126 ())
(4128 display-conditions #f ())
(4129 &disclose-condition 4128 ())
(4130 display-conditions #f ())
(4131 display-conditions #f ())
(4132 display-conditions #f ())
(4133 display-conditions #f ())
(4134 display-conditions #f ())
(4135 really-display-condition 4134 ())
(4136 #f 4135 ())
(4137 display-conditions #f ())
(4138 display-condition 4137 ())
(4139 #f 4138 ())
(4140 mini-command #f ())
(4141 read-string 4140 ())
(4142 loop 4141 ())
(4143 mini-command #f ())
(4144 mini-load 4143 ())
(4145 mini-command #f ())
(4146 command-processor 4145 ())
(4147 loop 4146 ())
(4148 #f 4147 ())
(4149 #f 4148 ())
(4150 #f 4149 ())
(4151 #f 4148 ())
(4152 #f 4151 ())
(4153 #f 4151 ())
(4154 #f 4151 ())
(4155 #f 4154 ())
(4156 #f 4151 ())
(4157 enum-case #f ())
(4158 scheduler #f ())
(4159 decrement-counter! 4158 ())
(4160 scheduler #f ())
(4161 increment-counter! 4160 ())
(4162 scheduler #f ())
(4163 scheduler #f ())
(4164 make-counter 4163 ())
(4165 scheduler #f ())
(4166 round-robin-event-handler 4165 ())
(4167 thread-event-handler 4166 ())
(4168 #f 4167 ())
(4169 #f 4167 ())
(4170 asynchronous-event-handler 4166 ())
(4171 next-thread 4166 ())
(4172 #f 4171 ())
(4173 scheduler #f ())
(4174 run-threads-with-housekeeper 4173 ())
(4175 #f 4174 ())
(4176 loop 4175 ())
(4177 #f 4176 ())
(4178 #f 4177 ())
(4179 #f 4177 ())
(4180 #f 4176 ())
(4181 #f 4174 ())
(4182 scheduler #f ())
(4183 run-threads 4182 ())
(4184 #f 4183 ())
(4185 loop 4184 ())
(4186 #f 4185 ())
(4187 #f 4186 ())
(4188 #f 4186 ())
(4189 #f 4185 ())
(4190 #f 4183 ())
(4191 root-scheduler #f ())
(4192 spawn-output-forcers 4191 ())
(4193 root-scheduler #f ())
(4194 call-when-deadlocked! 4193 ())
(4195 root-scheduler #f ())
(4196 root-scheduler #f ())
(4197 root-scheduler #f ())
(4198 root-scheduler #f ())
(4199 root-scheduler #f ())
(4200 do-some-waiting 4199 ())
(4201 #f 4200 ())
(4202 root-scheduler #f ())
(4203 root-wait 4202 ())
(4204 #f 4203 ())
(4205 root-scheduler #f ())
(4206 scheme-exit-now 4205 ())
(4207 root-scheduler #f ())
(4208 root-scheduler #f ())
(4209 cheap-display-condition 4208 ())
(4210 #f 4209 ())
(4211 root-scheduler #f ())
(4212 root-handler 4211 ())
(4213 root-scheduler #f ())
(4214 make-root-event-handler 4213 ())
(4215 #f 4214 ())
(4216 #f 4214 ())
(4217 root-scheduler #f ())
(4218 root-scheduler 4217 ())
(4219 #f 4218 ())
(4220 #f 4219 ())
(4221 #f 4219 ())
(4222 usual-resumer #f ())
(4223 usual-resumer #f ())
(4224 initialize-rts 4223 ())
(4225 #f 4224 ())
(4226 #f 4225 ())
(4227 #f 4226 ())
(4228 #f 4227 ())
(4229 usual-resumer #f ())
(4230 usual-resumer 4229 ())
(4231 #f 4230 ())
(4232 #f 4231 ())
(4233 initial-system #f ())
(4234 make-tower 4233 ())
(4235 initial-system #f ())
(4236 make-initial-package 4235 ())
(4237 #f 4236 ())
(4238 initial-system #f ())
(4239 initialize-interaction-environment! 4238 ())
(4240 initial-system #f ())
(4241 make-built-in-structures 4240 ())
(4242 #f 4241 ())
(4243 #f 4241 ())
(4244 initial-system #f ())
(4245 start 4244 ())
(4246 #f 4245 ())
(4247 #f 4246 ())
(4248 #f 4247 ())
(4249 usual-macros #f ())
(4250 find-free-names-in-syntax-rules 4249 ())
(4251 meta-variables 4250 ())
(4252 free-names 4250 ())
(4253 loop##561 4250 ())
(4254 usual-macros #f ())
(4255 usual-macros #f ())
(4256 segment-tail 4255 ())
(4257 loop 4256 ())
(4258 usual-macros #f ())
(4259 segment-depth 4258 ())
(4260 usual-macros #f ())
(4261 segment-template? 4260 ())
(4262 usual-macros #f ())
(4263 segment-pattern? 4262 ())
(4264 usual-macros #f ())
(4265 process-rules 4264 ())
(4266 make-transformer 4265 ())
(4267 process-rule 4265 ())
(4268 #f 4267 ())
(4269 process-match 4265 ())
(4270 process-segment-match 4265 ())
(4271 process-pattern 4265 ())
(4272 #f 4271 ())
(4273 process-template 4265 ())
(4274 loop##565 4273 ())
(4275 meta-variables 4265 ())
(4276 free-meta-variables 4265 ())
(4277 usual-macros #f ())
(4278 #f 4277 ())
(4279 usual-macros #f ())
(4280 #f 4279 ())
(4281 expand-quasiquote 4280 ())
(4282 finalize-quasiquote 4280 ())
(4283 descend-quasiquote 4280 ())
(4284 descend-quasiquote-pair 4280 ())
(4285 #f 4284 ())
(4286 #f 4285 ())
(4287 descend-quasiquote-vector 4280 ())
(4288 #f 4287 ())
(4289 interesting-to-quasiquote? 4280 ())
(4290 usual-macros #f ())
(4291 case-clause? 4290 ())
(4292 usual-macros #f ())
(4293 #f 4292 ())
(4294 #f 4293 ())
(4295 #f 4293 ())
(4296 usual-macros #f ())
(4297 #f 4296 ())
(4298 usual-macros #f ())
(4299 specs? 4298 ())
(4300 usual-macros #f ())
(4301 #f 4300 ())
(4302 usual-macros #f ())
(4303 #f 4302 ())
(4304 usual-macros #f ())
(4305 do-spec? 4304 ())
(4306 usual-macros #f ())
(4307 #f 4306 ())
(4308 #f 4307 ())
(4309 usual-macros #f ())
(4310 #f 4309 ())
(4311 recur 4310 ())
(4312 usual-macros #f ())
(4313 #f 4312 ())
(4314 usual-macros #f ())
(4315 usual-transform 4314 ())
(4316 usual-macros #f ())
(4317 define-usual-macro 4316 ())
(4318 usual-macros #f ())
(4319 strong #f ())
(4320 pop-vertex-edge! 4319 ())
(4321 strong #f ())
(4322 follow-edge 4321 ())
(4323 strong #f ())
(4324 unwind-stack 4323 ())
(4325 loop 4324 ())
(4326 strong #f ())
(4327 end-vertex 4326 ())
(4328 #f 4327 ())
(4329 #f 4327 ())
(4330 strong #f ())
(4331 get-strong 4330 ())
(4332 strong #f ())
(4333 do-vertex 4332 ())
(4334 strong #f ())
(4335 make-vertices 4334 ())
(4336 maybe-slot 4335 ())
(4337 #f 4335 ())
(4338 #f 4335 ())
(4339 strong #f ())
(4340 make-vertex 4339 ())
(4341 strong #f ())
(4342 vertex? 4341 ())
(4343 strong #f ())
(4344 vertex-data 4343 ())
(4345 strong #f ())
(4346 set-vertex-edges! 4345 ())
(4347 strong #f ())
(4348 vertex-edges 4347 ())
(4349 strong #f ())
(4350 set-vertex-stack! 4349 ())
(4351 strong #f ())
(4352 vertex-stack 4351 ())
(4353 strong #f ())
(4354 set-vertex-index! 4353 ())
(4355 strong #f ())
(4356 vertex-index 4355 ())
(4357 strong #f ())
(4358 set-vertex-parent! 4357 ())
(4359 strong #f ())
(4360 vertex-parent 4359 ())
(4361 strong #f ())
(4362 set-vertex-lowpoint! 4361 ())
(4363 strong #f ())
(4364 vertex-lowpoint 4363 ())
(4365 strong #f ())
(4366 really-make-vertex 4365 ())
(4367 strong #f ())
(4368 strong #f ())
(4369 find-next-vertex 4368 ())
(4370 loop##587 4369 ())
(4371 strong #f ())
(4372 strongly-connected-components 4371 ())
(4373 loop 4372 ())
(4374 #f 4373 ())
(4375 #f 4373 ())
(4376 #f 4373 ())
(4377 usages #f ())
(4378 insert-aliases 4377 ())
(4379 loop 4378 ())
(4380 usages #f ())
(4381 make-form 4380 ())
(4382 usages #f ())
(4383 #f 4382 ())
(4384 usages #f ())
(4385 form? 4384 ())
(4386 usages #f ())
(4387 form-node 4386 ())
(4388 usages #f ())
(4389 set-form-aliases! 4388 ())
(4390 usages #f ())
(4391 form-aliases 4390 ())
(4392 usages #f ())
(4393 set-form-unaliased?! 4392 ())
(4394 usages #f ())
(4395 form-unaliased? 4394 ())
(4396 usages #f ())
(4397 set-form-free! 4396 ())
(4398 usages #f ())
(4399 form-free 4398 ())
(4400 usages #f ())
(4401 set-form-temp! 4400 ())
(4402 usages #f ())
(4403 form-temp 4402 ())
(4404 usages #f ())
(4405 really-make-form 4404 ())
(4406 usages #f ())
(4407 usages #f ())
(4408 topologically-sort 4407 ())
(4409 #f 4408 ())
(4410 #f 4409 ())
(4411 #f 4409 ())
(4412 usages #f ())
(4413 maybe-make-aliased 4412 ())
(4414 usages #f ())
(4415 stuff-count 4414 ())
(4416 #f 4415 ())
(4417 usages #f ())
(4418 sort-forms 4417 ())
(4419 #f 4418 ())
(4420 #f 4418 ())
(4421 usages #f ())
(4422 usages #f ())
(4423 usages #f ())
(4424 usages #f ())
(4425 usages #f ())
(4426 usages #f ())
(4427 usages #f ())
(4428 usages #f ())
(4429 usages #f ())
(4430 usages #f ())
(4431 usage-incrementator 4430 ())
(4432 #f 4431 ())
(4433 usages #f ())
(4434 package-usage? 4433 ())
(4435 usages #f ())
(4436 make-package-usage 4435 ())
(4437 usages #f ())
(4438 make-usage 4437 ())
(4439 usages #f ())
(4440 usage? 4439 ())
(4441 usages #f ())
(4442 usage-name-node 4441 ())
(4443 usages #f ())
(4444 set-reference! 4443 ())
(4445 usages #f ())
(4446 usage-reference-count 4445 ())
(4447 usages #f ())
(4448 set-operator! 4447 ())
(4449 usages #f ())
(4450 usage-operator-count 4449 ())
(4451 usages #f ())
(4452 set-assignment! 4451 ())
(4453 usages #f ())
(4454 usage-assignment-count 4453 ())
(4455 usages #f ())
(4456 really-make-usage 4455 ())
(4457 usages #f ())
(4458 usages #f ())
(4459 #f 4458 ())
(4460 usages #f ())
(4461 #f 4460 ())
(4462 usages #f ())
(4463 #f 4462 ())
(4464 usages #f ())
(4465 #f 4464 ())
(4466 usages #f ())
(4467 #f 4466 ())
(4468 usages #f ())
(4469 #f 4468 ())
(4470 usages #f ())
(4471 analyze-letrec 4470 ())
(4472 #f 4471 ())
(4473 usages #f ())
(4474 #f 4473 ())
(4475 usages #f ())
(4476 #f 4475 ())
(4477 usages #f ())
(4478 #f 4477 ())
(4479 #f 4478 ())
(4480 usages #f ())
(4481 #f 4480 ())
(4482 usages #f ())
(4483 add-if-free 4482 ())
(4484 usages #f ())
(4485 #f 4484 ())
(4486 usages #f ())
(4487 usages #f ())
(4488 usages #f ())
(4489 usages #f ())
(4490 usages #f ())
(4491 usages #f ())
(4492 nothing 4491 ())
(4493 usages #f ())
(4494 define-usage-analyzer 4493 ())
(4495 usages #f ())
(4496 #f 4495 ())
(4497 usages #f ())
(4498 analyze-nodes 4497 ())
(4499 #f 4498 ())
(4500 usages #f ())
(4501 analyze 4500 ())
(4502 usages #f ())
(4503 find-node-usages 4502 ())
(4504 #f 4503 ())
(4505 #f 4503 ())
(4506 usages #f ())
(4507 maybe-update-known-type 4506 ())
(4508 usages #f ())
(4509 find-usages 4508 ())
(4510 #f 4509 ())
(4511 #f 4509 ())
(4512 #f 4511 ())
(4513 #f 4509 ())
(4514 inline #f ())
(4515 inline #f ())
(4516 inline #f ())
(4517 inline #f ())
(4518 inline #f ())
(4519 inline #f ())
(4520 get-qualified-env 4519 ())
(4521 inline #f ())
(4522 qualified->name 4521 ())
(4523 recur 4522 ())
(4524 inline #f ())
(4525 inline #f ())
(4526 inline #f ())
(4527 reconstitute-name 4526 ())
(4528 inline #f ())
(4529 reconstitute 4528 ())
(4530 label 4529 ())
(4531 inline #f ())
(4532 make-substitution 4531 ())
(4533 #f 4532 ())
(4534 inline #f ())
(4535 inline-transform 4534 ())
(4536 #f 4535 ())
(4537 #f 4535 ())
(4538 inline #f ())
(4539 remove-bindings 4538 ())
(4540 label 4539 ())
(4541 inline #f ())
(4542 unused-name 4541 ())
(4543 loop##612 4542 ())
(4544 #f 4543 ())
(4545 inline #f ())
(4546 clean-lookup 4545 ())
(4547 inline #f ())
(4548 clean-lambda 4547 ())
(4549 #f 4548 ())
(4550 recur 4548 ())
(4551 inline #f ())
(4552 clean-node 4551 ())
(4553 #f 4552 ())
(4554 #f 4552 ())
(4555 inline #f ())
(4556 make-inline-transform 4555 ())
(4557 #f 4556 ())
(4558 #f 4556 ())
(4559 loop##613 4558 ())
(4560 for-reification #f ())
(4561 package-define-static! 4560 ())
(4562 for-reification #f ())
(4563 transform 4562 ())
(4564 for-reification #f ())
(4565 package 4564 ())
(4566 loop##614 4565 ())
(4567 for-reification #f ())
(4568 simple-interface 4567 ())
(4569 #f 4568 ())
(4570 for-reification #f ())
(4571 primop 4570 ())
(4572 for-reification #f ())
(4573 operator 4572 ())
(4574 locks #f ())
(4575 locks #f ())
(4576 set-lock-owner-uid! 4575 ())
(4577 locks #f ())
(4578 lock-owner-uid 4577 ())
(4579 locks #f ())
(4580 lock-queue 4579 ())
(4581 locks #f ())
(4582 lock-uid 4581 ())
(4583 locks #f ())
(4584 really-make-lock 4583 ())
(4585 locks #f ())
(4586 locks #f ())
(4587 lock? 4586 ())
(4588 locks #f ())
(4589 next-uid 4588 ())
(4590 #f 4589 ())
(4591 locks #f ())
(4592 make-lock 4591 ())
(4593 locks #f ())
(4594 obtain-lock 4593 ())
(4595 #f 4594 ())
(4596 #f 4594 ())
(4597 lose 4596 ())
(4598 locks #f ())
(4599 maybe-obtain-lock 4598 ())
(4600 #f 4599 ())
(4601 #f 4599 ())
(4602 lose 4601 ())
(4603 locks #f ())
(4604 release-lock 4603 ())
(4605 #f 4604 ())
(4606 #f 4604 ())
(4607 lose 4606 ())
(4608 vm-data #f ())
(4609 remove-stob-tag 4608 ())
(4610 vm-data #f ())
(4611 add-stob-tag 4610 ())
(4612 vm-data #f ())
(4613 b-vector-header? 4612 ())
(4614 vm-data #f ())
(4615 d-vector-header? 4614 ())
(4616 vm-data #f ())
(4617 header-length-in-a-units 4616 ())
(4618 vm-data #f ())
(4619 header-length-in-cells 4618 ())
(4620 vm-data #f ())
(4621 header-length-in-bytes 4620 ())
(4622 vm-data #f ())
(4623 immutable-header? 4622 ())
(4624 vm-data #f ())
(4625 header-type 4624 ())
(4626 vm-data #f ())
(4627 make-header-immutable 4626 ())
(4628 vm-data #f ())
(4629 vm-data #f ())
(4630 make-header 4629 ())
(4631 vm-data #f ())
(4632 vm-data #f ())
(4633 vm-data #f ())
(4634 vm-data #f ())
(4635 vm-data #f ())
(4636 vm-data #f ())
(4637 extract-char 4636 ())
(4638 vm-data #f ())
(4639 enter-char 4638 ())
(4640 vm-data #f ())
(4641 vm-boolean? 4640 ())
(4642 vm-data #f ())
(4643 extract-boolean 4642 ())
(4644 vm-data #f ())
(4645 enter-boolean 4644 ())
(4646 vm-data #f ())
(4647 false? 4646 ())
(4648 vm-data #f ())
(4649 vm-data #f ())
(4650 vm-data #f ())
(4651 vm-data #f ())
(4652 vm-data #f ())
(4653 vm-data #f ())
(4654 vm-data #f ())
(4655 vm-data #f ())
(4656 vm-data #f ())
(4657 vm-data #f ())
(4658 vm-data #f ())
(4659 vm-data #f ())
(4660 immediate-predicate 4659 ())
(4661 #f 4660 ())
(4662 vm-data #f ())
(4663 vm-data #f ())
(4664 vm-data #f ())
(4665 make-tag&immediate-type 4664 ())
(4666 vm-data #f ())
(4667 tag&immediate-type 4666 ())
(4668 vm-data #f ())
(4669 immediate-info 4668 ())
(4670 vm-data #f ())
(4671 immediate-type 4670 ())
(4672 vm-data #f ())
(4673 make-immediate 4672 ())
(4674 vm-data #f ())
(4675 vm-data #f ())
(4676 vm-data #f ())
(4677 vm-data #f ())
(4678 vm-data #f ())
(4679 fixnum-bitwise-not 4678 ())
(4680 vm-data #f ())
(4681 vm-data #f ())
(4682 vm-data #f ())
(4683 vm-data #f ())
(4684 vm-data #f ())
(4685 vm-data #f ())
(4686 fixnum->stob 4685 ())
(4687 vm-data #f ())
(4688 descriptor->fixnum 4687 ())
(4689 vm-data #f ())
(4690 extract-fixnum 4689 ())
(4691 vm-data #f ())
(4692 enter-fixnum 4691 ())
(4693 vm-data #f ())
(4694 too-small-for-fixnum? 4693 ())
(4695 vm-data #f ())
(4696 too-big-for-fixnum? 4695 ())
(4697 vm-data #f ())
(4698 vm-data #f ())
(4699 vm-data #f ())
(4700 vm-data #f ())
(4701 stob? 4700 ())
(4702 vm-data #f ())
(4703 header? 4702 ())
(4704 vm-data #f ())
(4705 immediate? 4704 ())
(4706 vm-data #f ())
(4707 fixnum? 4706 ())
(4708 vm-data #f ())
(4709 vm-data #f ())
(4710 vm-data #f ())
(4711 vm-data #f ())
(4712 set-descriptor-tag 4711 ())
(4713 vm-data #f ())
(4714 unsigned-descriptor-data 4713 ())
(4715 vm-data #f ())
(4716 descriptor-data 4715 ())
(4717 vm-data #f ())
(4718 descriptor-tag 4717 ())
(4719 vm-data #f ())
(4720 make-descriptor 4719 ())
(4721 vm-data #f ())
(4722 vm-data #f ())
(4723 vm-data #f ())
(4724 bytes->a-units 4723 ())
(4725 vm-data #f ())
(4726 a-units->cells 4725 ())
(4727 vm-data #f ())
(4728 cells->a-units 4727 ())
(4729 vm-data #f ())
(4730 vm-data #f ())
(4731 vm-data #f ())
(4732 cells->bytes 4731 ())
(4733 vm-data #f ())
(4734 bytes->cells 4733 ())
(4735 vm-data #f ())
(4736 vm-data #f ())
(4737 vm-data #f ())
(4738 vm-data #f ())
(4739 vm-data #f ())
(4740 vm-data #f ())
(4741 vm-data #f ())
(4742 low-bits 4741 ())
(4743 vm-data #f ())
(4744 adjoin-bits 4743 ())
(4745 vm-data #f ())
(4746 vm-data #f ())
(4747 arithmetic-shift-right 4746 ())
(4748 types #f ())
(4749 types #f ())
(4750 types #f ())
(4751 types #f ())
(4752 types #f ())
(4753 types #f ())
(4754 types #f ())
(4755 types #f ())
(4756 types #f ())
(4757 types #f ())
(4758 types #f ())
(4759 types #f ())
(4760 types #f ())
(4761 types #f ())
(4762 types #f ())
(4763 types #f ())
(4764 types #f ())
(4765 types #f ())
(4766 types #f ())
(4767 types #f ())
(4768 types #f ())
(4769 types #f ())
(4770 procedure 4769 ())
(4771 types #f ())
(4772 types #f ())
(4773 types #f ())
(4774 types #f ())
(4775 defpackage #f ())
(4776 note-name! 4775 ())
(4777 defpackage #f ())
(4778 set-verify-later! 4777 ())
(4779 defpackage #f ())
(4780 verify-later! 4779 ())
(4781 defpackage #f ())
(4782 *verify-later!* 4781 ())
(4783 defpackage #f ())
(4784 defpackage #f ())
(4785 loser 4784 ())
(4786 defpackage #f ())
(4787 make-a-package 4786 ())
(4788 scan-package #f ())
(4789 check-structure 4788 ())
(4790 #f 4789 ())
(4791 scan-package #f ())
(4792 package-optimizer-names 4791 ())
(4793 #f 4792 ())
(4794 #f 4792 ())
(4795 scan-package #f ())
(4796 read-files 4795 ())
(4797 #f 4796 ())
(4798 scan-package #f ())
(4799 package-source 4798 ())
(4800 #f 4799 ())
(4801 scan-package #f ())
(4802 collect-packages 4801 ())
(4803 recur 4802 ())
(4804 #f 4803 ())
(4805 compile-packages #f ())
(4806 compile-packages #f ())
(4807 compile-packages #f ())
(4808 make-define-primitive-node 4807 ())
(4809 compile-packages #f ())
(4810 define-primitives 4809 ())
(4811 #f 4810 ())
(4812 #f 4810 ())
(4813 compile-packages #f ())
(4814 define-usual-transform 4813 ())
(4815 compile-packages #f ())
(4816 expand-package 4815 ())
(4817 #f 4816 ())
(4818 #f 4817 ())
(4819 #f 4817 ())
(4820 #f 4817 ())
(4821 #f 4820 ())
(4822 #f 4821 ())
(4823 #f 4816 ())
(4824 compile-packages #f ())
(4825 compile-package 4824 ())
(4826 module-system #f ())
(4827 analysis #f ())
(4828 analysis #f ())
(4829 analysis #f ())
(4830 analysis #f ())
(4831 analysis #f ())
(4832 analysis #f ())
(4833 package-lookup-type 4832 ())
(4834 analysis #f ())
(4835 analysis #f ())
(4836 require 4835 ())
(4837 analysis #f ())
(4838 simple-literal? 4837 ())
(4839 analysis #f ())
(4840 analysis #f ())
(4841 analysis #f ())
(4842 primitive-proc? 4841 ())
(4843 analysis #f ())
(4844 really-simple-call? 4843 ())
(4845 analysis #f ())
(4846 static-value 4845 ())
(4847 analysis #f ())
(4848 #f 4847 ())
(4849 analysis #f ())
(4850 #f 4849 ())
(4851 loop 4850 ())
(4852 analysis #f ())
(4853 #f 4852 ())
(4854 analysis #f ())
(4855 #f 4854 ())
(4856 analysis #f ())
(4857 #f 4856 ())
(4858 analysis #f ())
(4859 #f 4858 ())
(4860 analysis #f ())
(4861 #f 4860 ())
(4862 analysis #f ())
(4863 #f 4862 ())
(4864 analysis #f ())
(4865 #f 4864 ())
(4866 analysis #f ())
(4867 #f 4866 ())
(4868 analysis #f ())
(4869 #f 4868 ())
(4870 analysis #f ())
(4871 #f 4870 ())
(4872 analysis #f ())
(4873 #f 4872 ())
(4874 analysis #f ())
(4875 define-analyzer 4874 ())
(4876 analysis #f ())
(4877 #f 4876 ())
(4878 analysis #f ())
(4879 simple-list? 4878 ())
(4880 analysis #f ())
(4881 simple? 4880 ())
(4882 analysis #f ())
(4883 analysis #f ())
(4884 simple-lambda? 4883 ())
(4885 #f 4884 ())
(4886 analysis #f ())
(4887 inlinable-rhs? 4886 ())
(4888 analysis #f ())
(4889 analyze-form 4888 ())
(4890 analysis #f ())
(4891 analyze-forms 4890 ())
(4892 #f 4891 ())
(4893 analysis #f ())
(4894 #f 4893 ())
(4895 ensures-loaded #f ())
(4896 ensure-loaded 4895 ())
(4897 #f 4896 ())
(4898 #f 4897 ())
(4899 #f 4896 ())
(4900 #f #f ())
(4901 #f 4900 ())
(4902 get-location 4901 ())
(4903 #f 4901 ())
(4904 #f 4901 ())
(4905 #f 4901 ())
(4906 #f 4901 ())
(4907 #f 4901 ())
(4908 name 4907 ())
(4909 #f 4908 ())
(4910 #f 4901 ())
(4911 loop 4910 ())
(4912 #f 4910 ())
(4913 #f 4910 ())
(4914 #f 4910 ())
(4915 #f 4910 ())
(4916 #f 4901 ())
(4917 mem? 4916 ())
(4918 every? 4916 ())
(4919 #f 4916 ())
(4920 #f 4916 ())
(4921 #f 4901 ())
(4922 mem? 4921 ())
(4923 loop##645 4921 ())
(4924 #f 4901 ())
(4925 #f 4901 ())
(4926 #f 4901 ())
(4927 #f 4901 ())
(4928 #f 4901 ())
(4929 #f 4928 ())
(4930 #f 4901 ())
(4931 #f 4901 ())
(4932 #f 4901 ())
(4933 #f 4901 ())
(4934 #f 4901 ())
(4935 loop 4934 ())
(4936 #f 4934 ())
(4937 #f 4934 ())
(4938 #f 4934 ())
(4939 #f 4934 ())
(4940 #f 4901 ())
(4941 #f 4901 ())
(4942 #f 4901 ())
(4943 #f 4901 ())
(4944 #f 4901 ())
(4945 loop 4944 ())
(4946 #f 4901 ())
(4947 loop 4946 ())
(4948 #f 4901 ())
(4949 loop 4948 ())
(4950 #f 4901 ())
(4951 loop 4950 ())
(4952 #f 4901 ())
(4953 loop 4952 ())
(4954 #f 4901 ())
(4955 loop 4954 ())
(4956 #f 4901 ())
(4957 loop 4956 ())
(4958 #f 4901 ())
(4959 loop 4958 ())
(4960 #f 4901 ())
(4961 loop 4960 ())
(4962 #f 4901 ())
(4963 loop 4962 ())
(4964 #f 4901 ())
(4965 loop 4964 ())
(4966 #f 4901 ())
(4967 #f 4901 ())
(4968 #f 4901 ())
(4969 #f 4901 ())
(4970 #f 4901 ())
(4971 #f 4901 ())
(4972 #f 4901 ())
(4973 loop 4972 ())
(4974 #f 4901 ())
(4975 #f 4901 ())
(4976 #f 4901 ())
(4977 #f 4901 ())
(4978 #f 4901 ())
(4979 #f 4978 ())
(4980 #f 4901 ())
(4981 #f 4980 ())
(4982 #f 4980 ())
(4983 #f 4901 ())
(4984 #f 4901 ())
(4985 #f 4984 ())
(4986 parse-package-clauses 4901 ())
(4987 loop 4986 ())
(4988 #f 4901 ())
(4989 #f 4988 ())
(4990 #f 4989 ())
(4991 #f 4988 ())
(4992 #f 4901 ())
(4993 #f 4901 ())
(4994 #f 4901 ())
(4995 loop 4994 ())
(4996 #f 4901 ())
(4997 #f 4901 ())
(4998 #f 4901 ())
(4999 #f 4901 ())
(5000 loop 4999 ())
(5001 #f 4999 ())
(5002 #f 4999 ())
(5003 #f 4901 ())
(5004 #f 4901 ())
(5005 #f 4901 ())
(5006 #f #f ())
-
