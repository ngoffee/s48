; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 export-the-record-type)
(18 define-record-types)
(19 methods)
(20 number-i/o)
(21 fluids)
(22 wind)
(23 session-data)
(24 i/o)
(25 channel-i/o)
(26 channel-ports)
(27 conditions)
(28 writing)
(29 reading)
(30 scheme-level-2)
(31 features)
(32 templates)
(33 continuations)
(34 more-types)
(35 enumerated)
(36 architecture)
(37 exceptions)
(38 interrupts)
(39 threads)
(40 proposals)
(41 scheduler)
(42 root-scheduler)
(43 enum-case)
(44 queues)
(45 locks)
(46 condvars)
(47 usual-resumer)
(48 weak)
(49 display-conditions)
(50 meta-types)
(51 bindings)
(52 names)
(53 thingies)
(54 nodes)
(55 compiler-envs)
(56 syntactic)
(57 usual-macros)
(58 var-utilities)
(59 debug-data)
(60 stack-check)
(61 segments)
(62 primops)
(63 reconstruction)
(64 compiler)
(65 reading-forms)
(66 flat-environments)
(67 interfaces)
(68 packages)
(69 scan-package)
(70 optimizer)
(71 compile-packages)
(72 defpackage)
(73 types)
(74 module-system)
(75 usages)
(76 analysis)
(77 inline)
(78 strong)
(79 tables)
(80 filenames)
(81 environments)
(82 evaluation)
(83 ensures-loaded)
(84 for-reification)
(85 scheme)
(86 mini-command)
(87 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (flat-lambda . 14))
(14 (primitive-procedure . 14))
(15 (define . 14))
(16 (if . 14))
(17 (pure-letrec . 14))
(18 (letrec-syntax . 14))
(19 (%file-name% . 14))
(20 (let-syntax . 14))
(21 (structure-ref . 14))
(22 (loophole . 14))
(23 (letrec . 14))
(24 (lap . 14))
(25 (set! . 14))
(26 (call . 14))
(27 (atan . 14))
(28 (set-location-defined?! . 14))
(29 (acos . 14))
(30 (vm-extension . 14))
(31 (asin . 14))
(32 (location-defined? . 14))
(33 (time . 14))
(34 (template-set! . 14))
(35 (set-current-proposal! . 14))
(36 (cons . 14))
(37 (wait . 14))
(38 (trap . 14))
(39 (assq . 14))
(40 (current-proposal . 14))
(41 (make-weak-pointer . 14))
(42 (lookup-shared-binding . 14))
(43 (push . 14))
(44 (provisional-set-contents! . 14))
(45 (set-contents! . 14))
(46 (read-char . 14))
(47 (provisional-contents . 14))
(48 (make-cell . 14))
(49 (sqrt . 14))
(50 (* . 14))
(51 (contents . 14))
(52 (+ . 14))
(53 (peek-char . 14))
(54 (- . 14))
(55 (continuation-set! . 14))
(56 (/ . 14))
(57 (weak-pointer? . 14))
(58 (quotient . 14))
(59 (close-channel . 14))
(60 (channel-abort . 14))
(61 (char? . 14))
(62 (< . 14))
(63 (= . 14))
(64 (provisional-set-port-data! . 14))
(65 (cell? . 14))
(66 (> . 14))
(67 (make-location . 14))
(68 (imag-part . 14))
(69 (set-port-data! . 14))
(70 (make-template . 14))
(71 (real? . 14))
(72 (real-part . 14))
(73 (provisional-port-data . 14))
(74 (record-length . 14))
(75 (port-data . 14))
(76 (pair? . 14))
(77 (provisional-set-port-lock! . 14))
(78 (make-port . 14))
(79 (set-port-lock! . 14))
(80 (bit-count . 14))
(81 (provisional-checked-record-ref . 14))
(82 (return-from-exception . 14))
(83 (provisional-port-lock . 14))
(84 (location? . 14))
(85 (checked-record-ref . 14))
(86 (channel-maybe-read . 14))
(87 (add-finalizer! . 14))
(88 (rational? . 14))
(89 (template? . 14))
(90 (port-lock . 14))
(91 (vector-length . 14))
(92 (make-continuation . 14))
(93 (provisional-shared-binding-ref . 14))
(94 (string-length . 14))
(95 (shared-binding-ref . 14))
(96 (port? . 14))
(97 (angle . 14))
(98 (false . 14))
(99 (remainder . 14))
(100 (continuation? . 14))
(101 (channel-ready? . 14))
(102 (binary-reduce1 . 14))
(103 (binary-reduce2 . 14))
(104 (char<? . 14))
(105 (char=? . 14))
(106 (<= . 14))
(107 (magnitude . 14))
(108 (>= . 14))
(109 (with-continuation . 14))
(110 (floor . 14))
(111 (provisional-checked-record-set! . 14))
(112 (apply . 14))
(113 (memory-status . 14))
(114 (checked-record-set! . 14))
(115 (exact->inexact . 14))
(116 (inexact->exact . 14))
(117 (error . 14))
(118 (extended-number-length . 14))
(119 (open-channels-list . 14))
(120 (provisional-shared-binding-set! . 14))
(121 (channel-id . 14))
(122 (shared-binding-set! . 14))
(123 (numerator . 14))
(124 (eof-object . 14))
(125 (byte-vector-length . 14))
(126 (record-ref . 14))
(127 (make-polar . 14))
(128 (write-char . 14))
(129 (symbol->string . 14))
(130 (exact? . 14))
(131 (provisional-vector-ref . 14))
(132 (vector-ref . 14))
(133 (set-current-thread! . 14))
(134 (provisional-set-port-index! . 14))
(135 (immutable? . 14))
(136 (set-exception-handlers! . 14))
(137 (string-ref . 14))
(138 (set-port-index! . 14))
(139 (provisional-set-port-limit! . 14))
(140 (make-shared-binding . 14))
(141 (current-thread . 14))
(142 (provisional-port-index . 14))
(143 (channel-status . 14))
(144 (set-port-limit! . 14))
(145 (shared-binding-name . 14))
(146 (port-index . 14))
(147 (make-immutable! . 14))
(148 (byte-vector-logging-ref . 14))
(149 (set-enabled-interrupts! . 14))
(150 (provisional-port-limit . 14))
(151 (port-limit . 14))
(152 (ascii->char . 14))
(153 (char->ascii . 14))
(154 (undefine-shared-binding . 14))
(155 (attempt-copy-bytes! . 14))
(156 (record-set! . 14))
(157 (shared-binding? . 14))
(158 (eof-object? . 14))
(159 (set-interrupt-handlers! . 14))
(160 (record . 14))
(161 (schedule-interrupt . 14))
(162 (channel-maybe-write . 14))
(163 (provisional-vector-set! . 14))
(164 (extended-number-ref . 14))
(165 (vector-set! . 14))
(166 (copy-bytes! . 14))
(167 (string-set! . 14))
(168 (call-external-value . 14))
(169 (values . 14))
(170 (intern . 14))
(171 (vector . 14))
(172 (write-image-low . 14))
(173 (provisional-byte-vector-ref . 14))
(174 (byte-vector-logging-set! . 14))
(175 (byte-vector-ref . 14))
(176 (make-double . 14))
(177 (provisional-set-location-id! . 14))
(178 (make-record . 14))
(179 (set-location-id! . 14))
(180 (provisional-location-id . 14))
(181 (location-id . 14))
(182 (bitwise-and . 14))
(183 (eq? . 14))
(184 (double? . 14))
(185 (extended-number-set! . 14))
(186 (make-vector . 14))
(187 (record? . 14))
(188 (provisional-set-port-buffer! . 14))
(189 (make-string . 14))
(190 (set-port-buffer! . 14))
(191 (primitive-catch . 14))
(192 (string-hash . 14))
(193 (provisional-byte-vector-set! . 14))
(194 (template-length . 14))
(195 (provisional-port-buffer . 14))
(196 (number? . 14))
(197 (port-buffer . 14))
(198 (byte-vector-set! . 14))
(199 (bitwise-ior . 14))
(200 (provisional-set-car! . 14))
(201 (provisional-set-cdr! . 14))
(202 (set-car! . 14))
(203 (closure-env . 14))
(204 (vector? . 14))
(205 (bitwise-not . 14))
(206 (set-cdr! . 14))
(207 (provisional-car . 14))
(208 (symbol? . 14))
(209 (string? . 14))
(210 (provisional-cdr . 14))
(211 (car . 14))
(212 (bitwise-xor . 14))
(213 (cdr . 14))
(214 (find-all-records . 14))
(215 (continuation-length . 14))
(216 (log . 14))
(217 (message . 14))
(218 (tan . 14))
(219 (collect . 14))
(220 (cos . 14))
(221 (channel-os-index . 14))
(222 (provisional-set-port-status! . 14))
(223 (make-extended-number . 14))
(224 (set-port-status! . 14))
(225 (sin . 14))
(226 (exp . 14))
(227 (provisional-port-status . 14))
(228 (pop . 14))
(229 (port-status . 14))
(230 (return-from-callback . 14))
(231 (provisional-set-port-locked?! . 14))
(232 (set-port-locked?! . 14))
(233 (make-byte-vector . 14))
(234 (weak-pointer-ref . 14))
(235 (call-with-values . 14))
(236 (provisional-port-locked? . 14))
(237 (denominator . 14))
(238 (port-locked? . 14))
(239 (reverse-list->string . 14))
(240 (extended-number? . 14))
(241 (shared-binding-is-import? . 14))
(242 (provisional-cell-ref . 14))
(243 (find-all . 14))
(244 (cell-ref . 14))
(245 (byte-vector? . 14))
(246 (string=? . 14))
(247 (open-channel . 14))
(248 (channel? . 14))
(249 (make-rectangular . 14))
(250 (set-session-data! . 14))
(251 (maybe-commit . 14))
(252 (template-ref . 14))
(253 (make-closure . 14))
(254 (session-data . 14))
(255 (integer? . 14))
(256 (signal-condition . 14))
(257 (provisional-set-port-pending-eof?! . 14))
(258 (port-handler . 14))
(259 (set-port-pending-eof?! . 14))
(260 (arithmetic-shift . 14))
(261 (provisional-port-pending-eof? . 14))
(262 (provisional-cell-set! . 14))
(263 (complex? . 14))
(264 (port-pending-eof? . 14))
(265 (cell-set! . 14))
(266 (binary-comparison-reduce2 . 14))
(267 (closure? . 14))
(268 (continuation-ref . 14))
(269 (closure-template . 14))
(270 (current-cont . 14))
(271 (char->integer . 14))
(272 (integer->char . 14))
(273 (ascii-limit . 14))
(274 (ascii-whitespaces . 14))
(275 (procedure? . 14))
(276 (invoke-closure . 14))
(277 (primitive-cwcc . 14))
(278 (make-undefined-location . 14))
(279 (location-assigned? . 14))
(280 (vector-unassigned? . 14))
(281 (string-copy . 14))
(282 (string->symbol . 14))
(283 (input-port? . 14))
(284 (output-port? . 14))
(285 (make-code-vector . 14))
(286 (code-vector? . 14))
(287 (code-vector-length . 14))
(288 (code-vector-ref . 14))
(289 (code-vector-set! . 14))
(290 (lookup-imported-binding . 14))
(291 (lookup-exported-binding . 14))
(292 (define-imported-binding . 14))
(293 (define-exported-binding . 14))
(294 (undefine-imported-binding . 14))
(295 (undefine-exported-binding . 14))
(296 (byte-vector . 14))
(297 (secret-length . 14))
(298 (debug-message . 14))
(299 (write-image . 14))
(300 (vector-prefix->list . 14))
(301 (empty-log . 14))
(302 (make-proposal . 14))
(303 (make-condition . 14))
(304 (signal . 14))
(305 (warn . 14))
(306 (syntax-error . 14))
(307 (call-error . 14))
(308 (case . 15))
(309 (quasiquote . 15))
(310 (syntax-rules . 15))
(311 (not . 15))
(312 (boolean? . 15))
(313 (eqv? . 15))
(314 (equal? . 15))
(315 (max . 15))
(316 (min . 15))
(317 (max-or-min . 15))
(318 (abs . 15))
(319 (zero? . 15))
(320 (positive? . 15))
(321 (negative? . 15))
(322 (even? . 15))
(323 (odd? . 15))
(324 (caar . 15))
(325 (cadr . 15))
(326 (cdar . 15))
(327 (cddr . 15))
(328 (caaar . 15))
(329 (caadr . 15))
(330 (cadar . 15))
(331 (caddr . 15))
(332 (cdaar . 15))
(333 (cdadr . 15))
(334 (cddar . 15))
(335 (cdddr . 15))
(336 (caaaar . 15))
(337 (caaadr . 15))
(338 (caadar . 15))
(339 (caaddr . 15))
(340 (cadaar . 15))
(341 (cadadr . 15))
(342 (caddar . 15))
(343 (cadddr . 15))
(344 (cdaaar . 15))
(345 (cdaadr . 15))
(346 (cdadar . 15))
(347 (cdaddr . 15))
(348 (cddaar . 15))
(349 (cddadr . 15))
(350 (cdddar . 15))
(351 (cddddr . 15))
(352 (null? . 15))
(353 (list . 15))
(354 (length . 15))
(355 (real-length . 15))
(356 (append . 15))
(357 (reverse . 15))
(358 (append-reverse . 15))
(359 (list-tail . 15))
(360 (list-ref . 15))
(361 (mem . 15))
(362 (memq . 15))
(363 (memv . 15))
(364 (member . 15))
(365 (ass . 15))
(366 (assv . 15))
(367 (assoc . 15))
(368 (list? . 15))
(369 (char>? . 15))
(370 (char>=? . 15))
(371 (char<=? . 15))
(372 (char-whitespace? . 15))
(373 (char-lower-case? . 15))
(374 (char-upper-case? . 15))
(375 (char-numeric? . 15))
(376 (char-alphabetic? . 15))
(377 (char-case-delta . 15))
(378 (make-character-map . 15))
(379 (upcase-map . 15))
(380 (char-upcase . 15))
(381 (downcase-map . 15))
(382 (char-downcase . 15))
(383 (char-ci-compare . 15))
(384 (char-ci=? . 15))
(385 (char-ci<? . 15))
(386 (char-ci<=? . 15))
(387 (char-ci>? . 15))
(388 (char-ci>=? . 15))
(389 (string . 15))
(390 (substring . 15))
(391 (string-append . 15))
(392 (string->list . 15))
(393 (list->string . 15))
(394 (string-fill! . 15))
(395 (make-string=? . 15))
(396 (string-ci=? . 15))
(397 (make-string<? . 15))
(398 (string<? . 15))
(399 (string-ci<? . 15))
(400 (string>? . 15))
(401 (string<=? . 15))
(402 (string>=? . 15))
(403 (string-ci>? . 15))
(404 (string-ci<=? . 15))
(405 (string-ci>=? . 15))
(406 (vector->list . 15))
(407 (list->vector . 15))
(408 (vector-fill! . 15))
(409 (map . 15))
(410 (map1 . 15))
(411 (map2+ . 15))
(412 (for-each . 15))
(413 (for-each1 . 15))
(414 (for-each2+ . 15))
(415 (delay . 15))
(416 (make-promise . 15))
(417 (force . 15))
(418 (unspecific . 15))
(419 (reduce . 15))
(420 (filter . 15))
(421 (pos . 15))
(422 (posq . 15))
(423 (posv . 15))
(424 (position . 15))
(425 (any . 15))
(426 (every . 15))
(427 (sublist . 15))
(428 (last . 15))
(429 (insert . 15))
(430 (fold . 15))
(431 (fold->2 . 15))
(432 (fold->3 . 15))
(433 (mvlet . 15))
(434 (mvlet-helper . 15))
(435 (copy-vars . 15))
(436 (mvlet* . 15))
(437 (inexact? . 15))
(438 (modulo . 15))
(439 (ceiling . 15))
(440 (truncate . 15))
(441 (round . 15))
(442 (gcd . 15))
(443 (euclid . 15))
(444 (lcm . 15))
(445 (expt . 15))
(446 (raise-to-integer-power . 15))
(447 (rationalize . 15))
(448 (simplest-rational . 15))
(449 (record-type . 16))
(450 (*record-type-uid* . 16))
(451 (*record-type* . 16))
(452 (make-record-type . 16))
(453 (record-type? . 16))
(454 (record-type-resumer . 16))
(455 (set-record-type-resumer! . 16))
(456 (record-type-uid . 16))
(457 (record-type-name . 16))
(458 (record-type-field-names . 16))
(459 (record-type-number-of-fields . 16))
(460 (record-type-discloser . 16))
(461 (set-record-type-discloser! . 16))
(462 (record-type-fields . 16))
(463 (record-field-index . 16))
(464 (record-constructor . 16))
(465 (record-accessor . 16))
(466 (record-modifier . 16))
(467 (record-predicate . 16))
(468 (define-record-discloser . 16))
(469 (make-default-record-discloser . 16))
(470 (disclose-record . 16))
(471 (define-record-resumer . 16))
(472 (default-record-resumer . 16))
(473 (initialize-records! . 16))
(474 (resume-record . 16))
(475 (:record-type . 16))
(476 (define-record-type . 18))
(477 (define-synchronized-record-type . 18))
(478 (define-constructor . 18))
(479 (define-accessors . 18))
(480 (define-accessor . 18))
(481 (ref-proc . 18))
(482 (set-proc . 18))
(483 (:simple-type . 19))
(484 (really-make-simple-type . 19))
(485 (simple-type-id . 19))
(486 (simple-type-priority . 19))
(487 (simple-type-predicate . 19))
(488 (simple-type-superiors . 19))
(489 (simple-type? . 19))
(490 (make-simple-type . 19))
(491 (compute-priority . 19))
(492 (*increment* . 19))
(493 (%type-priority . 19))
(494 (%type-predicate . 19))
(495 (%same-type? . 19))
(496 (define-simple-type . 19))
(497 (:syntax . 19))
(498 (:values . 19))
(499 (value? . 19))
(500 (:value . 19))
(501 (:zero . 19))
(502 (:number . 19))
(503 (:complex . 19))
(504 (:real . 19))
(505 (:rational . 19))
(506 (:integer . 19))
(507 (:exact-integer . 19))
(508 (:boolean . 19))
(509 (:symbol . 19))
(510 (:char . 19))
(511 (:null . 19))
(512 (:pair . 19))
(513 (:vector . 19))
(514 (:string . 19))
(515 (:procedure . 19))
(516 (:input-port . 19))
(517 (:output-port . 19))
(518 (:eof-object . 19))
(519 (:record . 19))
(520 (record-type-priority . 19))
(521 (:method-info . 19))
(522 (really-make-method-info . 19))
(523 (method-info-proc . 19))
(524 (method-info-n-ary? . 19))
(525 (method-info-types . 19))
(526 (method-info? . 19))
(527 (make-method-info . 19))
(528 (empty-method-list . 19))
(529 (insert-method . 19))
(530 (same-applicability? . 19))
(531 (every2 . 19))
(532 (more-specific? . 19))
(533 (more-specific-type? . 19))
(534 (:method-table . 19))
(535 (really-make-method-table . 19))
(536 (method-table-id . 19))
(537 (method-table-set-perform! . 19))
(538 (method-table-get-perform . 19))
(539 (make-generic . 19))
(540 (method-table-prototype . 19))
(541 (method-table-methods . 19))
(542 (set-method-table-methods! . 19))
(543 (method-table? . 19))
(544 (make-method-table . 19))
(545 (make-cell-for-generic . 19))
(546 (add-to-method-table! . 19))
(547 (set-final-method! . 19))
(548 (apply-generic . 19))
(549 (define-generic . 19))
(550 (methods->perform . 19))
(551 (last-action . 19))
(552 (one-action . 19))
(553 (argument-sequence-predicate . 19))
(554 (check-for-next . 19))
(555 (check-next . 19))
(556 (method-info . 19))
(557 (method-internal . 19))
(558 (with-next-method . 19))
(559 (define-method . 19))
(560 (&add-method! . 19))
(561 (add-method! . 19))
(562 (&type-predicate . 19))
(563 (type-predicate . 19))
(564 (&type-priority . 19))
(565 (type-priority . 19))
(566 (&type-superiors . 19))
(567 (type-superiors . 19))
(568 (&same-type? . 19))
(569 (same-type? . 19))
(570 (:singleton . 19))
(571 (singleton . 19))
(572 (singleton-value . 19))
(573 (compare-to . 19))
(574 (&disclose . 19))
(575 (disclose . 19))
(576 (proc->discloser . 19))
(577 (&number->string . 20))
(578 (real-number->string . 20))
(579 (number->string . 20))
(580 (integer->string . 20))
(581 (string->number . 20))
(582 (&really-string->number . 20))
(583 (really-string->number . 20))
(584 (:integer-string . 20))
(585 (set-exactness . 20))
(586 (string->integer . 20))
(587 (:thread . 21))
(588 (make-thread . 21))
(589 (thread-proposal . 21))
(590 (thread-dynamic-point . 21))
(591 (thread-dynamic-env . 21))
(592 (get-dynamic-env . 21))
(593 (set-dynamic-env! . 21))
(594 (get-dynamic-point . 21))
(595 (set-dynamic-point! . 21))
(596 (initialize-dynamic-state! . 21))
(597 (with-dynamic-env . 21))
(598 (empty-dynamic-env . 21))
(599 (:fluid . 21))
(600 (make-fluid . 21))
(601 (fluid-top-level-value . 21))
(602 (set-fluid-top-level-value! . 21))
(603 (fluid . 21))
(604 (set-fluid! . 21))
(605 (let-fluid . 21))
(606 (let-fluids . 21))
(607 (define-enumeration . 35))
(608 (components . 35))
(609 (enum . 35))
(610 (enumerand->name . 35))
(611 (name->enumerand . 35))
(612 (lookup-enumerand . 35))
(613 (architecture-version . 36))
(614 (bits-used-per-byte . 36))
(615 (byte-limit . 36))
(616 (define-instruction-set . 36))
(617 (op . 36))
(618 (op-enumeration . 36))
(619 (op-count . 36))
(620 (opcode-arg-specs . 36))
(621 (interrupt . 36))
(622 (interrupt-enumeration . 36))
(623 (interrupt-count . 36))
(624 (exception . 36))
(625 (exception-enumeration . 36))
(626 (exception-count . 36))
(627 (current-port-marker . 36))
(628 (current-port-marker-enumeration . 36))
(629 (current-port-marker-count . 36))
(630 (maximum-stack-args . 36))
(631 (*last-protocol* . 36))
(632 (next-protocol . 36))
(633 (two-byte-nargs-protocol . 36))
(634 (two-byte-nargs+list-protocol . 36))
(635 (ignore-values-protocol . 36))
(636 (big-stack-protocol . 36))
(637 (args+nargs-protocol . 36))
(638 (nary-dispatch-protocol . 36))
(639 (call-with-values-protocol . 36))
(640 (bottom-of-stack-protocol . 36))
(641 (maximum-external-call-args . 36))
(642 (default-stack-space . 36))
(643 (environment-stack-size . 36))
(644 (continuation-stack-size . 36))
(645 (available-stack-space . 36))
(646 (time-option . 36))
(647 (time-option-enumeration . 36))
(648 (time-option-count . 36))
(649 (memory-status-option . 36))
(650 (memory-status-option-enumeration . 36))
(651 (memory-status-option-count . 36))
(652 (channel-status-option . 36))
(653 (channel-status-option-enumeration . 36))
(654 (channel-status-option-count . 36))
(655 (port-status-options . 36))
(656 (port-status-options-enumeration . 36))
(657 (port-status-options-count . 36))
(658 (stob . 36))
(659 (stob-enumeration . 36))
(660 (stob-count . 36))
(661 (least-b-vector-type . 36))
(662 (stob-data . 36))
(663 (call-atomically . 40))
(664 (call-atomically! . 40))
(665 (call-ensuring-atomicity . 40))
(666 (call-ensuring-atomicity! . 40))
(667 (atomically . 40))
(668 (atomically! . 40))
(669 (ensure-atomicity . 40))
(670 (ensure-atomicity! . 40))
(671 (with-new-proposal . 40))
(672 (remove-current-proposal! . 40))
(673 (invalidate-current-proposal! . 40))
(674 (j-random-pair . 40))
(675 (*session-data-initializers* . 23))
(676 (make-session-data-slot! . 23))
(677 (session-data-ref . 23))
(678 (session-data-set! . 23))
(679 (initialize-session-data! . 23))
(680 (*condition-types* . 27))
(681 (condition-supertypes . 27))
(682 (define-condition-type . 27))
(683 (condition-predicate . 27))
(684 (condition? . 27))
(685 (condition-type . 27))
(686 (condition-stuff . 27))
(687 (error? . 27))
(688 (call-error? . 27))
(689 (read-error? . 27))
(690 (exception? . 27))
(691 (exception-opcode . 27))
(692 (exception-reason . 27))
(693 (exception-arguments . 27))
(694 (make-exception . 27))
(695 (warning? . 27))
(696 (syntax-error? . 27))
(697 (interrupt? . 27))
(698 (dynamic-wind . 22))
(699 (call-with-current-continuation . 22))
(700 (continuation->procedure . 22))
(701 (:point . 22))
(702 (make-point . 22))
(703 (point-parent . 22))
(704 (point-dynamic-env . 22))
(705 (point-out . 22))
(706 (point-in . 22))
(707 (point-depth . 22))
(708 (travel-to-point! . 22))
(709 (template-overhead . 32))
(710 (template-code . 32))
(711 (template-info . 32))
(712 (set-template-code! . 32))
(713 (set-template-info! . 32))
(714 (:closure . 34))
(715 (:code-vector . 34))
(716 (:location . 34))
(717 (:cell . 34))
(718 (:template . 34))
(719 (:channel . 34))
(720 (:port . 34))
(721 (:double . 34))
(722 (:weak-pointer . 34))
(723 (:shared-binding . 34))
(724 (continuation-cont . 33))
(725 (real-continuation-pc . 33))
(726 (real-continuation-template . 33))
(727 (continuation-env . 33))
(728 (exception-continuation-pc . 33))
(729 (exception-continuation-template . 33))
(730 (exception-continuation-exception . 33))
(731 (exception-continuation? . 33))
(732 (continuation-pc . 33))
(733 (continuation-template . 33))
(734 (normal-continuation-overhead . 33))
(735 (exception-continuation-overhead . 33))
(736 (continuation-arg . 33))
(737 (continuation-arg-count . 33))
(738 (:continuation . 33))
(739 (continuation-parent . 33))
(740 (define-exception-handler . 37))
(741 (signal-exception . 37))
(742 (exception-handlers . 37))
(743 (extend-opcode! . 37))
(744 (really-signal-condition . 37))
(745 (with-handler . 37))
(746 ($condition-handlers . 37))
(747 (initialize-exceptions! . 37))
(748 (last-resort-condition-handler . 37))
(749 (report-utter-lossage . 37))
(750 (continuation-preview . 37))
(751 (ignore-errors . 37))
(752 (report-errors-as-warnings . 37))
(753 (:port-handler . 24))
(754 (make-port-handler . 24))
(755 (port-handler-force . 24))
(756 (port-handler-ready? . 24))
(757 (port-handler-block . 24))
(758 (port-handler-char . 24))
(759 (port-handler-close . 24))
(760 (port-handler-discloser . 24))
(761 (port-handler? . 24))
(762 (disclose-port . 24))
(763 (initialize-i/o-handlers! . 24))
(764 (one-arg-proc->handler . 24))
(765 (two-arg-proc->handler . 24))
(766 (real-char-ready? . 24))
(767 (read-block . 24))
(768 (write-block . 24))
(769 (write-string . 24))
(770 (output-port-ready? . 24))
(771 (force-output . 24))
(772 (force-output-if-open . 24))
(773 (close-input-port . 24))
(774 (close-output-port . 24))
(775 (okay-limits? . 24))
(776 (open-port? . 24))
(777 (open-port-mask . 24))
(778 (input-port-mask . 24))
(779 (open-input-port-mask . 24))
(780 (open-input-port-status . 24))
(781 (open-input-port? . 24))
(782 (make-input-port-closed! . 24))
(783 (make-unbuffered-input-port . 24))
(784 (output-port-mask . 24))
(785 (open-output-port-mask . 24))
(786 (open-output-port-status . 24))
(787 (open-output-port? . 24))
(788 (make-output-port-closed! . 24))
(789 (make-unbuffered-output-port . 24))
(790 (null-output-port-handler . 24))
(791 (null-output-buffer . 24))
(792 (make-null-output-port . 24))
(793 (make-buffered-input-port . 24))
(794 (make-buffered-output-port . 24))
(795 (okay-buffer? . 24))
(796 (make-buffered-input-port-handler . 24))
(797 (note-buffer-reuse! . 24))
(798 (check-buffer-timestamp! . 24))
(799 (port-flushed? . 24))
(800 (set-port-flushed?! . 24))
(801 (make-one-char-input . 24))
(802 (make-char-ready? . 24))
(803 (make-read-block . 24))
(804 (get-available-bytes! . 24))
(805 (buffer-length . 24))
(806 (make-buffered-output-port-handler . 24))
(807 (make-closer . 24))
(808 (make-one-char-output . 24))
(809 (make-write-block . 24))
(810 (copy-bytes-out! . 24))
(811 (make-forcer . 24))
(812 (default-buffer-size . 24))
(813 (flush-these-ports . 24))
(814 (periodically-force-output! . 24))
(815 (output-port-forcers . 24))
(816 (periodically-flushed-ports . 24))
(817 (make-forcing-thunk . 24))
(818 ($current-input-port . 24))
(819 ($current-output-port . 24))
(820 ($current-error-port . 24))
(821 ($current-noise-port . 24))
(822 (current-input-port . 24))
(823 (current-output-port . 24))
(824 (current-error-port . 24))
(825 (current-noise-port . 24))
(826 (initialize-i/o . 24))
(827 (with-current-ports . 24))
(828 (call-with-current-input-port . 24))
(829 (call-with-current-output-port . 24))
(830 (call-with-current-noise-port . 24))
(831 (silently . 24))
(832 (newline . 24))
(833 (char-ready? . 24))
(834 (output-port-option . 24))
(835 (input-port-option . 24))
(836 (write . 28))
(837 (recurring-write . 28))
(838 (write-boolean . 28))
(839 (write-number . 28))
(840 (write-char-literal . 28))
(841 (character-name . 28))
(842 (write-string-literal . 28))
(843 (write-list . 28))
(844 (quotation? . 28))
(845 (write-vector . 28))
(846 (write-other . 28))
(847 (display-type-name . 28))
(848 (display . 28))
(849 (read . 29))
(850 (sub-read-carefully . 29))
(851 (reader-token-marker . 29))
(852 (make-reader-token . 29))
(853 (reader-token? . 29))
(854 (close-paren . 29))
(855 (dot . 29))
(856 (sub-read . 29))
(857 (read-dispatch-vector . 29))
(858 (read-terminating?-vector . 29))
(859 (set-standard-syntax! . 29))
(860 (set-standard-read-macro! . 29))
(861 (sub-read-list . 29))
(862 (gobble-line . 29))
(863 (*sharp-macros* . 29))
(864 (define-sharp-macro . 29))
(865 (proper-list? . 29))
(866 (sub-read-token . 29))
(867 (parse-token . 29))
(868 (strange-symbol-names . 29))
(869 (p-c-v . 29))
(870 (preferred-case . 29))
(871 (reading-error . 29))
(872 (:queue . 44))
(873 (really-make-queue . 44))
(874 (queue? . 44))
(875 (queue-tail . 44))
(876 (set-queue-tail! . 44))
(877 (queue-head . 44))
(878 (set-queue-head! . 44))
(879 (queue-uid . 44))
(880 (next-uid . 44))
(881 (make-queue . 44))
(882 (queue-empty? . 44))
(883 (enqueue! . 44))
(884 (queue-front . 44))
(885 (dequeue! . 44))
(886 (empty-queue! . 44))
(887 (on-queue? . 44))
(888 (delete-from-queue! . 44))
(889 (delete-from-queue-if! . 44))
(890 (queue->list . 44))
(891 (queue-length . 44))
(892 (initialize-interrupts! . 38))
(893 (interrupt-handlers . 38))
(894 (set-interrupt-handler! . 38))
(895 (no-interrupts . 38))
(896 (all-interrupts . 38))
(897 (with-interrupts-inhibited . 38))
(898 (with-interrupts-allowed . 38))
(899 (disable-interrupts! . 38))
(900 (enable-interrupts! . 38))
(901 (with-interrupts . 38))
(902 (enabled-interrupts . 38))
(903 (*post-gc-procedures* . 38))
(904 (call-after-gc! . 38))
(905 (post-gc-handler . 38))
(906 (required-post-gc-space . 38))
(907 (space-shortage-handler . 38))
(908 (call-before-heap-overflow! . 38))
(909 (:thread . 39))
(910 (really-make-thread . 39))
(911 (thread-name . 39))
(912 (thread-uid . 39))
(913 (thread-queue . 39))
(914 (set-thread-queue! . 39))
(915 (thread-data . 39))
(916 (set-thread-data! . 39))
(917 (thread-events . 39))
(918 (set-thread-events! . 39))
(919 (thread-current-task . 39))
(920 (set-thread-current-task! . 39))
(921 (thread-scheduler . 39))
(922 (set-thread-scheduler! . 39))
(923 (thread-arguments . 39))
(924 (set-thread-arguments! . 39))
(925 (thread-continuation . 39))
(926 (set-thread-continuation! . 39))
(927 (thread-time . 39))
(928 (set-thread-time! . 39))
(929 (thread-proposal . 39))
(930 (thread-dynamic-point . 39))
(931 (set-thread-dynamic-point! . 39))
(932 (thread-dynamic-env . 39))
(933 (thread? . 39))
(934 (*thread-uid* . 39))
(935 (make-thread . 39))
(936 (thread-top-level . 39))
(937 (thread-uid->thread . 39))
(938 (all-threads . 39))
(939 (add-event! . 39))
(940 (next-event! . 39))
(941 (thunk->continuation . 39))
(942 (compose-continuation . 39))
(943 (make-thread-queue . 39))
(944 (thread-queue-empty? . 39))
(945 (enqueue-thread! . 39))
(946 (dequeue-thread! . 39))
(947 (remove-thread-from-queue! . 39))
(948 (current-thread . 39))
(949 (set-current-thread! . 39))
(950 (event-type . 39))
(951 (event-type-enumeration . 39))
(952 (event-type-count . 39))
(953 (run . 39))
(954 (find-and-run-next-thread . 39))
(955 (debit-thread-times-and-run! . 39))
(956 (handle-timer-interrupt . 39))
(957 (run-next-thread . 39))
(958 (min . 39))
(959 (switch-to-thread . 39))
(960 (run-thread . 39))
(961 (suspend . 39))
(962 (suspend-to . 39))
(963 (debit-down! . 39))
(964 (exit . 39))
(965 (wait . 39))
(966 (waiting? . 39))
(967 (relinquish-timeslice . 39))
(968 (block . 39))
(969 (maybe-commit-and-block . 39))
(970 (upcall . 39))
(971 (propogate-upcall . 39))
(972 (kill-thread! . 39))
(973 (interrupt-thread . 39))
(974 (get-next-event! . 39))
(975 (event-pending? . 39))
(976 (schedule-event . 39))
(977 (maybe-suspend . 39))
(978 (really-schedule-event . 39))
(979 (schedule-wakeup . 39))
(980 (show-running . 39))
(981 (running? . 39))
(982 (spawn . 39))
(983 (spawn-on-root . 39))
(984 (spawn-on-scheduler . 39))
(985 (make-ready . 39))
(986 (maybe-commit-and-make-ready . 39))
(987 (make-threads-ready . 39))
(988 (schedule-interrupt! . 39))
(989 (cancel-timer-interrupt! . 39))
(990 (interrupt-timer-time . 39))
(991 (real-time . 39))
(992 (with-threads . 39))
(993 (start-multitasking . 39))
(994 (deadlock? . 39))
(995 (terminate? . 39))
(996 (terminate-current-thread . 39))
(997 (root-scheduler-slot . 39))
(998 (root-scheduler . 39))
(999 (max2 . 39))
(1000 (sleep . 39))
(1001 (dozers . 39))
(1002 (insert . 39))
(1003 (wake-some-threads . 39))
(1004 (:condvar . 46))
(1005 (really-make-condvar . 46))
(1006 (condvar? . 46))
(1007 (condvar-id . 46))
(1008 (condvar-value . 46))
(1009 (set-condvar-value! . 46))
(1010 (condvar-has-value? . 46))
(1011 (set-condvar-has-value?! . 46))
(1012 (condvar-queue . 46))
(1013 (make-condvar . 46))
(1014 (maybe-commit-and-wait-for-condvar . 46))
(1015 (maybe-commit-and-set-condvar! . 46))
(1016 (condvar-has-waiters? . 46))
(1017 (channel-maybe-commit-and-do-it . 25))
(1018 (channel-maybe-commit-and-read . 25))
(1019 (channel-maybe-commit-and-write . 25))
(1020 (note-channel-result! . 25))
(1021 (channel-write . 25))
(1022 (channel-maybe-commit-and-close . 25))
(1023 (input-channel? . 25))
(1024 (initialize-channel-i/o! . 25))
(1025 (i/o-completion-handler . 25))
(1026 (waiting-for-i/o? . 25))
(1027 (channel-wait-condvars-slot . 25))
(1028 (channel-condvars . 25))
(1029 (set-channel-condvars! . 25))
(1030 (add-channel-condvar! . 25))
(1031 (wait-for-channel . 25))
(1032 (fetch-channel-condvar! . 25))
(1033 (abort-unwanted-i/o! . 25))
(1034 (:channel-cell . 26))
(1035 (really-make-channel-cell . 26))
(1036 (channel-cell? . 26))
(1037 (channel-cell-sent . 26))
(1038 (set-channel-cell-sent! . 26))
(1039 (channel-cell-in-use? . 26))
(1040 (set-channel-cell-in-use?! . 26))
(1041 (channel-cell-condvar . 26))
(1042 (channel-cell-closer . 26))
(1043 (channel-cell-ref . 26))
(1044 (make-channel-cell . 26))
(1045 (port->channel . 26))
(1046 (port-channel-closer . 26))
(1047 (fill-buffer! . 26))
(1048 (channel-port-ready? . 26))
(1049 (input-channel-handler . 26))
(1050 (input-channel->port . 26))
(1051 (input-channel+closer->port . 26))
(1052 (real-input-channel->port . 26))
(1053 (empty-buffer! . 26))
(1054 (send-some . 26))
(1055 (output-channel-handler . 26))
(1056 (output-channel->port . 26))
(1057 (output-channel+closer->port . 26))
(1058 (real-output-channel->port . 26))
(1059 (maybe-open-file . 26))
(1060 (open-input-file . 26))
(1061 (open-output-file . 26))
(1062 (call-with-input-file . 26))
(1063 (call-with-output-file . 26))
(1064 (with-input-from-file . 26))
(1065 (with-output-to-file . 26))
(1066 (force-channel-output-ports! . 26))
(1067 (one-char-handler . 26))
(1068 (write-block-handler . 26))
(1069 (unbuffered-output-handler . 26))
(1070 (:table . 79))
(1071 (really-make-table . 79))
(1072 (table-set!-procedure . 79))
(1073 (set-table-set!-procedure! . 79))
(1074 (table-ref-procedure . 79))
(1075 (set-table-ref-procedure! . 79))
(1076 (table-data . 79))
(1077 (set-table-data! . 79))
(1078 (table-size . 79))
(1079 (set-table-size! . 79))
(1080 (table? . 79))
(1081 (table-ref . 79))
(1082 (table-set! . 79))
(1083 (linear-table-size-limit . 79))
(1084 (next-table-size . 79))
(1085 (make-table-maker . 79))
(1086 (assoc->table-maker . 79))
(1087 (null-entry . 79))
(1088 (new-entry . 79))
(1089 (entry-value . 79))
(1090 (entry-key . 79))
(1091 (set-entry-value! . 79))
(1092 (delete-entry! . 79))
(1093 (make-assoc . 79))
(1094 (make-linear-table-ref . 79))
(1095 (make-linear-table-set! . 79))
(1096 (make->hash-table . 79))
(1097 (make-hash-table-ref . 79))
(1098 (make-hash-table-set! . 79))
(1099 (expand-hash-table! . 79))
(1100 (table-enter-alist! . 79))
(1101 (table-expand-table! . 79))
(1102 (table-walk . 79))
(1103 (really-table-walk . 79))
(1104 (alist-walk . 79))
(1105 (make-table-immutable! . 79))
(1106 (table->entry-list . 79))
(1107 (default-table-hash-function . 79))
(1108 (eqv?-assoc . 79))
(1109 (default-table-assoc . 79))
(1110 (symbol-hash . 79))
(1111 (make-table . 79))
(1112 (make-string-table . 79))
(1113 (make-symbol-table . 79))
(1114 (make-integer-table . 79))
(1115 (make-population . 48))
(1116 (add-to-population! . 48))
(1117 (weak-memq . 48))
(1118 (population-reduce . 48))
(1119 (population->list . 48))
(1120 (walk-population . 48))
(1121 (:meta-type . 50))
(1122 (really-make-type . 50))
(1123 (type-info . 50))
(1124 (type-more . 50))
(1125 (type-mask . 50))
(1126 (meta-type? . 50))
(1127 (make-type . 50))
(1128 (name->type-table . 50))
(1129 (mask->name-table . 50))
(1130 (name->type . 50))
(1131 (set-type-name! . 50))
(1132 (*mask* . 50))
(1133 (new-type-bit . 50))
(1134 (mask->type . 50))
(1135 (bottom-type . 50))
(1136 (error-type . 50))
(1137 (bottom-type? . 50))
(1138 (new-atomic-type . 50))
(1139 (named-atomic-type . 50))
(1140 (syntax-type . 50))
(1141 (other-static-type . 50))
(1142 (empty-rail-type . 50))
(1143 (rail-type . 50))
(1144 (make-optional-type . 50))
(1145 (make-rest-type . 50))
(1146 (head-type . 50))
(1147 (head-type-really . 50))
(1148 (tail-type . 50))
(1149 (empty-rail-type? . 50))
(1150 (rest-type? . 50))
(1151 (optional-type? . 50))
(1152 (mask/no-values . 50))
(1153 (mask/two-or-more . 50))
(1154 (mask/&rest . 50))
(1155 (value-type . 50))
(1156 (mask/value . 50))
(1157 (value-type? . 50))
(1158 (any-values-type . 50))
(1159 (any-arguments-type . 50))
(1160 (mask/one-or-more . 50))
(1161 (same-type? . 50))
(1162 (subtype? . 50))
(1163 (meet-type . 50))
(1164 (other-type-info . 50))
(1165 (meet-rail . 50))
(1166 (meet-procedure . 50))
(1167 (meet? . 50))
(1168 (meet-procedure? . 50))
(1169 (join-type . 50))
(1170 (join-rail . 50))
(1171 (join-procedure . 50))
(1172 (number-hierarchy . 50))
(1173 (integer-type . 50))
(1174 (rational-type . 50))
(1175 (real-type . 50))
(1176 (complex-type . 50))
(1177 (number-type . 50))
(1178 (exact-type . 50))
(1179 (inexact-type . 50))
(1180 (exact-integer-type . 50))
(1181 (inexact-real-type . 50))
(1182 (boolean-type . 50))
(1183 (pair-type . 50))
(1184 (null-type . 50))
(1185 (record-type . 50))
(1186 (any-procedure-type . 50))
(1187 (other-value-type . 50))
(1188 (mask/other . 50))
(1189 (make-other-type . 50))
(1190 (char-type . 50))
(1191 (unspecific-type . 50))
(1192 (string-type . 50))
(1193 (symbol-type . 50))
(1194 (vector-type . 50))
(1195 (escape-type . 50))
(1196 (structure-type . 50))
(1197 (mask/procedure . 50))
(1198 (procedure-type . 50))
(1199 (make-procedure-type . 50))
(1200 (procedure-type-domain . 50))
(1201 (procedure-type-codomain . 50))
(1202 (restrictive? . 50))
(1203 (sexp->type . 50))
(1204 (sexp->values-type . 50))
(1205 (type->sexp . 50))
(1206 (atomic-type->sexp . 50))
(1207 (rail-type->sexp . 50))
(1208 (disjoin-type . 50))
(1209 (disjoin-rest . 50))
(1210 (mask/number . 50))
(1211 (make-some-values-type . 50))
(1212 (proc . 50))
(1213 (some-values . 50))
(1214 (procedure-type? . 50))
(1215 (fixed-arity-procedure-type? . 50))
(1216 (procedure-type-arity . 50))
(1217 (procedure-type-argument-types . 50))
(1218 (variable-type . 50))
(1219 (variable-type? . 50))
(1220 (variable-value-type . 50))
(1221 (usual-variable-type . 50))
(1222 (undeclared-type . 50))
(1223 (compatible-types? . 50))
(1224 (:interface . 67))
(1225 (really-make-interface . 67))
(1226 (interface-name . 67))
(1227 (set-interface-name! . 67))
(1228 (interface-clients . 67))
(1229 (walk-method . 67))
(1230 (ref-method . 67))
(1231 (interface? . 67))
(1232 (make-interface . 67))
(1233 (interface-ref . 67))
(1234 (interface-member? . 67))
(1235 (for-each-declaration . 67))
(1236 (note-reference-to-interface! . 67))
(1237 (note-interface-name! . 67))
(1238 (make-simple-interface . 67))
(1239 (make-simple-interface-table . 67))
(1240 (make-compound-interface . 67))
(1241 (make-modified-interface . 67))
(1242 (process-commands . 67))
(1243 (okay-command? . 67))
(1244 (proper-list? . 67))
(1245 (process-prefix . 67))
(1246 (process-expose . 67))
(1247 (process-hide . 67))
(1248 (process-alias . 67))
(1249 (process-rename . 67))
(1250 (lookup . 67))
(1251 (make-lookup . 67))
(1252 (prefix-match? . 67))
(1253 (remove-prefix . 67))
(1254 (make-default-walker . 67))
(1255 (cdr-assq . 67))
(1256 (make-alist-walker . 67))
(1257 (symbol-append . 67))
(1258 (binding? . 51))
(1259 (binding-type . 51))
(1260 (binding-place . 51))
(1261 (binding-static . 51))
(1262 (binding-path . 51))
(1263 (set-binding-place! . 51))
(1264 (make-binding . 51))
(1265 (add-path . 51))
(1266 (clobber-binding! . 51))
(1267 (impose-type . 51))
(1268 (forget-integration . 51))
(1269 (same-denotation? . 51))
(1270 (maybe-fix-place! . 51))
(1271 (follow-forwarding-pointers . 51))
(1272 (name? . 52))
(1273 (:generated . 52))
(1274 (make-generated . 52))
(1275 (generated-parent-name . 52))
(1276 (generated-env . 52))
(1277 (generated-token . 52))
(1278 (generated-symbol . 52))
(1279 (generated? . 52))
(1280 (generate-name . 52))
(1281 (generated-uid . 52))
(1282 (*generated-uid* . 52))
(1283 (name->symbol . 52))
(1284 (name-hash . 52))
(1285 (make-name-table . 52))
(1286 (desyntaxify . 52))
(1287 (make-qualified . 52))
(1288 (qualified? . 52))
(1289 (qualified-parent-name . 52))
(1290 (qualified-symbol . 52))
(1291 (qualified-uid . 52))
(1292 (name->qualified . 52))
(1293 (qualify-parent . 52))
(1294 (:transform . 52))
(1295 (really-make-transform . 52))
(1296 (transform-id . 52))
(1297 (transform-source . 52))
(1298 (transform-aux-names . 52))
(1299 (transform-type . 52))
(1300 (transform-env . 52))
(1301 (transform-procedure . 52))
(1302 (transform? . 52))
(1303 (make-transform . 52))
(1304 (maybe-apply-macro-transform . 52))
(1305 (apply-inline-transform . 52))
(1306 (make-keyword-comparator . 52))
(1307 (name->source-name . 52))
(1308 (bind-aliases . 52))
(1309 (make-name-generator . 52))
(1310 (lookup . 52))
(1311 (lookup . 55))
(1312 (bind1 . 55))
(1313 (bind . 55))
(1314 (bindrec . 55))
(1315 (make-compiler-env . 55))
(1316 (funny-name/macro-eval . 55))
(1317 (environment-macro-eval . 55))
(1318 (funny-name/define! . 55))
(1319 (environment-define! . 55))
(1320 (funny-name/package . 55))
(1321 (extract-package-from-environment . 55))
(1322 (funny-name/source-file-name . 55))
(1323 (bind-source-file-name . 55))
(1324 (source-file-name . 55))
(1325 (:thingie . 53))
(1326 (make-thingie . 53))
(1327 (thingie-want-type . 53))
(1328 (thingie-name . 53))
(1329 (thingie-binding . 53))
(1330 (thingie? . 53))
(1331 (:structure . 68))
(1332 (really-make-structure . 68))
(1333 (structure-name . 68))
(1334 (set-structure-name! . 68))
(1335 (structure-clients . 68))
(1336 (structure-package . 68))
(1337 (structure-interface-really . 68))
(1338 (set-structure-interface! . 68))
(1339 (structure-interface-thunk . 68))
(1340 (structure? . 68))
(1341 (structure-interface . 68))
(1342 (initialize-structure! . 68))
(1343 (make-structure . 68))
(1344 (make-modified-structure . 68))
(1345 (note-structure-name! . 68))
(1346 (structure-unstable? . 68))
(1347 (for-each-export . 68))
(1348 (:package . 68))
(1349 (really-make-package . 68))
(1350 (package-cached . 68))
(1351 (package-clients . 68))
(1352 (package-real-undefined-but-assigneds . 68))
(1353 (set-package-undefined-but-assigneds! . 68))
(1354 (package-real-undefineds . 68))
(1355 (set-package-undefineds! . 68))
(1356 (package-accesses-thunk . 68))
(1357 (package-opens-thunk . 68))
(1358 (set-package-opens-thunk! . 68))
(1359 (package->environment . 68))
(1360 (set-package->environment! . 68))
(1361 (package-loaded? . 68))
(1362 (set-package-loaded?! . 68))
(1363 (package-clauses . 68))
(1364 (package-file-name . 68))
(1365 (package-get-location . 68))
(1366 (set-package-get-location! . 68))
(1367 (package-integrate? . 68))
(1368 (set-package-integrate?! . 68))
(1369 (package-unstable? . 68))
(1370 (package-definitions . 68))
(1371 (package-opens-really . 68))
(1372 (set-package-opens! . 68))
(1373 (package-uid . 68))
(1374 (package? . 68))
(1375 (make-package . 68))
(1376 (really-package->environment . 68))
(1377 (lazy-table-accessor . 68))
(1378 (package-undefineds . 68))
(1379 (package-undefined-but-assigneds . 68))
(1380 (new-package-uid . 68))
(1381 (*package-uid* . 68))
(1382 (package-name-table . 68))
(1383 (package-name . 68))
(1384 (note-package-name! . 68))
(1385 (package-opens . 68))
(1386 (initialize-package-if-necessary! . 68))
(1387 (package-accesses . 68))
(1388 (make-simple-package . 68))
(1389 (package-definition . 68))
(1390 (package-define! . 68))
(1391 (package-add-static! . 68))
(1392 (package-refine-type! . 68))
(1393 (package-lookup . 68))
(1394 (really-package-lookup . 68))
(1395 (search-opens . 68))
(1396 (structure-lookup . 68))
(1397 (real-structure-lookup . 68))
(1398 (generic-lookup . 68))
(1399 (initialize-package! . 68))
(1400 (for-each-definition . 68))
(1401 (get-new-location . 68))
(1402 (make-new-location . 68))
(1403 ($get-location . 68))
(1404 (*location-uid* . 68))
(1405 (location-info-table . 68))
(1406 (flush-location-names . 68))
(1407 (link! . 68))
(1408 (really-link! . 68))
(1409 (get-location . 68))
(1410 (location-on-demand . 68))
(1411 (get-undefined . 68))
(1412 (location-for-assignment . 68))
(1413 (package-note-caching! . 68))
(1414 (note-caching! . 68))
(1415 (get-location-for-unassignable . 68))
(1416 (get-location-for-undefined . 68))
(1417 ($note-undefined . 68))
(1418 (cenv->package . 68))
(1419 (location-for-reference . 68))
(1420 (noting-undefined-variables . 68))
(1421 (print-undefined-names . 68))
(1422 (environment-ref . 81))
(1423 (environment-set! . 81))
(1424 (environment-define! . 81))
(1425 (*structure-ref . 81))
(1426 (carefully . 81))
(1427 ($interaction-environment . 81))
(1428 (interaction-environment . 81))
(1429 (set-interaction-environment! . 81))
(1430 (with-interaction-environment . 81))
(1431 (scheme-report-environment . 81))
(1432 (*scheme-report-environment* . 81))
(1433 (*null-environment* . 81))
(1434 (*scheme-report-number* . 81))
(1435 (set-scheme-report-environment! . 81))
(1436 (null-environment . 81))
(1437 (make-reflective-tower . 81))
(1438 (set-reflective-tower-maker! . 81))
(1439 (namestring . 80))
(1440 (directory-component-separator . 80))
(1441 (type-component-separator . 80))
(1442 (namestring-component . 80))
(1443 (file-name-preferred-case . 80))
(1444 (*scheme-file-type* . 80))
(1445 (*load-file-type* . 80))
(1446 (file-name-directory . 80))
(1447 (file-name-nondirectory . 80))
(1448 (file-nondirectory-position . 80))
(1449 (string-posq . 80))
(1450 (*translations* . 80))
(1451 (translations . 80))
(1452 (set-translation! . 80))
(1453 (translate . 80))
(1454 ($note-file-package . 65))
(1455 (read-forms . 65))
(1456 (really-read-forms . 65))
(1457 (:operator . 54))
(1458 (make-operator . 54))
(1459 (operator-name . 54))
(1460 (operator-uid . 54))
(1461 (operator-nargs . 54))
(1462 (operator-type . 54))
(1463 (set-operator-type! . 54))
(1464 (operator? . 54))
(1465 (usual-operator-type . 54))
(1466 (get-operator . 54))
(1467 (*operator-uid* . 54))
(1468 (operators-table . 54))
(1469 (number-of-operators . 54))
(1470 (the-operators . 54))
(1471 (make-operator-table . 54))
(1472 (operator-table-ref . 54))
(1473 (operator-lookup . 54))
(1474 (operator-define! . 54))
(1475 (:node . 54))
(1476 (really-make-node . 54))
(1477 (node-plist . 54))
(1478 (set-node-plist! . 54))
(1479 (node-form . 54))
(1480 (node-operator-id . 54))
(1481 (node? . 54))
(1482 (make-node . 54))
(1483 (node-ref . 54))
(1484 (node-set! . 54))
(1485 (node-operator . 54))
(1486 (node-predicate . 54))
(1487 (make-similar-node . 54))
(1488 (force-node . 54))
(1489 (schemify . 54))
(1490 (schemifiers . 54))
(1491 (schemify-node . 54))
(1492 (schemify-nodes . 54))
(1493 (define-schemifier . 54))
(1494 (schemify-lambda . 54))
(1495 (schemify-formals . 54))
(1496 (schemify-letrec . 54))
(1497 (schemify-sexp . 54))
(1498 (number-of-required-args . 58))
(1499 (n-ary? . 58))
(1500 (normalize-formals . 58))
(1501 (scan-forms . 56))
(1502 (expand-scanned-form . 56))
(1503 (scan-define . 56))
(1504 (expand-define . 56))
(1505 (scan-define-syntax . 56))
(1506 (expand-form . 56))
(1507 (expand-head . 56))
(1508 (destructure-define . 56))
(1509 (make-operator-predicate . 56))
(1510 (define? . 56))
(1511 (begin? . 56))
(1512 (define-syntax? . 56))
(1513 (static-value . 56))
(1514 (expand-body . 56))
(1515 (scan-body-forms . 56))
(1516 (body-lossage . 56))
(1517 (expand . 56))
(1518 (expand-list . 56))
(1519 (expand-literal . 56))
(1520 (expand-call . 56))
(1521 (expand-name . 56))
(1522 (expand-macro-application . 56))
(1523 (expand-operator-form . 56))
(1524 (expanders . 56))
(1525 (define-expander . 56))
(1526 (unspecific-node . 56))
(1527 (expand-structure-ref . 56))
(1528 (expand-lambda . 56))
(1529 (bind-names . 56))
(1530 (names? . 56))
(1531 (expand-letrec . 56))
(1532 (process-syntax . 56))
(1533 (this-long? . 56))
(1534 (at-least-this-long? . 56))
(1535 (specs? . 56))
(1536 (literal? . 56))
(1537 (syntax? . 56))
(1538 (begin-node? . 56))
(1539 (call-node? . 56))
(1540 (name-node? . 56))
(1541 (operator/literal . 56))
(1542 (operator/quote . 56))
(1543 (operator/call . 56))
(1544 (operator/name . 56))
(1545 (operator/unspecific . 56))
(1546 (operator/unassigned . 56))
(1547 (operator/lambda . 56))
(1548 (operator/begin . 56))
(1549 (operator/letrec . 56))
(1550 (operator/define . 56))
(1551 (operator/define-syntax . 56))
(1552 (operator/primitive-procedure . 56))
(1553 (operator/structure-ref . 56))
(1554 (:primop . 62))
(1555 (make-primop . 62))
(1556 (primop-compilator . 62))
(1557 (primop-closed . 62))
(1558 (primop-type . 62))
(1559 (primop-name . 62))
(1560 (primop? . 62))
(1561 (primop-table . 62))
(1562 (walk-primops . 62))
(1563 (define-compiler-primitive . 62))
(1564 (get-primop . 62))
(1565 (:debug-data . 59))
(1566 (make-debug-data . 59))
(1567 (debug-data-source . 59))
(1568 (set-debug-data-source! . 59))
(1569 (debug-data-env-maps . 59))
(1570 (set-debug-data-env-maps! . 59))
(1571 (debug-data-pc-in-parent . 59))
(1572 (debug-data-parent . 59))
(1573 (debug-data-name . 59))
(1574 (debug-data-uid . 59))
(1575 (debug-data? . 59))
(1576 (debug-data-env-shape . 59))
(1577 (new-template-uid . 59))
(1578 (*template-uid* . 59))
(1579 (template-uid . 59))
(1580 (set-template-uid! . 59))
(1581 (debug-flag-names . 59))
(1582 (type/debug-flags . 59))
(1583 (make-debug-flags . 59))
(1584 ($debug-flags . 59))
(1585 (debug-flag-accessor . 59))
(1586 (debug-flag-modifier . 59))
(1587 (keep-source-code? . 59))
(1588 (keep-environment-maps? . 59))
(1589 (keep-procedure-names? . 59))
(1590 (keep-file-names? . 59))
(1591 (tabulate-debug-data? . 59))
(1592 (debug-data-table . 59))
(1593 (with-fresh-compiler-state . 59))
(1594 (saving-and-restoring . 59))
(1595 (debug-data->info . 59))
(1596 (get-debug-data . 59))
(1597 (note-debug-data! . 59))
(1598 (new-debug-data . 59))
(1599 (maximum-stack-use . 60))
(1600 (protocol-skip . 60))
(1601 (stack-delta . 60))
(1602 (define-delta . 60))
(1603 (stack-max . 60))
(1604 (nothing . 60))
(1605 (popper . 60))
(1606 (pusher . 60))
(1607 (continue . 60))
(1608 (continuer . 60))
(1609 (get-offset . 60))
(1610 (flat-env-checker . 60))
(1611 (do-make-cont . 60))
(1612 (stack-function . 60))
(1613 (arg-spec-size . 60))
(1614 (imax . 60))
(1615 (make-segment . 61))
(1616 (segment-size . 61))
(1617 (segment-emitter . 61))
(1618 (segment->template . 61))
(1619 (segment-data->template . 61))
(1620 (check-stack-use . 61))
(1621 (:assembly-state . 61))
(1622 (make-assembly-state . 61))
(1623 (astate-literals . 61))
(1624 (set-astate-literals! . 61))
(1625 (astate-count . 61))
(1626 (set-astate-count! . 61))
(1627 (astate-pc . 61))
(1628 (set-astate-pc! . 61))
(1629 (astate-code-vector . 61))
(1630 (make-astate . 61))
(1631 (emit-byte! . 61))
(1632 (literal->index . 61))
(1633 (literal-position . 61))
(1634 (position . 61))
(1635 (emit-literal! . 61))
(1636 (emit-segment! . 61))
(1637 (empty-segment . 61))
(1638 (instruction . 61))
(1639 (sequentially . 61))
(1640 (sequentially-2 . 61))
(1641 (instruction-with-literal . 61))
(1642 (instruction-with-location . 61))
(1643 (template . 61))
(1644 (make-label . 61))
(1645 (instruction-using-label . 61))
(1646 (computed-goto-label-size . 61))
(1647 (computed-goto-instruction . 61))
(1648 (attach-label . 61))
(1649 (insert-label! . 61))
(1650 (code-vector-set2! . 61))
(1651 (two-byte-limit . 61))
(1652 (high-byte . 61))
(1653 (low-byte . 61))
(1654 ($debug-data . 61))
(1655 (note-source-code . 61))
(1656 (note-environment . 61))
(1657 (emit-with-environment-maps! . 61))
(1658 ($environment-maps . 61))
(1659 (optimizers-table . 70))
(1660 (set-optimizer! . 70))
(1661 (get-optimizer . 70))
(1662 (apply-optimizers . 70))
(1663 (flatten-form . 66))
(1664 (flatten-node . 66))
(1665 (flatteners . 66))
(1666 (define-flattener . 66))
(1667 (flatten-list . 66))
(1668 (no-free-vars . 66))
(1669 (flatten-lambda . 66))
(1670 (convert-lambda-body . 66))
(1671 (add-cells . 66))
(1672 (flatten-pure-letrec . 66))
(1673 (flatten-impure-letrec . 66))
(1674 (assigned? . 66))
(1675 (mark-set-variables! . 66))
(1676 (mark-sets . 66))
(1677 (define-set-marker . 66))
(1678 (no-sets . 66))
(1679 (make-cell . 66))
(1680 (make-unassigned-cell . 66))
(1681 (make-cell-ref . 66))
(1682 (make-cell-set! . 66))
(1683 (make-primop-call . 66))
(1684 (operator/flat-lambda . 66))
(1685 (operator/lambda . 66))
(1686 (operator/letrec . 66))
(1687 (operator/pure-letrec . 66))
(1688 (operator/begin . 66))
(1689 (operator/literal . 66))
(1690 (operator/call . 66))
(1691 (operator/unassigned . 66))
(1692 (operator/set! . 66))
(1693 (define-node? . 66))
(1694 (lambda-node? . 66))
(1695 (define-primop . 66))
(1696 (temp0 . 66))
(1697 (make-cell-primop . 66))
(1698 (temp1 . 66))
(1699 (cell-ref-primop . 66))
(1700 (temp2 . 66))
(1701 (cell-set!-primop . 66))
(1702 (install-new-set! . 66))
(1703 (install-set! . 66))
(1704 (set->list . 66))
(1705 (set-add-element! . 66))
(1706 (set-union! . 66))
(1707 (set-difference! . 66))
(1708 (clean-var-list . 66))
(1709 (clear-var-set! . 66))
(1710 (node-type . 63))
(1711 (reconstruct-type . 63))
(1712 (reconstruct . 63))
(1713 (examine . 63))
(1714 (reconstructors . 63))
(1715 (define-reconstructor . 63))
(1716 (reconstruct-lambda . 63))
(1717 (careful-codomain . 63))
(1718 (reconstruct-name . 63))
(1719 (proc->reconstructor . 63))
(1720 (reconstruct-call . 63))
(1721 (fork-constraints . 63))
(1722 (reconstruct-letrec . 63))
(1723 (node->type . 63))
(1724 (name-node? . 63))
(1725 (lambda-node? . 63))
(1726 (literal-node? . 63))
(1727 (primop-reconstructors . 63))
(1728 (define-primop-reconstructor . 63))
(1729 (reconstruct-apply . 63))
(1730 (constant-type . 63))
(1731 (compile-expression . 64))
(1732 (compile . 64))
(1733 (compilators . 64))
(1734 (define-compilator . 64))
(1735 (compile-constant . 64))
(1736 (compile-call . 64))
(1737 (compile-name-call . 64))
(1738 (compile-redex . 64))
(1739 (compile-unknown-call . 64))
(1740 (maybe-push-continuation . 64))
(1741 (fixup-source . 64))
(1742 (push-arguments . 64))
(1743 (push-all-with-names . 64))
(1744 (empty-segment? . 64))
(1745 (letrec-lambda-code . 64))
(1746 (letrec-body-code . 64))
(1747 (make-cont . 64))
(1748 (cont-kind . 64))
(1749 (cont-source-info . 64))
(1750 (return-cont . 64))
(1751 (return-cont? . 64))
(1752 (fall-through-cont . 64))
(1753 (fall-through-cont? . 64))
(1754 (ignore-values-segment . 64))
(1755 (ignore-values-cont . 64))
(1756 (ignore-values-cont? . 64))
(1757 (accept-values-cont . 64))
(1758 (accept-values-cont? . 64))
(1759 (deliver-value . 64))
(1760 (named-cont . 64))
(1761 (cont-name . 64))
(1762 (name-node-binding . 64))
(1763 (generate-trap . 64))
(1764 (type-check . 64))
(1765 (set-type-check?! . 64))
(1766 (*type-check?* . 64))
(1767 (diagnose-call-error . 64))
(1768 (lambda-node? . 64))
(1769 (flat-lambda-node? . 64))
(1770 (name-node? . 64))
(1771 (literal-node? . 64))
(1772 (operator/lambda . 64))
(1773 (operator/set! . 64))
(1774 (operator/call . 64))
(1775 (operator/begin . 64))
(1776 (compile-lambda . 64))
(1777 (compile-lambda-code . 64))
(1778 (name-node->symbol . 64))
(1779 (set-lexical-offsets! . 64))
(1780 (compile-flat-lambda . 64))
(1781 (really-compile-flat-lambda . 64))
(1782 (compile-flat-environment . 64))
(1783 (get-variables-offsets . 64))
(1784 (environment-code . 64))
(1785 (figure-env-data . 64))
(1786 (one-byte-offsetter . 64))
(1787 (two-byte-offsetter . 64))
(1788 (back-env-data . 64))
(1789 (sort-list . 64))
(1790 (direct-compilator . 64))
(1791 (direct-closed-compilator . 64))
(1792 (nargs->domain . 64))
(1793 (get-primop-type . 64))
(1794 (primop-types . 64))
(1795 (define-simple-primitive . 64))
(1796 (simple-compilator . 64))
(1797 (simple-closed-compilator . 64))
(1798 (symbol-append . 64))
(1799 (define-stob-predicate . 64))
(1800 (define-data-struct-primitives . 64))
(1801 (define-vector-primitives . 64))
(1802 (define-more-vector-primitives . 64))
(1803 (compile-call-with-values . 64))
(1804 (compile-call-with-values-producer . 64))
(1805 (thunk-node? . 64))
(1806 (thunk-body . 64))
(1807 (unflatten-form . 64))
(1808 (define-n-ary-compiler-primitive . 64))
(1809 (n-ary-primitive-compilator . 64))
(1810 (call-on-arg-and-id . 64))
(1811 (call-on-args . 64))
(1812 (op/unspecific . 64))
(1813 (op/literal . 64))
(1814 (push-all-but-last . 64))
(1815 (dispatch-protocol-size . 64))
(1816 (make-dispatch-protocol . 64))
(1817 (compile-forms . 64))
(1818 (compile-forms-loop . 64))
(1819 (compile-form . 64))
(1820 (define-node? . 64))
(1821 ($env-key . 64))
(1822 (compile-definition . 64))
(1823 (location-contents-offset . 64))
(1824 (make-startup-procedure . 64))
(1825 (append-templates . 64))
(1826 (an-ignore-values-cont . 64))
(1827 (eval . 82))
(1828 (load-into . 82))
(1829 (eval-from-file . 82))
(1830 (load . 82))
(1831 (really-load-into . 82))
(1832 (compile-and-run . 82))
(1833 (display-condition . 49))
(1834 (really-display-condition . 49))
(1835 (*depth* . 49))
(1836 (*length* . 49))
(1837 (&disclose-condition . 49))
(1838 (disclose-condition . 49))
(1839 (limited-write . 49))
(1840 (command-processor . 86))
(1841 (mini-load . 86))
(1842 (read-string . 86))
(1843 (enum-case . 43))
(1844 (run-threads . 41))
(1845 (run-threads-with-housekeeper . 41))
(1846 (round-robin-event-handler . 41))
(1847 (make-counter . 41))
(1848 (counter-value . 41))
(1849 (increment-counter! . 41))
(1850 (decrement-counter! . 41))
(1851 (root-scheduler . 42))
(1852 (make-root-event-handler . 42))
(1853 (root-handler . 42))
(1854 (cheap-display-condition . 42))
(1855 (abort-token . 42))
(1856 (scheme-exit-now . 42))
(1857 (root-wait . 42))
(1858 (one-day-of-milliseconds . 42))
(1859 (do-some-waiting . 42))
(1860 (deadlock-handler . 42))
(1861 (call-when-deadlocked! . 42))
(1862 (spawn-output-forcers . 42))
(1863 (unspecific . 42))
(1864 (usual-resumer . 47))
(1865 (initialize-rts . 47))
(1866 (start . 87))
(1867 (make-built-in-structures . 87))
(1868 (initialize-interaction-environment! . 87))
(1869 (make-initial-package . 87))
(1870 (make-tower . 87))
(1871 (the-usual-transforms . 57))
(1872 (define-usual-macro . 57))
(1873 (usual-transform . 57))
(1874 (do-spec? . 57))
(1875 (specs? . 57))
(1876 (case-clause? . 57))
(1877 (process-rules . 57))
(1878 (segment-pattern? . 57))
(1879 (segment-template? . 57))
(1880 (segment-depth . 57))
(1881 (segment-tail . 57))
(1882 (indicators-for-zero-or-more . 57))
(1883 (find-free-names-in-syntax-rules . 57))
(1884 (strongly-connected-components . 78))
(1885 (find-next-vertex . 78))
(1886 (:vertex . 78))
(1887 (really-make-vertex . 78))
(1888 (vertex-lowpoint . 78))
(1889 (set-vertex-lowpoint! . 78))
(1890 (vertex-parent . 78))
(1891 (set-vertex-parent! . 78))
(1892 (vertex-index . 78))
(1893 (set-vertex-index! . 78))
(1894 (vertex-stack . 78))
(1895 (set-vertex-stack! . 78))
(1896 (vertex-edges . 78))
(1897 (set-vertex-edges! . 78))
(1898 (vertex-data . 78))
(1899 (vertex? . 78))
(1900 (make-vertex . 78))
(1901 (make-vertices . 78))
(1902 (do-vertex . 78))
(1903 (get-strong . 78))
(1904 (end-vertex . 78))
(1905 (unwind-stack . 78))
(1906 (follow-edge . 78))
(1907 (pop-vertex-edge! . 78))
(1908 (find-usages . 75))
(1909 (maybe-update-known-type . 75))
(1910 (find-node-usages . 75))
(1911 (analyze . 75))
(1912 (analyze-nodes . 75))
(1913 (usage-analyzers . 75))
(1914 (define-usage-analyzer . 75))
(1915 (nothing . 75))
(1916 (add-if-free . 75))
(1917 (analyze-letrec . 75))
(1918 (:usage . 75))
(1919 (really-make-usage . 75))
(1920 (usage-assignment-count . 75))
(1921 (set-assignment! . 75))
(1922 (usage-operator-count . 75))
(1923 (set-operator! . 75))
(1924 (usage-reference-count . 75))
(1925 (set-reference! . 75))
(1926 (usage-name-node . 75))
(1927 (usage? . 75))
(1928 (make-usage . 75))
(1929 (make-package-usage . 75))
(1930 (package-usage? . 75))
(1931 (usage-incrementator . 75))
(1932 (note-reference! . 75))
(1933 (note-operator! . 75))
(1934 (note-assignment! . 75))
(1935 (lambda-node? . 75))
(1936 (quote-node? . 75))
(1937 (literal-node? . 75))
(1938 (call-node? . 75))
(1939 (name-node? . 75))
(1940 (define-node? . 75))
(1941 (sort-forms . 75))
(1942 (stuff-count . 75))
(1943 (maybe-make-aliased . 75))
(1944 (topologically-sort . 75))
(1945 (:form . 75))
(1946 (really-make-form . 75))
(1947 (form-temp . 75))
(1948 (set-form-temp! . 75))
(1949 (form-free . 75))
(1950 (set-form-free! . 75))
(1951 (form-unaliased? . 75))
(1952 (set-form-unaliased?! . 75))
(1953 (form-aliases . 75))
(1954 (set-form-aliases! . 75))
(1955 (form-node . 75))
(1956 (form? . 75))
(1957 (make-form . 75))
(1958 (insert-aliases . 75))
(1959 (make-inline-transform . 77))
(1960 (clean-node . 77))
(1961 (clean-lambda . 77))
(1962 (clean-lookup . 77))
(1963 (unused-name . 77))
(1964 (inline-transform . 77))
(1965 (make-substitution . 77))
(1966 (reconstitute . 77))
(1967 (reconstitute-name . 77))
(1968 (operator/name . 77))
(1969 (operator/literal . 77))
(1970 (qualified->name . 77))
(1971 (get-qualified-env . 77))
(1972 (quote-node? . 77))
(1973 (call-node? . 77))
(1974 (lambda-node? . 77))
(1975 (name-node? . 77))
(1976 (loophole-node? . 77))
(1977 (operator . 84))
(1978 (primop . 84))
(1979 (simple-interface . 84))
(1980 (package . 84))
(1981 (transform . 84))
(1982 (package-define-static! . 84))
(1983 (:lock . 45))
(1984 (really-make-lock . 45))
(1985 (lock? . 45))
(1986 (lock-uid . 45))
(1987 (lock-queue . 45))
(1988 (lock-owner-uid . 45))
(1989 (set-lock-owner-uid! . 45))
(1990 (next-uid . 45))
(1991 (make-lock . 45))
(1992 (obtain-lock . 45))
(1993 (maybe-obtain-lock . 45))
(1994 (release-lock . 45))
(1995 (:syntax . 73))
(1996 (:values . 73))
(1997 (:arguments . 73))
(1998 (:value . 73))
(1999 (procedure . 73))
(2000 (:boolean . 73))
(2001 (:char . 73))
(2002 (:null . 73))
(2003 (:unspecific . 73))
(2004 (:number . 73))
(2005 (:complex . 73))
(2006 (:real . 73))
(2007 (:rational . 73))
(2008 (:integer . 73))
(2009 (:exact-integer . 73))
(2010 (:pair . 73))
(2011 (:string . 73))
(2012 (:symbol . 73))
(2013 (:vector . 73))
(2014 (:procedure . 73))
(2015 (:input-port . 73))
(2016 (:output-port . 73))
(2017 (:error . 73))
(2018 (:escape . 73))
(2019 (:structure . 73))
(2020 (:type . 73))
(2021 (def . 72))
(2022 (really-def . 72))
(2023 (define-multiple . 72))
(2024 (define-interface . 72))
(2025 (compound-interface . 72))
(2026 (export . 72))
(2027 (define-structure . 72))
(2028 (define-structures . 72))
(2029 (structure . 72))
(2030 (structures . 72))
(2031 (modify . 72))
(2032 (subset . 72))
(2033 (with-prefix . 72))
(2034 (a-package . 72))
(2035 (receive . 72))
(2036 (define-reflective-tower-maker . 72))
(2037 (export-reflective-tower-maker . 72))
(2038 (define-module . 72))
(2039 (make-a-package . 72))
(2040 (loser . 72))
(2041 (interface-of . 72))
(2042 (*verify-later!* . 72))
(2043 (verify-later! . 72))
(2044 (set-verify-later! . 72))
(2045 (note-name! . 72))
(2046 (collect-packages . 69))
(2047 (package-source . 69))
(2048 (read-files . 69))
(2049 (package-optimizer-names . 69))
(2050 (check-structure . 69))
(2051 (compile-package . 71))
(2052 (expand-package . 71))
(2053 (define-usual-transform . 71))
(2054 (define-primitives . 71))
(2055 (make-define-primitive-node . 71))
(2056 (operator/define . 71))
(2057 (operator/primitive-procedure . 71))
(2058 (analyze-forms . 76))
(2059 (analyze-form . 76))
(2060 (inlinable-rhs? . 76))
(2061 (simple-lambda? . 76))
(2062 (operator/name . 76))
(2063 (simple? . 76))
(2064 (simple-list? . 76))
(2065 (analyzers . 76))
(2066 (define-analyzer . 76))
(2067 (static-value . 76))
(2068 (really-simple-call? . 76))
(2069 (primitive-proc? . 76))
(2070 (no-ret . 76))
(2071 (ret . 76))
(2072 (simple-literal? . 76))
(2073 (require . 76))
(2074 (*debug?* . 76))
(2075 (package-lookup-type . 76))
(2076 (lambda-node? . 76))
(2077 (name-node? . 76))
(2078 (loophole-node? . 76))
(2079 (define-node? . 76))
(2080 (literal-node? . 76))
(2081 (ensure-loaded . 83))
-
; Template uid -> name, parent, pc in parent, env maps
(0 scheme-level-0 #f #f ())
(1 atan 0 7 ())
(2 scheme-level-0 #f #f ())
(3 set-location-defined?! 2 7 ())
(4 scheme-level-0 #f #f ())
(5 acos 4 7 ())
(6 scheme-level-0 #f #f ())
(7 vm-extension 6 7 ())
(8 scheme-level-0 #f #f ())
(9 asin 8 7 ())
(10 scheme-level-0 #f #f ())
(11 location-defined? 10 7 ())
(12 scheme-level-0 #f #f ())
(13 time 12 7 ())
(14 scheme-level-0 #f #f ())
(15 template-set! 14 7 ())
(16 scheme-level-0 #f #f ())
(17 set-current-proposal! 16 7 ())
(18 scheme-level-0 #f #f ())
(19 scheme-level-0 #f #f ())
(20 cons 19 7 ())
(21 scheme-level-0 #f #f ())
(22 wait 21 7 ())
(23 scheme-level-0 #f #f ())
(24 trap 23 7 ())
(25 scheme-level-0 #f #f ())
(26 assq 25 7 ())
(27 scheme-level-0 #f #f ())
(28 current-proposal 27 7 ())
(29 scheme-level-0 #f #f ())
(30 make-weak-pointer 29 7 ())
(31 scheme-level-0 #f #f ())
(32 lookup-shared-binding 31 7 ())
(33 scheme-level-0 #f #f ())
(34 push 33 7 ())
(35 scheme-level-0 #f #f ())
(36 provisional-set-contents! 35 7 ())
(37 scheme-level-0 #f #f ())
(38 set-contents! 37 7 ())
(39 scheme-level-0 #f #f ())
(40 read-char 39 7 ())
(41 scheme-level-0 #f #f ())
(42 provisional-contents 41 7 ())
(43 scheme-level-0 #f #f ())
(44 make-cell 43 7 ())
(45 scheme-level-0 #f #f ())
(46 sqrt 45 7 ())
(47 scheme-level-0 #f #f ())
(48 * 47 7 ())
(49 scheme-level-0 #f #f ())
(50 contents 49 7 ())
(51 scheme-level-0 #f #f ())
(52 + 51 7 ())
(53 scheme-level-0 #f #f ())
(54 peek-char 53 7 ())
(55 scheme-level-0 #f #f ())
(56 - 55 7 ())
(57 scheme-level-0 #f #f ())
(58 continuation-set! 57 7 ())
(59 scheme-level-0 #f #f ())
(60 / 59 7 ())
(61 scheme-level-0 #f #f ())
(62 weak-pointer? 61 7 ())
(63 scheme-level-0 #f #f ())
(64 quotient 63 7 ())
(65 scheme-level-0 #f #f ())
(66 close-channel 65 7 ())
(67 scheme-level-0 #f #f ())
(68 channel-abort 67 7 ())
(69 scheme-level-0 #f #f ())
(70 char? 69 7 ())
(71 scheme-level-0 #f #f ())
(72 < 71 7 ())
(73 scheme-level-0 #f #f ())
(74 = 73 7 ())
(75 scheme-level-0 #f #f ())
(76 provisional-set-port-data! 75 7 ())
(77 scheme-level-0 #f #f ())
(78 cell? 77 7 ())
(79 scheme-level-0 #f #f ())
(80 > 79 7 ())
(81 scheme-level-0 #f #f ())
(82 make-location 81 7 ())
(83 scheme-level-0 #f #f ())
(84 imag-part 83 7 ())
(85 scheme-level-0 #f #f ())
(86 set-port-data! 85 7 ())
(87 scheme-level-0 #f #f ())
(88 make-template 87 7 ())
(89 scheme-level-0 #f #f ())
(90 real? 89 7 ())
(91 scheme-level-0 #f #f ())
(92 real-part 91 7 ())
(93 scheme-level-0 #f #f ())
(94 provisional-port-data 93 7 ())
(95 scheme-level-0 #f #f ())
(96 record-length 95 7 ())
(97 scheme-level-0 #f #f ())
(98 port-data 97 7 ())
(99 scheme-level-0 #f #f ())
(100 pair? 99 7 ())
(101 scheme-level-0 #f #f ())
(102 provisional-set-port-lock! 101 7 ())
(103 scheme-level-0 #f #f ())
(104 make-port 103 7 ())
(105 scheme-level-0 #f #f ())
(106 set-port-lock! 105 7 ())
(107 scheme-level-0 #f #f ())
(108 bit-count 107 7 ())
(109 scheme-level-0 #f #f ())
(110 provisional-checked-record-ref 109 7 ())
(111 scheme-level-0 #f #f ())
(112 return-from-exception 111 7 ())
(113 scheme-level-0 #f #f ())
(114 provisional-port-lock 113 7 ())
(115 scheme-level-0 #f #f ())
(116 location? 115 7 ())
(117 scheme-level-0 #f #f ())
(118 checked-record-ref 117 7 ())
(119 scheme-level-0 #f #f ())
(120 channel-maybe-read 119 7 ())
(121 scheme-level-0 #f #f ())
(122 add-finalizer! 121 7 ())
(123 scheme-level-0 #f #f ())
(124 rational? 123 7 ())
(125 scheme-level-0 #f #f ())
(126 template? 125 7 ())
(127 scheme-level-0 #f #f ())
(128 port-lock 127 7 ())
(129 scheme-level-0 #f #f ())
(130 vector-length 129 7 ())
(131 scheme-level-0 #f #f ())
(132 make-continuation 131 7 ())
(133 scheme-level-0 #f #f ())
(134 provisional-shared-binding-ref 133 7 ())
(135 scheme-level-0 #f #f ())
(136 string-length 135 7 ())
(137 scheme-level-0 #f #f ())
(138 shared-binding-ref 137 7 ())
(139 scheme-level-0 #f #f ())
(140 port? 139 7 ())
(141 scheme-level-0 #f #f ())
(142 angle 141 7 ())
(143 scheme-level-0 #f #f ())
(144 false 143 7 ())
(145 scheme-level-0 #f #f ())
(146 remainder 145 7 ())
(147 scheme-level-0 #f #f ())
(148 continuation? 147 7 ())
(149 scheme-level-0 #f #f ())
(150 channel-ready? 149 7 ())
(151 scheme-level-0 #f #f ())
(152 binary-reduce1 151 7 ())
(153 scheme-level-0 #f #f ())
(154 binary-reduce2 153 7 ())
(155 scheme-level-0 #f #f ())
(156 char<? 155 7 ())
(157 scheme-level-0 #f #f ())
(158 char=? 157 7 ())
(159 scheme-level-0 #f #f ())
(160 <= 159 7 ())
(161 scheme-level-0 #f #f ())
(162 magnitude 161 7 ())
(163 scheme-level-0 #f #f ())
(164 >= 163 7 ())
(165 scheme-level-0 #f #f ())
(166 with-continuation 165 7 ())
(167 scheme-level-0 #f #f ())
(168 floor 167 7 ())
(169 scheme-level-0 #f #f ())
(170 provisional-checked-record-set! 169 7 ())
(171 scheme-level-0 #f #f ())
(172 apply 171 7 ())
(173 scheme-level-0 #f #f ())
(174 memory-status 173 7 ())
(175 scheme-level-0 #f #f ())
(176 checked-record-set! 175 7 ())
(177 scheme-level-0 #f #f ())
(178 exact->inexact 177 7 ())
(179 scheme-level-0 #f #f ())
(180 inexact->exact 179 7 ())
(181 scheme-level-0 #f #f ())
(182 error 181 7 ())
(183 scheme-level-0 #f #f ())
(184 extended-number-length 183 7 ())
(185 scheme-level-0 #f #f ())
(186 open-channels-list 185 7 ())
(187 scheme-level-0 #f #f ())
(188 provisional-shared-binding-set! 187 7 ())
(189 scheme-level-0 #f #f ())
(190 channel-id 189 7 ())
(191 scheme-level-0 #f #f ())
(192 shared-binding-set! 191 7 ())
(193 scheme-level-0 #f #f ())
(194 numerator 193 7 ())
(195 scheme-level-0 #f #f ())
(196 eof-object 195 7 ())
(197 scheme-level-0 #f #f ())
(198 byte-vector-length 197 7 ())
(199 scheme-level-0 #f #f ())
(200 record-ref 199 7 ())
(201 scheme-level-0 #f #f ())
(202 make-polar 201 7 ())
(203 scheme-level-0 #f #f ())
(204 write-char 203 7 ())
(205 scheme-level-0 #f #f ())
(206 symbol->string 205 7 ())
(207 scheme-level-0 #f #f ())
(208 exact? 207 7 ())
(209 scheme-level-0 #f #f ())
(210 provisional-vector-ref 209 7 ())
(211 scheme-level-0 #f #f ())
(212 vector-ref 211 7 ())
(213 scheme-level-0 #f #f ())
(214 set-current-thread! 213 7 ())
(215 scheme-level-0 #f #f ())
(216 provisional-set-port-index! 215 7 ())
(217 scheme-level-0 #f #f ())
(218 immutable? 217 7 ())
(219 scheme-level-0 #f #f ())
(220 set-exception-handlers! 219 7 ())
(221 scheme-level-0 #f #f ())
(222 string-ref 221 7 ())
(223 scheme-level-0 #f #f ())
(224 set-port-index! 223 7 ())
(225 scheme-level-0 #f #f ())
(226 provisional-set-port-limit! 225 7 ())
(227 scheme-level-0 #f #f ())
(228 make-shared-binding 227 7 ())
(229 scheme-level-0 #f #f ())
(230 current-thread 229 7 ())
(231 scheme-level-0 #f #f ())
(232 provisional-port-index 231 7 ())
(233 scheme-level-0 #f #f ())
(234 channel-status 233 7 ())
(235 scheme-level-0 #f #f ())
(236 set-port-limit! 235 7 ())
(237 scheme-level-0 #f #f ())
(238 shared-binding-name 237 7 ())
(239 scheme-level-0 #f #f ())
(240 port-index 239 7 ())
(241 scheme-level-0 #f #f ())
(242 make-immutable! 241 7 ())
(243 scheme-level-0 #f #f ())
(244 byte-vector-logging-ref 243 7 ())
(245 scheme-level-0 #f #f ())
(246 set-enabled-interrupts! 245 7 ())
(247 scheme-level-0 #f #f ())
(248 provisional-port-limit 247 7 ())
(249 scheme-level-0 #f #f ())
(250 port-limit 249 7 ())
(251 scheme-level-0 #f #f ())
(252 ascii->char 251 7 ())
(253 scheme-level-0 #f #f ())
(254 char->ascii 253 7 ())
(255 scheme-level-0 #f #f ())
(256 undefine-shared-binding 255 7 ())
(257 scheme-level-0 #f #f ())
(258 attempt-copy-bytes! 257 7 ())
(259 scheme-level-0 #f #f ())
(260 record-set! 259 7 ())
(261 scheme-level-0 #f #f ())
(262 shared-binding? 261 7 ())
(263 scheme-level-0 #f #f ())
(264 eof-object? 263 7 ())
(265 scheme-level-0 #f #f ())
(266 set-interrupt-handlers! 265 7 ())
(267 scheme-level-0 #f #f ())
(268 record 267 7 ())
(269 scheme-level-0 #f #f ())
(270 schedule-interrupt 269 7 ())
(271 scheme-level-0 #f #f ())
(272 channel-maybe-write 271 7 ())
(273 scheme-level-0 #f #f ())
(274 unspecific 273 7 ())
(275 scheme-level-0 #f #f ())
(276 provisional-vector-set! 275 7 ())
(277 scheme-level-0 #f #f ())
(278 extended-number-ref 277 7 ())
(279 scheme-level-0 #f #f ())
(280 vector-set! 279 7 ())
(281 scheme-level-0 #f #f ())
(282 copy-bytes! 281 7 ())
(283 scheme-level-0 #f #f ())
(284 string-set! 283 7 ())
(285 scheme-level-0 #f #f ())
(286 unassigned 285 7 ())
(287 scheme-level-0 #f #f ())
(288 call-external-value 287 7 ())
(289 scheme-level-0 #f #f ())
(290 values 289 7 ())
(291 scheme-level-0 #f #f ())
(292 intern 291 7 ())
(293 scheme-level-0 #f #f ())
(294 vector 293 7 ())
(295 scheme-level-0 #f #f ())
(296 write-image-low 295 7 ())
(297 scheme-level-0 #f #f ())
(298 provisional-byte-vector-ref 297 7 ())
(299 scheme-level-0 #f #f ())
(300 byte-vector-logging-set! 299 7 ())
(301 scheme-level-0 #f #f ())
(302 byte-vector-ref 301 7 ())
(303 scheme-level-0 #f #f ())
(304 make-double 303 7 ())
(305 scheme-level-0 #f #f ())
(306 provisional-set-location-id! 305 7 ())
(307 scheme-level-0 #f #f ())
(308 make-record 307 7 ())
(309 scheme-level-0 #f #f ())
(310 set-location-id! 309 7 ())
(311 scheme-level-0 #f #f ())
(312 provisional-location-id 311 7 ())
(313 scheme-level-0 #f #f ())
(314 location-id 313 7 ())
(315 scheme-level-0 #f #f ())
(316 bitwise-and 315 7 ())
(317 scheme-level-0 #f #f ())
(318 eq? 317 7 ())
(319 scheme-level-0 #f #f ())
(320 double? 319 7 ())
(321 scheme-level-0 #f #f ())
(322 extended-number-set! 321 7 ())
(323 scheme-level-0 #f #f ())
(324 make-vector 323 7 ())
(325 scheme-level-0 #f #f ())
(326 record? 325 7 ())
(327 scheme-level-0 #f #f ())
(328 provisional-set-port-buffer! 327 7 ())
(329 scheme-level-0 #f #f ())
(330 make-string 329 7 ())
(331 scheme-level-0 #f #f ())
(332 set-port-buffer! 331 7 ())
(333 scheme-level-0 #f #f ())
(334 primitive-catch 333 7 ())
(335 scheme-level-0 #f #f ())
(336 string-hash 335 7 ())
(337 scheme-level-0 #f #f ())
(338 provisional-byte-vector-set! 337 7 ())
(339 scheme-level-0 #f #f ())
(340 template-length 339 7 ())
(341 scheme-level-0 #f #f ())
(342 provisional-port-buffer 341 7 ())
(343 scheme-level-0 #f #f ())
(344 number? 343 7 ())
(345 scheme-level-0 #f #f ())
(346 port-buffer 345 7 ())
(347 scheme-level-0 #f #f ())
(348 byte-vector-set! 347 7 ())
(349 scheme-level-0 #f #f ())
(350 bitwise-ior 349 7 ())
(351 scheme-level-0 #f #f ())
(352 provisional-set-car! 351 7 ())
(353 scheme-level-0 #f #f ())
(354 provisional-set-cdr! 353 7 ())
(355 scheme-level-0 #f #f ())
(356 set-car! 355 7 ())
(357 scheme-level-0 #f #f ())
(358 closure-env 357 7 ())
(359 scheme-level-0 #f #f ())
(360 vector? 359 7 ())
(361 scheme-level-0 #f #f ())
(362 bitwise-not 361 7 ())
(363 scheme-level-0 #f #f ())
(364 set-cdr! 363 7 ())
(365 scheme-level-0 #f #f ())
(366 provisional-car 365 7 ())
(367 scheme-level-0 #f #f ())
(368 symbol? 367 7 ())
(369 scheme-level-0 #f #f ())
(370 string? 369 7 ())
(371 scheme-level-0 #f #f ())
(372 provisional-cdr 371 7 ())
(373 scheme-level-0 #f #f ())
(374 car 373 7 ())
(375 scheme-level-0 #f #f ())
(376 bitwise-xor 375 7 ())
(377 scheme-level-0 #f #f ())
(378 cdr 377 7 ())
(379 scheme-level-0 #f #f ())
(380 find-all-records 379 7 ())
(381 scheme-level-0 #f #f ())
(382 continuation-length 381 7 ())
(383 scheme-level-0 #f #f ())
(384 log 383 7 ())
(385 scheme-level-0 #f #f ())
(386 message 385 7 ())
(387 scheme-level-0 #f #f ())
(388 tan 387 7 ())
(389 scheme-level-0 #f #f ())
(390 collect 389 7 ())
(391 scheme-level-0 #f #f ())
(392 cos 391 7 ())
(393 scheme-level-0 #f #f ())
(394 channel-os-index 393 7 ())
(395 scheme-level-0 #f #f ())
(396 provisional-set-port-status! 395 7 ())
(397 scheme-level-0 #f #f ())
(398 make-extended-number 397 7 ())
(399 scheme-level-0 #f #f ())
(400 set-port-status! 399 7 ())
(401 scheme-level-0 #f #f ())
(402 sin 401 7 ())
(403 scheme-level-0 #f #f ())
(404 exp 403 7 ())
(405 scheme-level-0 #f #f ())
(406 provisional-port-status 405 7 ())
(407 scheme-level-0 #f #f ())
(408 pop 407 7 ())
(409 scheme-level-0 #f #f ())
(410 port-status 409 7 ())
(411 scheme-level-0 #f #f ())
(412 return-from-callback 411 7 ())
(413 scheme-level-0 #f #f ())
(414 provisional-set-port-locked?! 413 7 ())
(415 scheme-level-0 #f #f ())
(416 set-port-locked?! 415 7 ())
(417 scheme-level-0 #f #f ())
(418 make-byte-vector 417 7 ())
(419 scheme-level-0 #f #f ())
(420 weak-pointer-ref 419 7 ())
(421 scheme-level-0 #f #f ())
(422 call-with-values 421 7 ())
(423 scheme-level-0 #f #f ())
(424 provisional-port-locked? 423 7 ())
(425 scheme-level-0 #f #f ())
(426 denominator 425 7 ())
(427 scheme-level-0 #f #f ())
(428 port-locked? 427 7 ())
(429 scheme-level-0 #f #f ())
(430 reverse-list->string 429 7 ())
(431 scheme-level-0 #f #f ())
(432 extended-number? 431 7 ())
(433 scheme-level-0 #f #f ())
(434 shared-binding-is-import? 433 7 ())
(435 scheme-level-0 #f #f ())
(436 provisional-cell-ref 435 7 ())
(437 scheme-level-0 #f #f ())
(438 find-all 437 7 ())
(439 scheme-level-0 #f #f ())
(440 cell-ref 439 7 ())
(441 scheme-level-0 #f #f ())
(442 byte-vector? 441 7 ())
(443 scheme-level-0 #f #f ())
(444 string=? 443 7 ())
(445 scheme-level-0 #f #f ())
(446 open-channel 445 7 ())
(447 scheme-level-0 #f #f ())
(448 channel? 447 7 ())
(449 scheme-level-0 #f #f ())
(450 make-rectangular 449 7 ())
(451 scheme-level-0 #f #f ())
(452 set-session-data! 451 7 ())
(453 scheme-level-0 #f #f ())
(454 maybe-commit 453 7 ())
(455 scheme-level-0 #f #f ())
(456 template-ref 455 7 ())
(457 scheme-level-0 #f #f ())
(458 make-closure 457 7 ())
(459 scheme-level-0 #f #f ())
(460 session-data 459 7 ())
(461 scheme-level-0 #f #f ())
(462 integer? 461 7 ())
(463 scheme-level-0 #f #f ())
(464 signal-condition 463 7 ())
(465 scheme-level-0 #f #f ())
(466 provisional-set-port-pending-eof?! 465 7 ())
(467 scheme-level-0 #f #f ())
(468 port-handler 467 7 ())
(469 scheme-level-0 #f #f ())
(470 set-port-pending-eof?! 469 7 ())
(471 scheme-level-0 #f #f ())
(472 arithmetic-shift 471 7 ())
(473 scheme-level-0 #f #f ())
(474 provisional-port-pending-eof? 473 7 ())
(475 scheme-level-0 #f #f ())
(476 provisional-cell-set! 475 7 ())
(477 scheme-level-0 #f #f ())
(478 complex? 477 7 ())
(479 scheme-level-0 #f #f ())
(480 port-pending-eof? 479 7 ())
(481 scheme-level-0 #f #f ())
(482 cell-set! 481 7 ())
(483 scheme-level-0 #f #f ())
(484 binary-comparison-reduce2 483 7 ())
(485 scheme-level-0 #f #f ())
(486 scheme-level-0 #f #f ())
(487 closure? 486 7 ())
(488 scheme-level-0 #f #f ())
(489 continuation-ref 488 7 ())
(490 scheme-level-0 #f #f ())
(491 closure-template 490 7 ())
(492 scheme-level-0 #f #f ())
(493 current-cont 492 7 ())
(494 scheme-level-0 #f #f ())
(495 char->integer 494 10 ())
(496 scheme-level-0 #f #f ())
(497 integer->char 496 10 ())
(498 scheme-level-0 #f #f ())
(499 invoke-closure 498 10 ())
(500 scheme-level-0 #f #f ())
(501 primitive-cwcc 500 10 ())
(502 #f 501 18 ())
(503 scheme-level-0 #f #f ())
(504 make-undefined-location 503 10 ())
(505 scheme-level-0 #f #f ())
(506 location-assigned? 505 10 ())
(507 scheme-level-0 #f #f ())
(508 vector-unassigned? 507 10 ())
(509 scheme-level-0 #f #f ())
(510 string-copy 509 10 ())
(511 scheme-level-0 #f #f ())
(512 string->symbol 511 10 ())
(513 scheme-level-0 #f #f ())
(514 input-port? 513 10 ())
(515 scheme-level-0 #f #f ())
(516 output-port? 515 10 ())
(517 scheme-level-0 #f #f ())
(518 make-code-vector 517 10 ())
(519 scheme-level-0 #f #f ())
(520 code-vector? 519 10 ())
(521 scheme-level-0 #f #f ())
(522 code-vector-length 521 10 ())
(523 scheme-level-0 #f #f ())
(524 code-vector-ref 523 10 ())
(525 scheme-level-0 #f #f ())
(526 code-vector-set! 525 10 ())
(527 scheme-level-0 #f #f ())
(528 lookup-imported-binding 527 10 ())
(529 scheme-level-0 #f #f ())
(530 lookup-exported-binding 529 10 ())
(531 scheme-level-0 #f #f ())
(532 define-imported-binding 531 10 ())
(533 scheme-level-0 #f #f ())
(534 define-exported-binding 533 10 ())
(535 scheme-level-0 #f #f ())
(536 undefine-imported-binding 535 10 ())
(537 scheme-level-0 #f #f ())
(538 undefine-exported-binding 537 10 ())
(539 scheme-level-0 #f #f ())
(540 secret-length 539 10 ())
(541 scheme-level-0 #f #f ())
(542 byte-vector 541 10 ())
(543 loop##0 542 47 ())
(544 scheme-level-0 #f #f ())
(545 debug-message 544 10 ())
(546 scheme-level-0 #f #f ())
(547 signal 546 10 ())
(548 scheme-level-0 #f #f ())
(549 vector-prefix->list 548 10 ())
(550 loop##2 549 18 ())
(551 scheme-level-0 #f #f ())
(552 write-image 551 10 ())
(553 scheme-level-0 #f #f ())
(554 make-proposal 553 10 ())
(555 scheme-level-0 #f #f ())
(556 warn 555 10 ())
(557 scheme-level-0 #f #f ())
(558 syntax-error 557 10 ())
(559 scheme-level-0 #f #f ())
(560 call-error 559 10 ())
(561 scheme-level-0 #f #f ())
(562 scheme-level-0 #f #f ())
(563 scheme-level-0 #f #f ())
(564 scheme-level-1 #f #f ())
(565 scheme-level-1 #f #f ())
(566 scheme-level-1 #f #f ())
(567 scheme-level-1 #f #f ())
(568 scheme-level-1 #f #f ())
(569 scheme-level-1 #f #f ())
(570 scheme-level-1 #f #f ())
(571 scheme-level-1 #f #f ())
(572 scheme-level-1 #f #f ())
(573 scheme-level-1 #f #f ())
(574 scheme-level-1 #f #f ())
(575 scheme-level-1 #f #f ())
(576 #f 575 14 ())
(577 scheme-level-1 #f #f ())
(578 #f 577 14 ())
(579 scheme-level-1 #f #f ())
(580 scheme-level-1 #f #f ())
(581 scheme-level-1 #f #f ())
(582 scheme-level-1 #f #f ())
(583 scheme-level-1 #f #f ())
(584 scheme-level-1 #f #f ())
(585 scheme-level-1 #f #f ())
(586 not 585 10 ())
(587 scheme-level-1 #f #f ())
(588 boolean? 587 10 ())
(589 scheme-level-1 #f #f ())
(590 eqv? 589 10 ())
(591 scheme-level-1 #f #f ())
(592 equal? 591 10 ())
(593 loop 592 171 ())
(594 scheme-level-1 #f #f ())
(595 null? 594 10 ())
(596 scheme-level-1 #f #f ())
(597 inexact? 596 10 ())
(598 scheme-level-1 #f #f ())
(599 max-or-min 598 10 ())
(600 loop 599 42 ())
(601 scheme-level-1 #f #f ())
(602 max 601 10 ())
(603 scheme-level-1 #f #f ())
(604 min 603 10 ())
(605 scheme-level-1 #f #f ())
(606 abs 605 10 ())
(607 scheme-level-1 #f #f ())
(608 zero? 607 10 ())
(609 scheme-level-1 #f #f ())
(610 positive? 609 10 ())
(611 scheme-level-1 #f #f ())
(612 negative? 611 10 ())
(613 scheme-level-1 #f #f ())
(614 even? 613 10 ())
(615 scheme-level-1 #f #f ())
(616 odd? 615 10 ())
(617 scheme-level-1 #f #f ())
(618 caar 617 10 ())
(619 scheme-level-1 #f #f ())
(620 cadr 619 10 ())
(621 scheme-level-1 #f #f ())
(622 cdar 621 10 ())
(623 scheme-level-1 #f #f ())
(624 cddr 623 10 ())
(625 scheme-level-1 #f #f ())
(626 caaar 625 10 ())
(627 scheme-level-1 #f #f ())
(628 caadr 627 10 ())
(629 scheme-level-1 #f #f ())
(630 cadar 629 10 ())
(631 scheme-level-1 #f #f ())
(632 caddr 631 10 ())
(633 scheme-level-1 #f #f ())
(634 cdaar 633 10 ())
(635 scheme-level-1 #f #f ())
(636 cdadr 635 10 ())
(637 scheme-level-1 #f #f ())
(638 cddar 637 10 ())
(639 scheme-level-1 #f #f ())
(640 cdddr 639 10 ())
(641 scheme-level-1 #f #f ())
(642 caaaar 641 10 ())
(643 scheme-level-1 #f #f ())
(644 caaadr 643 10 ())
(645 scheme-level-1 #f #f ())
(646 caadar 645 10 ())
(647 scheme-level-1 #f #f ())
(648 caaddr 647 10 ())
(649 scheme-level-1 #f #f ())
(650 cadaar 649 10 ())
(651 scheme-level-1 #f #f ())
(652 cadadr 651 10 ())
(653 scheme-level-1 #f #f ())
(654 caddar 653 10 ())
(655 scheme-level-1 #f #f ())
(656 cadddr 655 10 ())
(657 scheme-level-1 #f #f ())
(658 cdaaar 657 10 ())
(659 scheme-level-1 #f #f ())
(660 cdaadr 659 10 ())
(661 scheme-level-1 #f #f ())
(662 cdadar 661 10 ())
(663 scheme-level-1 #f #f ())
(664 cdaddr 663 10 ())
(665 scheme-level-1 #f #f ())
(666 cddaar 665 10 ())
(667 scheme-level-1 #f #f ())
(668 cddadr 667 10 ())
(669 scheme-level-1 #f #f ())
(670 cdddar 669 10 ())
(671 scheme-level-1 #f #f ())
(672 cddddr 671 10 ())
(673 scheme-level-1 #f #f ())
(674 list 673 10 ())
(675 scheme-level-1 #f #f ())
(676 real-length 675 10 ())
(677 scheme-level-1 #f #f ())
(678 length 677 10 ())
(679 scheme-level-1 #f #f ())
(680 reduce 679 10 ())
(681 scheme-level-1 #f #f ())
(682 append 681 10 ())
(683 recur 682 37 ())
(684 scheme-level-1 #f #f ())
(685 append-reverse 684 10 ())
(686 scheme-level-1 #f #f ())
(687 reverse 686 10 ())
(688 scheme-level-1 #f #f ())
(689 list-tail 688 10 ())
(690 scheme-level-1 #f #f ())
(691 list-ref 690 10 ())
(692 scheme-level-1 #f #f ())
(693 mem 692 10 ())
(694 #f 693 16 ())
(695 loop 694 28 ())
(696 scheme-level-1 #f #f ())
(697 ass 696 10 ())
(698 #f 697 16 ())
(699 loop 698 28 ())
(700 scheme-level-1 #f #f ())
(701 list? 700 10 ())
(702 recur 701 24 ())
(703 scheme-level-1 #f #f ())
(704 char>? 703 10 ())
(705 scheme-level-1 #f #f ())
(706 char>=? 705 10 ())
(707 scheme-level-1 #f #f ())
(708 char<=? 707 10 ())
(709 scheme-level-1 #f #f ())
(710 char-whitespace? 709 10 ())
(711 scheme-level-1 #f #f ())
(712 char-lower-case? 711 10 ())
(713 scheme-level-1 #f #f ())
(714 char-upper-case? 713 10 ())
(715 scheme-level-1 #f #f ())
(716 char-numeric? 715 10 ())
(717 scheme-level-1 #f #f ())
(718 char-alphabetic? 717 10 ())
(719 scheme-level-1 #f #f ())
(720 make-character-map 719 10 ())
(721 loop##10 720 37 ())
(722 scheme-level-1 #f #f ())
(723 char-upcase 722 10 ())
(724 scheme-level-1 #f #f ())
(725 char-downcase 724 10 ())
(726 scheme-level-1 #f #f ())
(727 char-ci-compare 726 10 ())
(728 #f 727 16 ())
(729 scheme-level-1 #f #f ())
(730 list->string 729 10 ())
(731 loop##11 730 45 ())
(732 scheme-level-1 #f #f ())
(733 string 732 10 ())
(734 scheme-level-1 #f #f ())
(735 substring 734 10 ())
(736 loop##12 735 37 ())
(737 scheme-level-1 #f #f ())
(738 string-append 737 10 ())
(739 #f 738 15 ())
(740 loop 738 72 ())
(741 loop##13 740 59 ())
(742 scheme-level-1 #f #f ())
(743 string->list 742 10 ())
(744 loop##14 743 25 ())
(745 scheme-level-1 #f #f ())
(746 unspecific 745 10 ())
(747 scheme-level-1 #f #f ())
(748 string-fill! 747 10 ())
(749 loop##15 748 29 ())
(750 scheme-level-1 #f #f ())
(751 make-string=? 750 10 ())
(752 #f 751 16 ())
(753 loop 752 50 ())
(754 scheme-level-1 #f #f ())
(755 make-string<? 754 10 ())
(756 #f 755 17 ())
(757 loop 756 70 ())
(758 scheme-level-1 #f #f ())
(759 string>? 758 10 ())
(760 scheme-level-1 #f #f ())
(761 string<=? 760 10 ())
(762 scheme-level-1 #f #f ())
(763 string>=? 762 10 ())
(764 scheme-level-1 #f #f ())
(765 string-ci>? 764 10 ())
(766 scheme-level-1 #f #f ())
(767 string-ci<=? 766 10 ())
(768 scheme-level-1 #f #f ())
(769 string-ci>=? 768 10 ())
(770 scheme-level-1 #f #f ())
(771 vector->list 770 10 ())
(772 loop##17 771 18 ())
(773 scheme-level-1 #f #f ())
(774 list->vector 773 10 ())
(775 loop##18 774 44 ())
(776 scheme-level-1 #f #f ())
(777 vector-fill! 776 10 ())
(778 loop##19 777 30 ())
(779 scheme-level-1 #f #f ())
(780 map1 779 10 ())
(781 scheme-level-1 #f #f ())
(782 any 781 10 ())
(783 scheme-level-1 #f #f ())
(784 map2+ 783 10 ())
(785 scheme-level-1 #f #f ())
(786 map 785 10 ())
(787 scheme-level-1 #f #f ())
(788 for-each1 787 10 ())
(789 loop 788 25 ())
(790 scheme-level-1 #f #f ())
(791 for-each2+ 790 10 ())
(792 loop 791 28 ())
(793 scheme-level-1 #f #f ())
(794 for-each 793 10 ())
(795 scheme-level-1 #f #f ())
(796 make-promise 795 10 ())
(797 #f 796 44 ())
(798 scheme-level-1 #f #f ())
(799 force 798 10 ())
(800 scheme-level-1 #f #f ())
(801 filter 800 10 ())
(802 #f 801 16 ())
(803 scheme-level-1 #f #f ())
(804 pos 803 10 ())
(805 #f 804 16 ())
(806 loop 805 32 ())
(807 scheme-level-1 #f #f ())
(808 every 807 10 ())
(809 scheme-level-1 #f #f ())
(810 sublist 809 10 ())
(811 recur 810 61 ())
(812 scheme-level-1 #f #f ())
(813 last 812 10 ())
(814 scheme-level-1 #f #f ())
(815 insert 814 10 ())
(816 scheme-level-1 #f #f ())
(817 fold 816 10 ())
(818 loop##23 817 18 ())
(819 scheme-level-1 #f #f ())
(820 fold->2 819 10 ())
(821 loop 820 31 ())
(822 scheme-level-1 #f #f ())
(823 fold->3 822 10 ())
(824 loop 823 34 ())
(825 scheme-level-1 #f #f ())
(826 modulo 825 10 ())
(827 scheme-level-1 #f #f ())
(828 ceiling 827 10 ())
(829 scheme-level-1 #f #f ())
(830 truncate 829 10 ())
(831 scheme-level-1 #f #f ())
(832 round 831 10 ())
(833 scheme-level-1 #f #f ())
(834 euclid 833 10 ())
(835 scheme-level-1 #f #f ())
(836 gcd 835 10 ())
(837 #f 836 11 ())
(838 scheme-level-1 #f #f ())
(839 lcm 838 10 ())
(840 #f 839 11 ())
(841 scheme-level-1 #f #f ())
(842 raise-to-integer-power 841 10 ())
(843 loop 842 42 ())
(844 scheme-level-1 #f #f ())
(845 expt 844 10 ())
(846 scheme-level-1 #f #f ())
(847 simplest-rational 846 10 ())
(848 simplest-rational-internal 847 14 ())
(849 scheme-level-1 #f #f ())
(850 rationalize 849 10 ())
(851 records #f #f ())
(852 #f 851 10 ())
(853 records #f #f ())
(854 records #f #f ())
(855 records #f #f ())
(856 records #f #f ())
(857 record-type 856 10 ())
(858 records #f #f ())
(859 record-type-name 858 10 ())
(860 records #f #f ())
(861 make-default-record-discloser 860 10 ())
(862 #f 861 16 ())
(863 records #f #f ())
(864 make-record-type 863 10 ())
(865 records #f #f ())
(866 record-type? 865 10 ())
(867 records #f #f ())
(868 record-type-resumer 867 10 ())
(869 records #f #f ())
(870 set-record-type-resumer! 869 10 ())
(871 records #f #f ())
(872 record-type-uid 871 10 ())
(873 records #f #f ())
(874 record-type-field-names 873 10 ())
(875 records #f #f ())
(876 record-type-number-of-fields 875 10 ())
(877 records #f #f ())
(878 record-type-discloser 877 10 ())
(879 records #f #f ())
(880 set-record-type-discloser! 879 10 ())
(881 records #f #f ())
(882 record-field-index 881 10 ())
(883 loop 882 37 ())
(884 records #f #f ())
(885 record-constructor 884 10 ())
(886 #f 885 20 ())
(887 #f 885 69 ())
(888 loop 887 59 ())
(889 records #f #f ())
(890 record-accessor 889 10 ())
(891 #f 890 78 ())
(892 records #f #f ())
(893 record-modifier 892 10 ())
(894 #f 893 78 ())
(895 records #f #f ())
(896 record-predicate 895 10 ())
(897 #f 896 16 ())
(898 records #f #f ())
(899 define-record-discloser 898 10 ())
(900 records #f #f ())
(901 disclose-record 900 10 ())
(902 records #f #f ())
(903 define-record-resumer 902 10 ())
(904 records #f #f ())
(905 resume-record 904 10 ())
(906 records #f #f ())
(907 initialize-records! 906 10 ())
(908 loop##27 907 25 ())
(909 records #f #f ())
(910 records #f #f ())
(911 records #f #f ())
(912 records #f #f ())
(913 define-record-types #f #f ())
(914 methods #f #f ())
(915 &add-method! 914 64 ())
(916 methods #f #f ())
(917 &disclose 916 57 ())
(918 methods #f #f ())
(919 &disclose 918 57 ())
(920 methods #f #f ())
(921 methods #f #f ())
(922 disclose 921 61 ())
(923 methods #f #f ())
(924 &same-type? 923 61 ())
(925 methods #f #f ())
(926 &type-priority 925 57 ())
(927 methods #f #f ())
(928 &type-predicate 927 57 ())
(929 methods #f #f ())
(930 #f 929 14 ())
(931 methods #f #f ())
(932 singleton-value 931 10 ())
(933 methods #f #f ())
(934 singleton 933 10 ())
(935 methods #f #f ())
(936 methods #f #f ())
(937 &same-type? 936 61 ())
(938 methods #f #f ())
(939 &same-type? 938 61 ())
(940 methods #f #f ())
(941 methods #f #f ())
(942 same-type? 941 65 ())
(943 methods #f #f ())
(944 &type-superiors 943 57 ())
(945 methods #f #f ())
(946 &type-superiors 945 57 ())
(947 methods #f #f ())
(948 methods #f #f ())
(949 type-superiors 948 61 ())
(950 methods #f #f ())
(951 &type-priority 950 57 ())
(952 methods #f #f ())
(953 &type-priority 952 57 ())
(954 methods #f #f ())
(955 methods #f #f ())
(956 type-priority 955 61 ())
(957 methods #f #f ())
(958 &type-predicate 957 57 ())
(959 methods #f #f ())
(960 &type-predicate 959 57 ())
(961 methods #f #f ())
(962 methods #f #f ())
(963 type-predicate 962 61 ())
(964 methods #f #f ())
(965 add-method! 964 57 ())
(966 methods #f #f ())
(967 methods #f #f ())
(968 add-method! 967 65 ())
(969 methods #f #f ())
(970 #f 969 14 ())
(971 methods #f #f ())
(972 set-method-table-methods! 971 10 ())
(973 methods #f #f ())
(974 method-table-methods 973 10 ())
(975 methods #f #f ())
(976 method-table-prototype 975 10 ())
(977 methods #f #f ())
(978 make-generic 977 10 ())
(979 methods #f #f ())
(980 method-table-get-perform 979 10 ())
(981 methods #f #f ())
(982 method-table-set-perform! 981 10 ())
(983 methods #f #f ())
(984 method-table-id 983 10 ())
(985 methods #f #f ())
(986 really-make-method-table 985 10 ())
(987 methods #f #f ())
(988 methods #f #f ())
(989 #f 988 14 ())
(990 methods #f #f ())
(991 method-info-types 990 10 ())
(992 methods #f #f ())
(993 method-info-n-ary? 992 10 ())
(994 methods #f #f ())
(995 method-info-proc 994 10 ())
(996 methods #f #f ())
(997 really-make-method-info 996 10 ())
(998 methods #f #f ())
(999 methods #f #f ())
(1000 record-type-priority 999 66 ())
(1001 methods #f #f ())
(1002 methods #f #f ())
(1003 methods #f #f ())
(1004 methods #f #f ())
(1005 methods #f #f ())
(1006 methods #f #f ())
(1007 methods #f #f ())
(1008 methods #f #f ())
(1009 methods #f #f ())
(1010 methods #f #f ())
(1011 methods #f #f ())
(1012 methods #f #f ())
(1013 methods #f #f ())
(1014 #f 1013 30 ())
(1015 methods #f #f ())
(1016 methods #f #f ())
(1017 methods #f #f ())
(1018 methods #f #f ())
(1019 methods #f #f ())
(1020 methods #f #f ())
(1021 #f 1020 30 ())
(1022 methods #f #f ())
(1023 methods #f #f ())
(1024 methods #f #f ())
(1025 methods #f #f ())
(1026 #f 1025 14 ())
(1027 methods #f #f ())
(1028 simple-type-superiors 1027 10 ())
(1029 methods #f #f ())
(1030 simple-type-predicate 1029 10 ())
(1031 methods #f #f ())
(1032 simple-type-priority 1031 10 ())
(1033 methods #f #f ())
(1034 simple-type-id 1033 10 ())
(1035 methods #f #f ())
(1036 really-make-simple-type 1035 10 ())
(1037 methods #f #f ())
(1038 methods #f #f ())
(1039 simple-type? 1038 10 ())
(1040 methods #f #f ())
(1041 %type-priority 1040 10 ())
(1042 methods #f #f ())
(1043 compute-priority 1042 10 ())
(1044 methods #f #f ())
(1045 make-simple-type 1044 10 ())
(1046 methods #f #f ())
(1047 %type-predicate 1046 10 ())
(1048 methods #f #f ())
(1049 %same-type? 1048 10 ())
(1050 methods #f #f ())
(1051 value? 1050 10 ())
(1052 methods #f #f ())
(1053 method-info? 1052 10 ())
(1054 methods #f #f ())
(1055 make-method-info 1054 10 ())
(1056 methods #f #f ())
(1057 empty-method-list 1056 10 ())
(1058 methods #f #f ())
(1059 more-specific-type? 1058 10 ())
(1060 methods #f #f ())
(1061 more-specific? 1060 10 ())
(1062 loop 1061 159 ())
(1063 methods #f #f ())
(1064 every2 1063 10 ())
(1065 methods #f #f ())
(1066 same-applicability? 1065 10 ())
(1067 methods #f #f ())
(1068 insert-method 1067 10 ())
(1069 recur 1068 25 ())
(1070 methods #f #f ())
(1071 method-table? 1070 10 ())
(1072 methods #f #f ())
(1073 last-action 1072 10 ())
(1074 #f 1073 16 ())
(1075 methods #f #f ())
(1076 one-action 1075 10 ())
(1077 #f 1076 18 ())
(1078 #f 1077 35 ())
(1079 methods #f #f ())
(1080 check-for-next 1079 10 ())
(1081 #f 1080 16 ())
(1082 methods #f #f ())
(1083 check-next 1082 10 ())
(1084 #f 1083 17 ())
(1085 methods #f #f ())
(1086 argument-sequence-predicate 1085 10 ())
(1087 recur 1086 35 ())
(1088 methods #f #f ())
(1089 methods->perform 1088 10 ())
(1090 recur 1089 21 ())
(1091 methods #f #f ())
(1092 add-to-method-table! 1091 10 ())
(1093 methods #f #f ())
(1094 set-final-method! 1093 10 ())
(1095 methods #f #f ())
(1096 make-cell-for-generic 1095 10 ())
(1097 #f 1096 28 ())
(1098 #f 1096 43 ())
(1099 #f 1096 58 ())
(1100 methods #f #f ())
(1101 make-method-table 1100 10 ())
(1102 #f 1101 118 ())
(1103 methods #f #f ())
(1104 apply-generic 1103 10 ())
(1105 methods #f #f ())
(1106 compare-to 1105 10 ())
(1107 #f 1106 16 ())
(1108 methods #f #f ())
(1109 proc->discloser 1108 10 ())
(1110 #f 1109 16 ())
(1111 #f 1110 9 ())
(1112 methods #f #f ())
(1113 number-i/o #f #f ())
(1114 #f 1113 52 ())
(1115 #f 1113 73 ())
(1116 loop 1115 55 ())
(1117 #f 1113 95 ())
(1118 number-i/o #f #f ())
(1119 set-exactness 1118 10 ())
(1120 number-i/o #f #f ())
(1121 &really-string->number 1120 65 ())
(1122 number-i/o #f #f ())
(1123 #f 1122 30 ())
(1124 loop 1123 38 ())
(1125 number-i/o #f #f ())
(1126 &really-string->number 1125 65 ())
(1127 number-i/o #f #f ())
(1128 number-i/o #f #f ())
(1129 number-i/o #f #f ())
(1130 string->number 1129 10 ())
(1131 loop 1130 304 ())
(1132 radix-is 1131 71 ())
(1133 exactness-is 1131 94 ())
(1134 loop 1131 354 ())
(1135 number-i/o #f #f ())
(1136 #f 1135 47 ())
(1137 recur 1136 64 ())
(1138 #f 1135 69 ())
(1139 number-i/o #f #f ())
(1140 &number->string 1139 61 ())
(1141 number-i/o #f #f ())
(1142 &number->string 1141 61 ())
(1143 number-i/o #f #f ())
(1144 number->string 1143 10 ())
(1145 number-i/o #f #f ())
(1146 number-i/o #f #f ())
(1147 fluids #f #f ())
(1148 fluids #f #f ())
(1149 set-fluid-top-level-value! 1148 10 ())
(1150 fluids #f #f ())
(1151 fluid-top-level-value 1150 10 ())
(1152 fluids #f #f ())
(1153 make-fluid 1152 10 ())
(1154 fluids #f #f ())
(1155 fluids #f #f ())
(1156 thread-dynamic-env 1155 10 ())
(1157 fluids #f #f ())
(1158 thread-dynamic-point 1157 10 ())
(1159 fluids #f #f ())
(1160 thread-proposal 1159 10 ())
(1161 fluids #f #f ())
(1162 make-thread 1161 10 ())
(1163 fluids #f #f ())
(1164 fluids #f #f ())
(1165 get-dynamic-env 1164 10 ())
(1166 fluids #f #f ())
(1167 set-dynamic-env! 1166 10 ())
(1168 fluids #f #f ())
(1169 get-dynamic-point 1168 10 ())
(1170 fluids #f #f ())
(1171 set-dynamic-point! 1170 10 ())
(1172 fluids #f #f ())
(1173 empty-dynamic-env 1172 10 ())
(1174 fluids #f #f ())
(1175 initialize-dynamic-state! 1174 10 ())
(1176 fluids #f #f ())
(1177 with-dynamic-env 1176 10 ())
(1178 fluids #f #f ())
(1179 fluid 1178 10 ())
(1180 fluids #f #f ())
(1181 set-fluid! 1180 10 ())
(1182 fluids #f #f ())
(1183 let-fluid 1182 10 ())
(1184 fluids #f #f ())
(1185 let-fluids 1184 10 ())
(1186 loop 1185 32 ())
(1187 enumerated #f #f ())
(1188 lookup-enumerand 1187 10 ())
(1189 loop 1188 38 ())
(1190 architecture #f #f ())
(1191 architecture #f #f ())
(1192 architecture #f #f ())
(1193 architecture #f #f ())
(1194 architecture #f #f ())
(1195 architecture #f #f ())
(1196 architecture #f #f ())
(1197 architecture #f #f ())
(1198 architecture #f #f ())
(1199 architecture #f #f ())
(1200 architecture #f #f ())
(1201 architecture #f #f ())
(1202 architecture #f #f ())
(1203 architecture #f #f ())
(1204 architecture #f #f ())
(1205 architecture #f #f ())
(1206 architecture #f #f ())
(1207 architecture #f #f ())
(1208 architecture #f #f ())
(1209 architecture #f #f ())
(1210 architecture #f #f ())
(1211 architecture #f #f ())
(1212 architecture #f #f ())
(1213 architecture #f #f ())
(1214 architecture #f #f ())
(1215 architecture #f #f ())
(1216 next-protocol 1215 10 ())
(1217 architecture #f #f ())
(1218 architecture #f #f ())
(1219 architecture #f #f ())
(1220 architecture #f #f ())
(1221 architecture #f #f ())
(1222 architecture #f #f ())
(1223 architecture #f #f ())
(1224 architecture #f #f ())
(1225 architecture #f #f ())
(1226 architecture #f #f ())
(1227 architecture #f #f ())
(1228 architecture #f #f ())
(1229 architecture #f #f ())
(1230 architecture #f #f ())
(1231 proposals #f #f ())
(1232 proposals #f #f ())
(1233 invalidate-current-proposal! 1232 10 ())
(1234 proposals #f #f ())
(1235 remove-current-proposal! 1234 10 ())
(1236 proposals #f #f ())
(1237 call-ensuring-atomicity! 1236 10 ())
(1238 proposals #f #f ())
(1239 call-ensuring-atomicity 1238 10 ())
(1240 proposals #f #f ())
(1241 call-atomically! 1240 10 ())
(1242 lose 1241 35 ())
(1243 proposals #f #f ())
(1244 call-atomically 1243 10 ())
(1245 loop 1244 30 ())
(1246 session-data #f #f ())
(1247 make-session-data-slot! 1246 10 ())
(1248 session-data #f #f ())
(1249 session-data-ref 1248 10 ())
(1250 session-data #f #f ())
(1251 session-data-set! 1250 10 ())
(1252 session-data #f #f ())
(1253 initialize-session-data! 1252 10 ())
(1254 session-data #f #f ())
(1255 conditions #f #f ())
(1256 conditions #f #f ())
(1257 conditions #f #f ())
(1258 conditions #f #f ())
(1259 conditions #f #f ())
(1260 conditions #f #f ())
(1261 conditions #f #f ())
(1262 make-exception 1261 10 ())
(1263 conditions #f #f ())
(1264 conditions #f #f ())
(1265 conditions #f #f ())
(1266 conditions #f #f ())
(1267 conditions #f #f ())
(1268 conditions #f #f ())
(1269 conditions #f #f ())
(1270 conditions #f #f ())
(1271 conditions #f #f ())
(1272 conditions #f #f ())
(1273 conditions #f #f ())
(1274 conditions #f #f ())
(1275 conditions #f #f ())
(1276 conditions #f #f ())
(1277 condition? 1276 10 ())
(1278 conditions #f #f ())
(1279 condition-predicate 1278 10 ())
(1280 #f 1279 16 ())
(1281 conditions #f #f ())
(1282 define-condition-type 1281 10 ())
(1283 #f 1282 20 ())
(1284 conditions #f #f ())
(1285 condition-supertypes 1284 10 ())
(1286 conditions #f #f ())
(1287 wind #f #f ())
(1288 point-depth 1287 10 ())
(1289 wind #f #f ())
(1290 point-in 1289 10 ())
(1291 wind #f #f ())
(1292 point-out 1291 10 ())
(1293 wind #f #f ())
(1294 point-dynamic-env 1293 10 ())
(1295 wind #f #f ())
(1296 point-parent 1295 10 ())
(1297 wind #f #f ())
(1298 make-point 1297 10 ())
(1299 wind #f #f ())
(1300 wind #f #f ())
(1301 dynamic-wind 1300 10 ())
(1302 wind #f #f ())
(1303 travel-to-point! 1302 10 ())
(1304 wind #f #f ())
(1305 continuation->procedure 1304 10 ())
(1306 #f 1305 19 ())
(1307 #f 1306 69 ())
(1308 wind #f #f ())
(1309 call-with-current-continuation 1308 10 ())
(1310 #f 1309 16 ())
(1311 templates #f #f ())
(1312 template-code 1311 10 ())
(1313 templates #f #f ())
(1314 template-info 1313 10 ())
(1315 templates #f #f ())
(1316 set-template-code! 1315 10 ())
(1317 templates #f #f ())
(1318 set-template-info! 1317 10 ())
(1319 templates #f #f ())
(1320 more-types #f #f ())
(1321 &disclose 1320 53 ())
(1322 more-types #f #f ())
(1323 more-types #f #f ())
(1324 &disclose 1323 57 ())
(1325 more-types #f #f ())
(1326 more-types #f #f ())
(1327 more-types #f #f ())
(1328 more-types #f #f ())
(1329 more-types #f #f ())
(1330 more-types #f #f ())
(1331 more-types #f #f ())
(1332 more-types #f #f ())
(1333 more-types #f #f ())
(1334 continuations #f #f ())
(1335 &disclose 1334 53 ())
(1336 continuations #f #f ())
(1337 continuations #f #f ())
(1338 continuations #f #f ())
(1339 continuation-cont 1338 10 ())
(1340 continuations #f #f ())
(1341 real-continuation-pc 1340 10 ())
(1342 continuations #f #f ())
(1343 real-continuation-template 1342 10 ())
(1344 continuations #f #f ())
(1345 continuation-env 1344 10 ())
(1346 continuations #f #f ())
(1347 exception-continuation-pc 1346 10 ())
(1348 continuations #f #f ())
(1349 exception-continuation-template 1348 10 ())
(1350 continuations #f #f ())
(1351 exception-continuation-exception 1350 10 ())
(1352 continuations #f #f ())
(1353 exception-continuation? 1352 10 ())
(1354 continuations #f #f ())
(1355 continuation-pc 1354 10 ())
(1356 continuations #f #f ())
(1357 continuation-template 1356 10 ())
(1358 continuations #f #f ())
(1359 continuation-arg 1358 10 ())
(1360 continuations #f #f ())
(1361 continuation-arg-count 1360 10 ())
(1362 continuations #f #f ())
(1363 continuation-parent 1362 10 ())
(1364 loop 1363 122 ())
(1365 continuations #f #f ())
(1366 exceptions #f #f ())
(1367 &disclose 1366 53 ())
(1368 exceptions #f #f ())
(1369 &disclose 1368 57 ())
(1370 exceptions #f #f ())
(1371 report-errors-as-warnings 1370 10 ())
(1372 #f 1371 22 ())
(1373 exceptions #f #f ())
(1374 ignore-errors 1373 10 ())
(1375 #f 1374 16 ())
(1376 #f 1375 16 ())
(1377 exceptions #f #f ())
(1378 continuation-preview 1377 10 ())
(1379 exceptions #f #f ())
(1380 report-utter-lossage 1379 10 ())
(1381 #f 1380 154 ())
(1382 exceptions #f #f ())
(1383 last-resort-condition-handler 1382 10 ())
(1384 #f 1383 39 ())
(1385 #f 1384 39 ())
(1386 exceptions #f #f ())
(1387 initialize-exceptions! 1386 10 ())
(1388 #f 1387 16 ())
(1389 exceptions #f #f ())
(1390 exceptions #f #f ())
(1391 with-handler 1390 10 ())
(1392 exceptions #f #f ())
(1393 really-signal-condition 1392 10 ())
(1394 loop 1393 38 ())
(1395 #f 1394 22 ())
(1396 exceptions #f #f ())
(1397 extend-opcode! 1396 10 ())
(1398 except 1397 16 ())
(1399 #f 1397 54 ())
(1400 exceptions #f #f ())
(1401 #f 1400 14 ())
(1402 exceptions #f #f ())
(1403 exceptions #f #f ())
(1404 signal-exception 1403 10 ())
(1405 exceptions #f #f ())
(1406 define-exception-handler 1405 10 ())
(1407 i/o #f #f ())
(1408 i/o #f #f ())
(1409 i/o #f #f ())
(1410 i/o #f #f ())
(1411 i/o #f #f ())
(1412 i/o #f #f ())
(1413 i/o #f #f ())
(1414 i/o #f #f ())
(1415 #f 1414 14 ())
(1416 #f 1414 26 ())
(1417 #f 1414 34 ())
(1418 #f 1414 42 ())
(1419 #f 1414 50 ())
(1420 i/o #f #f ())
(1421 i/o #f #f ())
(1422 i/o #f #f ())
(1423 i/o #f #f ())
(1424 i/o #f #f ())
(1425 i/o #f #f ())
(1426 i/o #f #f ())
(1427 i/o #f #f ())
(1428 &disclose 1427 57 ())
(1429 i/o #f #f ())
(1430 &disclose 1429 57 ())
(1431 i/o #f #f ())
(1432 port-handler-discloser 1431 10 ())
(1433 i/o #f #f ())
(1434 port-handler-close 1433 10 ())
(1435 i/o #f #f ())
(1436 port-handler-char 1435 10 ())
(1437 i/o #f #f ())
(1438 port-handler-block 1437 10 ())
(1439 i/o #f #f ())
(1440 port-handler-ready? 1439 10 ())
(1441 i/o #f #f ())
(1442 port-handler-force 1441 10 ())
(1443 i/o #f #f ())
(1444 make-port-handler 1443 10 ())
(1445 i/o #f #f ())
(1446 i/o #f #f ())
(1447 port-handler? 1446 10 ())
(1448 i/o #f #f ())
(1449 disclose-port 1448 10 ())
(1450 i/o #f #f ())
(1451 one-arg-proc->handler 1450 10 ())
(1452 #f 1451 17 ())
(1453 i/o #f #f ())
(1454 two-arg-proc->handler 1453 10 ())
(1455 #f 1454 17 ())
(1456 i/o #f #f ())
(1457 initialize-i/o-handlers! 1456 10 ())
(1458 #f 1457 21 ())
(1459 #f 1457 58 ())
(1460 #f 1457 91 ())
(1461 i/o #f #f ())
(1462 open-input-port? 1461 10 ())
(1463 i/o #f #f ())
(1464 current-input-port 1463 10 ())
(1465 i/o #f #f ())
(1466 input-port-option 1465 10 ())
(1467 i/o #f #f ())
(1468 char-ready? 1467 10 ())
(1469 i/o #f #f ())
(1470 real-char-ready? 1469 10 ())
(1471 i/o #f #f ())
(1472 okay-limits? 1471 10 ())
(1473 i/o #f #f ())
(1474 read-block 1473 10 ())
(1475 i/o #f #f ())
(1476 open-output-port? 1475 10 ())
(1477 i/o #f #f ())
(1478 write-block 1477 10 ())
(1479 i/o #f #f ())
(1480 write-string 1479 10 ())
(1481 i/o #f #f ())
(1482 output-port-ready? 1481 10 ())
(1483 i/o #f #f ())
(1484 force-output 1483 10 ())
(1485 i/o #f #f ())
(1486 force-output-if-open 1485 10 ())
(1487 i/o #f #f ())
(1488 close-input-port 1487 10 ())
(1489 i/o #f #f ())
(1490 close-output-port 1489 10 ())
(1491 i/o #f #f ())
(1492 open-port? 1491 10 ())
(1493 i/o #f #f ())
(1494 make-input-port-closed! 1493 10 ())
(1495 i/o #f #f ())
(1496 make-unbuffered-input-port 1495 10 ())
(1497 i/o #f #f ())
(1498 make-output-port-closed! 1497 10 ())
(1499 i/o #f #f ())
(1500 make-unbuffered-output-port 1499 10 ())
(1501 i/o #f #f ())
(1502 make-null-output-port 1501 10 ())
(1503 i/o #f #f ())
(1504 okay-buffer? 1503 10 ())
(1505 i/o #f #f ())
(1506 make-buffered-input-port 1505 10 ())
(1507 i/o #f #f ())
(1508 make-buffered-output-port 1507 10 ())
(1509 i/o #f #f ())
(1510 make-one-char-input 1509 10 ())
(1511 #f 1510 16 ())
(1512 lose 1511 35 ())
(1513 i/o #f #f ())
(1514 get-available-bytes! 1513 10 ())
(1515 i/o #f #f ())
(1516 make-read-block 1515 10 ())
(1517 #f 1516 16 ())
(1518 loop 1517 37 ())
(1519 lose 1518 43 ())
(1520 i/o #f #f ())
(1521 make-char-ready? 1520 10 ())
(1522 #f 1521 17 ())
(1523 lose 1522 35 ())
(1524 i/o #f #f ())
(1525 make-buffered-input-port-handler 1524 10 ())
(1526 #f 1525 20 ())
(1527 #f 1525 35 ())
(1528 lose 1527 34 ())
(1529 i/o #f #f ())
(1530 note-buffer-reuse! 1529 10 ())
(1531 i/o #f #f ())
(1532 buffer-length 1531 10 ())
(1533 i/o #f #f ())
(1534 make-closer 1533 10 ())
(1535 #f 1534 17 ())
(1536 lose 1535 35 ())
(1537 i/o #f #f ())
(1538 make-one-char-output 1537 10 ())
(1539 #f 1538 16 ())
(1540 lose 1539 35 ())
(1541 i/o #f #f ())
(1542 copy-bytes-out! 1541 10 ())
(1543 i/o #f #f ())
(1544 make-write-block 1543 10 ())
(1545 #f 1544 16 ())
(1546 loop 1545 32 ())
(1547 lose 1546 41 ())
(1548 i/o #f #f ())
(1549 make-forcer 1548 10 ())
(1550 #f 1549 16 ())
(1551 lose 1550 35 ())
(1552 i/o #f #f ())
(1553 make-buffered-output-port-handler 1552 10 ())
(1554 #f 1553 20 ())
(1555 i/o #f #f ())
(1556 periodically-force-output! 1555 10 ())
(1557 i/o #f #f ())
(1558 make-forcing-thunk 1557 10 ())
(1559 #f 1558 16 ())
(1560 #f 1559 17 ())
(1561 #f 1559 81 ())
(1562 #f 1561 17 ())
(1563 i/o #f #f ())
(1564 output-port-forcers 1563 10 ())
(1565 loop 1564 47 ())
(1566 i/o #f #f ())
(1567 periodically-flushed-ports 1566 10 ())
(1568 loop 1567 52 ())
(1569 i/o #f #f ())
(1570 current-output-port 1569 10 ())
(1571 i/o #f #f ())
(1572 current-error-port 1571 10 ())
(1573 i/o #f #f ())
(1574 current-noise-port 1573 10 ())
(1575 i/o #f #f ())
(1576 with-current-ports 1575 10 ())
(1577 i/o #f #f ())
(1578 initialize-i/o 1577 10 ())
(1579 i/o #f #f ())
(1580 call-with-current-input-port 1579 10 ())
(1581 i/o #f #f ())
(1582 call-with-current-output-port 1581 10 ())
(1583 i/o #f #f ())
(1584 call-with-current-noise-port 1583 10 ())
(1585 i/o #f #f ())
(1586 silently 1585 10 ())
(1587 i/o #f #f ())
(1588 output-port-option 1587 10 ())
(1589 i/o #f #f ())
(1590 newline 1589 10 ())
(1591 i/o #f #f ())
(1592 i/o #f #f ())
(1593 i/o #f #f ())
(1594 writing #f #f ())
(1595 display 1594 10 ())
(1596 recur 1595 45 ())
(1597 writing #f #f ())
(1598 display-type-name 1597 10 ())
(1599 loop##110 1598 101 ())
(1600 writing #f #f ())
(1601 write-other 1600 10 ())
(1602 #f 1601 88 ())
(1603 writing #f #f ())
(1604 write-vector 1603 10 ())
(1605 loop 1604 91 ())
(1606 writing #f #f ())
(1607 quotation? 1606 10 ())
(1608 writing #f #f ())
(1609 write-list 1608 10 ())
(1610 loop 1609 99 ())
(1611 writing #f #f ())
(1612 write-string-literal 1611 10 ())
(1613 loop##114 1612 37 ())
(1614 writing #f #f ())
(1615 character-name 1614 10 ())
(1616 writing #f #f ())
(1617 write-char-literal 1616 10 ())
(1618 writing #f #f ())
(1619 write-number 1618 10 ())
(1620 writing #f #f ())
(1621 write-boolean 1620 10 ())
(1622 writing #f #f ())
(1623 recurring-write 1622 10 ())
(1624 writing #f #f ())
(1625 write 1624 10 ())
(1626 recur 1625 45 ())
(1627 reading #f #f ())
(1628 loop##116 1627 47 ())
(1629 reading #f #f ())
(1630 reading #f #f ())
(1631 number-sharp-macro 1630 10 ())
(1632 #f 1630 28 ())
(1633 reading #f #f ())
(1634 #f 1633 10 ())
(1635 reading #f #f ())
(1636 #f 1635 10 ())
(1637 reading #f #f ())
(1638 #f 1637 10 ())
(1639 reading #f #f ())
(1640 #f 1639 10 ())
(1641 reading #f #f ())
(1642 #f 1641 16 ())
(1643 reading #f #f ())
(1644 #f 1643 18 ())
(1645 reading #f #f ())
(1646 #f 1645 18 ())
(1647 loop 1646 32 ())
(1648 reading #f #f ())
(1649 #f 1648 18 ())
(1650 reading #f #f ())
(1651 #f 1650 18 ())
(1652 reading #f #f ())
(1653 #f 1652 18 ())
(1654 reading #f #f ())
(1655 #f 1654 18 ())
(1656 reading #f #f ())
(1657 reading #f #f ())
(1658 sub-read-constituent 1657 10 ())
(1659 #f 1657 28 ())
(1660 reading #f #f ())
(1661 sub-read-whitespace 1660 10 ())
(1662 #f 1660 28 ())
(1663 reading #f #f ())
(1664 reading #f #f ())
(1665 #f 1664 14 ())
(1666 reading #f #f ())
(1667 reading #f #f ())
(1668 reading #f #f ())
(1669 reading #f #f ())
(1670 reader-token? 1669 10 ())
(1671 reading #f #f ())
(1672 reading-error 1671 10 ())
(1673 reading #f #f ())
(1674 sub-read 1673 10 ())
(1675 reading #f #f ())
(1676 read 1675 10 ())
(1677 loop 1676 42 ())
(1678 reading #f #f ())
(1679 sub-read-carefully 1678 10 ())
(1680 reading #f #f ())
(1681 make-reader-token 1680 10 ())
(1682 reading #f #f ())
(1683 set-standard-syntax! 1682 10 ())
(1684 reading #f #f ())
(1685 set-standard-read-macro! 1684 10 ())
(1686 reading #f #f ())
(1687 sub-read-list 1686 10 ())
(1688 recur 1687 65 ())
(1689 reading #f #f ())
(1690 gobble-line 1689 10 ())
(1691 loop 1690 22 ())
(1692 reading #f #f ())
(1693 define-sharp-macro 1692 10 ())
(1694 reading #f #f ())
(1695 proper-list? 1694 10 ())
(1696 reading #f #f ())
(1697 preferred-case 1696 10 ())
(1698 reading #f #f ())
(1699 sub-read-token 1698 10 ())
(1700 loop 1699 47 ())
(1701 reading #f #f ())
(1702 parse-token 1701 10 ())
(1703 reading #f #f ())
(1704 reading #f #f ())
(1705 queues #f #f ())
(1706 queues #f #f ())
(1707 queue-uid 1706 10 ())
(1708 queues #f #f ())
(1709 set-queue-head! 1708 10 ())
(1710 queues #f #f ())
(1711 queue-head 1710 10 ())
(1712 queues #f #f ())
(1713 set-queue-tail! 1712 10 ())
(1714 queues #f #f ())
(1715 queue-tail 1714 10 ())
(1716 queues #f #f ())
(1717 really-make-queue 1716 10 ())
(1718 queues #f #f ())
(1719 queues #f #f ())
(1720 queue? 1719 10 ())
(1721 queues #f #f ())
(1722 next-uid 1721 10 ())
(1723 #f 1722 6 ())
(1724 queues #f #f ())
(1725 make-queue 1724 10 ())
(1726 queues #f #f ())
(1727 queue-empty? 1726 10 ())
(1728 queues #f #f ())
(1729 enqueue! 1728 10 ())
(1730 #f 1729 17 ())
(1731 queues #f #f ())
(1732 queue-front 1731 10 ())
(1733 #f 1732 16 ())
(1734 queues #f #f ())
(1735 dequeue! 1734 10 ())
(1736 #f 1735 16 ())
(1737 queues #f #f ())
(1738 empty-queue! 1737 10 ())
(1739 #f 1738 16 ())
(1740 queues #f #f ())
(1741 on-queue? 1740 10 ())
(1742 queues #f #f ())
(1743 delete-from-queue-if! 1742 10 ())
(1744 #f 1743 17 ())
(1745 loop 1744 140 ())
(1746 queues #f #f ())
(1747 delete-from-queue! 1746 10 ())
(1748 #f 1747 19 ())
(1749 queues #f #f ())
(1750 queue->list 1749 10 ())
(1751 #f 1750 16 ())
(1752 #f 1751 6 ())
(1753 queues #f #f ())
(1754 queue-length 1753 10 ())
(1755 #f 1754 16 ())
(1756 interrupts #f #f ())
(1757 #f 1756 14 ())
(1758 interrupts #f #f ())
(1759 interrupts #f #f ())
(1760 interrupts #f #f ())
(1761 interrupts #f #f ())
(1762 enabled-interrupts 1761 10 ())
(1763 interrupts #f #f ())
(1764 post-gc-handler 1763 10 ())
(1765 #f 1764 16 ())
(1766 #f 1765 47 ())
(1767 #f 1765 74 ())
(1768 #f 1767 10 ())
(1769 #f 1767 28 ())
(1770 interrupts #f #f ())
(1771 initialize-interrupts! 1770 10 ())
(1772 #f 1771 17 ())
(1773 loop##138 1772 39 ())
(1774 #f 1773 41 ())
(1775 #f 1772 93 ())
(1776 #f 1775 14 ())
(1777 interrupts #f #f ())
(1778 set-interrupt-handler! 1777 10 ())
(1779 interrupts #f #f ())
(1780 with-interrupts 1779 10 ())
(1781 interrupts #f #f ())
(1782 with-interrupts-inhibited 1781 10 ())
(1783 interrupts #f #f ())
(1784 with-interrupts-allowed 1783 10 ())
(1785 interrupts #f #f ())
(1786 disable-interrupts! 1785 10 ())
(1787 interrupts #f #f ())
(1788 enable-interrupts! 1787 10 ())
(1789 interrupts #f #f ())
(1790 call-after-gc! 1789 10 ())
(1791 interrupts #f #f ())
(1792 call-before-heap-overflow! 1791 10 ())
(1793 interrupts #f #f ())
(1794 interrupts #f #f ())
(1795 threads #f #f ())
(1796 threads #f #f ())
(1797 threads #f #f ())
(1798 threads #f #f ())
(1799 threads #f #f ())
(1800 threads #f #f ())
(1801 threads #f #f ())
(1802 threads #f #f ())
(1803 threads #f #f ())
(1804 threads #f #f ())
(1805 threads #f #f ())
(1806 #f 1805 14 ())
(1807 threads #f #f ())
(1808 thread-dynamic-env 1807 10 ())
(1809 threads #f #f ())
(1810 set-thread-dynamic-point! 1809 10 ())
(1811 threads #f #f ())
(1812 thread-dynamic-point 1811 10 ())
(1813 threads #f #f ())
(1814 thread-proposal 1813 10 ())
(1815 threads #f #f ())
(1816 set-thread-time! 1815 10 ())
(1817 threads #f #f ())
(1818 thread-time 1817 10 ())
(1819 threads #f #f ())
(1820 set-thread-continuation! 1819 10 ())
(1821 threads #f #f ())
(1822 thread-continuation 1821 10 ())
(1823 threads #f #f ())
(1824 set-thread-arguments! 1823 10 ())
(1825 threads #f #f ())
(1826 thread-arguments 1825 10 ())
(1827 threads #f #f ())
(1828 set-thread-scheduler! 1827 10 ())
(1829 threads #f #f ())
(1830 thread-scheduler 1829 10 ())
(1831 threads #f #f ())
(1832 set-thread-current-task! 1831 10 ())
(1833 threads #f #f ())
(1834 thread-current-task 1833 10 ())
(1835 threads #f #f ())
(1836 set-thread-events! 1835 10 ())
(1837 threads #f #f ())
(1838 thread-events 1837 10 ())
(1839 threads #f #f ())
(1840 set-thread-data! 1839 10 ())
(1841 threads #f #f ())
(1842 thread-data 1841 10 ())
(1843 threads #f #f ())
(1844 set-thread-queue! 1843 10 ())
(1845 threads #f #f ())
(1846 thread-queue 1845 10 ())
(1847 threads #f #f ())
(1848 thread-uid 1847 10 ())
(1849 threads #f #f ())
(1850 thread-name 1849 10 ())
(1851 threads #f #f ())
(1852 really-make-thread 1851 10 ())
(1853 threads #f #f ())
(1854 threads #f #f ())
(1855 thread? 1854 10 ())
(1856 threads #f #f ())
(1857 compose-continuation 1856 10 ())
(1858 #f 1857 17 ())
(1859 #f 1858 42 ())
(1860 #f 1859 20 ())
(1861 #f 1860 19 ())
(1862 threads #f #f ())
(1863 thunk->continuation 1862 10 ())
(1864 threads #f #f ())
(1865 max2 1864 10 ())
(1866 threads #f #f ())
(1867 interrupt-timer-time 1866 10 ())
(1868 threads #f #f ())
(1869 debit-down! 1868 10 ())
(1870 loop 1869 35 ())
(1871 threads #f #f ())
(1872 run-thread 1871 10 ())
(1873 #f 1872 58 ())
(1874 threads #f #f ())
(1875 switch-to-thread 1874 10 ())
(1876 #f 1875 17 ())
(1877 threads #f #f ())
(1878 suspend-to 1877 10 ())
(1879 threads #f #f ())
(1880 suspend 1879 10 ())
(1881 threads #f #f ())
(1882 thread-top-level 1881 10 ())
(1883 thread-start 1882 16 ())
(1884 threads #f #f ())
(1885 make-thread 1884 10 ())
(1886 threads #f #f ())
(1887 all-threads 1886 10 ())
(1888 threads #f #f ())
(1889 thread-uid->thread 1888 10 ())
(1890 loop 1889 37 ())
(1891 threads #f #f ())
(1892 add-event! 1891 10 ())
(1893 threads #f #f ())
(1894 next-event! 1893 10 ())
(1895 threads #f #f ())
(1896 enqueue-thread! 1895 10 ())
(1897 threads #f #f ())
(1898 dequeue-thread! 1897 10 ())
(1899 threads #f #f ())
(1900 remove-thread-from-queue! 1899 10 ())
(1901 threads #f #f ())
(1902 event-pending? 1901 10 ())
(1903 threads #f #f ())
(1904 min 1903 10 ())
(1905 threads #f #f ())
(1906 schedule-interrupt! 1905 10 ())
(1907 threads #f #f ())
(1908 run-next-thread 1907 10 ())
(1909 threads #f #f ())
(1910 debit-thread-times-and-run! 1909 10 ())
(1911 loop 1910 50 ())
(1912 threads #f #f ())
(1913 find-and-run-next-thread 1912 10 ())
(1914 loop 1913 39 ())
(1915 threads #f #f ())
(1916 run 1915 10 ())
(1917 threads #f #f ())
(1918 handle-timer-interrupt 1917 10 ())
(1919 threads #f #f ())
(1920 exit 1919 10 ())
(1921 threads #f #f ())
(1922 wait 1921 10 ())
(1923 threads #f #f ())
(1924 waiting? 1923 10 ())
(1925 threads #f #f ())
(1926 relinquish-timeslice 1925 10 ())
(1927 threads #f #f ())
(1928 block 1927 10 ())
(1929 threads #f #f ())
(1930 maybe-commit-and-block 1929 10 ())
(1931 threads #f #f ())
(1932 running? 1931 10 ())
(1933 loop 1932 34 ())
(1934 threads #f #f ())
(1935 interrupt-thread 1934 10 ())
(1936 threads #f #f ())
(1937 propogate-upcall 1936 10 ())
(1938 #f 1937 78 ())
(1939 threads #f #f ())
(1940 upcall 1939 10 ())
(1941 threads #f #f ())
(1942 kill-thread! 1941 10 ())
(1943 #f 1942 12 ())
(1944 threads #f #f ())
(1945 get-next-event! 1944 10 ())
(1946 threads #f #f ())
(1947 schedule-wakeup 1946 10 ())
(1948 threads #f #f ())
(1949 really-schedule-event 1948 10 ())
(1950 threads #f #f ())
(1951 root-scheduler 1950 10 ())
(1952 threads #f #f ())
(1953 maybe-suspend 1952 10 ())
(1954 loop 1953 24 ())
(1955 threads #f #f ())
(1956 schedule-event 1955 10 ())
(1957 threads #f #f ())
(1958 show-running 1957 10 ())
(1959 loop##192 1958 19 ())
(1960 threads #f #f ())
(1961 spawn-on-scheduler 1960 10 ())
(1962 threads #f #f ())
(1963 spawn 1962 10 ())
(1964 threads #f #f ())
(1965 spawn-on-root 1964 10 ())
(1966 threads #f #f ())
(1967 make-ready 1966 10 ())
(1968 threads #f #f ())
(1969 make-threads-ready 1968 10 ())
(1970 loop 1969 22 ())
(1971 threads #f #f ())
(1972 maybe-commit-and-make-ready 1971 10 ())
(1973 threads #f #f ())
(1974 cancel-timer-interrupt! 1973 10 ())
(1975 threads #f #f ())
(1976 real-time 1975 10 ())
(1977 threads #f #f ())
(1978 start-multitasking 1977 10 ())
(1979 #f 1978 16 ())
(1980 #f 1979 16 ())
(1981 #f 1979 34 ())
(1982 #f 1981 18 ())
(1983 #f 1982 16 ())
(1984 #f 1982 32 ())
(1985 threads #f #f ())
(1986 with-threads 1985 10 ())
(1987 #f 1986 20 ())
(1988 #f 1987 6 ())
(1989 #f 1987 21 ())
(1990 #f 1987 29 ())
(1991 threads #f #f ())
(1992 terminate-current-thread 1991 10 ())
(1993 threads #f #f ())
(1994 insert 1993 10 ())
(1995 threads #f #f ())
(1996 sleep 1995 10 ())
(1997 #f 1996 90 ())
(1998 threads #f #f ())
(1999 wake-some-threads 1998 10 ())
(2000 loop 1999 63 ())
(2001 threads #f #f ())
(2002 threads #f #f ())
(2003 threads #f #f ())
(2004 condvars #f #f ())
(2005 #f 2004 10 ())
(2006 condvars #f #f ())
(2007 condvar-queue 2006 10 ())
(2008 condvars #f #f ())
(2009 set-condvar-has-value?! 2008 10 ())
(2010 condvars #f #f ())
(2011 condvar-has-value? 2010 10 ())
(2012 condvars #f #f ())
(2013 set-condvar-value! 2012 10 ())
(2014 condvars #f #f ())
(2015 condvar-value 2014 10 ())
(2016 condvars #f #f ())
(2017 condvar-id 2016 10 ())
(2018 condvars #f #f ())
(2019 really-make-condvar 2018 10 ())
(2020 condvars #f #f ())
(2021 condvars #f #f ())
(2022 condvar? 2021 10 ())
(2023 condvars #f #f ())
(2024 make-condvar 2023 10 ())
(2025 condvars #f #f ())
(2026 maybe-commit-and-wait-for-condvar 2025 10 ())
(2027 condvars #f #f ())
(2028 maybe-commit-and-set-condvar! 2027 10 ())
(2029 condvars #f #f ())
(2030 condvar-has-waiters? 2029 10 ())
(2031 channel-i/o #f #f ())
(2032 abort-unwanted-i/o! 2031 10 ())
(2033 loop 2032 43 ())
(2034 channel-i/o #f #f ())
(2035 fetch-channel-condvar! 2034 10 ())
(2036 loop 2035 99 ())
(2037 channel-i/o #f #f ())
(2038 channel-i/o #f #f ())
(2039 add-channel-condvar! 2038 10 ())
(2040 channel-i/o #f #f ())
(2041 set-channel-condvars! 2040 10 ())
(2042 channel-i/o #f #f ())
(2043 channel-condvars 2042 10 ())
(2044 channel-i/o #f #f ())
(2045 channel-i/o #f #f ())
(2046 waiting-for-i/o? 2045 10 ())
(2047 channel-i/o #f #f ())
(2048 i/o-completion-handler 2047 10 ())
(2049 channel-i/o #f #f ())
(2050 initialize-channel-i/o! 2049 10 ())
(2051 channel-i/o #f #f ())
(2052 input-channel? 2051 10 ())
(2053 channel-i/o #f #f ())
(2054 channel-maybe-commit-and-close 2053 10 ())
(2055 channel-i/o #f #f ())
(2056 channel-write 2055 10 ())
(2057 lose 2056 103 ())
(2058 channel-i/o #f #f ())
(2059 note-channel-result! 2058 10 ())
(2060 lose 2059 32 ())
(2061 channel-i/o #f #f ())
(2062 channel-i/o #f #f ())
(2063 channel-i/o #f #f ())
(2064 channel-maybe-commit-and-do-it 2063 10 ())
(2065 #f 2064 16 ())
(2066 channel-ports #f #f ())
(2067 #f 2066 14 ())
(2068 #f 2066 22 ())
(2069 #f 2066 38 ())
(2070 #f 2066 46 ())
(2071 channel-ports #f #f ())
(2072 write-block-handler 2071 10 ())
(2073 loop 2072 52 ())
(2074 channel-ports #f #f ())
(2075 one-char-handler 2074 10 ())
(2076 loop 2075 64 ())
(2077 channel-ports #f #f ())
(2078 force-channel-output-ports! 2077 10 ())
(2079 #f 2078 6 ())
(2080 channel-ports #f #f ())
(2081 with-output-to-file 2080 10 ())
(2082 #f 2081 19 ())
(2083 channel-ports #f #f ())
(2084 with-input-from-file 2083 10 ())
(2085 #f 2084 19 ())
(2086 channel-ports #f #f ())
(2087 call-with-output-file 2086 10 ())
(2088 channel-ports #f #f ())
(2089 call-with-input-file 2088 10 ())
(2090 channel-ports #f #f ())
(2091 open-output-file 2090 10 ())
(2092 channel-ports #f #f ())
(2093 open-input-file 2092 10 ())
(2094 channel-ports #f #f ())
(2095 maybe-open-file 2094 10 ())
(2096 channel-ports #f #f ())
(2097 real-output-channel->port 2096 10 ())
(2098 channel-ports #f #f ())
(2099 output-channel+closer->port 2098 10 ())
(2100 channel-ports #f #f ())
(2101 output-channel->port 2100 10 ())
(2102 channel-ports #f #f ())
(2103 #f 2102 14 ())
(2104 channel-ports #f #f ())
(2105 send-some 2104 10 ())
(2106 channel-ports #f #f ())
(2107 empty-buffer! 2106 10 ())
(2108 channel-ports #f #f ())
(2109 real-input-channel->port 2108 10 ())
(2110 channel-ports #f #f ())
(2111 input-channel+closer->port 2110 10 ())
(2112 channel-ports #f #f ())
(2113 input-channel->port 2112 10 ())
(2114 channel-ports #f #f ())
(2115 #f 2114 14 ())
(2116 channel-ports #f #f ())
(2117 channel-port-ready? 2116 10 ())
(2118 channel-ports #f #f ())
(2119 fill-buffer! 2118 10 ())
(2120 channel-ports #f #f ())
(2121 port-channel-closer 2120 10 ())
(2122 channel-ports #f #f ())
(2123 port->channel 2122 10 ())
(2124 channel-ports #f #f ())
(2125 make-channel-cell 2124 10 ())
(2126 channel-ports #f #f ())
(2127 channel-cell-ref 2126 10 ())
(2128 channel-ports #f #f ())
(2129 channel-cell-closer 2128 10 ())
(2130 channel-ports #f #f ())
(2131 channel-cell-condvar 2130 10 ())
(2132 channel-ports #f #f ())
(2133 set-channel-cell-in-use?! 2132 10 ())
(2134 channel-ports #f #f ())
(2135 channel-cell-in-use? 2134 10 ())
(2136 channel-ports #f #f ())
(2137 set-channel-cell-sent! 2136 10 ())
(2138 channel-ports #f #f ())
(2139 channel-cell-sent 2138 10 ())
(2140 channel-ports #f #f ())
(2141 channel-cell? 2140 10 ())
(2142 channel-ports #f #f ())
(2143 really-make-channel-cell 2142 10 ())
(2144 channel-ports #f #f ())
(2145 scheme-level-2 #f #f ())
(2146 features #f #f ())
(2147 tables #f #f ())
(2148 tables #f #f ())
(2149 tables #f #f ())
(2150 tables #f #f ())
(2151 make-table 2150 44 ())
(2152 tables #f #f ())
(2153 tables #f #f ())
(2154 tables #f #f ())
(2155 tables #f #f ())
(2156 tables #f #f ())
(2157 set-table-size! 2156 10 ())
(2158 tables #f #f ())
(2159 table-size 2158 10 ())
(2160 tables #f #f ())
(2161 set-table-data! 2160 10 ())
(2162 tables #f #f ())
(2163 table-data 2162 10 ())
(2164 tables #f #f ())
(2165 set-table-ref-procedure! 2164 10 ())
(2166 tables #f #f ())
(2167 table-ref-procedure 2166 10 ())
(2168 tables #f #f ())
(2169 set-table-set!-procedure! 2168 10 ())
(2170 tables #f #f ())
(2171 table-set!-procedure 2170 10 ())
(2172 tables #f #f ())
(2173 really-make-table 2172 10 ())
(2174 tables #f #f ())
(2175 tables #f #f ())
(2176 table? 2175 10 ())
(2177 tables #f #f ())
(2178 table-ref 2177 10 ())
(2179 tables #f #f ())
(2180 table-set! 2179 10 ())
(2181 tables #f #f ())
(2182 next-table-size 2181 10 ())
(2183 tables #f #f ())
(2184 delete-entry! 2183 10 ())
(2185 loop 2184 47 ())
(2186 tables #f #f ())
(2187 new-entry 2186 10 ())
(2188 tables #f #f ())
(2189 make-linear-table-set! 2188 10 ())
(2190 #f 2189 17 ())
(2191 tables #f #f ())
(2192 table-expand-table! 2191 10 ())
(2193 tables #f #f ())
(2194 table-enter-alist! 2193 10 ())
(2195 loop##242 2194 37 ())
(2196 tables #f #f ())
(2197 make-hash-table-ref 2196 10 ())
(2198 #f 2197 17 ())
(2199 tables #f #f ())
(2200 expand-hash-table! 2199 10 ())
(2201 loop##244 2200 64 ())
(2202 tables #f #f ())
(2203 make-hash-table-set! 2202 10 ())
(2204 #f 2203 17 ())
(2205 tables #f #f ())
(2206 make->hash-table 2205 10 ())
(2207 #f 2206 56 ())
(2208 tables #f #f ())
(2209 make-linear-table-ref 2208 10 ())
(2210 #f 2209 16 ())
(2211 tables #f #f ())
(2212 assoc->table-maker 2211 10 ())
(2213 #f 2212 79 ())
(2214 tables #f #f ())
(2215 make-assoc 2214 10 ())
(2216 #f 2215 30 ())
(2217 loop 2216 28 ())
(2218 tables #f #f ())
(2219 make-table-maker 2218 10 ())
(2220 tables #f #f ())
(2221 alist-walk 2220 10 ())
(2222 loop##246 2221 18 ())
(2223 tables #f #f ())
(2224 really-table-walk 2223 10 ())
(2225 loop##249 2224 74 ())
(2226 tables #f #f ())
(2227 table-walk 2226 10 ())
(2228 #f 2227 16 ())
(2229 tables #f #f ())
(2230 make-table-immutable! 2229 10 ())
(2231 tables #f #f ())
(2232 table->entry-list 2231 10 ())
(2233 #f 2232 37 ())
(2234 tables #f #f ())
(2235 default-table-hash-function 2234 10 ())
(2236 tables #f #f ())
(2237 default-table-assoc 2236 10 ())
(2238 tables #f #f ())
(2239 symbol-hash 2238 10 ())
(2240 tables #f #f ())
(2241 tables #f #f ())
(2242 weak #f #f ())
(2243 walk-population 2242 10 ())
(2244 #f 2243 16 ())
(2245 weak #f #f ())
(2246 population->list 2245 10 ())
(2247 weak #f #f ())
(2248 population-reduce 2247 10 ())
(2249 loop##250 2248 18 ())
(2250 weak #f #f ())
(2251 weak-memq 2250 10 ())
(2252 weak #f #f ())
(2253 add-to-population! 2252 10 ())
(2254 weak #f #f ())
(2255 make-population 2254 10 ())
(2256 meta-types #f #f ())
(2257 meta-types #f #f ())
(2258 meta-types #f #f ())
(2259 meta-types #f #f ())
(2260 meta-types #f #f ())
(2261 meta-types #f #f ())
(2262 meta-types #f #f ())
(2263 meta-types #f #f ())
(2264 meta-types #f #f ())
(2265 meta-types #f #f ())
(2266 meta-types #f #f ())
(2267 meta-types #f #f ())
(2268 meta-types #f #f ())
(2269 meta-types #f #f ())
(2270 meta-types #f #f ())
(2271 meta-types #f #f ())
(2272 meta-types #f #f ())
(2273 meta-types #f #f ())
(2274 meta-types #f #f ())
(2275 meta-types #f #f ())
(2276 meta-types #f #f ())
(2277 meta-types #f #f ())
(2278 meta-types #f #f ())
(2279 meta-types #f #f ())
(2280 meta-types #f #f ())
(2281 meta-types #f #f ())
(2282 meta-types #f #f ())
(2283 meta-types #f #f ())
(2284 meta-types #f #f ())
(2285 meta-types #f #f ())
(2286 loop 2285 31 ())
(2287 meta-types #f #f ())
(2288 meta-types #f #f ())
(2289 meta-types #f #f ())
(2290 meta-types #f #f ())
(2291 meta-types #f #f ())
(2292 meta-types #f #f ())
(2293 meta-types #f #f ())
(2294 meta-types #f #f ())
(2295 meta-types #f #f ())
(2296 meta-types #f #f ())
(2297 meta-types #f #f ())
(2298 meta-types #f #f ())
(2299 meta-types #f #f ())
(2300 meta-types #f #f ())
(2301 meta-types #f #f ())
(2302 meta-types #f #f ())
(2303 meta-types #f #f ())
(2304 meta-types #f #f ())
(2305 meta-types #f #f ())
(2306 meta-types #f #f ())
(2307 #f 2306 14 ())
(2308 meta-types #f #f ())
(2309 type-mask 2308 10 ())
(2310 meta-types #f #f ())
(2311 type-more 2310 10 ())
(2312 meta-types #f #f ())
(2313 type-info 2312 10 ())
(2314 meta-types #f #f ())
(2315 really-make-type 2314 10 ())
(2316 meta-types #f #f ())
(2317 meta-types #f #f ())
(2318 meta-type? 2317 10 ())
(2319 meta-types #f #f ())
(2320 make-type 2319 10 ())
(2321 meta-types #f #f ())
(2322 set-type-name! 2321 10 ())
(2323 meta-types #f #f ())
(2324 make-other-type 2323 10 ())
(2325 meta-types #f #f ())
(2326 name->type 2325 10 ())
(2327 meta-types #f #f ())
(2328 new-type-bit 2327 10 ())
(2329 meta-types #f #f ())
(2330 mask->type 2329 10 ())
(2331 meta-types #f #f ())
(2332 bottom-type? 2331 10 ())
(2333 meta-types #f #f ())
(2334 new-atomic-type 2333 10 ())
(2335 meta-types #f #f ())
(2336 named-atomic-type 2335 10 ())
(2337 meta-types #f #f ())
(2338 empty-rail-type? 2337 10 ())
(2339 meta-types #f #f ())
(2340 rest-type? 2339 10 ())
(2341 meta-types #f #f ())
(2342 same-type? 2341 10 ())
(2343 meta-types #f #f ())
(2344 head-type 2343 10 ())
(2345 meta-types #f #f ())
(2346 optional-type? 2345 10 ())
(2347 meta-types #f #f ())
(2348 rail-type 2347 10 ())
(2349 meta-types #f #f ())
(2350 make-optional-type 2349 10 ())
(2351 meta-types #f #f ())
(2352 make-rest-type 2351 10 ())
(2353 meta-types #f #f ())
(2354 head-type-really 2353 10 ())
(2355 meta-types #f #f ())
(2356 tail-type 2355 10 ())
(2357 meta-types #f #f ())
(2358 value-type? 2357 10 ())
(2359 meta-types #f #f ())
(2360 other-type-info 2359 10 ())
(2361 meta-types #f #f ())
(2362 restrictive? 2361 10 ())
(2363 meta-types #f #f ())
(2364 make-procedure-type 2363 10 ())
(2365 meta-types #f #f ())
(2366 procedure-type-domain 2365 10 ())
(2367 meta-types #f #f ())
(2368 procedure-type-codomain 2367 10 ())
(2369 meta-types #f #f ())
(2370 meet-procedure 2369 10 ())
(2371 meta-types #f #f ())
(2372 meet-rail 2371 10 ())
(2373 meta-types #f #f ())
(2374 meet-type 2373 10 ())
(2375 meta-types #f #f ())
(2376 subtype? 2375 10 ())
(2377 meta-types #f #f ())
(2378 meet-procedure? 2377 10 ())
(2379 meta-types #f #f ())
(2380 meet? 2379 10 ())
(2381 meta-types #f #f ())
(2382 procedure-type? 2381 10 ())
(2383 meta-types #f #f ())
(2384 join-procedure 2383 10 ())
(2385 meta-types #f #f ())
(2386 join-rail 2385 10 ())
(2387 meta-types #f #f ())
(2388 join-type 2387 10 ())
(2389 meta-types #f #f ())
(2390 procedure-type 2389 10 ())
(2391 meta-types #f #f ())
(2392 sexp->values-type 2391 10 ())
(2393 meta-types #f #f ())
(2394 sexp->type 2393 10 ())
(2395 #f 2394 303 ())
(2396 #f 2394 381 ())
(2397 meta-types #f #f ())
(2398 disjoin-rest 2397 10 ())
(2399 meta-types #f #f ())
(2400 disjoin-type 2399 10 ())
(2401 loop##272 2400 293 ())
(2402 meta-types #f #f ())
(2403 atomic-type->sexp 2402 10 ())
(2404 meta-types #f #f ())
(2405 rail-type->sexp 2404 10 ())
(2406 recur 2405 28 ())
(2407 meta-types #f #f ())
(2408 type->sexp 2407 10 ())
(2409 #f 2408 158 ())
(2410 meta-types #f #f ())
(2411 make-some-values-type 2410 10 ())
(2412 meta-types #f #f ())
(2413 fixed-arity-procedure-type? 2412 10 ())
(2414 loop 2413 50 ())
(2415 meta-types #f #f ())
(2416 procedure-type-arity 2415 10 ())
(2417 loop##275 2416 18 ())
(2418 meta-types #f #f ())
(2419 procedure-type-argument-types 2418 10 ())
(2420 recur 2419 37 ())
(2421 meta-types #f #f ())
(2422 variable-type 2421 10 ())
(2423 meta-types #f #f ())
(2424 variable-type? 2423 10 ())
(2425 meta-types #f #f ())
(2426 compatible-types? 2425 10 ())
(2427 meta-types #f #f ())
(2428 meta-types #f #f ())
(2429 meta-types #f #f ())
(2430 interfaces #f #f ())
(2431 #f 2430 10 ())
(2432 interfaces #f #f ())
(2433 ref-method 2432 10 ())
(2434 interfaces #f #f ())
(2435 walk-method 2434 10 ())
(2436 interfaces #f #f ())
(2437 interface-clients 2436 10 ())
(2438 interfaces #f #f ())
(2439 set-interface-name! 2438 10 ())
(2440 interfaces #f #f ())
(2441 interface-name 2440 10 ())
(2442 interfaces #f #f ())
(2443 really-make-interface 2442 10 ())
(2444 interfaces #f #f ())
(2445 interfaces #f #f ())
(2446 interface? 2445 10 ())
(2447 interfaces #f #f ())
(2448 make-interface 2447 10 ())
(2449 interfaces #f #f ())
(2450 interface-ref 2449 10 ())
(2451 interfaces #f #f ())
(2452 interface-member? 2451 10 ())
(2453 interfaces #f #f ())
(2454 for-each-declaration 2453 10 ())
(2455 interfaces #f #f ())
(2456 note-reference-to-interface! 2455 10 ())
(2457 interfaces #f #f ())
(2458 note-interface-name! 2457 10 ())
(2459 interfaces #f #f ())
(2460 make-simple-interface-table 2459 10 ())
(2461 #f 2460 35 ())
(2462 #f 2461 77 ())
(2463 interfaces #f #f ())
(2464 make-simple-interface 2463 10 ())
(2465 #f 2464 34 ())
(2466 #f 2464 49 ())
(2467 #f 2466 16 ())
(2468 interfaces #f #f ())
(2469 make-compound-interface 2468 10 ())
(2470 #f 2469 22 ())
(2471 loop 2470 25 ())
(2472 #f 2469 37 ())
(2473 #f 2472 16 ())
(2474 #f 2469 70 ())
(2475 interfaces #f #f ())
(2476 proper-list? 2475 10 ())
(2477 interfaces #f #f ())
(2478 okay-command? 2477 10 ())
(2479 #f 2478 169 ())
(2480 interfaces #f #f ())
(2481 symbol-append 2480 10 ())
(2482 interfaces #f #f ())
(2483 process-prefix 2482 10 ())
(2484 #f 2483 29 ())
(2485 #f 2483 59 ())
(2486 interfaces #f #f ())
(2487 prefix-match? 2486 10 ())
(2488 loop 2487 38 ())
(2489 interfaces #f #f ())
(2490 remove-prefix 2489 10 ())
(2491 interfaces #f #f ())
(2492 lookup 2491 10 ())
(2493 interfaces #f #f ())
(2494 process-expose 2493 10 ())
(2495 loop 2494 35 ())
(2496 interfaces #f #f ())
(2497 process-hide 2496 10 ())
(2498 interfaces #f #f ())
(2499 process-alias 2498 10 ())
(2500 #f 2499 17 ())
(2501 interfaces #f #f ())
(2502 process-rename 2501 10 ())
(2503 #f 2502 17 ())
(2504 interfaces #f #f ())
(2505 process-commands 2504 10 ())
(2506 loop 2505 49 ())
(2507 #f 2506 30 ())
(2508 interfaces #f #f ())
(2509 make-lookup 2508 10 ())
(2510 #f 2509 19 ())
(2511 interfaces #f #f ())
(2512 cdr-assq 2511 10 ())
(2513 loop 2512 25 ())
(2514 interfaces #f #f ())
(2515 make-default-walker 2514 10 ())
(2516 #f 2515 19 ())
(2517 #f 2516 21 ())
(2518 interfaces #f #f ())
(2519 make-alist-walker 2518 10 ())
(2520 #f 2519 17 ())
(2521 #f 2520 19 ())
(2522 interfaces #f #f ())
(2523 make-modified-interface 2522 10 ())
(2524 bindings #f #f ())
(2525 bindings #f #f ())
(2526 binding-type 2525 10 ())
(2527 bindings #f #f ())
(2528 binding-place 2527 10 ())
(2529 bindings #f #f ())
(2530 binding-static 2529 10 ())
(2531 bindings #f #f ())
(2532 binding-path 2531 10 ())
(2533 bindings #f #f ())
(2534 set-binding-place! 2533 10 ())
(2535 bindings #f #f ())
(2536 make-binding 2535 10 ())
(2537 bindings #f #f ())
(2538 add-path 2537 10 ())
(2539 bindings #f #f ())
(2540 clobber-binding! 2539 10 ())
(2541 bindings #f #f ())
(2542 impose-type 2541 10 ())
(2543 bindings #f #f ())
(2544 forget-integration 2543 10 ())
(2545 bindings #f #f ())
(2546 same-denotation? 2545 10 ())
(2547 bindings #f #f ())
(2548 follow-forwarding-pointers 2547 10 ())
(2549 bindings #f #f ())
(2550 maybe-fix-place! 2549 10 ())
(2551 names #f #f ())
(2552 #f 2551 10 ())
(2553 names #f #f ())
(2554 transform-procedure 2553 10 ())
(2555 names #f #f ())
(2556 transform-env 2555 10 ())
(2557 names #f #f ())
(2558 transform-type 2557 10 ())
(2559 names #f #f ())
(2560 transform-aux-names 2559 10 ())
(2561 names #f #f ())
(2562 transform-source 2561 10 ())
(2563 names #f #f ())
(2564 transform-id 2563 10 ())
(2565 names #f #f ())
(2566 really-make-transform 2565 10 ())
(2567 names #f #f ())
(2568 names #f #f ())
(2569 names #f #f ())
(2570 #f 2569 14 ())
(2571 names #f #f ())
(2572 generated-symbol 2571 10 ())
(2573 names #f #f ())
(2574 generated-token 2573 10 ())
(2575 names #f #f ())
(2576 generated-env 2575 10 ())
(2577 names #f #f ())
(2578 generated-parent-name 2577 10 ())
(2579 names #f #f ())
(2580 make-generated 2579 10 ())
(2581 names #f #f ())
(2582 names #f #f ())
(2583 generated? 2582 10 ())
(2584 names #f #f ())
(2585 name? 2584 10 ())
(2586 names #f #f ())
(2587 generate-name 2586 10 ())
(2588 names #f #f ())
(2589 generated-uid 2588 10 ())
(2590 names #f #f ())
(2591 name->symbol 2590 10 ())
(2592 names #f #f ())
(2593 name-hash 2592 10 ())
(2594 names #f #f ())
(2595 desyntaxify 2594 10 ())
(2596 loop 2595 290 ())
(2597 names #f #f ())
(2598 make-qualified 2597 10 ())
(2599 names #f #f ())
(2600 qualified? 2599 10 ())
(2601 names #f #f ())
(2602 qualified-parent-name 2601 10 ())
(2603 names #f #f ())
(2604 qualified-symbol 2603 10 ())
(2605 names #f #f ())
(2606 qualified-uid 2605 10 ())
(2607 names #f #f ())
(2608 lookup 2607 10 ())
(2609 names #f #f ())
(2610 transform? 2609 10 ())
(2611 names #f #f ())
(2612 qualify-parent 2611 10 ())
(2613 recur 2612 25 ())
(2614 names #f #f ())
(2615 name->qualified 2614 10 ())
(2616 names #f #f ())
(2617 make-transform 2616 10 ())
(2618 names #f #f ())
(2619 name->source-name 2618 10 ())
(2620 names #f #f ())
(2621 make-keyword-comparator 2620 10 ())
(2622 #f 2621 16 ())
(2623 names #f #f ())
(2624 make-name-generator 2623 10 ())
(2625 #f 2624 38 ())
(2626 names #f #f ())
(2627 bind-aliases 2626 10 ())
(2628 #f 2627 53 ())
(2629 names #f #f ())
(2630 maybe-apply-macro-transform 2629 10 ())
(2631 names #f #f ())
(2632 apply-inline-transform 2631 10 ())
(2633 names #f #f ())
(2634 compiler-envs #f #f ())
(2635 compiler-envs #f #f ())
(2636 compiler-envs #f #f ())
(2637 compiler-envs #f #f ())
(2638 compiler-envs #f #f ())
(2639 lookup 2638 10 ())
(2640 compiler-envs #f #f ())
(2641 bind1 2640 10 ())
(2642 #f 2641 18 ())
(2643 compiler-envs #f #f ())
(2644 bind 2643 10 ())
(2645 compiler-envs #f #f ())
(2646 bindrec 2645 10 ())
(2647 #f 2646 40 ())
(2648 compiler-envs #f #f ())
(2649 make-compiler-env 2648 10 ())
(2650 #f 2649 19 ())
(2651 compiler-envs #f #f ())
(2652 environment-macro-eval 2651 10 ())
(2653 compiler-envs #f #f ())
(2654 environment-define! 2653 10 ())
(2655 compiler-envs #f #f ())
(2656 extract-package-from-environment 2655 10 ())
(2657 compiler-envs #f #f ())
(2658 bind-source-file-name 2657 10 ())
(2659 compiler-envs #f #f ())
(2660 source-file-name 2659 10 ())
(2661 thingies #f #f ())
(2662 thingie-binding 2661 10 ())
(2663 thingies #f #f ())
(2664 thingie-name 2663 10 ())
(2665 thingies #f #f ())
(2666 thingie-want-type 2665 10 ())
(2667 thingies #f #f ())
(2668 make-thingie 2667 10 ())
(2669 thingies #f #f ())
(2670 thingies #f #f ())
(2671 thingie? 2670 10 ())
(2672 packages #f #f ())
(2673 #f 2672 14 ())
(2674 packages #f #f ())
(2675 packages #f #f ())
(2676 packages #f #f ())
(2677 packages #f #f ())
(2678 packages #f #f ())
(2679 packages #f #f ())
(2680 packages #f #f ())
(2681 packages #f #f ())
(2682 #f 2681 14 ())
(2683 packages #f #f ())
(2684 package-uid 2683 10 ())
(2685 packages #f #f ())
(2686 set-package-opens! 2685 10 ())
(2687 packages #f #f ())
(2688 package-opens-really 2687 10 ())
(2689 packages #f #f ())
(2690 package-definitions 2689 10 ())
(2691 packages #f #f ())
(2692 package-unstable? 2691 10 ())
(2693 packages #f #f ())
(2694 set-package-integrate?! 2693 10 ())
(2695 packages #f #f ())
(2696 package-integrate? 2695 10 ())
(2697 packages #f #f ())
(2698 set-package-get-location! 2697 10 ())
(2699 packages #f #f ())
(2700 package-get-location 2699 10 ())
(2701 packages #f #f ())
(2702 package-file-name 2701 10 ())
(2703 packages #f #f ())
(2704 package-clauses 2703 10 ())
(2705 packages #f #f ())
(2706 set-package-loaded?! 2705 10 ())
(2707 packages #f #f ())
(2708 package-loaded? 2707 10 ())
(2709 packages #f #f ())
(2710 set-package->environment! 2709 10 ())
(2711 packages #f #f ())
(2712 package->environment 2711 10 ())
(2713 packages #f #f ())
(2714 set-package-opens-thunk! 2713 10 ())
(2715 packages #f #f ())
(2716 package-opens-thunk 2715 10 ())
(2717 packages #f #f ())
(2718 package-accesses-thunk 2717 10 ())
(2719 packages #f #f ())
(2720 set-package-undefineds! 2719 10 ())
(2721 packages #f #f ())
(2722 package-real-undefineds 2721 10 ())
(2723 packages #f #f ())
(2724 set-package-undefined-but-assigneds! 2723 10 ())
(2725 packages #f #f ())
(2726 package-real-undefined-but-assigneds 2725 10 ())
(2727 packages #f #f ())
(2728 package-clients 2727 10 ())
(2729 packages #f #f ())
(2730 package-cached 2729 10 ())
(2731 packages #f #f ())
(2732 really-make-package 2731 10 ())
(2733 packages #f #f ())
(2734 packages #f #f ())
(2735 #f 2734 14 ())
(2736 packages #f #f ())
(2737 structure-interface-thunk 2736 10 ())
(2738 packages #f #f ())
(2739 set-structure-interface! 2738 10 ())
(2740 packages #f #f ())
(2741 structure-interface-really 2740 10 ())
(2742 packages #f #f ())
(2743 structure-package 2742 10 ())
(2744 packages #f #f ())
(2745 structure-clients 2744 10 ())
(2746 packages #f #f ())
(2747 set-structure-name! 2746 10 ())
(2748 packages #f #f ())
(2749 structure-name 2748 10 ())
(2750 packages #f #f ())
(2751 really-make-structure 2750 10 ())
(2752 packages #f #f ())
(2753 packages #f #f ())
(2754 structure? 2753 10 ())
(2755 packages #f #f ())
(2756 initialize-structure! 2755 10 ())
(2757 packages #f #f ())
(2758 structure-interface 2757 10 ())
(2759 packages #f #f ())
(2760 package? 2759 10 ())
(2761 packages #f #f ())
(2762 note-package-name! 2761 10 ())
(2763 packages #f #f ())
(2764 note-structure-name! 2763 10 ())
(2765 packages #f #f ())
(2766 make-structure 2765 10 ())
(2767 #f 2766 100 ())
(2768 packages #f #f ())
(2769 structure-unstable? 2768 10 ())
(2770 packages #f #f ())
(2771 make-modified-structure 2770 10 ())
(2772 #f 2771 34 ())
(2773 packages #f #f ())
(2774 get-new-location 2773 10 ())
(2775 packages #f #f ())
(2776 package-define! 2775 10 ())
(2777 packages #f #f ())
(2778 package-accesses 2777 10 ())
(2779 packages #f #f ())
(2780 initialize-package! 2779 10 ())
(2781 #f 2780 59 ())
(2782 #f 2780 84 ())
(2783 packages #f #f ())
(2784 initialize-package-if-necessary! 2783 10 ())
(2785 packages #f #f ())
(2786 package-definition 2785 10 ())
(2787 packages #f #f ())
(2788 search-opens 2787 10 ())
(2789 loop 2788 26 ())
(2790 packages #f #f ())
(2791 structure-lookup 2790 10 ())
(2792 packages #f #f ())
(2793 package-lookup 2792 10 ())
(2794 packages #f #f ())
(2795 generic-lookup 2794 10 ())
(2796 packages #f #f ())
(2797 really-package-lookup 2796 10 ())
(2798 packages #f #f ())
(2799 real-structure-lookup 2798 10 ())
(2800 packages #f #f ())
(2801 for-each-export 2800 10 ())
(2802 #f 2801 35 ())
(2803 packages #f #f ())
(2804 really-package->environment 2803 10 ())
(2805 #f 2804 16 ())
(2806 #f 2804 31 ())
(2807 packages #f #f ())
(2808 new-package-uid 2807 10 ())
(2809 packages #f #f ())
(2810 make-package 2809 10 ())
(2811 packages #f #f ())
(2812 lazy-table-accessor 2811 10 ())
(2813 #f 2812 17 ())
(2814 packages #f #f ())
(2815 package-name 2814 10 ())
(2816 packages #f #f ())
(2817 package-opens 2816 10 ())
(2818 packages #f #f ())
(2819 make-simple-package 2818 10 ())
(2820 #f 2819 77 ())
(2821 #f 2819 85 ())
(2822 packages #f #f ())
(2823 package-add-static! 2822 10 ())
(2824 packages #f #f ())
(2825 package-refine-type! 2824 10 ())
(2826 packages #f #f ())
(2827 for-each-definition 2826 10 ())
(2828 #f 2827 16 ())
(2829 packages #f #f ())
(2830 make-new-location 2829 10 ())
(2831 packages #f #f ())
(2832 flush-location-names 2831 10 ())
(2833 packages #f #f ())
(2834 print-undefined-names 2833 10 ())
(2835 #f 2834 20 ())
(2836 #f 2834 66 ())
(2837 packages #f #f ())
(2838 noting-undefined-variables 2837 10 ())
(2839 add-name 2838 33 ())
(2840 #f 2838 55 ())
(2841 #f 2838 74 ())
(2842 #f 2841 6 ())
(2843 #f 2841 25 ())
(2844 #f 2843 13 ())
(2845 packages #f #f ())
(2846 cenv->package 2845 10 ())
(2847 packages #f #f ())
(2848 get-location-for-unassignable 2847 10 ())
(2849 #f 2848 120 ())
(2850 #f 2848 135 ())
(2851 packages #f #f ())
(2852 package-note-caching! 2851 10 ())
(2853 loop 2852 94 ())
(2854 packages #f #f ())
(2855 note-caching! 2854 10 ())
(2856 packages #f #f ())
(2857 location-for-reference 2856 10 ())
(2858 loop 2857 38 ())
(2859 packages #f #f ())
(2860 get-location-for-undefined 2859 10 ())
(2861 #f 2860 116 ())
(2862 packages #f #f ())
(2863 get-location 2862 10 ())
(2864 packages #f #f ())
(2865 really-link! 2864 10 ())
(2866 loop##421 2865 19 ())
(2867 packages #f #f ())
(2868 link! 2867 10 ())
(2869 #f 2868 25 ())
(2870 packages #f #f ())
(2871 location-on-demand 2870 10 ())
(2872 #f 2871 16 ())
(2873 packages #f #f ())
(2874 packages #f #f ())
(2875 environments #f #f ())
(2876 set-reflective-tower-maker! 2875 40 ())
(2877 environments #f #f ())
(2878 make-reflective-tower 2877 10 ())
(2879 recur 2878 28 ())
(2880 #f 2879 24 ())
(2881 environments #f #f ())
(2882 null-environment 2881 10 ())
(2883 environments #f #f ())
(2884 set-scheme-report-environment! 2883 10 ())
(2885 environments #f #f ())
(2886 environments #f #f ())
(2887 environments #f #f ())
(2888 environments #f #f ())
(2889 scheme-report-environment 2888 10 ())
(2890 environments #f #f ())
(2891 with-interaction-environment 2890 10 ())
(2892 environments #f #f ())
(2893 set-interaction-environment! 2892 10 ())
(2894 environments #f #f ())
(2895 interaction-environment 2894 10 ())
(2896 environments #f #f ())
(2897 environments #f #f ())
(2898 carefully 2897 10 ())
(2899 environments #f #f ())
(2900 *structure-ref 2899 10 ())
(2901 environments #f #f ())
(2902 environment-define! 2901 10 ())
(2903 environments #f #f ())
(2904 environment-set! 2903 10 ())
(2905 #f 2904 132 ())
(2906 environments #f #f ())
(2907 environment-ref 2906 10 ())
(2908 #f 2907 35 ())
(2909 filenames #f #f ())
(2910 translate 2909 10 ())
(2911 loop 2910 36 ())
(2912 filenames #f #f ())
(2913 set-translation! 2912 10 ())
(2914 filenames #f #f ())
(2915 translations 2914 10 ())
(2916 filenames #f #f ())
(2917 filenames #f #f ())
(2918 string-posq 2917 10 ())
(2919 loop 2918 27 ())
(2920 filenames #f #f ())
(2921 file-nondirectory-position 2920 10 ())
(2922 loop 2921 31 ())
(2923 filenames #f #f ())
(2924 file-name-nondirectory 2923 10 ())
(2925 filenames #f #f ())
(2926 file-name-directory 2925 10 ())
(2927 filenames #f #f ())
(2928 filenames #f #f ())
(2929 filenames #f #f ())
(2930 filenames #f #f ())
(2931 namestring-component 2930 10 ())
(2932 filenames #f #f ())
(2933 filenames #f #f ())
(2934 filenames #f #f ())
(2935 namestring 2934 10 ())
(2936 #f 2935 196 ())
(2937 reading-forms #f #f ())
(2938 really-read-forms 2937 10 ())
(2939 loop 2938 26 ())
(2940 reading-forms #f #f ())
(2941 read-forms 2940 10 ())
(2942 #f 2941 67 ())
(2943 reading-forms #f #f ())
(2944 #f 2943 14 ())
(2945 nodes #f #f ())
(2946 #f 2945 18 ())
(2947 nodes #f #f ())
(2948 #f 2947 22 ())
(2949 nodes #f #f ())
(2950 #f 2949 22 ())
(2951 nodes #f #f ())
(2952 #f 2951 22 ())
(2953 nodes #f #f ())
(2954 nodes #f #f ())
(2955 nodes #f #f ())
(2956 #f 2955 22 ())
(2957 #f 2956 16 ())
(2958 nodes #f #f ())
(2959 #f 2958 22 ())
(2960 nodes #f #f ())
(2961 #f 2960 22 ())
(2962 nodes #f #f ())
(2963 #f 2962 14 ())
(2964 nodes #f #f ())
(2965 #f 2964 14 ())
(2966 nodes #f #f ())
(2967 node-operator-id 2966 10 ())
(2968 nodes #f #f ())
(2969 node-form 2968 10 ())
(2970 nodes #f #f ())
(2971 set-node-plist! 2970 10 ())
(2972 nodes #f #f ())
(2973 node-plist 2972 10 ())
(2974 nodes #f #f ())
(2975 really-make-node 2974 10 ())
(2976 nodes #f #f ())
(2977 nodes #f #f ())
(2978 nodes #f #f ())
(2979 nodes #f #f ())
(2980 nodes #f #f ())
(2981 nodes #f #f ())
(2982 #f 2981 14 ())
(2983 nodes #f #f ())
(2984 set-operator-type! 2983 10 ())
(2985 nodes #f #f ())
(2986 operator-type 2985 10 ())
(2987 nodes #f #f ())
(2988 operator-nargs 2987 10 ())
(2989 nodes #f #f ())
(2990 operator-uid 2989 10 ())
(2991 nodes #f #f ())
(2992 operator-name 2991 10 ())
(2993 nodes #f #f ())
(2994 make-operator 2993 10 ())
(2995 nodes #f #f ())
(2996 nodes #f #f ())
(2997 operator? 2996 10 ())
(2998 nodes #f #f ())
(2999 get-operator 2998 10 ())
(3000 nodes #f #f ())
(3001 make-operator-table 3000 10 ())
(3002 nodes #f #f ())
(3003 operator-lookup 3002 10 ())
(3004 nodes #f #f ())
(3005 operator-define! 3004 10 ())
(3006 nodes #f #f ())
(3007 node? 3006 10 ())
(3008 nodes #f #f ())
(3009 make-node 3008 10 ())
(3010 nodes #f #f ())
(3011 node-ref 3010 10 ())
(3012 nodes #f #f ())
(3013 node-set! 3012 10 ())
(3014 loop 3013 116 ())
(3015 nodes #f #f ())
(3016 node-operator 3015 10 ())
(3017 nodes #f #f ())
(3018 node-predicate 3017 10 ())
(3019 #f 3018 50 ())
(3020 nodes #f #f ())
(3021 make-similar-node 3020 10 ())
(3022 nodes #f #f ())
(3023 force-node 3022 10 ())
(3024 nodes #f #f ())
(3025 schemify-node 3024 10 ())
(3026 nodes #f #f ())
(3027 schemify-sexp 3026 10 ())
(3028 loop 3027 163 ())
(3029 nodes #f #f ())
(3030 schemify 3029 10 ())
(3031 nodes #f #f ())
(3032 schemify-nodes 3031 10 ())
(3033 #f 3032 16 ())
(3034 nodes #f #f ())
(3035 define-schemifier 3034 10 ())
(3036 nodes #f #f ())
(3037 schemify-formals 3036 10 ())
(3038 nodes #f #f ())
(3039 schemify-lambda 3038 10 ())
(3040 nodes #f #f ())
(3041 schemify-letrec 3040 10 ())
(3042 #f 3041 24 ())
(3043 nodes #f #f ())
(3044 nodes #f #f ())
(3045 var-utilities #f #f ())
(3046 normalize-formals 3045 10 ())
(3047 var-utilities #f #f ())
(3048 n-ary? 3047 10 ())
(3049 var-utilities #f #f ())
(3050 number-of-required-args 3049 10 ())
(3051 loop##448 3050 14 ())
(3052 syntactic #f #f ())
(3053 syntactic #f #f ())
(3054 syntactic #f #f ())
(3055 syntactic #f #f ())
(3056 syntactic #f #f ())
(3057 syntactic #f #f ())
(3058 syntactic #f #f ())
(3059 syntactic #f #f ())
(3060 syntactic #f #f ())
(3061 syntactic #f #f ())
(3062 syntactic #f #f ())
(3063 syntactic #f #f ())
(3064 syntactic #f #f ())
(3065 syntactic #f #f ())
(3066 syntactic #f #f ())
(3067 syntactic #f #f ())
(3068 syntactic #f #f ())
(3069 #f 3068 22 ())
(3070 #f 3069 127 ())
(3071 syntactic #f #f ())
(3072 #f 3071 22 ())
(3073 #f 3072 108 ())
(3074 #f 3073 16 ())
(3075 syntactic #f #f ())
(3076 #f 3075 22 ())
(3077 #f 3076 112 ())
(3078 syntactic #f #f ())
(3079 #f 3078 22 ())
(3080 syntactic #f #f ())
(3081 #f 3080 22 ())
(3082 #f 3081 82 ())
(3083 syntactic #f #f ())
(3084 #f 3083 22 ())
(3085 syntactic #f #f ())
(3086 #f 3085 22 ())
(3087 syntactic #f #f ())
(3088 #f 3087 22 ())
(3089 syntactic #f #f ())
(3090 #f 3089 22 ())
(3091 syntactic #f #f ())
(3092 #f 3091 22 ())
(3093 syntactic #f #f ())
(3094 #f 3093 22 ())
(3095 syntactic #f #f ())
(3096 #f 3095 22 ())
(3097 syntactic #f #f ())
(3098 #f 3097 22 ())
(3099 syntactic #f #f ())
(3100 #f 3099 14 ())
(3101 syntactic #f #f ())
(3102 syntactic #f #f ())
(3103 syntactic #f #f ())
(3104 syntactic #f #f ())
(3105 at-least-this-long? 3104 10 ())
(3106 syntactic #f #f ())
(3107 names? 3106 10 ())
(3108 syntactic #f #f ())
(3109 destructure-define 3108 10 ())
(3110 syntactic #f #f ())
(3111 scan-define 3110 10 ())
(3112 syntactic #f #f ())
(3113 this-long? 3112 10 ())
(3114 syntactic #f #f ())
(3115 process-syntax 3114 10 ())
(3116 syntactic #f #f ())
(3117 scan-define-syntax 3116 10 ())
(3118 syntactic #f #f ())
(3119 expand-name 3118 10 ())
(3120 syntactic #f #f ())
(3121 expand-operator-form 3120 10 ())
(3122 syntactic #f #f ())
(3123 literal? 3122 10 ())
(3124 syntactic #f #f ())
(3125 expand-literal 3124 10 ())
(3126 syntactic #f #f ())
(3127 expand-list 3126 10 ())
(3128 #f 3127 16 ())
(3129 syntactic #f #f ())
(3130 expand-call 3129 10 ())
(3131 syntactic #f #f ())
(3132 expand 3131 10 ())
(3133 syntactic #f #f ())
(3134 expand-macro-application 3133 10 ())
(3135 syntactic #f #f ())
(3136 expand-structure-ref 3135 10 ())
(3137 lose 3136 41 ())
(3138 syntactic #f #f ())
(3139 expand-head 3138 10 ())
(3140 syntactic #f #f ())
(3141 scan-forms 3140 10 ())
(3142 loop 3141 29 ())
(3143 syntactic #f #f ())
(3144 expand-define 3143 10 ())
(3145 syntactic #f #f ())
(3146 expand-scanned-form 3145 10 ())
(3147 syntactic #f #f ())
(3148 expand-form 3147 10 ())
(3149 loop 3148 41 ())
(3150 syntactic #f #f ())
(3151 static-value 3150 10 ())
(3152 syntactic #f #f ())
(3153 make-operator-predicate 3152 10 ())
(3154 #f 3153 38 ())
(3155 syntactic #f #f ())
(3156 body-lossage 3155 10 ())
(3157 syntactic #f #f ())
(3158 scan-body-forms 3157 10 ())
(3159 syntactic #f #f ())
(3160 expand-letrec 3159 10 ())
(3161 #f 3160 20 ())
(3162 syntactic #f #f ())
(3163 expand-body 3162 10 ())
(3164 syntactic #f #f ())
(3165 define-expander 3164 10 ())
(3166 syntactic #f #f ())
(3167 unspecific-node 3166 10 ())
(3168 syntactic #f #f ())
(3169 bind-names 3168 10 ())
(3170 loop 3169 33 ())
(3171 syntactic #f #f ())
(3172 expand-lambda 3171 10 ())
(3173 syntactic #f #f ())
(3174 specs? 3173 10 ())
(3175 syntactic #f #f ())
(3176 syntax? 3175 10 ())
(3177 primops #f #f ())
(3178 primops #f #f ())
(3179 #f 3178 14 ())
(3180 primops #f #f ())
(3181 primop-name 3180 10 ())
(3182 primops #f #f ())
(3183 primop-type 3182 10 ())
(3184 primops #f #f ())
(3185 primop-closed 3184 10 ())
(3186 primops #f #f ())
(3187 primop-compilator 3186 10 ())
(3188 primops #f #f ())
(3189 make-primop 3188 10 ())
(3190 primops #f #f ())
(3191 primops #f #f ())
(3192 primop? 3191 10 ())
(3193 primops #f #f ())
(3194 walk-primops 3193 10 ())
(3195 #f 3194 16 ())
(3196 primops #f #f ())
(3197 define-compiler-primitive 3196 10 ())
(3198 primops #f #f ())
(3199 get-primop 3198 10 ())
(3200 debug-data #f #f ())
(3201 debug-data #f #f ())
(3202 debug-data #f #f ())
(3203 debug-data #f #f ())
(3204 debug-data #f #f ())
(3205 debug-data #f #f ())
(3206 debug-data #f #f ())
(3207 debug-data #f #f ())
(3208 debug-data #f #f ())
(3209 debug-data #f #f ())
(3210 #f 3209 14 ())
(3211 debug-data #f #f ())
(3212 debug-data-uid 3211 10 ())
(3213 debug-data #f #f ())
(3214 debug-data-name 3213 10 ())
(3215 debug-data #f #f ())
(3216 debug-data-parent 3215 10 ())
(3217 debug-data #f #f ())
(3218 debug-data-pc-in-parent 3217 10 ())
(3219 debug-data #f #f ())
(3220 set-debug-data-env-maps! 3219 10 ())
(3221 debug-data #f #f ())
(3222 debug-data-env-maps 3221 10 ())
(3223 debug-data #f #f ())
(3224 set-debug-data-source! 3223 10 ())
(3225 debug-data #f #f ())
(3226 debug-data-source 3225 10 ())
(3227 debug-data #f #f ())
(3228 make-debug-data 3227 10 ())
(3229 debug-data #f #f ())
(3230 debug-data #f #f ())
(3231 debug-data? 3230 10 ())
(3232 debug-data #f #f ())
(3233 get-debug-data 3232 10 ())
(3234 debug-data #f #f ())
(3235 debug-data-env-shape 3234 10 ())
(3236 loop 3235 102 ())
(3237 debug-data #f #f ())
(3238 new-template-uid 3237 10 ())
(3239 debug-data #f #f ())
(3240 template-uid 3239 10 ())
(3241 debug-data #f #f ())
(3242 set-template-uid! 3241 10 ())
(3243 debug-data #f #f ())
(3244 debug-flag-accessor 3243 10 ())
(3245 #f 3244 38 ())
(3246 debug-data #f #f ())
(3247 debug-flag-modifier 3246 10 ())
(3248 #f 3247 38 ())
(3249 debug-data #f #f ())
(3250 saving-and-restoring 3249 10 ())
(3251 swap 3250 28 ())
(3252 debug-data #f #f ())
(3253 with-fresh-compiler-state 3252 10 ())
(3254 #f 3253 59 ())
(3255 #f 3254 6 ())
(3256 #f 3254 14 ())
(3257 debug-data #f #f ())
(3258 note-debug-data! 3257 10 ())
(3259 debug-data #f #f ())
(3260 debug-data->info 3259 10 ())
(3261 debug-data #f #f ())
(3262 new-debug-data 3261 10 ())
(3263 debug-data #f #f ())
(3264 debug-data #f #f ())
(3265 stack-check #f #f ())
(3266 loop##489 3265 11 ())
(3267 stack-check #f #f ())
(3268 #f 3267 14 ())
(3269 loop 3268 62 ())
(3270 stack-check #f #f ())
(3271 #f 3270 14 ())
(3272 stack-check #f #f ())
(3273 #f 3272 14 ())
(3274 stack-check #f #f ())
(3275 stack-check #f #f ())
(3276 stack-check #f #f ())
(3277 #f 3276 14 ())
(3278 stack-check #f #f ())
(3279 stack-check #f #f ())
(3280 stack-check #f #f ())
(3281 #f 3280 14 ())
(3282 stack-check #f #f ())
(3283 #f 3282 14 ())
(3284 stack-check #f #f ())
(3285 #f 3284 14 ())
(3286 stack-check #f #f ())
(3287 #f 3286 14 ())
(3288 stack-check #f #f ())
(3289 stack-check #f #f ())
(3290 stack-check #f #f ())
(3291 stack-check #f #f ())
(3292 stack-check #f #f ())
(3293 stack-check #f #f ())
(3294 stack-check #f #f ())
(3295 stack-check #f #f ())
(3296 stack-check #f #f ())
(3297 stack-check #f #f ())
(3298 stack-check #f #f ())
(3299 stack-check #f #f ())
(3300 stack-check #f #f ())
(3301 stack-check #f #f ())
(3302 stack-max 3301 10 ())
(3303 stack-check #f #f ())
(3304 protocol-skip 3303 10 ())
(3305 stack-check #f #f ())
(3306 maximum-stack-use 3305 10 ())
(3307 loop##492 3306 81 ())
(3308 stack-check #f #f ())
(3309 nothing 3308 10 ())
(3310 #f 3309 16 ())
(3311 stack-check #f #f ())
(3312 popper 3311 10 ())
(3313 #f 3312 17 ())
(3314 stack-check #f #f ())
(3315 imax 3314 10 ())
(3316 stack-check #f #f ())
(3317 pusher 3316 10 ())
(3318 #f 3317 17 ())
(3319 stack-check #f #f ())
(3320 continue 3319 10 ())
(3321 stack-check #f #f ())
(3322 continuer 3321 10 ())
(3323 #f 3322 16 ())
(3324 stack-check #f #f ())
(3325 get-offset 3324 10 ())
(3326 stack-check #f #f ())
(3327 flat-env-checker 3326 10 ())
(3328 #f 3327 17 ())
(3329 loop 3328 96 ())
(3330 stack-check #f #f ())
(3331 do-make-cont 3330 10 ())
(3332 #f 3331 16 ())
(3333 stack-check #f #f ())
(3334 arg-spec-size 3333 10 ())
(3335 stack-check #f #f ())
(3336 stack-function 3335 10 ())
(3337 loop 3336 25 ())
(3338 segments #f #f ())
(3339 segments #f #f ())
(3340 segments #f #f ())
(3341 segments #f #f ())
(3342 #f 3341 18 ())
(3343 segments #f #f ())
(3344 astate-code-vector 3343 10 ())
(3345 segments #f #f ())
(3346 set-astate-pc! 3345 10 ())
(3347 segments #f #f ())
(3348 astate-pc 3347 10 ())
(3349 segments #f #f ())
(3350 set-astate-count! 3349 10 ())
(3351 segments #f #f ())
(3352 astate-count 3351 10 ())
(3353 segments #f #f ())
(3354 set-astate-literals! 3353 10 ())
(3355 segments #f #f ())
(3356 astate-literals 3355 10 ())
(3357 segments #f #f ())
(3358 make-assembly-state 3357 10 ())
(3359 segments #f #f ())
(3360 segments #f #f ())
(3361 segments #f #f ())
(3362 segments #f #f ())
(3363 segments #f #f ())
(3364 high-byte 3363 10 ())
(3365 segments #f #f ())
(3366 emit-byte! 3365 10 ())
(3367 segments #f #f ())
(3368 low-byte 3367 10 ())
(3369 segments #f #f ())
(3370 position 3369 10 ())
(3371 loop 3370 30 ())
(3372 segments #f #f ())
(3373 literal-position 3372 10 ())
(3374 #f 3373 26 ())
(3375 segments #f #f ())
(3376 literal->index 3375 10 ())
(3377 segments #f #f ())
(3378 emit-literal! 3377 10 ())
(3379 segments #f #f ())
(3380 code-vector-set2! 3379 10 ())
(3381 segments #f #f ())
(3382 check-stack-use 3381 10 ())
(3383 loop##511 3382 92 ())
(3384 segments #f #f ())
(3385 emit-segment! 3384 10 ())
(3386 segments #f #f ())
(3387 emit-with-environment-maps! 3386 10 ())
(3388 #f 3387 25 ())
(3389 segments #f #f ())
(3390 make-astate 3389 10 ())
(3391 segments #f #f ())
(3392 template 3391 10 ())
(3393 #f 3392 21 ())
(3394 segments #f #f ())
(3395 segment-data->template 3394 10 ())
(3396 loop##512 3395 79 ())
(3397 segments #f #f ())
(3398 segment->template 3397 10 ())
(3399 #f 3398 151 ())
(3400 segments #f #f ())
(3401 instruction 3400 10 ())
(3402 #f 3401 43 ())
(3403 #f 3402 33 ())
(3404 segments #f #f ())
(3405 sequentially-2 3404 10 ())
(3406 #f 3405 74 ())
(3407 segments #f #f ())
(3408 sequentially 3407 10 ())
(3409 loop 3408 100 ())
(3410 #f 3408 123 ())
(3411 loop 3410 25 ())
(3412 segments #f #f ())
(3413 instruction-with-literal 3412 10 ())
(3414 #f 3413 44 ())
(3415 #f 3414 178 ())
(3416 segments #f #f ())
(3417 instruction-with-location 3416 10 ())
(3418 #f 3417 23 ())
(3419 segments #f #f ())
(3420 make-label 3419 10 ())
(3421 segments #f #f ())
(3422 insert-label! 3421 10 ())
(3423 segments #f #f ())
(3424 instruction-using-label 3423 10 ())
(3425 #f 3424 66 ())
(3426 segments #f #f ())
(3427 computed-goto-instruction 3426 10 ())
(3428 #f 3427 90 ())
(3429 loop##514 3428 85 ())
(3430 segments #f #f ())
(3431 attach-label 3430 10 ())
(3432 #f 3431 32 ())
(3433 #f 3432 50 ())
(3434 segments #f #f ())
(3435 note-source-code 3434 10 ())
(3436 #f 3435 32 ())
(3437 segments #f #f ())
(3438 note-environment 3437 10 ())
(3439 #f 3438 46 ())
(3440 segments #f #f ())
(3441 optimizer #f #f ())
(3442 apply-optimizers 3441 10 ())
(3443 #f 3442 16 ())
(3444 optimizer #f #f ())
(3445 get-optimizer 3444 10 ())
(3446 #f 3445 16 ())
(3447 #f 3446 13 ())
(3448 #f 3447 61 ())
(3449 optimizer #f #f ())
(3450 set-optimizer! 3449 10 ())
(3451 optimizer #f #f ())
(3452 flat-environments #f #f ())
(3453 clear-var-set! 3452 10 ())
(3454 flat-environments #f #f ())
(3455 clean-var-list 3454 10 ())
(3456 flat-environments #f #f ())
(3457 set-difference! 3456 10 ())
(3458 flat-environments #f #f ())
(3459 set-union! 3458 10 ())
(3460 #f 3459 16 ())
(3461 flat-environments #f #f ())
(3462 set-add-element! 3461 10 ())
(3463 flat-environments #f #f ())
(3464 flat-environments #f #f ())
(3465 install-set! 3464 10 ())
(3466 #f 3465 16 ())
(3467 flat-environments #f #f ())
(3468 install-new-set! 3467 10 ())
(3469 flat-environments #f #f ())
(3470 cell-set!-primop 3469 10 ())
(3471 flat-environments #f #f ())
(3472 flat-environments #f #f ())
(3473 cell-ref-primop 3472 10 ())
(3474 flat-environments #f #f ())
(3475 flat-environments #f #f ())
(3476 make-cell-primop 3475 10 ())
(3477 flat-environments #f #f ())
(3478 flat-environments #f #f ())
(3479 flat-environments #f #f ())
(3480 flat-environments #f #f ())
(3481 flat-environments #f #f ())
(3482 flat-environments #f #f ())
(3483 flat-environments #f #f ())
(3484 flat-environments #f #f ())
(3485 flat-environments #f #f ())
(3486 flat-environments #f #f ())
(3487 flat-environments #f #f ())
(3488 flat-environments #f #f ())
(3489 flat-environments #f #f ())
(3490 make-primop-call 3489 10 ())
(3491 flat-environments #f #f ())
(3492 make-cell-set! 3491 10 ())
(3493 flat-environments #f #f ())
(3494 make-cell-ref 3493 10 ())
(3495 flat-environments #f #f ())
(3496 make-unassigned-cell 3495 10 ())
(3497 flat-environments #f #f ())
(3498 make-cell 3497 10 ())
(3499 flat-environments #f #f ())
(3500 #f 3499 14 ())
(3501 #f 3500 29 ())
(3502 flat-environments #f #f ())
(3503 #f 3502 14 ())
(3504 flat-environments #f #f ())
(3505 #f 3504 14 ())
(3506 flat-environments #f #f ())
(3507 #f 3506 14 ())
(3508 flat-environments #f #f ())
(3509 #f 3508 14 ())
(3510 flat-environments #f #f ())
(3511 #f 3510 14 ())
(3512 flat-environments #f #f ())
(3513 flat-environments #f #f ())
(3514 flat-environments #f #f ())
(3515 flat-environments #f #f ())
(3516 flat-environments #f #f ())
(3517 flat-environments #f #f ())
(3518 no-sets 3517 10 ())
(3519 flat-environments #f #f ())
(3520 define-set-marker 3519 10 ())
(3521 flat-environments #f #f ())
(3522 #f 3521 14 ())
(3523 flat-environments #f #f ())
(3524 mark-set-variables! 3523 10 ())
(3525 flat-environments #f #f ())
(3526 assigned? 3525 10 ())
(3527 flat-environments #f #f ())
(3528 #f 3527 14 ())
(3529 #f 3528 20 ())
(3530 flat-environments #f #f ())
(3531 flatten-impure-letrec 3530 10 ())
(3532 #f 3531 13 ())
(3533 #f 3531 198 ())
(3534 flat-environments #f #f ())
(3535 flatten-pure-letrec 3534 10 ())
(3536 flat-environments #f #f ())
(3537 #f 3536 14 ())
(3538 flat-environments #f #f ())
(3539 #f 3538 14 ())
(3540 flat-environments #f #f ())
(3541 #f 3540 14 ())
(3542 flat-environments #f #f ())
(3543 #f 3542 14 ())
(3544 flat-environments #f #f ())
(3545 #f 3544 14 ())
(3546 flat-environments #f #f ())
(3547 add-cells 3546 10 ())
(3548 loop##519 3547 18 ())
(3549 flat-environments #f #f ())
(3550 convert-lambda-body 3549 10 ())
(3551 flat-environments #f #f ())
(3552 #f 3551 14 ())
(3553 #f 3552 20 ())
(3554 flat-environments #f #f ())
(3555 flatten-lambda 3554 10 ())
(3556 flat-environments #f #f ())
(3557 #f 3556 14 ())
(3558 flat-environments #f #f ())
(3559 flat-environments #f #f ())
(3560 flat-environments #f #f ())
(3561 flat-environments #f #f ())
(3562 no-free-vars 3561 10 ())
(3563 flat-environments #f #f ())
(3564 flatten-list 3563 10 ())
(3565 #f 3564 16 ())
(3566 flat-environments #f #f ())
(3567 define-flattener 3566 10 ())
(3568 flat-environments #f #f ())
(3569 #f 3568 14 ())
(3570 flat-environments #f #f ())
(3571 flatten-node 3570 10 ())
(3572 flat-environments #f #f ())
(3573 flatten-form 3572 10 ())
(3574 flat-environments #f #f ())
(3575 #f 3574 14 ())
(3576 #f 3575 9 ())
(3577 reconstruction #f #f ())
(3578 constant-type 3577 10 ())
(3579 reconstruction #f #f ())
(3580 reconstruction #f #f ())
(3581 reconstruction #f #f ())
(3582 reconstruct-apply 3581 10 ())
(3583 #f 3582 68 ())
(3584 reconstruction #f #f ())
(3585 #f 3584 14 ())
(3586 reconstruction #f #f ())
(3587 #f 3586 14 ())
(3588 #f 3587 20 ())
(3589 reconstruction #f #f ())
(3590 #f 3589 18 ())
(3591 reconstruction #f #f ())
(3592 define-primop-reconstructor 3591 10 ())
(3593 reconstruction #f #f ())
(3594 reconstruction #f #f ())
(3595 reconstruction #f #f ())
(3596 reconstruction #f #f ())
(3597 reconstruction #f #f ())
(3598 #f 3597 18 ())
(3599 reconstruction #f #f ())
(3600 #f 3599 18 ())
(3601 reconstruction #f #f ())
(3602 node->type 3601 10 ())
(3603 reconstruction #f #f ())
(3604 #f 3603 18 ())
(3605 reconstruction #f #f ())
(3606 reconstruct-letrec 3605 10 ())
(3607 #f 3606 45 ())
(3608 reconstruction #f #f ())
(3609 #f 3608 18 ())
(3610 reconstruction #f #f ())
(3611 #f 3610 18 ())
(3612 reconstruction #f #f ())
(3613 #f 3612 18 ())
(3614 reconstruction #f #f ())
(3615 #f 3614 18 ())
(3616 loop##520 3615 19 ())
(3617 reconstruction #f #f ())
(3618 reconstruction #f #f ())
(3619 fork-constraints 3618 10 ())
(3620 #f 3619 16 ())
(3621 reconstruction #f #f ())
(3622 #f 3621 18 ())
(3623 #f 3622 163 ())
(3624 reconstruction #f #f ())
(3625 #f 3624 16 ())
(3626 reconstruction #f #f ())
(3627 #f 3626 16 ())
(3628 reconstruction #f #f ())
(3629 #f 3628 18 ())
(3630 reconstruction #f #f ())
(3631 #f 3630 18 ())
(3632 reconstruction #f #f ())
(3633 reconstruct-call 3632 10 ())
(3634 lose 3633 133 ())
(3635 #f 3634 13 ())
(3636 loop 3633 213 ())
(3637 reconstruction #f #f ())
(3638 proc->reconstructor 3637 10 ())
(3639 reconstruction #f #f ())
(3640 #f 3639 18 ())
(3641 reconstruction #f #f ())
(3642 reconstruct-name 3641 10 ())
(3643 reconstruction #f #f ())
(3644 #f 3643 18 ())
(3645 reconstruction #f #f ())
(3646 careful-codomain 3645 10 ())
(3647 reconstruction #f #f ())
(3648 reconstruct-lambda 3647 10 ())
(3649 #f 3648 73 ())
(3650 reconstruction #f #f ())
(3651 #f 3650 18 ())
(3652 reconstruction #f #f ())
(3653 #f 3652 18 ())
(3654 reconstruction #f #f ())
(3655 define-reconstructor 3654 10 ())
(3656 reconstruction #f #f ())
(3657 #f 3656 14 ())
(3658 reconstruction #f #f ())
(3659 examine 3658 10 ())
(3660 reconstruction #f #f ())
(3661 reconstruct 3660 10 ())
(3662 reconstruction #f #f ())
(3663 reconstruct-type 3662 10 ())
(3664 reconstruction #f #f ())
(3665 node-type 3664 10 ())
(3666 compiler #f #f ())
(3667 compiler #f #f ())
(3668 loop 3667 62 ())
(3669 compiler #f #f ())
(3670 compiler #f #f ())
(3671 compiler #f #f ())
(3672 compiler #f #f ())
(3673 define-one-or-two 3672 10 ())
(3674 #f 3673 23 ())
(3675 #f 3673 39 ())
(3676 compiler #f #f ())
(3677 define-one-or-two 3676 10 ())
(3678 #f 3677 92 ())
(3679 #f 3677 108 ())
(3680 compiler #f #f ())
(3681 compiler #f #f ())
(3682 compiler #f #f ())
(3683 define=< 3682 10 ())
(3684 #f 3683 91 ())
(3685 #f 3683 106 ())
(3686 compiler #f #f ())
(3687 define+* 3686 10 ())
(3688 #f 3687 58 ())
(3689 #f 3687 74 ())
(3690 compiler #f #f ())
(3691 define-char-io 3690 10 ())
(3692 #f 3691 22 ())
(3693 #f 3691 37 ())
(3694 compiler #f #f ())
(3695 define-char-io 3694 10 ())
(3696 #f 3695 22 ())
(3697 #f 3695 37 ())
(3698 compiler #f #f ())
(3699 n-ary-constructor 3698 10 ())
(3700 #f 3699 26 ())
(3701 #f 3699 41 ())
(3702 compiler #f #f ())
(3703 #f 3702 24 ())
(3704 compiler #f #f ())
(3705 #f 3704 56 ())
(3706 #f 3705 131 ())
(3707 #f 3704 71 ())
(3708 compiler #f #f ())
(3709 #f 3708 20 ())
(3710 #f 3708 28 ())
(3711 compiler #f #f ())
(3712 #f 3711 82 ())
(3713 #f 3711 98 ())
(3714 compiler #f #f ())
(3715 #f 3714 80 ())
(3716 #f 3714 88 ())
(3717 compiler #f #f ())
(3718 #f 3717 64 ())
(3719 #f 3717 72 ())
(3720 compiler #f #f ())
(3721 compiler #f #f ())
(3722 compiler #f #f ())
(3723 compiler #f #f ())
(3724 compiler #f #f ())
(3725 compiler #f #f ())
(3726 compiler #f #f ())
(3727 compiler #f #f ())
(3728 #f 3727 10 ())
(3729 compiler #f #f ())
(3730 #f 3729 10 ())
(3731 compiler #f #f ())
(3732 compiler #f #f ())
(3733 compiler #f #f ())
(3734 compiler #f #f ())
(3735 compiler #f #f ())
(3736 loop##528 3735 15 ())
(3737 compiler #f #f ())
(3738 compiler #f #f ())
(3739 #f 3738 22 ())
(3740 compiler #f #f ())
(3741 #f 3740 22 ())
(3742 compiler #f #f ())
(3743 #f 3742 22 ())
(3744 compiler #f #f ())
(3745 compiler #f #f ())
(3746 compiler #f #f ())
(3747 compiler #f #f ())
(3748 compiler #f #f ())
(3749 compiler #f #f ())
(3750 compiler #f #f ())
(3751 compiler #f #f ())
(3752 compiler #f #f ())
(3753 #f 3752 22 ())
(3754 compiler #f #f ())
(3755 compiler #f #f ())
(3756 compiler #f #f ())
(3757 compiler #f #f ())
(3758 #f 3757 22 ())
(3759 compiler #f #f ())
(3760 #f 3759 22 ())
(3761 #f 3760 72 ())
(3762 #f 3760 165 ())
(3763 compiler #f #f ())
(3764 compiler #f #f ())
(3765 #f 3764 22 ())
(3766 loop 3765 104 ())
(3767 compiler #f #f ())
(3768 #f 3767 22 ())
(3769 compiler #f #f ())
(3770 #f 3769 22 ())
(3771 compiler #f #f ())
(3772 #f 3771 22 ())
(3773 compiler #f #f ())
(3774 #f 3773 22 ())
(3775 compiler #f #f ())
(3776 #f 3775 46 ())
(3777 compiler #f #f ())
(3778 #f 3777 46 ())
(3779 compiler #f #f ())
(3780 #f 3779 22 ())
(3781 compiler #f #f ())
(3782 #f 3781 14 ())
(3783 compiler #f #f ())
(3784 diagnose-call-error 3783 10 ())
(3785 #f 3784 189 ())
(3786 compiler #f #f ())
(3787 type-check 3786 10 ())
(3788 #f 3787 133 ())
(3789 compiler #f #f ())
(3790 compile 3789 10 ())
(3791 compiler #f #f ())
(3792 compile-expression 3791 10 ())
(3793 compiler #f #f ())
(3794 define-compilator 3793 10 ())
(3795 compiler #f #f ())
(3796 ignore-values-cont? 3795 10 ())
(3797 compiler #f #f ())
(3798 return-cont? 3797 10 ())
(3799 compiler #f #f ())
(3800 deliver-value 3799 10 ())
(3801 compiler #f #f ())
(3802 compile-constant 3801 10 ())
(3803 compiler #f #f ())
(3804 fixup-source 3803 10 ())
(3805 compiler #f #f ())
(3806 accept-values-cont? 3805 10 ())
(3807 compiler #f #f ())
(3808 maybe-push-continuation 3807 10 ())
(3809 compiler #f #f ())
(3810 make-cont 3809 10 ())
(3811 compiler #f #f ())
(3812 fall-through-cont 3811 10 ())
(3813 compiler #f #f ())
(3814 push-arguments 3813 10 ())
(3815 recur 3814 46 ())
(3816 compiler #f #f ())
(3817 compile-unknown-call 3816 10 ())
(3818 compiler #f #f ())
(3819 name-node-binding 3818 10 ())
(3820 compiler #f #f ())
(3821 compile-name-call 3820 10 ())
(3822 compiler #f #f ())
(3823 generate-trap 3822 10 ())
(3824 compiler #f #f ())
(3825 named-cont 3824 10 ())
(3826 compiler #f #f ())
(3827 push-all-with-names 3826 10 ())
(3828 compiler #f #f ())
(3829 set-lexical-offsets! 3828 10 ())
(3830 loop 3829 29 ())
(3831 compiler #f #f ())
(3832 name-node->symbol 3831 10 ())
(3833 compiler #f #f ())
(3834 return-cont 3833 10 ())
(3835 compiler #f #f ())
(3836 compile-lambda-code 3835 10 ())
(3837 compiler #f #f ())
(3838 cont-name 3837 10 ())
(3839 compiler #f #f ())
(3840 compile-redex 3839 10 ())
(3841 compiler #f #f ())
(3842 compile-call 3841 10 ())
(3843 compiler #f #f ())
(3844 empty-segment? 3843 10 ())
(3845 compiler #f #f ())
(3846 compile-lambda 3845 10 ())
(3847 compiler #f #f ())
(3848 really-compile-flat-lambda 3847 10 ())
(3849 #f 3848 190 ())
(3850 compiler #f #f ())
(3851 letrec-lambda-code 3850 10 ())
(3852 #f 3851 32 ())
(3853 #f 3851 83 ())
(3854 compiler #f #f ())
(3855 letrec-body-code 3854 10 ())
(3856 compiler #f #f ())
(3857 fall-through-cont? 3856 10 ())
(3858 compiler #f #f ())
(3859 ignore-values-cont 3858 10 ())
(3860 compiler #f #f ())
(3861 accept-values-cont 3860 10 ())
(3862 compiler #f #f ())
(3863 set-type-check?! 3862 10 ())
(3864 compiler #f #f ())
(3865 two-byte-offsetter 3864 10 ())
(3866 compiler #f #f ())
(3867 back-env-data 3866 10 ())
(3868 loop 3867 29 ())
(3869 compiler #f #f ())
(3870 figure-env-data 3869 10 ())
(3871 level-loop 3870 33 ())
(3872 loop 3871 77 ())
(3873 compiler #f #f ())
(3874 one-byte-offsetter 3873 10 ())
(3875 compiler #f #f ())
(3876 environment-code 3875 10 ())
(3877 #f 3876 89 ())
(3878 compiler #f #f ())
(3879 sort-list 3878 10 ())
(3880 insert 3879 18 ())
(3881 sort 3879 40 ())
(3882 compiler #f #f ())
(3883 get-variables-offsets 3882 10 ())
(3884 loop 3883 29 ())
(3885 compiler #f #f ())
(3886 compile-flat-environment 3885 10 ())
(3887 #f 3886 31 ())
(3888 compiler #f #f ())
(3889 compile-flat-lambda 3888 10 ())
(3890 compiler #f #f ())
(3891 push-all-but-last 3890 10 ())
(3892 recur 3891 33 ())
(3893 compiler #f #f ())
(3894 direct-compilator 3893 10 ())
(3895 #f 3894 16 ())
(3896 compiler #f #f ())
(3897 direct-closed-compilator 3896 10 ())
(3898 #f 3897 16 ())
(3899 compiler #f #f ())
(3900 nargs->domain 3899 10 ())
(3901 loop##534 3900 14 ())
(3902 compiler #f #f ())
(3903 get-primop-type 3902 10 ())
(3904 #f 3903 20 ())
(3905 compiler #f #f ())
(3906 simple-compilator 3905 10 ())
(3907 #f 3906 16 ())
(3908 compiler #f #f ())
(3909 simple-closed-compilator 3908 10 ())
(3910 #f 3909 17 ())
(3911 compiler #f #f ())
(3912 define-simple-primitive 3911 10 ())
(3913 compiler #f #f ())
(3914 symbol-append 3913 10 ())
(3915 compiler #f #f ())
(3916 define-stob-predicate 3915 10 ())
(3917 compiler #f #f ())
(3918 define-data-struct-primitives 3917 10 ())
(3919 def-prim 3918 11 ())
(3920 loop##537 3918 222 ())
(3921 compiler #f #f ())
(3922 define-vector-primitives 3921 10 ())
(3923 def-prim 3922 38 ())
(3924 compiler #f #f ())
(3925 unflatten-form 3924 10 ())
(3926 compiler #f #f ())
(3927 thunk-node? 3926 10 ())
(3928 compiler #f #f ())
(3929 thunk-body 3928 10 ())
(3930 compiler #f #f ())
(3931 compile-call-with-values-producer 3930 10 ())
(3932 compiler #f #f ())
(3933 compile-call-with-values 3932 10 ())
(3934 compiler #f #f ())
(3935 n-ary-primitive-compilator 3934 10 ())
(3936 #f 3935 17 ())
(3937 compiler #f #f ())
(3938 define-n-ary-compiler-primitive 3937 10 ())
(3939 compiler #f #f ())
(3940 call-on-arg-and-id 3939 10 ())
(3941 compiler #f #f ())
(3942 call-on-args 3941 10 ())
(3943 do-arg 3942 18 ())
(3944 loop 3942 77 ())
(3945 compiler #f #f ())
(3946 make-dispatch-protocol 3945 10 ())
(3947 compiler #f #f ())
(3948 compile-definition 3947 10 ())
(3949 compiler #f #f ())
(3950 compile-form 3949 10 ())
(3951 #f 3950 28 ())
(3952 compiler #f #f ())
(3953 compile-forms-loop 3952 10 ())
(3954 compiler #f #f ())
(3955 compile-forms 3954 10 ())
(3956 compiler #f #f ())
(3957 append-templates 3956 10 ())
(3958 #f 3957 43 ())
(3959 compiler #f #f ())
(3960 make-startup-procedure 3959 10 ())
(3961 compiler #f #f ())
(3962 evaluation #f #f ())
(3963 compile-and-run 3962 10 ())
(3964 #f 3963 75 ())
(3965 #f 3964 19 ())
(3966 evaluation #f #f ())
(3967 really-load-into 3966 10 ())
(3968 evaluation #f #f ())
(3969 load 3968 10 ())
(3970 evaluation #f #f ())
(3971 eval-from-file 3970 10 ())
(3972 evaluation #f #f ())
(3973 load-into 3972 10 ())
(3974 evaluation #f #f ())
(3975 eval 3974 10 ())
(3976 scheme #f #f ())
(3977 display-conditions #f #f ())
(3978 limited-write 3977 10 ())
(3979 recur 3978 31 ())
(3980 #f 3979 167 ())
(3981 #f 3980 53 ())
(3982 display-conditions #f #f ())
(3983 &disclose-condition 3982 57 ())
(3984 display-conditions #f #f ())
(3985 display-conditions #f #f ())
(3986 display-conditions #f #f ())
(3987 display-conditions #f #f ())
(3988 display-conditions #f #f ())
(3989 really-display-condition 3988 10 ())
(3990 #f 3989 264 ())
(3991 display-conditions #f #f ())
(3992 display-condition 3991 33 ())
(3993 #f 3992 24 ())
(3994 mini-command #f #f ())
(3995 read-string 3994 10 ())
(3996 loop 3995 31 ())
(3997 mini-command #f #f ())
(3998 mini-load 3997 10 ())
(3999 mini-command #f #f ())
(4000 command-processor 3999 10 ())
(4001 loop 4000 95 ())
(4002 #f 4001 23 ())
(4003 #f 4002 21 ())
(4004 #f 4003 74 ())
(4005 #f 4002 42 ())
(4006 #f 4005 81 ())
(4007 #f 4005 217 ())
(4008 #f 4005 303 ())
(4009 enum-case #f #f ())
(4010 scheduler #f #f ())
(4011 decrement-counter! 4010 10 ())
(4012 scheduler #f #f ())
(4013 increment-counter! 4012 10 ())
(4014 scheduler #f #f ())
(4015 scheduler #f #f ())
(4016 make-counter 4015 10 ())
(4017 scheduler #f #f ())
(4018 round-robin-event-handler 4017 10 ())
(4019 thread-event-handler 4018 24 ())
(4020 asynchronous-event-handler 4018 26 ())
(4021 next-thread 4018 28 ())
(4022 scheduler #f #f ())
(4023 run-threads-with-housekeeper 4022 10 ())
(4024 loop 4023 65 ())
(4025 scheduler #f #f ())
(4026 run-threads 4025 10 ())
(4027 loop 4026 60 ())
(4028 root-scheduler #f #f ())
(4029 root-scheduler #f #f ())
(4030 spawn-output-forcers 4029 10 ())
(4031 root-scheduler #f #f ())
(4032 call-when-deadlocked! 4031 10 ())
(4033 root-scheduler #f #f ())
(4034 root-scheduler #f #f ())
(4035 do-some-waiting 4034 10 ())
(4036 root-scheduler #f #f ())
(4037 root-scheduler #f #f ())
(4038 root-wait 4037 10 ())
(4039 root-scheduler #f #f ())
(4040 scheme-exit-now 4039 10 ())
(4041 root-scheduler #f #f ())
(4042 root-scheduler #f #f ())
(4043 cheap-display-condition 4042 10 ())
(4044 #f 4043 182 ())
(4045 root-scheduler #f #f ())
(4046 root-handler 4045 10 ())
(4047 root-scheduler #f #f ())
(4048 make-root-event-handler 4047 10 ())
(4049 #f 4048 127 ())
(4050 #f 4048 142 ())
(4051 root-scheduler #f #f ())
(4052 root-scheduler 4051 10 ())
(4053 #f 4052 38 ())
(4054 #f 4053 36 ())
(4055 #f 4053 58 ())
(4056 usual-resumer #f #f ())
(4057 usual-resumer #f #f ())
(4058 initialize-rts 4057 10 ())
(4059 #f 4058 41 ())
(4060 #f 4059 20 ())
(4061 #f 4060 62 ())
(4062 #f 4061 13 ())
(4063 usual-resumer #f #f ())
(4064 usual-resumer 4063 10 ())
(4065 #f 4064 16 ())
(4066 #f 4065 29 ())
(4067 initial-system #f #f ())
(4068 make-tower 4067 10 ())
(4069 initial-system #f #f ())
(4070 make-initial-package 4069 10 ())
(4071 #f 4070 27 ())
(4072 initial-system #f #f ())
(4073 initialize-interaction-environment! 4072 10 ())
(4074 initial-system #f #f ())
(4075 make-built-in-structures 4074 10 ())
(4076 #f 4075 50 ())
(4077 #f 4075 84 ())
(4078 initial-system #f #f ())
(4079 start 4078 10 ())
(4080 #f 4079 16 ())
(4081 #f 4080 19 ())
(4082 #f 4081 84 ())
(4083 usual-macros #f #f ())
(4084 find-free-names-in-syntax-rules 4083 10 ())
(4085 meta-variables 4084 18 ())
(4086 free-names 4084 20 ())
(4087 loop##558 4084 36 ())
(4088 usual-macros #f #f ())
(4089 usual-macros #f #f ())
(4090 segment-tail 4089 10 ())
(4091 loop 4090 24 ())
(4092 usual-macros #f #f ())
(4093 segment-depth 4092 10 ())
(4094 usual-macros #f #f ())
(4095 segment-template? 4094 10 ())
(4096 usual-macros #f #f ())
(4097 segment-pattern? 4096 10 ())
(4098 usual-macros #f #f ())
(4099 process-rules 4098 10 ())
(4100 #f 4099 643 ())
(4101 #f 4099 670 ())
(4102 #f 4101 122 ())
(4103 #f 4099 706 ())
(4104 #f 4099 727 ())
(4105 #f 4099 756 ())
(4106 #f 4105 126 ())
(4107 #f 4099 786 ())
(4108 loop##562 4107 333 ())
(4109 #f 4099 810 ())
(4110 #f 4099 831 ())
(4111 usual-macros #f #f ())
(4112 #f 4111 14 ())
(4113 usual-macros #f #f ())
(4114 #f 4113 14 ())
(4115 #f 4114 235 ())
(4116 #f 4114 256 ())
(4117 #f 4114 282 ())
(4118 #f 4114 306 ())
(4119 #f 4118 33 ())
(4120 #f 4119 33 ())
(4121 #f 4114 329 ())
(4122 #f 4121 39 ())
(4123 #f 4114 350 ())
(4124 usual-macros #f #f ())
(4125 case-clause? 4124 10 ())
(4126 usual-macros #f #f ())
(4127 #f 4126 14 ())
(4128 #f 4127 41 ())
(4129 #f 4127 256 ())
(4130 usual-macros #f #f ())
(4131 #f 4130 14 ())
(4132 usual-macros #f #f ())
(4133 specs? 4132 10 ())
(4134 usual-macros #f #f ())
(4135 #f 4134 14 ())
(4136 usual-macros #f #f ())
(4137 #f 4136 14 ())
(4138 usual-macros #f #f ())
(4139 do-spec? 4138 10 ())
(4140 usual-macros #f #f ())
(4141 #f 4140 14 ())
(4142 #f 4141 247 ())
(4143 usual-macros #f #f ())
(4144 #f 4143 14 ())
(4145 recur 4144 98 ())
(4146 usual-macros #f #f ())
(4147 #f 4146 14 ())
(4148 usual-macros #f #f ())
(4149 usual-transform 4148 10 ())
(4150 usual-macros #f #f ())
(4151 define-usual-macro 4150 10 ())
(4152 usual-macros #f #f ())
(4153 strong #f #f ())
(4154 pop-vertex-edge! 4153 10 ())
(4155 strong #f #f ())
(4156 follow-edge 4155 10 ())
(4157 strong #f #f ())
(4158 unwind-stack 4157 10 ())
(4159 loop 4158 30 ())
(4160 strong #f #f ())
(4161 end-vertex 4160 10 ())
(4162 strong #f #f ())
(4163 get-strong 4162 10 ())
(4164 strong #f #f ())
(4165 do-vertex 4164 10 ())
(4166 strong #f #f ())
(4167 make-vertices 4166 10 ())
(4168 maybe-slot 4167 16 ())
(4169 #f 4167 38 ())
(4170 #f 4167 71 ())
(4171 strong #f #f ())
(4172 make-vertex 4171 10 ())
(4173 strong #f #f ())
(4174 vertex? 4173 10 ())
(4175 strong #f #f ())
(4176 vertex-data 4175 10 ())
(4177 strong #f #f ())
(4178 set-vertex-edges! 4177 10 ())
(4179 strong #f #f ())
(4180 vertex-edges 4179 10 ())
(4181 strong #f #f ())
(4182 set-vertex-stack! 4181 10 ())
(4183 strong #f #f ())
(4184 vertex-stack 4183 10 ())
(4185 strong #f #f ())
(4186 set-vertex-index! 4185 10 ())
(4187 strong #f #f ())
(4188 vertex-index 4187 10 ())
(4189 strong #f #f ())
(4190 set-vertex-parent! 4189 10 ())
(4191 strong #f #f ())
(4192 vertex-parent 4191 10 ())
(4193 strong #f #f ())
(4194 set-vertex-lowpoint! 4193 10 ())
(4195 strong #f #f ())
(4196 vertex-lowpoint 4195 10 ())
(4197 strong #f #f ())
(4198 really-make-vertex 4197 10 ())
(4199 strong #f #f ())
(4200 strong #f #f ())
(4201 find-next-vertex 4200 10 ())
(4202 loop##585 4201 18 ())
(4203 strong #f #f ())
(4204 strongly-connected-components 4203 10 ())
(4205 loop 4204 62 ())
(4206 #f 4205 51 ())
(4207 usages #f #f ())
(4208 insert-aliases 4207 10 ())
(4209 loop 4208 25 ())
(4210 usages #f #f ())
(4211 make-form 4210 10 ())
(4212 usages #f #f ())
(4213 #f 4212 14 ())
(4214 usages #f #f ())
(4215 form? 4214 10 ())
(4216 usages #f #f ())
(4217 form-node 4216 10 ())
(4218 usages #f #f ())
(4219 set-form-aliases! 4218 10 ())
(4220 usages #f #f ())
(4221 form-aliases 4220 10 ())
(4222 usages #f #f ())
(4223 set-form-unaliased?! 4222 10 ())
(4224 usages #f #f ())
(4225 form-unaliased? 4224 10 ())
(4226 usages #f #f ())
(4227 set-form-free! 4226 10 ())
(4228 usages #f #f ())
(4229 form-free 4228 10 ())
(4230 usages #f #f ())
(4231 set-form-temp! 4230 10 ())
(4232 usages #f #f ())
(4233 form-temp 4232 10 ())
(4234 usages #f #f ())
(4235 really-make-form 4234 10 ())
(4236 usages #f #f ())
(4237 usages #f #f ())
(4238 topologically-sort 4237 10 ())
(4239 #f 4238 23 ())
(4240 #f 4239 9 ())
(4241 #f 4239 28 ())
(4242 usages #f #f ())
(4243 maybe-make-aliased 4242 10 ())
(4244 usages #f #f ())
(4245 stuff-count 4244 10 ())
(4246 #f 4245 13 ())
(4247 usages #f #f ())
(4248 sort-forms 4247 10 ())
(4249 #f 4248 95 ())
(4250 #f 4248 140 ())
(4251 usages #f #f ())
(4252 usages #f #f ())
(4253 usages #f #f ())
(4254 usages #f #f ())
(4255 usages #f #f ())
(4256 usages #f #f ())
(4257 usages #f #f ())
(4258 usages #f #f ())
(4259 usages #f #f ())
(4260 usages #f #f ())
(4261 usage-incrementator 4260 10 ())
(4262 #f 4261 17 ())
(4263 usages #f #f ())
(4264 package-usage? 4263 10 ())
(4265 usages #f #f ())
(4266 make-package-usage 4265 10 ())
(4267 usages #f #f ())
(4268 make-usage 4267 10 ())
(4269 usages #f #f ())
(4270 usage? 4269 10 ())
(4271 usages #f #f ())
(4272 usage-name-node 4271 10 ())
(4273 usages #f #f ())
(4274 set-reference! 4273 10 ())
(4275 usages #f #f ())
(4276 usage-reference-count 4275 10 ())
(4277 usages #f #f ())
(4278 set-operator! 4277 10 ())
(4279 usages #f #f ())
(4280 usage-operator-count 4279 10 ())
(4281 usages #f #f ())
(4282 set-assignment! 4281 10 ())
(4283 usages #f #f ())
(4284 usage-assignment-count 4283 10 ())
(4285 usages #f #f ())
(4286 really-make-usage 4285 10 ())
(4287 usages #f #f ())
(4288 usages #f #f ())
(4289 #f 4288 18 ())
(4290 usages #f #f ())
(4291 #f 4290 18 ())
(4292 usages #f #f ())
(4293 #f 4292 18 ())
(4294 usages #f #f ())
(4295 #f 4294 18 ())
(4296 usages #f #f ())
(4297 #f 4296 18 ())
(4298 usages #f #f ())
(4299 #f 4298 18 ())
(4300 usages #f #f ())
(4301 analyze-letrec 4300 10 ())
(4302 #f 4301 13 ())
(4303 usages #f #f ())
(4304 #f 4303 18 ())
(4305 usages #f #f ())
(4306 #f 4305 18 ())
(4307 usages #f #f ())
(4308 #f 4307 18 ())
(4309 #f 4308 41 ())
(4310 usages #f #f ())
(4311 #f 4310 16 ())
(4312 usages #f #f ())
(4313 add-if-free 4312 10 ())
(4314 usages #f #f ())
(4315 #f 4314 16 ())
(4316 usages #f #f ())
(4317 usages #f #f ())
(4318 usages #f #f ())
(4319 usages #f #f ())
(4320 usages #f #f ())
(4321 usages #f #f ())
(4322 nothing 4321 10 ())
(4323 usages #f #f ())
(4324 define-usage-analyzer 4323 10 ())
(4325 usages #f #f ())
(4326 #f 4325 14 ())
(4327 usages #f #f ())
(4328 analyze-nodes 4327 10 ())
(4329 #f 4328 16 ())
(4330 usages #f #f ())
(4331 analyze 4330 10 ())
(4332 usages #f #f ())
(4333 find-node-usages 4332 10 ())
(4334 #f 4333 42 ())
(4335 #f 4333 61 ())
(4336 usages #f #f ())
(4337 maybe-update-known-type 4336 10 ())
(4338 usages #f #f ())
(4339 find-usages 4338 10 ())
(4340 #f 4339 35 ())
(4341 #f 4339 64 ())
(4342 #f 4341 34 ())
(4343 #f 4339 93 ())
(4344 inline #f #f ())
(4345 inline #f #f ())
(4346 inline #f #f ())
(4347 inline #f #f ())
(4348 inline #f #f ())
(4349 inline #f #f ())
(4350 get-qualified-env 4349 10 ())
(4351 inline #f #f ())
(4352 qualified->name 4351 10 ())
(4353 recur 4352 25 ())
(4354 inline #f #f ())
(4355 inline #f #f ())
(4356 inline #f #f ())
(4357 reconstitute-name 4356 10 ())
(4358 inline #f #f ())
(4359 reconstitute 4358 10 ())
(4360 label 4359 26 ())
(4361 inline #f #f ())
(4362 make-substitution 4361 10 ())
(4363 #f 4362 44 ())
(4364 inline #f #f ())
(4365 inline-transform 4364 10 ())
(4366 #f 4365 69 ())
(4367 #f 4365 89 ())
(4368 inline #f #f ())
(4369 unused-name 4368 10 ())
(4370 loop##608 4369 59 ())
(4371 #f 4370 20 ())
(4372 inline #f #f ())
(4373 clean-lookup 4372 10 ())
(4374 inline #f #f ())
(4375 clean-lambda 4374 10 ())
(4376 #f 4375 41 ())
(4377 recur 4375 102 ())
(4378 inline #f #f ())
(4379 clean-node 4378 10 ())
(4380 #f 4379 147 ())
(4381 #f 4379 331 ())
(4382 inline #f #f ())
(4383 make-inline-transform 4382 10 ())
(4384 #f 4383 54 ())
(4385 #f 4383 118 ())
(4386 loop##609 4385 14 ())
(4387 for-reification #f #f ())
(4388 package-define-static! 4387 10 ())
(4389 for-reification #f #f ())
(4390 transform 4389 10 ())
(4391 for-reification #f #f ())
(4392 package 4391 10 ())
(4393 loop##611 4392 89 ())
(4394 for-reification #f #f ())
(4395 simple-interface 4394 10 ())
(4396 #f 4395 15 ())
(4397 for-reification #f #f ())
(4398 primop 4397 10 ())
(4399 for-reification #f #f ())
(4400 operator 4399 10 ())
(4401 locks #f #f ())
(4402 locks #f #f ())
(4403 set-lock-owner-uid! 4402 10 ())
(4404 locks #f #f ())
(4405 lock-owner-uid 4404 10 ())
(4406 locks #f #f ())
(4407 lock-queue 4406 10 ())
(4408 locks #f #f ())
(4409 lock-uid 4408 10 ())
(4410 locks #f #f ())
(4411 really-make-lock 4410 10 ())
(4412 locks #f #f ())
(4413 locks #f #f ())
(4414 lock? 4413 10 ())
(4415 locks #f #f ())
(4416 next-uid 4415 10 ())
(4417 #f 4416 6 ())
(4418 locks #f #f ())
(4419 make-lock 4418 10 ())
(4420 locks #f #f ())
(4421 obtain-lock 4420 10 ())
(4422 lose 4421 31 ())
(4423 locks #f #f ())
(4424 maybe-obtain-lock 4423 10 ())
(4425 lose 4424 31 ())
(4426 locks #f #f ())
(4427 release-lock 4426 10 ())
(4428 lose 4427 31 ())
(4429 types #f #f ())
(4430 types #f #f ())
(4431 types #f #f ())
(4432 types #f #f ())
(4433 types #f #f ())
(4434 types #f #f ())
(4435 types #f #f ())
(4436 types #f #f ())
(4437 types #f #f ())
(4438 types #f #f ())
(4439 types #f #f ())
(4440 types #f #f ())
(4441 types #f #f ())
(4442 types #f #f ())
(4443 types #f #f ())
(4444 types #f #f ())
(4445 types #f #f ())
(4446 types #f #f ())
(4447 types #f #f ())
(4448 types #f #f ())
(4449 types #f #f ())
(4450 types #f #f ())
(4451 procedure 4450 10 ())
(4452 types #f #f ())
(4453 types #f #f ())
(4454 types #f #f ())
(4455 types #f #f ())
(4456 defpackage #f #f ())
(4457 note-name! 4456 10 ())
(4458 defpackage #f #f ())
(4459 set-verify-later! 4458 10 ())
(4460 defpackage #f #f ())
(4461 verify-later! 4460 10 ())
(4462 defpackage #f #f ())
(4463 *verify-later!* 4462 10 ())
(4464 defpackage #f #f ())
(4465 defpackage #f #f ())
(4466 loser 4465 10 ())
(4467 defpackage #f #f ())
(4468 make-a-package 4467 10 ())
(4469 scan-package #f #f ())
(4470 check-structure 4469 10 ())
(4471 #f 4470 40 ())
(4472 scan-package #f #f ())
(4473 package-optimizer-names 4472 10 ())
(4474 #f 4473 40 ())
(4475 #f 4473 89 ())
(4476 scan-package #f #f ())
(4477 read-files 4476 10 ())
(4478 #f 4477 44 ())
(4479 scan-package #f #f ())
(4480 package-source 4479 10 ())
(4481 #f 4480 65 ())
(4482 scan-package #f #f ())
(4483 collect-packages 4482 10 ())
(4484 recur 4483 68 ())
(4485 #f 4484 184 ())
(4486 compile-packages #f #f ())
(4487 compile-packages #f #f ())
(4488 compile-packages #f #f ())
(4489 make-define-primitive-node 4488 10 ())
(4490 compile-packages #f #f ())
(4491 define-primitives 4490 10 ())
(4492 #f 4491 37 ())
(4493 #f 4491 70 ())
(4494 compile-packages #f #f ())
(4495 define-usual-transform 4494 10 ())
(4496 compile-packages #f #f ())
(4497 expand-package 4496 10 ())
(4498 #f 4497 53 ())
(4499 #f 4497 82 ())
(4500 #f 4497 143 ())
(4501 #f 4500 25 ())
(4502 #f 4501 23 ())
(4503 compile-packages #f #f ())
(4504 compile-package 4503 10 ())
(4505 module-system #f #f ())
(4506 analysis #f #f ())
(4507 analysis #f #f ())
(4508 analysis #f #f ())
(4509 analysis #f #f ())
(4510 analysis #f #f ())
(4511 analysis #f #f ())
(4512 package-lookup-type 4511 10 ())
(4513 analysis #f #f ())
(4514 analysis #f #f ())
(4515 require 4514 10 ())
(4516 analysis #f #f ())
(4517 simple-literal? 4516 10 ())
(4518 analysis #f #f ())
(4519 analysis #f #f ())
(4520 analysis #f #f ())
(4521 primitive-proc? 4520 10 ())
(4522 analysis #f #f ())
(4523 really-simple-call? 4522 10 ())
(4524 analysis #f #f ())
(4525 static-value 4524 10 ())
(4526 analysis #f #f ())
(4527 #f 4526 14 ())
(4528 analysis #f #f ())
(4529 #f 4528 14 ())
(4530 loop 4529 28 ())
(4531 analysis #f #f ())
(4532 #f 4531 14 ())
(4533 analysis #f #f ())
(4534 #f 4533 14 ())
(4535 analysis #f #f ())
(4536 #f 4535 14 ())
(4537 analysis #f #f ())
(4538 #f 4537 14 ())
(4539 analysis #f #f ())
(4540 #f 4539 14 ())
(4541 analysis #f #f ())
(4542 #f 4541 14 ())
(4543 analysis #f #f ())
(4544 #f 4543 14 ())
(4545 analysis #f #f ())
(4546 #f 4545 14 ())
(4547 analysis #f #f ())
(4548 #f 4547 14 ())
(4549 analysis #f #f ())
(4550 #f 4549 14 ())
(4551 analysis #f #f ())
(4552 #f 4551 14 ())
(4553 analysis #f #f ())
(4554 define-analyzer 4553 10 ())
(4555 analysis #f #f ())
(4556 #f 4555 14 ())
(4557 analysis #f #f ())
(4558 simple-list? 4557 10 ())
(4559 analysis #f #f ())
(4560 simple? 4559 10 ())
(4561 analysis #f #f ())
(4562 analysis #f #f ())
(4563 simple-lambda? 4562 10 ())
(4564 #f 4563 133 ())
(4565 analysis #f #f ())
(4566 inlinable-rhs? 4565 10 ())
(4567 analysis #f #f ())
(4568 analyze-form 4567 10 ())
(4569 analysis #f #f ())
(4570 analyze-forms 4569 10 ())
(4571 #f 4570 40 ())
(4572 analysis #f #f ())
(4573 #f 4572 14 ())
(4574 ensures-loaded #f #f ())
(4575 ensure-loaded 4574 10 ())
(4576 #f 4575 64 ())
(4577 #f 4576 70 ())
(4578 #f 4575 79 ())
(4579 #f #f #f ())
(4580 #f 4579 6 ())
(4581 get-location 4580 6 ())
(4582 #f 4580 14775 ())
(4583 #f 4580 14837 ())
(4584 #f 4580 14981 ())
(4585 #f 4580 15128 ())
(4586 #f 4580 15231 ())
(4587 conc 4586 42 ())
(4588 #f 4587 19 ())
(4589 #f 4580 16836 ())
(4590 loop 4589 120 ())
(4591 #f 4589 208 ())
(4592 #f 4589 244 ())
(4593 #f 4589 448 ())
(4594 #f 4589 517 ())
(4595 #f 4580 17304 ())
(4596 mem? 4595 212 ())
(4597 every? 4595 214 ())
(4598 #f 4595 234 ())
(4599 #f 4595 313 ())
(4600 #f 4580 17543 ())
(4601 mem? 4600 84 ())
(4602 loop##640 4600 105 ())
(4603 #f 4580 17605 ())
(4604 #f 4580 17667 ())
(4605 #f 4580 17858 ())
(4606 #f 4580 23898 ())
(4607 #f 4580 33910 ())
(4608 #f 4607 494 ())
(4609 #f 4580 34646 ())
(4610 #f 4580 34973 ())
(4611 #f 4580 35120 ())
(4612 #f 4580 35355 ())
(4613 #f 4580 35458 ())
(4614 loop 4613 172 ())
(4615 #f 4613 307 ())
(4616 #f 4613 349 ())
(4617 #f 4613 559 ())
(4618 #f 4613 866 ())
(4619 #f 4580 35693 ())
(4620 #f 4580 36295 ())
(4621 #f 4580 36357 ())
(4622 #f 4580 36419 ())
(4623 #f 4580 37656 ())
(4624 loop 4623 108 ())
(4625 #f 4580 37862 ())
(4626 loop 4625 108 ())
(4627 #f 4580 38027 ())
(4628 loop 4627 108 ())
(4629 #f 4580 38151 ())
(4630 loop 4629 108 ())
(4631 #f 4580 38275 ())
(4632 loop 4631 108 ())
(4633 #f 4580 38399 ())
(4634 loop 4633 108 ())
(4635 #f 4580 38523 ())
(4636 loop 4635 108 ())
(4637 #f 4580 38647 ())
(4638 loop 4637 108 ())
(4639 #f 4580 38771 ())
(4640 loop 4639 108 ())
(4641 #f 4580 39645 ())
(4642 loop 4641 108 ())
(4643 #f 4580 43356 ())
(4644 #f 4580 43555 ())
(4645 #f 4580 43617 ())
(4646 #f 4580 43679 ())
(4647 #f 4580 43864 ())
(4648 #f 4580 44138 ())
(4649 #f 4580 48751 ())
(4650 #f 4580 48950 ())
(4651 #f 4580 49193 ())
(4652 #f 4580 49255 ())
(4653 #f 4580 49317 ())
(4654 #f 4653 164 ())
(4655 #f 4580 49379 ())
(4656 #f 4655 355 ())
(4657 #f 4655 449 ())
(4658 #f 4580 49792 ())
(4659 #f 4580 49854 ())
(4660 #f 4659 198 ())
(4661 parse-package-clauses 4580 49925 ())
(4662 loop 4661 94 ())
(4663 #f 4580 49938 ())
(4664 #f 4663 214 ())
(4665 #f 4580 50259 ())
(4666 #f 4580 50362 ())
(4667 #f 4580 50424 ())
(4668 loop 4667 42 ())
(4669 #f 4580 50568 ())
(4670 #f 4580 50671 ())
(4671 #f 4580 50774 ())
(4672 #f 4580 50877 ())
(4673 loop 4672 54 ())
(4674 #f 4672 96 ())
(4675 #f 4672 125 ())
(4676 #f 4580 50980 ())
(4677 #f 4580 52226 ())
(4678 #f 4580 52396 ())
(4679 #f #f #f ())
-
