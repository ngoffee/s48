; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 record-types)
(17 export-the-record-type)
(18 define-record-types)
(19 methods)
(20 number-i/o)
(21 fluids)
(22 wind)
(23 session-data)
(24 i/o)
(25 channel-i/o)
(26 channel-ports)
(27 conditions)
(28 writing)
(29 reading)
(30 scheme-level-2)
(31 features)
(32 templates)
(33 continuations)
(34 more-types)
(35 enumerated)
(36 architecture)
(37 exceptions)
(38 interrupts)
(39 threads)
(40 proposals)
(41 scheduler)
(42 root-scheduler)
(43 enum-case)
(44 queues)
(45 locks)
(46 condvars)
(47 usual-resumer)
(48 weak)
(49 display-conditions)
(50 meta-types)
(51 bindings)
(52 names)
(53 thingies)
(54 nodes)
(55 compiler-envs)
(56 syntactic)
(57 usual-macros)
(58 var-utilities)
(59 debug-data)
(60 stack-check)
(61 segments)
(62 primops)
(63 reconstruction)
(64 compiler)
(65 reading-forms)
(66 flat-environments)
(67 interfaces)
(68 packages)
(69 scan-package)
(70 optimizer)
(71 compile-packages)
(72 defpackage)
(73 types)
(74 module-system)
(75 usages)
(76 analysis)
(77 inline)
(78 strong)
(79 tables)
(80 filenames)
(81 environments)
(82 evaluation)
(83 ensures-loaded)
(84 for-reification)
(85 scheme)
(86 mini-command)
(87 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (flat-lambda . 14))
(14 (primitive-procedure . 14))
(15 (define . 14))
(16 (if . 14))
(17 (pure-letrec . 14))
(18 (letrec-syntax . 14))
(19 (%file-name% . 14))
(20 (let-syntax . 14))
(21 (structure-ref . 14))
(22 (loophole . 14))
(23 (letrec . 14))
(24 (lap . 14))
(25 (set! . 14))
(26 (call . 14))
(27 (atan . 14))
(28 (set-location-defined?! . 14))
(29 (acos . 14))
(30 (vm-extension . 14))
(31 (asin . 14))
(32 (location-defined? . 14))
(33 (time . 14))
(34 (template-set! . 14))
(35 (set-current-proposal! . 14))
(36 (cons . 14))
(37 (wait . 14))
(38 (trap . 14))
(39 (assq . 14))
(40 (current-proposal . 14))
(41 (make-weak-pointer . 14))
(42 (lookup-shared-binding . 14))
(43 (push . 14))
(44 (provisional-set-contents! . 14))
(45 (set-contents! . 14))
(46 (read-char . 14))
(47 (provisional-contents . 14))
(48 (make-cell . 14))
(49 (sqrt . 14))
(50 (* . 14))
(51 (contents . 14))
(52 (+ . 14))
(53 (peek-char . 14))
(54 (- . 14))
(55 (continuation-set! . 14))
(56 (/ . 14))
(57 (weak-pointer? . 14))
(58 (atan1 . 14))
(59 (atan2 . 14))
(60 (quotient . 14))
(61 (close-channel . 14))
(62 (channel-abort . 14))
(63 (char? . 14))
(64 (< . 14))
(65 (= . 14))
(66 (provisional-set-port-data! . 14))
(67 (cell? . 14))
(68 (> . 14))
(69 (make-location . 14))
(70 (imag-part . 14))
(71 (set-port-data! . 14))
(72 (make-template . 14))
(73 (real? . 14))
(74 (real-part . 14))
(75 (provisional-port-data . 14))
(76 (record-length . 14))
(77 (port-data . 14))
(78 (pair? . 14))
(79 (provisional-set-port-lock! . 14))
(80 (make-port . 14))
(81 (set-port-lock! . 14))
(82 (bit-count . 14))
(83 (provisional-checked-record-ref . 14))
(84 (return-from-exception . 14))
(85 (provisional-port-lock . 14))
(86 (location? . 14))
(87 (checked-record-ref . 14))
(88 (channel-maybe-read . 14))
(89 (add-finalizer! . 14))
(90 (rational? . 14))
(91 (template? . 14))
(92 (port-lock . 14))
(93 (vector-length . 14))
(94 (make-continuation . 14))
(95 (provisional-shared-binding-ref . 14))
(96 (string-length . 14))
(97 (shared-binding-ref . 14))
(98 (port? . 14))
(99 (angle . 14))
(100 (false . 14))
(101 (remainder . 14))
(102 (continuation? . 14))
(103 (channel-ready? . 14))
(104 (binary-reduce1 . 14))
(105 (binary-reduce2 . 14))
(106 (char<? . 14))
(107 (char=? . 14))
(108 (<= . 14))
(109 (magnitude . 14))
(110 (>= . 14))
(111 (with-continuation . 14))
(112 (floor . 14))
(113 (provisional-checked-record-set! . 14))
(114 (apply . 14))
(115 (memory-status . 14))
(116 (checked-record-set! . 14))
(117 (exact->inexact . 14))
(118 (inexact->exact . 14))
(119 (error . 14))
(120 (extended-number-length . 14))
(121 (open-channels-list . 14))
(122 (provisional-shared-binding-set! . 14))
(123 (channel-id . 14))
(124 (shared-binding-set! . 14))
(125 (numerator . 14))
(126 (eof-object . 14))
(127 (byte-vector-length . 14))
(128 (record-ref . 14))
(129 (make-polar . 14))
(130 (write-char . 14))
(131 (symbol->string . 14))
(132 (exact? . 14))
(133 (provisional-vector-ref . 14))
(134 (vector-ref . 14))
(135 (set-current-thread! . 14))
(136 (provisional-set-port-index! . 14))
(137 (immutable? . 14))
(138 (set-exception-handlers! . 14))
(139 (string-ref . 14))
(140 (set-port-index! . 14))
(141 (provisional-set-port-limit! . 14))
(142 (make-shared-binding . 14))
(143 (current-thread . 14))
(144 (provisional-port-index . 14))
(145 (channel-status . 14))
(146 (set-port-limit! . 14))
(147 (shared-binding-name . 14))
(148 (port-index . 14))
(149 (make-immutable! . 14))
(150 (byte-vector-logging-ref . 14))
(151 (set-enabled-interrupts! . 14))
(152 (provisional-port-limit . 14))
(153 (port-limit . 14))
(154 (ascii->char . 14))
(155 (char->ascii . 14))
(156 (undefine-shared-binding . 14))
(157 (attempt-copy-bytes! . 14))
(158 (record-set! . 14))
(159 (shared-binding? . 14))
(160 (eof-object? . 14))
(161 (set-interrupt-handlers! . 14))
(162 (record . 14))
(163 (schedule-interrupt . 14))
(164 (channel-maybe-write . 14))
(165 (provisional-vector-set! . 14))
(166 (extended-number-ref . 14))
(167 (vector-set! . 14))
(168 (copy-bytes! . 14))
(169 (string-set! . 14))
(170 (call-external-value . 14))
(171 (values . 14))
(172 (intern . 14))
(173 (vector . 14))
(174 (write-image-low . 14))
(175 (provisional-byte-vector-ref . 14))
(176 (byte-vector-logging-set! . 14))
(177 (byte-vector-ref . 14))
(178 (make-double . 14))
(179 (provisional-set-location-id! . 14))
(180 (make-record . 14))
(181 (set-location-id! . 14))
(182 (provisional-location-id . 14))
(183 (location-id . 14))
(184 (bitwise-and . 14))
(185 (eq? . 14))
(186 (double? . 14))
(187 (extended-number-set! . 14))
(188 (make-vector . 14))
(189 (record? . 14))
(190 (provisional-set-port-buffer! . 14))
(191 (make-string . 14))
(192 (set-port-buffer! . 14))
(193 (primitive-catch . 14))
(194 (string-hash . 14))
(195 (provisional-byte-vector-set! . 14))
(196 (template-length . 14))
(197 (provisional-port-buffer . 14))
(198 (number? . 14))
(199 (port-buffer . 14))
(200 (byte-vector-set! . 14))
(201 (bitwise-ior . 14))
(202 (provisional-set-car! . 14))
(203 (provisional-set-cdr! . 14))
(204 (set-car! . 14))
(205 (closure-env . 14))
(206 (vector? . 14))
(207 (bitwise-not . 14))
(208 (set-cdr! . 14))
(209 (provisional-car . 14))
(210 (symbol? . 14))
(211 (string? . 14))
(212 (provisional-cdr . 14))
(213 (car . 14))
(214 (bitwise-xor . 14))
(215 (cdr . 14))
(216 (find-all-records . 14))
(217 (continuation-length . 14))
(218 (log . 14))
(219 (message . 14))
(220 (tan . 14))
(221 (collect . 14))
(222 (cos . 14))
(223 (channel-os-index . 14))
(224 (provisional-set-port-status! . 14))
(225 (make-extended-number . 14))
(226 (set-port-status! . 14))
(227 (sin . 14))
(228 (exp . 14))
(229 (provisional-port-status . 14))
(230 (pop . 14))
(231 (port-status . 14))
(232 (return-from-callback . 14))
(233 (provisional-set-port-locked?! . 14))
(234 (set-port-locked?! . 14))
(235 (make-byte-vector . 14))
(236 (weak-pointer-ref . 14))
(237 (call-with-values . 14))
(238 (provisional-port-locked? . 14))
(239 (denominator . 14))
(240 (port-locked? . 14))
(241 (reverse-list->string . 14))
(242 (extended-number? . 14))
(243 (shared-binding-is-import? . 14))
(244 (provisional-cell-ref . 14))
(245 (find-all . 14))
(246 (cell-ref . 14))
(247 (byte-vector? . 14))
(248 (string=? . 14))
(249 (open-channel . 14))
(250 (channel? . 14))
(251 (make-rectangular . 14))
(252 (set-session-data! . 14))
(253 (maybe-commit . 14))
(254 (template-ref . 14))
(255 (make-closure . 14))
(256 (session-data . 14))
(257 (integer? . 14))
(258 (signal-condition . 14))
(259 (provisional-set-port-pending-eof?! . 14))
(260 (port-handler . 14))
(261 (set-port-pending-eof?! . 14))
(262 (arithmetic-shift . 14))
(263 (provisional-port-pending-eof? . 14))
(264 (provisional-cell-set! . 14))
(265 (complex? . 14))
(266 (port-pending-eof? . 14))
(267 (cell-set! . 14))
(268 (binary-comparison-reduce2 . 14))
(269 (closure? . 14))
(270 (continuation-ref . 14))
(271 (closure-template . 14))
(272 (current-cont . 14))
(273 (char->integer . 14))
(274 (integer->char . 14))
(275 (ascii-limit . 14))
(276 (ascii-whitespaces . 14))
(277 (procedure? . 14))
(278 (invoke-closure . 14))
(279 (primitive-cwcc . 14))
(280 (make-undefined-location . 14))
(281 (location-assigned? . 14))
(282 (vector-unassigned? . 14))
(283 (string-copy . 14))
(284 (string->symbol . 14))
(285 (input-port? . 14))
(286 (output-port? . 14))
(287 (record-type . 14))
(288 (make-code-vector . 14))
(289 (code-vector? . 14))
(290 (code-vector-length . 14))
(291 (code-vector-ref . 14))
(292 (code-vector-set! . 14))
(293 (lookup-imported-binding . 14))
(294 (lookup-exported-binding . 14))
(295 (define-imported-binding . 14))
(296 (define-exported-binding . 14))
(297 (undefine-imported-binding . 14))
(298 (undefine-exported-binding . 14))
(299 (byte-vector . 14))
(300 (secret-length . 14))
(301 (debug-message . 14))
(302 (write-image . 14))
(303 (vector-prefix->list . 14))
(304 (empty-log . 14))
(305 (make-proposal . 14))
(306 (make-condition . 14))
(307 (signal . 14))
(308 (warn . 14))
(309 (note . 14))
(310 (syntax-error . 14))
(311 (call-error . 14))
(312 (case . 15))
(313 (quasiquote . 15))
(314 (syntax-rules . 15))
(315 (not . 15))
(316 (boolean? . 15))
(317 (eqv? . 15))
(318 (equal? . 15))
(319 (max . 15))
(320 (min . 15))
(321 (max-or-min . 15))
(322 (abs . 15))
(323 (zero? . 15))
(324 (positive? . 15))
(325 (negative? . 15))
(326 (even? . 15))
(327 (odd? . 15))
(328 (caar . 15))
(329 (cadr . 15))
(330 (cdar . 15))
(331 (cddr . 15))
(332 (caaar . 15))
(333 (caadr . 15))
(334 (cadar . 15))
(335 (caddr . 15))
(336 (cdaar . 15))
(337 (cdadr . 15))
(338 (cddar . 15))
(339 (cdddr . 15))
(340 (caaaar . 15))
(341 (caaadr . 15))
(342 (caadar . 15))
(343 (caaddr . 15))
(344 (cadaar . 15))
(345 (cadadr . 15))
(346 (caddar . 15))
(347 (cadddr . 15))
(348 (cdaaar . 15))
(349 (cdaadr . 15))
(350 (cdadar . 15))
(351 (cdaddr . 15))
(352 (cddaar . 15))
(353 (cddadr . 15))
(354 (cdddar . 15))
(355 (cddddr . 15))
(356 (null? . 15))
(357 (list . 15))
(358 (length . 15))
(359 (real-length . 15))
(360 (append . 15))
(361 (reverse . 15))
(362 (append-reverse . 15))
(363 (list-tail . 15))
(364 (list-ref . 15))
(365 (mem . 15))
(366 (memq . 15))
(367 (memv . 15))
(368 (member . 15))
(369 (ass . 15))
(370 (assv . 15))
(371 (assoc . 15))
(372 (list? . 15))
(373 (char>? . 15))
(374 (char>=? . 15))
(375 (char<=? . 15))
(376 (char-whitespace? . 15))
(377 (char-lower-case? . 15))
(378 (char-upper-case? . 15))
(379 (char-numeric? . 15))
(380 (char-alphabetic? . 15))
(381 (char-case-delta . 15))
(382 (make-character-map . 15))
(383 (upcase-map . 15))
(384 (char-upcase . 15))
(385 (downcase-map . 15))
(386 (char-downcase . 15))
(387 (char-ci-compare . 15))
(388 (char-ci=? . 15))
(389 (char-ci<? . 15))
(390 (char-ci<=? . 15))
(391 (char-ci>? . 15))
(392 (char-ci>=? . 15))
(393 (string . 15))
(394 (substring . 15))
(395 (string-append . 15))
(396 (string->list . 15))
(397 (list->string . 15))
(398 (string-fill! . 15))
(399 (make-string=? . 15))
(400 (string-ci=? . 15))
(401 (make-string<? . 15))
(402 (string<? . 15))
(403 (string-ci<? . 15))
(404 (string>? . 15))
(405 (string<=? . 15))
(406 (string>=? . 15))
(407 (string-ci>? . 15))
(408 (string-ci<=? . 15))
(409 (string-ci>=? . 15))
(410 (vector->list . 15))
(411 (list->vector . 15))
(412 (vector-fill! . 15))
(413 (map . 15))
(414 (map1 . 15))
(415 (map2+ . 15))
(416 (for-each . 15))
(417 (for-each1 . 15))
(418 (for-each2+ . 15))
(419 (delay . 15))
(420 (make-promise . 15))
(421 (force . 15))
(422 (unspecific . 15))
(423 (reduce . 15))
(424 (filter . 15))
(425 (pos . 15))
(426 (posq . 15))
(427 (posv . 15))
(428 (position . 15))
(429 (any . 15))
(430 (every . 15))
(431 (sublist . 15))
(432 (last . 15))
(433 (insert . 15))
(434 (fold . 15))
(435 (fold->2 . 15))
(436 (fold->3 . 15))
(437 (mvlet . 15))
(438 (mvlet-helper . 15))
(439 (copy-vars . 15))
(440 (mvlet* . 15))
(441 (inexact? . 15))
(442 (modulo . 15))
(443 (ceiling . 15))
(444 (truncate . 15))
(445 (round . 15))
(446 (gcd . 15))
(447 (euclid . 15))
(448 (lcm . 15))
(449 (expt . 15))
(450 (raise-to-integer-power . 15))
(451 (rationalize . 15))
(452 (simplest-rational . 15))
(453 (*record-type-uid* . 16))
(454 (*record-type* . 16))
(455 (make-record-type . 16))
(456 (record-type? . 16))
(457 (record-type-resumer . 16))
(458 (set-record-type-resumer! . 16))
(459 (record-type-uid . 16))
(460 (record-type-name . 16))
(461 (record-type-field-names . 16))
(462 (record-type-number-of-fields . 16))
(463 (record-type-discloser . 16))
(464 (set-record-type-discloser! . 16))
(465 (record-type-fields . 16))
(466 (record-field-index . 16))
(467 (record-constructor . 16))
(468 (record-accessor . 16))
(469 (record-modifier . 16))
(470 (record-predicate . 16))
(471 (define-record-discloser . 16))
(472 (make-default-record-discloser . 16))
(473 (disclose-record . 16))
(474 (define-record-resumer . 16))
(475 (default-record-resumer . 16))
(476 (initialize-records! . 16))
(477 (resume-record . 16))
(478 (:record-type . 16))
(479 (define-record-type . 18))
(480 (define-synchronized-record-type . 18))
(481 (define-constructor . 18))
(482 (define-accessors . 18))
(483 (define-accessor . 18))
(484 (ref-proc . 18))
(485 (set-proc . 18))
(486 (:simple-type . 19))
(487 (really-make-simple-type . 19))
(488 (simple-type-id . 19))
(489 (simple-type-priority . 19))
(490 (simple-type-predicate . 19))
(491 (simple-type-superiors . 19))
(492 (simple-type? . 19))
(493 (make-simple-type . 19))
(494 (compute-priority . 19))
(495 (*increment* . 19))
(496 (%type-priority . 19))
(497 (%type-predicate . 19))
(498 (%same-type? . 19))
(499 (define-simple-type . 19))
(500 (:syntax . 19))
(501 (:values . 19))
(502 (value? . 19))
(503 (:value . 19))
(504 (:zero . 19))
(505 (:number . 19))
(506 (:complex . 19))
(507 (:real . 19))
(508 (:rational . 19))
(509 (:integer . 19))
(510 (:exact-integer . 19))
(511 (:boolean . 19))
(512 (:symbol . 19))
(513 (:char . 19))
(514 (:null . 19))
(515 (:pair . 19))
(516 (:vector . 19))
(517 (:string . 19))
(518 (:procedure . 19))
(519 (:input-port . 19))
(520 (:output-port . 19))
(521 (:eof-object . 19))
(522 (:record . 19))
(523 (record-type-priority . 19))
(524 (:method-info . 19))
(525 (really-make-method-info . 19))
(526 (method-info-proc . 19))
(527 (method-info-n-ary? . 19))
(528 (method-info-types . 19))
(529 (method-info? . 19))
(530 (make-method-info . 19))
(531 (empty-method-list . 19))
(532 (insert-method . 19))
(533 (same-applicability? . 19))
(534 (every2 . 19))
(535 (more-specific? . 19))
(536 (more-specific-type? . 19))
(537 (:method-table . 19))
(538 (really-make-method-table . 19))
(539 (method-table-id . 19))
(540 (method-table-set-perform! . 19))
(541 (method-table-get-perform . 19))
(542 (make-generic . 19))
(543 (method-table-prototype . 19))
(544 (method-table-methods . 19))
(545 (set-method-table-methods! . 19))
(546 (method-table? . 19))
(547 (make-method-table . 19))
(548 (make-cell-for-generic . 19))
(549 (add-to-method-table! . 19))
(550 (set-final-method! . 19))
(551 (apply-generic . 19))
(552 (define-generic . 19))
(553 (methods->perform . 19))
(554 (last-action . 19))
(555 (one-action . 19))
(556 (argument-sequence-predicate . 19))
(557 (check-for-next . 19))
(558 (check-next . 19))
(559 (method-info . 19))
(560 (method-internal . 19))
(561 (with-next-method . 19))
(562 (define-method . 19))
(563 (&add-method! . 19))
(564 (add-method! . 19))
(565 (&type-predicate . 19))
(566 (type-predicate . 19))
(567 (&type-priority . 19))
(568 (type-priority . 19))
(569 (&type-superiors . 19))
(570 (type-superiors . 19))
(571 (&same-type? . 19))
(572 (same-type? . 19))
(573 (:singleton . 19))
(574 (singleton . 19))
(575 (singleton-value . 19))
(576 (compare-to . 19))
(577 (&disclose . 19))
(578 (disclose . 19))
(579 (proc->discloser . 19))
(580 (&number->string . 20))
(581 (real-number->string . 20))
(582 (number->string . 20))
(583 (integer->string . 20))
(584 (string->number . 20))
(585 (&really-string->number . 20))
(586 (really-string->number . 20))
(587 (:integer-string . 20))
(588 (set-exactness . 20))
(589 (string->integer . 20))
(590 (:thread . 21))
(591 (make-thread . 21))
(592 (thread-proposal . 21))
(593 (thread-dynamic-point . 21))
(594 (thread-dynamic-env . 21))
(595 (get-dynamic-env . 21))
(596 (set-dynamic-env! . 21))
(597 (get-dynamic-point . 21))
(598 (set-dynamic-point! . 21))
(599 (initialize-dynamic-state! . 21))
(600 (with-dynamic-env . 21))
(601 (empty-dynamic-env . 21))
(602 (:fluid . 21))
(603 (make-fluid . 21))
(604 (fluid-top-level-value . 21))
(605 (set-fluid-top-level-value! . 21))
(606 (fluid . 21))
(607 (set-fluid! . 21))
(608 (let-fluid . 21))
(609 (let-fluids . 21))
(610 (fluid-cell-ref . 21))
(611 (fluid-cell-set! . 21))
(612 (define-enumeration . 35))
(613 (components . 35))
(614 (enum . 35))
(615 (enumerand->name . 35))
(616 (name->enumerand . 35))
(617 (lookup-enumerand . 35))
(618 (architecture-version . 36))
(619 (bits-used-per-byte . 36))
(620 (byte-limit . 36))
(621 (define-instruction-set . 36))
(622 (op . 36))
(623 (op-enumeration . 36))
(624 (op-count . 36))
(625 (opcode-arg-specs . 36))
(626 (interrupt . 36))
(627 (interrupt-enumeration . 36))
(628 (interrupt-count . 36))
(629 (exception . 36))
(630 (exception-enumeration . 36))
(631 (exception-count . 36))
(632 (current-port-marker . 36))
(633 (current-port-marker-enumeration . 36))
(634 (current-port-marker-count . 36))
(635 (maximum-stack-args . 36))
(636 (*last-protocol* . 36))
(637 (next-protocol . 36))
(638 (two-byte-nargs-protocol . 36))
(639 (two-byte-nargs+list-protocol . 36))
(640 (ignore-values-protocol . 36))
(641 (big-stack-protocol . 36))
(642 (args+nargs-protocol . 36))
(643 (nary-dispatch-protocol . 36))
(644 (call-with-values-protocol . 36))
(645 (bottom-of-stack-protocol . 36))
(646 (maximum-external-call-args . 36))
(647 (default-stack-space . 36))
(648 (environment-stack-size . 36))
(649 (continuation-stack-size . 36))
(650 (available-stack-space . 36))
(651 (time-option . 36))
(652 (time-option-enumeration . 36))
(653 (time-option-count . 36))
(654 (memory-status-option . 36))
(655 (memory-status-option-enumeration . 36))
(656 (memory-status-option-count . 36))
(657 (channel-status-option . 36))
(658 (channel-status-option-enumeration . 36))
(659 (channel-status-option-count . 36))
(660 (port-status-options . 36))
(661 (port-status-options-enumeration . 36))
(662 (port-status-options-count . 36))
(663 (stob . 36))
(664 (stob-enumeration . 36))
(665 (stob-count . 36))
(666 (least-b-vector-type . 36))
(667 (stob-data . 36))
(668 (call-atomically . 40))
(669 (call-atomically! . 40))
(670 (call-ensuring-atomicity . 40))
(671 (call-ensuring-atomicity! . 40))
(672 (atomically . 40))
(673 (atomically! . 40))
(674 (ensure-atomicity . 40))
(675 (ensure-atomicity! . 40))
(676 (with-new-proposal . 40))
(677 (remove-current-proposal! . 40))
(678 (invalidate-current-proposal! . 40))
(679 (j-random-pair . 40))
(680 (*session-data-initializers* . 23))
(681 (make-session-data-slot! . 23))
(682 (session-data-ref . 23))
(683 (session-data-set! . 23))
(684 (initialize-session-data! . 23))
(685 (*condition-types* . 27))
(686 (condition-supertypes . 27))
(687 (define-condition-type . 27))
(688 (condition-predicate . 27))
(689 (condition? . 27))
(690 (condition-type . 27))
(691 (condition-stuff . 27))
(692 (error? . 27))
(693 (call-error? . 27))
(694 (read-error? . 27))
(695 (exception? . 27))
(696 (exception-opcode . 27))
(697 (exception-reason . 27))
(698 (exception-arguments . 27))
(699 (make-exception . 27))
(700 (warning? . 27))
(701 (syntax-error? . 27))
(702 (note? . 27))
(703 (interrupt? . 27))
(704 (dynamic-wind . 22))
(705 (call-with-current-continuation . 22))
(706 (continuation->procedure . 22))
(707 (:point . 22))
(708 (make-point . 22))
(709 (point-parent . 22))
(710 (point-dynamic-env . 22))
(711 (point-out . 22))
(712 (point-in . 22))
(713 (point-depth . 22))
(714 (travel-to-point! . 22))
(715 (template-overhead . 32))
(716 (template-code . 32))
(717 (template-info . 32))
(718 (set-template-code! . 32))
(719 (set-template-info! . 32))
(720 (:closure . 34))
(721 (:code-vector . 34))
(722 (:location . 34))
(723 (:cell . 34))
(724 (:template . 34))
(725 (:channel . 34))
(726 (:port . 34))
(727 (:double . 34))
(728 (:weak-pointer . 34))
(729 (:shared-binding . 34))
(730 (continuation-cont . 33))
(731 (real-continuation-pc . 33))
(732 (real-continuation-template . 33))
(733 (continuation-env . 33))
(734 (exception-continuation-pc . 33))
(735 (exception-continuation-template . 33))
(736 (exception-continuation-exception . 33))
(737 (exception-continuation? . 33))
(738 (continuation-pc . 33))
(739 (continuation-template . 33))
(740 (normal-continuation-overhead . 33))
(741 (exception-continuation-overhead . 33))
(742 (continuation-arg . 33))
(743 (continuation-arg-count . 33))
(744 (:continuation . 33))
(745 (continuation-parent . 33))
(746 (define-exception-handler . 37))
(747 (signal-exception . 37))
(748 (exception-handlers . 37))
(749 (extend-opcode! . 37))
(750 (really-signal-condition . 37))
(751 (with-handler . 37))
(752 ($condition-handlers . 37))
(753 (initialize-exceptions! . 37))
(754 (last-resort-condition-handler . 37))
(755 (report-utter-lossage . 37))
(756 (continuation-preview . 37))
(757 (ignore-errors . 37))
(758 (report-errors-as-warnings . 37))
(759 (:port-handler . 24))
(760 (make-port-handler . 24))
(761 (port-handler-force . 24))
(762 (port-handler-ready? . 24))
(763 (port-handler-block . 24))
(764 (port-handler-char . 24))
(765 (port-handler-close . 24))
(766 (port-handler-discloser . 24))
(767 (port-handler? . 24))
(768 (disclose-port . 24))
(769 (initialize-i/o-handlers! . 24))
(770 (one-arg-proc->handler . 24))
(771 (two-arg-proc->handler . 24))
(772 (real-char-ready? . 24))
(773 (read-block . 24))
(774 (write-block . 24))
(775 (write-string . 24))
(776 (output-port-ready? . 24))
(777 (force-output . 24))
(778 (force-output-if-open . 24))
(779 (close-input-port . 24))
(780 (close-output-port . 24))
(781 (okay-limits? . 24))
(782 (open-port? . 24))
(783 (open-port-mask . 24))
(784 (input-port-mask . 24))
(785 (open-input-port-mask . 24))
(786 (open-input-port-status . 24))
(787 (open-input-port? . 24))
(788 (make-input-port-closed! . 24))
(789 (make-unbuffered-input-port . 24))
(790 (output-port-mask . 24))
(791 (open-output-port-mask . 24))
(792 (open-output-port-status . 24))
(793 (open-output-port? . 24))
(794 (make-output-port-closed! . 24))
(795 (make-unbuffered-output-port . 24))
(796 (null-output-port-handler . 24))
(797 (null-output-buffer . 24))
(798 (make-null-output-port . 24))
(799 (make-buffered-input-port . 24))
(800 (make-buffered-output-port . 24))
(801 (okay-buffer? . 24))
(802 (make-buffered-input-port-handler . 24))
(803 (note-buffer-reuse! . 24))
(804 (check-buffer-timestamp! . 24))
(805 (port-flushed? . 24))
(806 (set-port-flushed?! . 24))
(807 (make-one-char-input . 24))
(808 (make-char-ready? . 24))
(809 (make-read-block . 24))
(810 (get-available-bytes! . 24))
(811 (buffer-length . 24))
(812 (make-buffered-output-port-handler . 24))
(813 (make-closer . 24))
(814 (make-one-char-output . 24))
(815 (make-write-block . 24))
(816 (copy-bytes-out! . 24))
(817 (make-forcer . 24))
(818 (default-buffer-size . 24))
(819 (flush-these-ports . 24))
(820 (periodically-force-output! . 24))
(821 (output-port-forcers . 24))
(822 (periodically-flushed-ports . 24))
(823 (make-forcing-thunk . 24))
(824 ($current-input-port . 24))
(825 ($current-output-port . 24))
(826 ($current-error-port . 24))
(827 ($current-noise-port . 24))
(828 (current-input-port . 24))
(829 (current-output-port . 24))
(830 (current-error-port . 24))
(831 (current-noise-port . 24))
(832 (initialize-i/o . 24))
(833 (with-current-ports . 24))
(834 (call-with-current-input-port . 24))
(835 (call-with-current-output-port . 24))
(836 (call-with-current-noise-port . 24))
(837 (silently . 24))
(838 (newline . 24))
(839 (char-ready? . 24))
(840 (output-port-option . 24))
(841 (input-port-option . 24))
(842 (write . 28))
(843 (recurring-write . 28))
(844 (write-boolean . 28))
(845 (write-number . 28))
(846 (write-char-literal . 28))
(847 (character-name . 28))
(848 (write-string-literal . 28))
(849 (write-list . 28))
(850 (quotation? . 28))
(851 (write-vector . 28))
(852 (write-other . 28))
(853 (display-type-name . 28))
(854 (display . 28))
(855 (read . 29))
(856 (sub-read-carefully . 29))
(857 (reader-token-marker . 29))
(858 (make-reader-token . 29))
(859 (reader-token? . 29))
(860 (close-paren . 29))
(861 (dot . 29))
(862 (sub-read . 29))
(863 (read-dispatch-vector . 29))
(864 (read-terminating?-vector . 29))
(865 (set-standard-syntax! . 29))
(866 (set-standard-read-macro! . 29))
(867 (sub-read-list . 29))
(868 (gobble-line . 29))
(869 (*sharp-macros* . 29))
(870 (define-sharp-macro . 29))
(871 (proper-list? . 29))
(872 (sub-read-token . 29))
(873 (parse-token . 29))
(874 (strange-symbol-names . 29))
(875 (p-c-v . 29))
(876 (preferred-case . 29))
(877 (reading-error . 29))
(878 (:queue . 44))
(879 (really-make-queue . 44))
(880 (queue? . 44))
(881 (queue-tail . 44))
(882 (set-queue-tail! . 44))
(883 (queue-head . 44))
(884 (set-queue-head! . 44))
(885 (queue-uid . 44))
(886 (next-uid . 44))
(887 (make-queue . 44))
(888 (queue-empty? . 44))
(889 (enqueue! . 44))
(890 (queue-front . 44))
(891 (dequeue! . 44))
(892 (empty-queue! . 44))
(893 (on-queue? . 44))
(894 (delete-from-queue! . 44))
(895 (delete-from-queue-if! . 44))
(896 (queue->list . 44))
(897 (list->queue . 44))
(898 (queue-length . 44))
(899 (initialize-interrupts! . 38))
(900 (interrupt-handlers . 38))
(901 (set-interrupt-handler! . 38))
(902 (no-interrupts . 38))
(903 (all-interrupts . 38))
(904 (with-interrupts-inhibited . 38))
(905 (with-interrupts-allowed . 38))
(906 (disable-interrupts! . 38))
(907 (enable-interrupts! . 38))
(908 (with-interrupts . 38))
(909 (enabled-interrupts . 38))
(910 (*post-gc-procedures* . 38))
(911 (call-after-gc! . 38))
(912 (post-gc-handler . 38))
(913 (required-post-gc-space . 38))
(914 (space-shortage-handler . 38))
(915 (call-before-heap-overflow! . 38))
(916 (:thread . 39))
(917 (really-make-thread . 39))
(918 (thread-name . 39))
(919 (thread-uid . 39))
(920 (thread-queue . 39))
(921 (set-thread-queue! . 39))
(922 (thread-data . 39))
(923 (set-thread-data! . 39))
(924 (thread-events . 39))
(925 (set-thread-events! . 39))
(926 (thread-current-task . 39))
(927 (set-thread-current-task! . 39))
(928 (thread-scheduler . 39))
(929 (set-thread-scheduler! . 39))
(930 (thread-arguments . 39))
(931 (set-thread-arguments! . 39))
(932 (thread-continuation . 39))
(933 (set-thread-continuation! . 39))
(934 (thread-time . 39))
(935 (set-thread-time! . 39))
(936 (thread-proposal . 39))
(937 (thread-dynamic-point . 39))
(938 (set-thread-dynamic-point! . 39))
(939 (thread-dynamic-env . 39))
(940 (thread? . 39))
(941 (*thread-uid* . 39))
(942 (make-thread . 39))
(943 (thread-top-level . 39))
(944 (thread-uid->thread . 39))
(945 (all-threads . 39))
(946 (add-event! . 39))
(947 (next-event! . 39))
(948 (thunk->continuation . 39))
(949 (compose-continuation . 39))
(950 (make-thread-queue . 39))
(951 (thread-queue-empty? . 39))
(952 (enqueue-thread! . 39))
(953 (dequeue-thread! . 39))
(954 (remove-thread-from-queue! . 39))
(955 (event-type . 39))
(956 (event-type-enumeration . 39))
(957 (event-type-count . 39))
(958 (run . 39))
(959 (find-and-run-next-thread . 39))
(960 (debit-thread-times-and-run! . 39))
(961 (handle-timer-interrupt . 39))
(962 (run-next-thread . 39))
(963 (min . 39))
(964 (switch-to-thread . 39))
(965 (run-thread . 39))
(966 (suspend . 39))
(967 (suspend-to . 39))
(968 (debit-down! . 39))
(969 (exit . 39))
(970 (wait . 39))
(971 (waiting? . 39))
(972 (relinquish-timeslice . 39))
(973 (block . 39))
(974 (maybe-commit-and-block . 39))
(975 (upcall . 39))
(976 (propogate-upcall . 39))
(977 (kill-thread! . 39))
(978 (interrupt-thread . 39))
(979 (get-next-event! . 39))
(980 (event-pending? . 39))
(981 (schedule-event . 39))
(982 (maybe-suspend . 39))
(983 (really-schedule-event . 39))
(984 (schedule-wakeup . 39))
(985 (show-running . 39))
(986 (running? . 39))
(987 (spawn . 39))
(988 (spawn-on-root . 39))
(989 (spawn-on-scheduler . 39))
(990 (make-ready . 39))
(991 (maybe-commit-and-make-ready . 39))
(992 (make-threads-ready . 39))
(993 (schedule-interrupt! . 39))
(994 (cancel-timer-interrupt! . 39))
(995 (interrupt-timer-time . 39))
(996 (real-time . 39))
(997 (with-threads . 39))
(998 (start-multitasking . 39))
(999 (deadlock? . 39))
(1000 (terminate? . 39))
(1001 (terminate-current-thread . 39))
(1002 (root-scheduler-slot . 39))
(1003 (root-scheduler . 39))
(1004 (max2 . 39))
(1005 (sleep . 39))
(1006 (coerce-to-nonnegative-integer . 39))
(1007 (dozers . 39))
(1008 (insert . 39))
(1009 (wake-some-threads . 39))
(1010 (:condvar . 46))
(1011 (really-make-condvar . 46))
(1012 (condvar? . 46))
(1013 (condvar-id . 46))
(1014 (condvar-value . 46))
(1015 (set-condvar-value! . 46))
(1016 (condvar-has-value? . 46))
(1017 (set-condvar-has-value?! . 46))
(1018 (condvar-queue . 46))
(1019 (make-condvar . 46))
(1020 (maybe-commit-and-wait-for-condvar . 46))
(1021 (maybe-commit-and-set-condvar! . 46))
(1022 (condvar-has-waiters? . 46))
(1023 (channel-maybe-commit-and-do-it . 25))
(1024 (channel-maybe-commit-and-read . 25))
(1025 (channel-maybe-commit-and-write . 25))
(1026 (note-channel-result! . 25))
(1027 (channel-write . 25))
(1028 (channel-maybe-commit-and-close . 25))
(1029 (input-channel? . 25))
(1030 (initialize-channel-i/o! . 25))
(1031 (i/o-completion-handler . 25))
(1032 (waiting-for-i/o? . 25))
(1033 (channel-wait-condvars-slot . 25))
(1034 (channel-condvars . 25))
(1035 (set-channel-condvars! . 25))
(1036 (add-channel-condvar! . 25))
(1037 (wait-for-channel . 25))
(1038 (fetch-channel-condvar! . 25))
(1039 (abort-unwanted-i/o! . 25))
(1040 (:channel-cell . 26))
(1041 (really-make-channel-cell . 26))
(1042 (channel-cell? . 26))
(1043 (channel-cell-sent . 26))
(1044 (set-channel-cell-sent! . 26))
(1045 (channel-cell-in-use? . 26))
(1046 (set-channel-cell-in-use?! . 26))
(1047 (channel-cell-condvar . 26))
(1048 (channel-cell-closer . 26))
(1049 (channel-cell-ref . 26))
(1050 (make-channel-cell . 26))
(1051 (port->channel . 26))
(1052 (port-channel-closer . 26))
(1053 (fill-buffer! . 26))
(1054 (channel-port-ready? . 26))
(1055 (input-channel-handler . 26))
(1056 (input-channel->port . 26))
(1057 (input-channel+closer->port . 26))
(1058 (real-input-channel->port . 26))
(1059 (empty-buffer! . 26))
(1060 (send-some . 26))
(1061 (output-channel-handler . 26))
(1062 (output-channel->port . 26))
(1063 (output-channel+closer->port . 26))
(1064 (real-output-channel->port . 26))
(1065 (maybe-open-file . 26))
(1066 (open-input-file . 26))
(1067 (open-output-file . 26))
(1068 (call-with-input-file . 26))
(1069 (call-with-output-file . 26))
(1070 (with-input-from-file . 26))
(1071 (with-output-to-file . 26))
(1072 (force-channel-output-ports! . 26))
(1073 (one-char-handler . 26))
(1074 (write-block-handler . 26))
(1075 (unbuffered-output-handler . 26))
(1076 (:table . 79))
(1077 (really-make-table . 79))
(1078 (table-set!-procedure . 79))
(1079 (set-table-set!-procedure! . 79))
(1080 (table-ref-procedure . 79))
(1081 (set-table-ref-procedure! . 79))
(1082 (table-data . 79))
(1083 (set-table-data! . 79))
(1084 (table-size . 79))
(1085 (set-table-size! . 79))
(1086 (table? . 79))
(1087 (table-ref . 79))
(1088 (table-set! . 79))
(1089 (linear-table-size-limit . 79))
(1090 (next-table-size . 79))
(1091 (make-table-maker . 79))
(1092 (assoc->table-maker . 79))
(1093 (null-entry . 79))
(1094 (new-entry . 79))
(1095 (entry-value . 79))
(1096 (entry-key . 79))
(1097 (set-entry-value! . 79))
(1098 (delete-entry! . 79))
(1099 (make-assoc . 79))
(1100 (make-linear-table-ref . 79))
(1101 (make-linear-table-set! . 79))
(1102 (make->hash-table . 79))
(1103 (make-hash-table-ref . 79))
(1104 (make-hash-table-set! . 79))
(1105 (expand-hash-table! . 79))
(1106 (table-enter-alist! . 79))
(1107 (table-expand-table! . 79))
(1108 (table-walk . 79))
(1109 (really-table-walk . 79))
(1110 (alist-walk . 79))
(1111 (make-table-immutable! . 79))
(1112 (table->entry-list . 79))
(1113 (default-table-hash-function . 79))
(1114 (eqv?-assoc . 79))
(1115 (default-table-assoc . 79))
(1116 (symbol-hash . 79))
(1117 (make-table . 79))
(1118 (make-string-table . 79))
(1119 (make-symbol-table . 79))
(1120 (make-integer-table . 79))
(1121 (make-population . 48))
(1122 (add-to-population! . 48))
(1123 (weak-memq . 48))
(1124 (population-reduce . 48))
(1125 (population->list . 48))
(1126 (walk-population . 48))
(1127 (:meta-type . 50))
(1128 (really-make-type . 50))
(1129 (type-info . 50))
(1130 (type-more . 50))
(1131 (type-mask . 50))
(1132 (meta-type? . 50))
(1133 (make-type . 50))
(1134 (name->type-table . 50))
(1135 (mask->name-table . 50))
(1136 (name->type . 50))
(1137 (set-type-name! . 50))
(1138 (*mask* . 50))
(1139 (new-type-bit . 50))
(1140 (mask->type . 50))
(1141 (bottom-type . 50))
(1142 (error-type . 50))
(1143 (bottom-type? . 50))
(1144 (new-atomic-type . 50))
(1145 (named-atomic-type . 50))
(1146 (syntax-type . 50))
(1147 (other-static-type . 50))
(1148 (empty-rail-type . 50))
(1149 (rail-type . 50))
(1150 (make-optional-type . 50))
(1151 (make-rest-type . 50))
(1152 (head-type . 50))
(1153 (head-type-really . 50))
(1154 (tail-type . 50))
(1155 (empty-rail-type? . 50))
(1156 (rest-type? . 50))
(1157 (optional-type? . 50))
(1158 (mask/no-values . 50))
(1159 (mask/two-or-more . 50))
(1160 (mask/&rest . 50))
(1161 (value-type . 50))
(1162 (mask/value . 50))
(1163 (value-type? . 50))
(1164 (any-values-type . 50))
(1165 (any-arguments-type . 50))
(1166 (mask/one-or-more . 50))
(1167 (same-type? . 50))
(1168 (subtype? . 50))
(1169 (meet-type . 50))
(1170 (other-type-info . 50))
(1171 (meet-rail . 50))
(1172 (meet-procedure . 50))
(1173 (meet? . 50))
(1174 (meet-procedure? . 50))
(1175 (join-type . 50))
(1176 (join-rail . 50))
(1177 (join-procedure . 50))
(1178 (number-hierarchy . 50))
(1179 (integer-type . 50))
(1180 (rational-type . 50))
(1181 (real-type . 50))
(1182 (complex-type . 50))
(1183 (number-type . 50))
(1184 (exact-type . 50))
(1185 (inexact-type . 50))
(1186 (exact-integer-type . 50))
(1187 (inexact-real-type . 50))
(1188 (boolean-type . 50))
(1189 (pair-type . 50))
(1190 (null-type . 50))
(1191 (record-type . 50))
(1192 (any-procedure-type . 50))
(1193 (other-value-type . 50))
(1194 (mask/other . 50))
(1195 (make-other-type . 50))
(1196 (char-type . 50))
(1197 (unspecific-type . 50))
(1198 (string-type . 50))
(1199 (symbol-type . 50))
(1200 (vector-type . 50))
(1201 (escape-type . 50))
(1202 (structure-type . 50))
(1203 (mask/procedure . 50))
(1204 (procedure-type . 50))
(1205 (make-procedure-type . 50))
(1206 (procedure-type-domain . 50))
(1207 (procedure-type-codomain . 50))
(1208 (restrictive? . 50))
(1209 (sexp->type . 50))
(1210 (sexp->values-type . 50))
(1211 (type->sexp . 50))
(1212 (atomic-type->sexp . 50))
(1213 (rail-type->sexp . 50))
(1214 (disjoin-type . 50))
(1215 (disjoin-rest . 50))
(1216 (mask/number . 50))
(1217 (make-some-values-type . 50))
(1218 (proc . 50))
(1219 (some-values . 50))
(1220 (procedure-type? . 50))
(1221 (fixed-arity-procedure-type? . 50))
(1222 (procedure-type-arity . 50))
(1223 (procedure-type-argument-types . 50))
(1224 (variable-type . 50))
(1225 (variable-type? . 50))
(1226 (variable-value-type . 50))
(1227 (usual-variable-type . 50))
(1228 (undeclared-type . 50))
(1229 (compatible-types? . 50))
(1230 (:interface . 67))
(1231 (really-make-interface . 67))
(1232 (interface-name . 67))
(1233 (set-interface-name! . 67))
(1234 (interface-clients . 67))
(1235 (walk-method . 67))
(1236 (ref-method . 67))
(1237 (interface? . 67))
(1238 (make-interface . 67))
(1239 (interface-ref . 67))
(1240 (interface-member? . 67))
(1241 (for-each-declaration . 67))
(1242 (note-reference-to-interface! . 67))
(1243 (note-interface-name! . 67))
(1244 (make-simple-interface . 67))
(1245 (make-simple-interface-table . 67))
(1246 (make-compound-interface . 67))
(1247 (make-modified-interface . 67))
(1248 (process-commands . 67))
(1249 (okay-command? . 67))
(1250 (proper-list? . 67))
(1251 (process-prefix . 67))
(1252 (process-expose . 67))
(1253 (process-hide . 67))
(1254 (process-alias . 67))
(1255 (process-rename . 67))
(1256 (interface-lookup . 67))
(1257 (make-lookup . 67))
(1258 (prefix-match? . 67))
(1259 (remove-prefix . 67))
(1260 (make-default-walker . 67))
(1261 (cdr-assq . 67))
(1262 (make-alist-walker . 67))
(1263 (symbol-append . 67))
(1264 (binding? . 51))
(1265 (binding-type . 51))
(1266 (binding-place . 51))
(1267 (binding-static . 51))
(1268 (binding-path . 51))
(1269 (set-binding-place! . 51))
(1270 (make-binding . 51))
(1271 (add-path . 51))
(1272 (clobber-binding! . 51))
(1273 (impose-type . 51))
(1274 (forget-integration . 51))
(1275 (same-denotation? . 51))
(1276 (maybe-fix-place! . 51))
(1277 (follow-forwarding-pointers . 51))
(1278 (name? . 52))
(1279 (:generated . 52))
(1280 (make-generated . 52))
(1281 (generated-parent-name . 52))
(1282 (generated-env . 52))
(1283 (generated-token . 52))
(1284 (generated-name . 52))
(1285 (generated? . 52))
(1286 (generate-name . 52))
(1287 (generated-uid . 52))
(1288 (*generated-uid* . 52))
(1289 (name->symbol . 52))
(1290 (name-hash . 52))
(1291 (make-name-table . 52))
(1292 (desyntaxify . 52))
(1293 (make-qualified . 52))
(1294 (qualified? . 52))
(1295 (qualified-parent-name . 52))
(1296 (qualified-symbol . 52))
(1297 (qualified-uid . 52))
(1298 (name->qualified . 52))
(1299 (qualify-parent . 52))
(1300 (:transform . 52))
(1301 (really-make-transform . 52))
(1302 (transform-id . 52))
(1303 (transform-source . 52))
(1304 (transform-aux-names . 52))
(1305 (transform-type . 52))
(1306 (transform-env . 52))
(1307 (transform-procedure . 52))
(1308 (transform? . 52))
(1309 (make-transform . 52))
(1310 (maybe-apply-macro-transform . 52))
(1311 (apply-inline-transform . 52))
(1312 (make-keyword-comparator . 52))
(1313 (name->source-name . 52))
(1314 (bind-aliases . 52))
(1315 (make-name-generator . 52))
(1316 (lookup . 52))
(1317 (lookup . 55))
(1318 (bind1 . 55))
(1319 (bind . 55))
(1320 (bindrec . 55))
(1321 (make-compiler-env . 55))
(1322 (funny-name/macro-eval . 55))
(1323 (environment-macro-eval . 55))
(1324 (funny-name/define! . 55))
(1325 (environment-define! . 55))
(1326 (funny-name/package . 55))
(1327 (extract-package-from-environment . 55))
(1328 (funny-name/source-file-name . 55))
(1329 (bind-source-file-name . 55))
(1330 (source-file-name . 55))
(1331 (:thingie . 53))
(1332 (make-thingie . 53))
(1333 (thingie-want-type . 53))
(1334 (thingie-name . 53))
(1335 (thingie-binding . 53))
(1336 (thingie? . 53))
(1337 (:structure . 68))
(1338 (really-make-structure . 68))
(1339 (structure-name . 68))
(1340 (set-structure-name! . 68))
(1341 (structure-clients . 68))
(1342 (structure-package . 68))
(1343 (structure-interface-really . 68))
(1344 (set-structure-interface! . 68))
(1345 (structure-interface-thunk . 68))
(1346 (structure? . 68))
(1347 (structure-interface . 68))
(1348 (initialize-structure! . 68))
(1349 (make-structure . 68))
(1350 (make-modified-structure . 68))
(1351 (note-structure-name! . 68))
(1352 (structure-unstable? . 68))
(1353 (for-each-export . 68))
(1354 (:package . 68))
(1355 (really-make-package . 68))
(1356 (package-cached . 68))
(1357 (package-clients . 68))
(1358 (package-real-undefined-but-assigneds . 68))
(1359 (set-package-undefined-but-assigneds! . 68))
(1360 (package-real-undefineds . 68))
(1361 (set-package-undefineds! . 68))
(1362 (package-accesses-thunk . 68))
(1363 (package-opens-thunk . 68))
(1364 (set-package-opens-thunk! . 68))
(1365 (package->environment . 68))
(1366 (set-package->environment! . 68))
(1367 (package-loaded? . 68))
(1368 (set-package-loaded?! . 68))
(1369 (package-clauses . 68))
(1370 (package-file-name . 68))
(1371 (package-get-location . 68))
(1372 (set-package-get-location! . 68))
(1373 (package-integrate? . 68))
(1374 (set-package-integrate?! . 68))
(1375 (package-unstable? . 68))
(1376 (package-definitions . 68))
(1377 (package-opens-really . 68))
(1378 (set-package-opens! . 68))
(1379 (package-uid . 68))
(1380 (package? . 68))
(1381 (make-package . 68))
(1382 (really-package->environment . 68))
(1383 (lazy-table-accessor . 68))
(1384 (package-undefineds . 68))
(1385 (package-undefined-but-assigneds . 68))
(1386 (new-package-uid . 68))
(1387 (*package-uid* . 68))
(1388 (package-name-table . 68))
(1389 (package-name . 68))
(1390 (note-package-name! . 68))
(1391 (package-opens . 68))
(1392 (initialize-package-if-necessary! . 68))
(1393 (package-accesses . 68))
(1394 (make-simple-package . 68))
(1395 (package-definition . 68))
(1396 (package-define! . 68))
(1397 (package-add-static! . 68))
(1398 (package-refine-type! . 68))
(1399 (package-lookup . 68))
(1400 (really-package-lookup . 68))
(1401 (search-opens . 68))
(1402 (structure-lookup . 68))
(1403 (real-structure-lookup . 68))
(1404 (generic-lookup . 68))
(1405 (initialize-package! . 68))
(1406 (for-each-definition . 68))
(1407 (get-new-location . 68))
(1408 (make-new-location . 68))
(1409 ($get-location . 68))
(1410 (*location-uid* . 68))
(1411 (location-info-table . 68))
(1412 (flush-location-names . 68))
(1413 (link! . 68))
(1414 (really-link! . 68))
(1415 (get-location . 68))
(1416 (location-on-demand . 68))
(1417 (get-undefined . 68))
(1418 (location-for-assignment . 68))
(1419 (package-note-caching! . 68))
(1420 (note-caching! . 68))
(1421 (get-location-for-unassignable . 68))
(1422 (get-location-for-undefined . 68))
(1423 ($note-undefined . 68))
(1424 (cenv->package . 68))
(1425 (location-for-reference . 68))
(1426 (noting-undefined-variables . 68))
(1427 (print-undefined-names . 68))
(1428 (environment-ref . 81))
(1429 (environment-set! . 81))
(1430 (environment-define! . 81))
(1431 (*structure-ref . 81))
(1432 (carefully . 81))
(1433 ($interaction-environment . 81))
(1434 (interaction-environment . 81))
(1435 (set-interaction-environment! . 81))
(1436 (with-interaction-environment . 81))
(1437 (scheme-report-environment . 81))
(1438 (*scheme-report-environment* . 81))
(1439 (*null-environment* . 81))
(1440 (*scheme-report-number* . 81))
(1441 (set-scheme-report-environment! . 81))
(1442 (null-environment . 81))
(1443 (make-reflective-tower . 81))
(1444 (set-reflective-tower-maker! . 81))
(1445 (namestring . 80))
(1446 (directory-component-separator . 80))
(1447 (type-component-separator . 80))
(1448 (namestring-component . 80))
(1449 (file-name-preferred-case . 80))
(1450 (*scheme-file-type* . 80))
(1451 (*load-file-type* . 80))
(1452 (file-name-directory . 80))
(1453 (file-name-nondirectory . 80))
(1454 (file-nondirectory-position . 80))
(1455 (string-posq . 80))
(1456 (*translations* . 80))
(1457 (translations . 80))
(1458 (set-translation! . 80))
(1459 (translate . 80))
(1460 ($note-file-package . 65))
(1461 (read-forms . 65))
(1462 (really-read-forms . 65))
(1463 (:operator . 54))
(1464 (make-operator . 54))
(1465 (operator-name . 54))
(1466 (operator-uid . 54))
(1467 (operator-nargs . 54))
(1468 (operator-type . 54))
(1469 (set-operator-type! . 54))
(1470 (operator? . 54))
(1471 (usual-operator-type . 54))
(1472 (get-operator . 54))
(1473 (*operator-uid* . 54))
(1474 (operators-table . 54))
(1475 (number-of-operators . 54))
(1476 (the-operators . 54))
(1477 (make-operator-table . 54))
(1478 (operator-table-ref . 54))
(1479 (operator-lookup . 54))
(1480 (operator-define! . 54))
(1481 (:node . 54))
(1482 (really-make-node . 54))
(1483 (node-plist . 54))
(1484 (set-node-plist! . 54))
(1485 (node-form . 54))
(1486 (node-operator-id . 54))
(1487 (node? . 54))
(1488 (make-node . 54))
(1489 (node-ref . 54))
(1490 (node-set! . 54))
(1491 (node-operator . 54))
(1492 (node-predicate . 54))
(1493 (make-similar-node . 54))
(1494 (force-node . 54))
(1495 (schemify . 54))
(1496 (schemifiers . 54))
(1497 (schemify-node . 54))
(1498 (schemify-nodes . 54))
(1499 (define-schemifier . 54))
(1500 (schemify-lambda . 54))
(1501 (schemify-formals . 54))
(1502 (schemify-letrec . 54))
(1503 (schemify-sexp . 54))
(1504 (number-of-required-args . 58))
(1505 (n-ary? . 58))
(1506 (normalize-formals . 58))
(1507 (scan-forms . 56))
(1508 (expand-scanned-form . 56))
(1509 (scan-define . 56))
(1510 (expand-define . 56))
(1511 (scan-define-syntax . 56))
(1512 (expand-form . 56))
(1513 (expand-head . 56))
(1514 (destructure-define . 56))
(1515 (make-operator-predicate . 56))
(1516 (define? . 56))
(1517 (begin? . 56))
(1518 (define-syntax? . 56))
(1519 (static-value . 56))
(1520 (expand-body . 56))
(1521 (scan-body-forms . 56))
(1522 (body-lossage . 56))
(1523 (expand . 56))
(1524 (expand-list . 56))
(1525 (expand-literal . 56))
(1526 (expand-call . 56))
(1527 (expand-name . 56))
(1528 (expand-macro-application . 56))
(1529 (expand-operator-form . 56))
(1530 (expanders . 56))
(1531 (define-expander . 56))
(1532 (unspecific-node . 56))
(1533 (expand-structure-ref . 56))
(1534 (expand-lambda . 56))
(1535 (bind-names . 56))
(1536 (names? . 56))
(1537 (expand-letrec . 56))
(1538 (process-syntax . 56))
(1539 (this-long? . 56))
(1540 (at-least-this-long? . 56))
(1541 (specs? . 56))
(1542 (literal? . 56))
(1543 (syntax? . 56))
(1544 (begin-node? . 56))
(1545 (call-node? . 56))
(1546 (name-node? . 56))
(1547 (operator/literal . 56))
(1548 (operator/quote . 56))
(1549 (operator/call . 56))
(1550 (operator/name . 56))
(1551 (operator/unspecific . 56))
(1552 (operator/unassigned . 56))
(1553 (operator/lambda . 56))
(1554 (operator/begin . 56))
(1555 (operator/letrec . 56))
(1556 (operator/define . 56))
(1557 (operator/define-syntax . 56))
(1558 (operator/primitive-procedure . 56))
(1559 (operator/structure-ref . 56))
(1560 (:primop . 62))
(1561 (make-primop . 62))
(1562 (primop-compilator . 62))
(1563 (primop-closed . 62))
(1564 (primop-type . 62))
(1565 (primop-name . 62))
(1566 (primop? . 62))
(1567 (primop-table . 62))
(1568 (walk-primops . 62))
(1569 (define-compiler-primitive . 62))
(1570 (get-primop . 62))
(1571 (:debug-data . 59))
(1572 (make-debug-data . 59))
(1573 (debug-data-source . 59))
(1574 (set-debug-data-source! . 59))
(1575 (debug-data-env-maps . 59))
(1576 (set-debug-data-env-maps! . 59))
(1577 (debug-data-pc-in-parent . 59))
(1578 (debug-data-parent . 59))
(1579 (debug-data-name . 59))
(1580 (debug-data-uid . 59))
(1581 (debug-data? . 59))
(1582 (debug-data-env-shape . 59))
(1583 (new-template-uid . 59))
(1584 (*template-uid* . 59))
(1585 (template-uid . 59))
(1586 (set-template-uid! . 59))
(1587 (debug-flag-names . 59))
(1588 (type/debug-flags . 59))
(1589 (make-debug-flags . 59))
(1590 ($debug-flags . 59))
(1591 (debug-flag-accessor . 59))
(1592 (debug-flag-modifier . 59))
(1593 (keep-source-code? . 59))
(1594 (keep-environment-maps? . 59))
(1595 (keep-procedure-names? . 59))
(1596 (keep-file-names? . 59))
(1597 (tabulate-debug-data? . 59))
(1598 (debug-data-table . 59))
(1599 (with-fresh-compiler-state . 59))
(1600 (saving-and-restoring . 59))
(1601 (debug-data->info . 59))
(1602 (get-debug-data . 59))
(1603 (note-debug-data! . 59))
(1604 (new-debug-data . 59))
(1605 (maximum-stack-use . 60))
(1606 (protocol-skip . 60))
(1607 (stack-delta . 60))
(1608 (define-delta . 60))
(1609 (stack-max . 60))
(1610 (nothing . 60))
(1611 (popper . 60))
(1612 (pusher . 60))
(1613 (continue . 60))
(1614 (continuer . 60))
(1615 (get-offset . 60))
(1616 (flat-env-checker . 60))
(1617 (do-make-cont . 60))
(1618 (stack-function . 60))
(1619 (arg-spec-size . 60))
(1620 (imax . 60))
(1621 (make-segment . 61))
(1622 (segment-size . 61))
(1623 (segment-emitter . 61))
(1624 (segment->template . 61))
(1625 (segment-data->template . 61))
(1626 (check-stack-use . 61))
(1627 (:assembly-state . 61))
(1628 (make-assembly-state . 61))
(1629 (astate-literals . 61))
(1630 (set-astate-literals! . 61))
(1631 (astate-count . 61))
(1632 (set-astate-count! . 61))
(1633 (astate-pc . 61))
(1634 (set-astate-pc! . 61))
(1635 (astate-code-vector . 61))
(1636 (make-astate . 61))
(1637 (emit-byte! . 61))
(1638 (literal->index . 61))
(1639 (literal-position . 61))
(1640 (position . 61))
(1641 (emit-literal! . 61))
(1642 (emit-segment! . 61))
(1643 (empty-segment . 61))
(1644 (instruction . 61))
(1645 (sequentially . 61))
(1646 (sequentially-2 . 61))
(1647 (instruction-with-literal . 61))
(1648 (instruction-with-location . 61))
(1649 (template . 61))
(1650 (make-label . 61))
(1651 (instruction-using-label . 61))
(1652 (computed-goto-label-size . 61))
(1653 (computed-goto-instruction . 61))
(1654 (attach-label . 61))
(1655 (insert-label! . 61))
(1656 (code-vector-set2! . 61))
(1657 (two-byte-limit . 61))
(1658 (high-byte . 61))
(1659 (low-byte . 61))
(1660 ($debug-data . 61))
(1661 (note-source-code . 61))
(1662 (note-environment . 61))
(1663 (emit-with-environment-maps! . 61))
(1664 ($environment-maps . 61))
(1665 (optimizers-table . 70))
(1666 (set-optimizer! . 70))
(1667 (get-optimizer . 70))
(1668 (apply-optimizers . 70))
(1669 (flatten-form . 66))
(1670 (flatten-node . 66))
(1671 (flatteners . 66))
(1672 (define-flattener . 66))
(1673 (flatten-list . 66))
(1674 (no-free-vars . 66))
(1675 (flatten-lambda . 66))
(1676 (convert-lambda-body . 66))
(1677 (add-cells . 66))
(1678 (flatten-letrec . 66))
(1679 (flatten-pure-letrec . 66))
(1680 (flatten-impure-letrec . 66))
(1681 (assigned? . 66))
(1682 (mark-set-variables! . 66))
(1683 (mark-sets . 66))
(1684 (define-set-marker . 66))
(1685 (no-sets . 66))
(1686 (mark-letrec-sets . 66))
(1687 (make-make-cell . 66))
(1688 (make-unassigned-cell . 66))
(1689 (make-cell-ref . 66))
(1690 (make-cell-set! . 66))
(1691 (make-primop-call . 66))
(1692 (operator/flat-lambda . 66))
(1693 (operator/lambda . 66))
(1694 (operator/letrec . 66))
(1695 (operator/pure-letrec . 66))
(1696 (operator/begin . 66))
(1697 (operator/literal . 66))
(1698 (operator/call . 66))
(1699 (operator/unassigned . 66))
(1700 (operator/set! . 66))
(1701 (define-node? . 66))
(1702 (lambda-node? . 66))
(1703 (flat-lambda-node? . 66))
(1704 (define-primop . 66))
(1705 (temp0 . 66))
(1706 (make-cell-primop . 66))
(1707 (temp1 . 66))
(1708 (cell-ref-primop . 66))
(1709 (temp2 . 66))
(1710 (cell-set!-primop . 66))
(1711 (install-new-set! . 66))
(1712 (install-set! . 66))
(1713 (set->list . 66))
(1714 (set-add-element! . 66))
(1715 (set-union! . 66))
(1716 (set-difference! . 66))
(1717 (clean-var-list . 66))
(1718 (clear-var-set! . 66))
(1719 (node-type . 63))
(1720 (reconstruct-type . 63))
(1721 (reconstruct . 63))
(1722 (examine . 63))
(1723 (reconstructors . 63))
(1724 (define-reconstructor . 63))
(1725 (reconstruct-lambda . 63))
(1726 (careful-codomain . 63))
(1727 (reconstruct-name . 63))
(1728 (proc->reconstructor . 63))
(1729 (reconstruct-call . 63))
(1730 (fork-constraints . 63))
(1731 (reconstruct-letrec . 63))
(1732 (node->type . 63))
(1733 (name-node? . 63))
(1734 (lambda-node? . 63))
(1735 (literal-node? . 63))
(1736 (primop-reconstructors . 63))
(1737 (define-primop-reconstructor . 63))
(1738 (reconstruct-apply . 63))
(1739 (constant-type . 63))
(1740 (compile-expression . 64))
(1741 (compile . 64))
(1742 (compilators . 64))
(1743 (define-compilator . 64))
(1744 (compile-constant . 64))
(1745 (compile-call . 64))
(1746 (compile-name-call . 64))
(1747 (compile-redex . 64))
(1748 (compile-unknown-call . 64))
(1749 (maybe-push-continuation . 64))
(1750 (fixup-source . 64))
(1751 (push-arguments . 64))
(1752 (push-all-with-names . 64))
(1753 (empty-segment? . 64))
(1754 (letrec-lambda-code . 64))
(1755 (letrec-body-code . 64))
(1756 (make-cont . 64))
(1757 (cont-kind . 64))
(1758 (cont-source-info . 64))
(1759 (return-cont . 64))
(1760 (return-cont? . 64))
(1761 (fall-through-cont . 64))
(1762 (fall-through-cont? . 64))
(1763 (ignore-values-segment . 64))
(1764 (ignore-values-cont . 64))
(1765 (ignore-values-cont? . 64))
(1766 (accept-values-cont . 64))
(1767 (accept-values-cont? . 64))
(1768 (deliver-value . 64))
(1769 (named-cont . 64))
(1770 (cont-name . 64))
(1771 (name-node-binding . 64))
(1772 (generate-trap . 64))
(1773 (type-check . 64))
(1774 (set-type-check?! . 64))
(1775 (*type-check?* . 64))
(1776 (diagnose-call-error . 64))
(1777 (lambda-node? . 64))
(1778 (flat-lambda-node? . 64))
(1779 (name-node? . 64))
(1780 (literal-node? . 64))
(1781 (operator/lambda . 64))
(1782 (operator/set! . 64))
(1783 (operator/call . 64))
(1784 (operator/begin . 64))
(1785 (compile-lambda . 64))
(1786 (compile-continuation-lambda . 64))
(1787 (really-compile-lambda . 64))
(1788 (compile-lambda-code . 64))
(1789 (name-node->symbol . 64))
(1790 (set-lexical-offsets! . 64))
(1791 (compile-flat-lambda . 64))
(1792 (really-compile-flat-lambda . 64))
(1793 (compile-flat-environment . 64))
(1794 (get-variables-offsets . 64))
(1795 (environment-code . 64))
(1796 (figure-env-data . 64))
(1797 (one-byte-offsetter . 64))
(1798 (two-byte-offsetter . 64))
(1799 (back-env-data . 64))
(1800 (sort-list . 64))
(1801 (direct-compilator . 64))
(1802 (direct-closed-compilator . 64))
(1803 (nargs->domain . 64))
(1804 (get-primop-type . 64))
(1805 (primop-types . 64))
(1806 (define-simple-primitive . 64))
(1807 (simple-compilator . 64))
(1808 (simple-closed-compilator . 64))
(1809 (symbol-append . 64))
(1810 (define-stob-predicate . 64))
(1811 (define-data-struct-primitives . 64))
(1812 (define-vector-primitives . 64))
(1813 (define-more-vector-primitives . 64))
(1814 (compile-call-with-values . 64))
(1815 (compile-call-with-values-producer . 64))
(1816 (thunk-node? . 64))
(1817 (thunk-body . 64))
(1818 (unflatten-form . 64))
(1819 (define-n-ary-compiler-primitive . 64))
(1820 (n-ary-primitive-compilator . 64))
(1821 (call-on-arg-and-id . 64))
(1822 (call-on-args . 64))
(1823 (op/unspecific . 64))
(1824 (op/literal . 64))
(1825 (push-all-but-last . 64))
(1826 (dispatch-protocol-size . 64))
(1827 (make-dispatch-protocol . 64))
(1828 (compile-forms . 64))
(1829 (compile-forms-loop . 64))
(1830 (compile-form . 64))
(1831 (define-node? . 64))
(1832 ($env-key . 64))
(1833 (compile-definition . 64))
(1834 (location-contents-offset . 64))
(1835 (make-startup-procedure . 64))
(1836 (append-templates . 64))
(1837 (an-ignore-values-cont . 64))
(1838 (eval . 82))
(1839 (load-into . 82))
(1840 (eval-from-file . 82))
(1841 (load . 82))
(1842 (really-load-into . 82))
(1843 (compile-and-run . 82))
(1844 (display-condition . 49))
(1845 (really-display-condition . 49))
(1846 (*depth* . 49))
(1847 (*length* . 49))
(1848 (&disclose-condition . 49))
(1849 (disclose-condition . 49))
(1850 (limited-write . 49))
(1851 (command-processor . 86))
(1852 (mini-load . 86))
(1853 (read-string . 86))
(1854 (enum-case . 43))
(1855 (run-threads . 41))
(1856 (run-threads-with-housekeeper . 41))
(1857 (round-robin-event-handler . 41))
(1858 (make-counter . 41))
(1859 (counter-value . 41))
(1860 (increment-counter! . 41))
(1861 (decrement-counter! . 41))
(1862 (root-scheduler . 42))
(1863 (make-root-event-handler . 42))
(1864 (root-handler . 42))
(1865 (cheap-display-condition . 42))
(1866 (abort-token . 42))
(1867 (scheme-exit-now . 42))
(1868 (root-wait . 42))
(1869 (do-some-waiting . 42))
(1870 (one-minute-of-milliseconds . 42))
(1871 (one-day-of-milliseconds . 42))
(1872 (one-year-of-minutes . 42))
(1873 (deadlock-handler . 42))
(1874 (call-when-deadlocked! . 42))
(1875 (spawn-output-forcers . 42))
(1876 (usual-resumer . 47))
(1877 (initialize-rts . 47))
(1878 (start . 87))
(1879 (make-built-in-structures . 87))
(1880 (initialize-interaction-environment! . 87))
(1881 (make-initial-package . 87))
(1882 (make-tower . 87))
(1883 (the-usual-transforms . 57))
(1884 (define-usual-macro . 57))
(1885 (usual-transform . 57))
(1886 (do-spec? . 57))
(1887 (specs? . 57))
(1888 (case-clause? . 57))
(1889 (process-rules . 57))
(1890 (segment-pattern? . 57))
(1891 (segment-template? . 57))
(1892 (segment-depth . 57))
(1893 (segment-tail . 57))
(1894 (indicators-for-zero-or-more . 57))
(1895 (find-free-names-in-syntax-rules . 57))
(1896 (strongly-connected-components . 78))
(1897 (find-next-vertex . 78))
(1898 (:vertex . 78))
(1899 (really-make-vertex . 78))
(1900 (vertex-lowpoint . 78))
(1901 (set-vertex-lowpoint! . 78))
(1902 (vertex-parent . 78))
(1903 (set-vertex-parent! . 78))
(1904 (vertex-index . 78))
(1905 (set-vertex-index! . 78))
(1906 (vertex-stack . 78))
(1907 (set-vertex-stack! . 78))
(1908 (vertex-edges . 78))
(1909 (set-vertex-edges! . 78))
(1910 (vertex-data . 78))
(1911 (vertex? . 78))
(1912 (make-vertex . 78))
(1913 (make-vertices . 78))
(1914 (do-vertex . 78))
(1915 (get-strong . 78))
(1916 (end-vertex . 78))
(1917 (unwind-stack . 78))
(1918 (follow-edge . 78))
(1919 (pop-vertex-edge! . 78))
(1920 (find-usages . 75))
(1921 (maybe-update-known-type . 75))
(1922 (find-node-usages . 75))
(1923 (analyze . 75))
(1924 (analyze-nodes . 75))
(1925 (usage-analyzers . 75))
(1926 (define-usage-analyzer . 75))
(1927 (nothing . 75))
(1928 (add-if-free . 75))
(1929 (analyze-letrec . 75))
(1930 (:usage . 75))
(1931 (really-make-usage . 75))
(1932 (usage-assignment-count . 75))
(1933 (set-assignment! . 75))
(1934 (usage-operator-count . 75))
(1935 (set-operator! . 75))
(1936 (usage-reference-count . 75))
(1937 (set-reference! . 75))
(1938 (usage-name-node . 75))
(1939 (usage? . 75))
(1940 (make-usage . 75))
(1941 (make-package-usage . 75))
(1942 (package-usage? . 75))
(1943 (usage-incrementator . 75))
(1944 (note-reference! . 75))
(1945 (note-operator! . 75))
(1946 (note-assignment! . 75))
(1947 (lambda-node? . 75))
(1948 (quote-node? . 75))
(1949 (literal-node? . 75))
(1950 (call-node? . 75))
(1951 (name-node? . 75))
(1952 (define-node? . 75))
(1953 (sort-forms . 75))
(1954 (stuff-count . 75))
(1955 (maybe-make-aliased . 75))
(1956 (topologically-sort . 75))
(1957 (:form . 75))
(1958 (really-make-form . 75))
(1959 (form-temp . 75))
(1960 (set-form-temp! . 75))
(1961 (form-free . 75))
(1962 (set-form-free! . 75))
(1963 (form-unaliased? . 75))
(1964 (set-form-unaliased?! . 75))
(1965 (form-aliases . 75))
(1966 (set-form-aliases! . 75))
(1967 (form-node . 75))
(1968 (form? . 75))
(1969 (make-form . 75))
(1970 (insert-aliases . 75))
(1971 (make-inline-transform . 77))
(1972 (clean-node . 77))
(1973 (clean-lambda . 77))
(1974 (clean-lookup . 77))
(1975 (unused-name . 77))
(1976 (remove-bindings . 77))
(1977 (inline-transform . 77))
(1978 (make-substitution . 77))
(1979 (reconstitute . 77))
(1980 (reconstitute-name . 77))
(1981 (operator/name . 77))
(1982 (operator/literal . 77))
(1983 (qualified->name . 77))
(1984 (get-qualified-env . 77))
(1985 (quote-node? . 77))
(1986 (call-node? . 77))
(1987 (lambda-node? . 77))
(1988 (name-node? . 77))
(1989 (loophole-node? . 77))
(1990 (operator . 84))
(1991 (primop . 84))
(1992 (simple-interface . 84))
(1993 (package . 84))
(1994 (transform . 84))
(1995 (package-define-static! . 84))
(1996 (:lock . 45))
(1997 (really-make-lock . 45))
(1998 (lock? . 45))
(1999 (lock-uid . 45))
(2000 (lock-queue . 45))
(2001 (lock-owner-uid . 45))
(2002 (set-lock-owner-uid! . 45))
(2003 (next-uid . 45))
(2004 (make-lock . 45))
(2005 (obtain-lock . 45))
(2006 (maybe-obtain-lock . 45))
(2007 (release-lock . 45))
(2008 (:syntax . 73))
(2009 (:values . 73))
(2010 (:arguments . 73))
(2011 (:value . 73))
(2012 (procedure . 73))
(2013 (:boolean . 73))
(2014 (:char . 73))
(2015 (:null . 73))
(2016 (:unspecific . 73))
(2017 (:number . 73))
(2018 (:complex . 73))
(2019 (:real . 73))
(2020 (:rational . 73))
(2021 (:integer . 73))
(2022 (:exact-integer . 73))
(2023 (:pair . 73))
(2024 (:string . 73))
(2025 (:symbol . 73))
(2026 (:vector . 73))
(2027 (:procedure . 73))
(2028 (:input-port . 73))
(2029 (:output-port . 73))
(2030 (:error . 73))
(2031 (:escape . 73))
(2032 (:structure . 73))
(2033 (:type . 73))
(2034 (def . 72))
(2035 (really-def . 72))
(2036 (define-multiple . 72))
(2037 (define-interface . 72))
(2038 (compound-interface . 72))
(2039 (export . 72))
(2040 (define-structure . 72))
(2041 (define-structures . 72))
(2042 (structure . 72))
(2043 (structures . 72))
(2044 (modify . 72))
(2045 (subset . 72))
(2046 (with-prefix . 72))
(2047 (a-package . 72))
(2048 (receive . 72))
(2049 (define-reflective-tower-maker . 72))
(2050 (export-reflective-tower-maker . 72))
(2051 (define-module . 72))
(2052 (make-a-package . 72))
(2053 (loser . 72))
(2054 (interface-of . 72))
(2055 (*verify-later!* . 72))
(2056 (verify-later! . 72))
(2057 (set-verify-later! . 72))
(2058 (note-name! . 72))
(2059 (collect-packages . 69))
(2060 (package-source . 69))
(2061 (read-files . 69))
(2062 (package-optimizer-names . 69))
(2063 (check-structure . 69))
(2064 (compile-package . 71))
(2065 (expand-package . 71))
(2066 (define-usual-transform . 71))
(2067 (define-primitives . 71))
(2068 (make-define-primitive-node . 71))
(2069 (operator/define . 71))
(2070 (operator/primitive-procedure . 71))
(2071 (analyze-forms . 76))
(2072 (analyze-form . 76))
(2073 (inlinable-rhs? . 76))
(2074 (simple-lambda? . 76))
(2075 (operator/name . 76))
(2076 (simple? . 76))
(2077 (simple-list? . 76))
(2078 (analyzers . 76))
(2079 (define-analyzer . 76))
(2080 (static-value . 76))
(2081 (really-simple-call? . 76))
(2082 (primitive-proc? . 76))
(2083 (no-ret . 76))
(2084 (ret . 76))
(2085 (simple-literal? . 76))
(2086 (require . 76))
(2087 (*debug?* . 76))
(2088 (package-lookup-type . 76))
(2089 (lambda-node? . 76))
(2090 (name-node? . 76))
(2091 (loophole-node? . 76))
(2092 (define-node? . 76))
(2093 (literal-node? . 76))
(2094 (ensure-loaded . 83))
-
; Template uid -> name, parent, pc in parent, env maps
(0 scheme-level-0 #f #f ())
(1 atan 0 7 ())
(2 scheme-level-0 #f #f ())
(3 set-location-defined?! 2 7 ())
(4 scheme-level-0 #f #f ())
(5 acos 4 7 ())
(6 scheme-level-0 #f #f ())
(7 vm-extension 6 7 ())
(8 scheme-level-0 #f #f ())
(9 asin 8 7 ())
(10 scheme-level-0 #f #f ())
(11 location-defined? 10 7 ())
(12 scheme-level-0 #f #f ())
(13 time 12 7 ())
(14 scheme-level-0 #f #f ())
(15 template-set! 14 7 ())
(16 scheme-level-0 #f #f ())
(17 set-current-proposal! 16 7 ())
(18 scheme-level-0 #f #f ())
(19 scheme-level-0 #f #f ())
(20 cons 19 7 ())
(21 scheme-level-0 #f #f ())
(22 wait 21 7 ())
(23 scheme-level-0 #f #f ())
(24 trap 23 7 ())
(25 scheme-level-0 #f #f ())
(26 assq 25 7 ())
(27 scheme-level-0 #f #f ())
(28 current-proposal 27 7 ())
(29 scheme-level-0 #f #f ())
(30 make-weak-pointer 29 7 ())
(31 scheme-level-0 #f #f ())
(32 lookup-shared-binding 31 7 ())
(33 scheme-level-0 #f #f ())
(34 push 33 7 ())
(35 scheme-level-0 #f #f ())
(36 provisional-set-contents! 35 7 ())
(37 scheme-level-0 #f #f ())
(38 set-contents! 37 7 ())
(39 scheme-level-0 #f #f ())
(40 read-char 39 7 ())
(41 scheme-level-0 #f #f ())
(42 provisional-contents 41 7 ())
(43 scheme-level-0 #f #f ())
(44 make-cell 43 7 ())
(45 scheme-level-0 #f #f ())
(46 sqrt 45 7 ())
(47 scheme-level-0 #f #f ())
(48 * 47 7 ())
(49 scheme-level-0 #f #f ())
(50 contents 49 7 ())
(51 scheme-level-0 #f #f ())
(52 + 51 7 ())
(53 scheme-level-0 #f #f ())
(54 peek-char 53 7 ())
(55 scheme-level-0 #f #f ())
(56 - 55 7 ())
(57 scheme-level-0 #f #f ())
(58 continuation-set! 57 7 ())
(59 scheme-level-0 #f #f ())
(60 / 59 7 ())
(61 scheme-level-0 #f #f ())
(62 weak-pointer? 61 7 ())
(63 scheme-level-0 #f #f ())
(64 atan1 63 7 ())
(65 scheme-level-0 #f #f ())
(66 atan2 65 7 ())
(67 scheme-level-0 #f #f ())
(68 quotient 67 7 ())
(69 scheme-level-0 #f #f ())
(70 close-channel 69 7 ())
(71 scheme-level-0 #f #f ())
(72 channel-abort 71 7 ())
(73 scheme-level-0 #f #f ())
(74 char? 73 7 ())
(75 scheme-level-0 #f #f ())
(76 < 75 7 ())
(77 scheme-level-0 #f #f ())
(78 = 77 7 ())
(79 scheme-level-0 #f #f ())
(80 provisional-set-port-data! 79 7 ())
(81 scheme-level-0 #f #f ())
(82 cell? 81 7 ())
(83 scheme-level-0 #f #f ())
(84 > 83 7 ())
(85 scheme-level-0 #f #f ())
(86 make-location 85 7 ())
(87 scheme-level-0 #f #f ())
(88 imag-part 87 7 ())
(89 scheme-level-0 #f #f ())
(90 set-port-data! 89 7 ())
(91 scheme-level-0 #f #f ())
(92 make-template 91 7 ())
(93 scheme-level-0 #f #f ())
(94 real? 93 7 ())
(95 scheme-level-0 #f #f ())
(96 real-part 95 7 ())
(97 scheme-level-0 #f #f ())
(98 provisional-port-data 97 7 ())
(99 scheme-level-0 #f #f ())
(100 record-length 99 7 ())
(101 scheme-level-0 #f #f ())
(102 port-data 101 7 ())
(103 scheme-level-0 #f #f ())
(104 pair? 103 7 ())
(105 scheme-level-0 #f #f ())
(106 provisional-set-port-lock! 105 7 ())
(107 scheme-level-0 #f #f ())
(108 make-port 107 7 ())
(109 scheme-level-0 #f #f ())
(110 set-port-lock! 109 7 ())
(111 scheme-level-0 #f #f ())
(112 bit-count 111 7 ())
(113 scheme-level-0 #f #f ())
(114 provisional-checked-record-ref 113 7 ())
(115 scheme-level-0 #f #f ())
(116 return-from-exception 115 7 ())
(117 scheme-level-0 #f #f ())
(118 provisional-port-lock 117 7 ())
(119 scheme-level-0 #f #f ())
(120 location? 119 7 ())
(121 scheme-level-0 #f #f ())
(122 checked-record-ref 121 7 ())
(123 scheme-level-0 #f #f ())
(124 channel-maybe-read 123 7 ())
(125 scheme-level-0 #f #f ())
(126 add-finalizer! 125 7 ())
(127 scheme-level-0 #f #f ())
(128 rational? 127 7 ())
(129 scheme-level-0 #f #f ())
(130 template? 129 7 ())
(131 scheme-level-0 #f #f ())
(132 port-lock 131 7 ())
(133 scheme-level-0 #f #f ())
(134 vector-length 133 7 ())
(135 scheme-level-0 #f #f ())
(136 make-continuation 135 7 ())
(137 scheme-level-0 #f #f ())
(138 provisional-shared-binding-ref 137 7 ())
(139 scheme-level-0 #f #f ())
(140 string-length 139 7 ())
(141 scheme-level-0 #f #f ())
(142 shared-binding-ref 141 7 ())
(143 scheme-level-0 #f #f ())
(144 port? 143 7 ())
(145 scheme-level-0 #f #f ())
(146 angle 145 7 ())
(147 scheme-level-0 #f #f ())
(148 false 147 7 ())
(149 scheme-level-0 #f #f ())
(150 remainder 149 7 ())
(151 scheme-level-0 #f #f ())
(152 continuation? 151 7 ())
(153 scheme-level-0 #f #f ())
(154 channel-ready? 153 7 ())
(155 scheme-level-0 #f #f ())
(156 binary-reduce1 155 7 ())
(157 scheme-level-0 #f #f ())
(158 binary-reduce2 157 7 ())
(159 scheme-level-0 #f #f ())
(160 char<? 159 7 ())
(161 scheme-level-0 #f #f ())
(162 char=? 161 7 ())
(163 scheme-level-0 #f #f ())
(164 <= 163 7 ())
(165 scheme-level-0 #f #f ())
(166 magnitude 165 7 ())
(167 scheme-level-0 #f #f ())
(168 >= 167 7 ())
(169 scheme-level-0 #f #f ())
(170 with-continuation 169 7 ())
(171 scheme-level-0 #f #f ())
(172 floor 171 7 ())
(173 scheme-level-0 #f #f ())
(174 provisional-checked-record-set! 173 7 ())
(175 scheme-level-0 #f #f ())
(176 apply 175 7 ())
(177 scheme-level-0 #f #f ())
(178 memory-status 177 7 ())
(179 scheme-level-0 #f #f ())
(180 checked-record-set! 179 7 ())
(181 scheme-level-0 #f #f ())
(182 exact->inexact 181 7 ())
(183 scheme-level-0 #f #f ())
(184 inexact->exact 183 7 ())
(185 scheme-level-0 #f #f ())
(186 error 185 7 ())
(187 scheme-level-0 #f #f ())
(188 extended-number-length 187 7 ())
(189 scheme-level-0 #f #f ())
(190 open-channels-list 189 7 ())
(191 scheme-level-0 #f #f ())
(192 provisional-shared-binding-set! 191 7 ())
(193 scheme-level-0 #f #f ())
(194 channel-id 193 7 ())
(195 scheme-level-0 #f #f ())
(196 shared-binding-set! 195 7 ())
(197 scheme-level-0 #f #f ())
(198 numerator 197 7 ())
(199 scheme-level-0 #f #f ())
(200 eof-object 199 7 ())
(201 scheme-level-0 #f #f ())
(202 byte-vector-length 201 7 ())
(203 scheme-level-0 #f #f ())
(204 record-ref 203 7 ())
(205 scheme-level-0 #f #f ())
(206 make-polar 205 7 ())
(207 scheme-level-0 #f #f ())
(208 write-char 207 7 ())
(209 scheme-level-0 #f #f ())
(210 symbol->string 209 7 ())
(211 scheme-level-0 #f #f ())
(212 exact? 211 7 ())
(213 scheme-level-0 #f #f ())
(214 provisional-vector-ref 213 7 ())
(215 scheme-level-0 #f #f ())
(216 vector-ref 215 7 ())
(217 scheme-level-0 #f #f ())
(218 set-current-thread! 217 7 ())
(219 scheme-level-0 #f #f ())
(220 provisional-set-port-index! 219 7 ())
(221 scheme-level-0 #f #f ())
(222 immutable? 221 7 ())
(223 scheme-level-0 #f #f ())
(224 set-exception-handlers! 223 7 ())
(225 scheme-level-0 #f #f ())
(226 string-ref 225 7 ())
(227 scheme-level-0 #f #f ())
(228 set-port-index! 227 7 ())
(229 scheme-level-0 #f #f ())
(230 provisional-set-port-limit! 229 7 ())
(231 scheme-level-0 #f #f ())
(232 make-shared-binding 231 7 ())
(233 scheme-level-0 #f #f ())
(234 current-thread 233 7 ())
(235 scheme-level-0 #f #f ())
(236 provisional-port-index 235 7 ())
(237 scheme-level-0 #f #f ())
(238 channel-status 237 7 ())
(239 scheme-level-0 #f #f ())
(240 set-port-limit! 239 7 ())
(241 scheme-level-0 #f #f ())
(242 shared-binding-name 241 7 ())
(243 scheme-level-0 #f #f ())
(244 port-index 243 7 ())
(245 scheme-level-0 #f #f ())
(246 make-immutable! 245 7 ())
(247 scheme-level-0 #f #f ())
(248 byte-vector-logging-ref 247 7 ())
(249 scheme-level-0 #f #f ())
(250 set-enabled-interrupts! 249 7 ())
(251 scheme-level-0 #f #f ())
(252 provisional-port-limit 251 7 ())
(253 scheme-level-0 #f #f ())
(254 port-limit 253 7 ())
(255 scheme-level-0 #f #f ())
(256 ascii->char 255 7 ())
(257 scheme-level-0 #f #f ())
(258 char->ascii 257 7 ())
(259 scheme-level-0 #f #f ())
(260 undefine-shared-binding 259 7 ())
(261 scheme-level-0 #f #f ())
(262 attempt-copy-bytes! 261 7 ())
(263 scheme-level-0 #f #f ())
(264 record-set! 263 7 ())
(265 scheme-level-0 #f #f ())
(266 shared-binding? 265 7 ())
(267 scheme-level-0 #f #f ())
(268 eof-object? 267 7 ())
(269 scheme-level-0 #f #f ())
(270 set-interrupt-handlers! 269 7 ())
(271 scheme-level-0 #f #f ())
(272 record 271 7 ())
(273 scheme-level-0 #f #f ())
(274 schedule-interrupt 273 7 ())
(275 scheme-level-0 #f #f ())
(276 channel-maybe-write 275 7 ())
(277 scheme-level-0 #f #f ())
(278 unspecific 277 7 ())
(279 scheme-level-0 #f #f ())
(280 provisional-vector-set! 279 7 ())
(281 scheme-level-0 #f #f ())
(282 extended-number-ref 281 7 ())
(283 scheme-level-0 #f #f ())
(284 vector-set! 283 7 ())
(285 scheme-level-0 #f #f ())
(286 copy-bytes! 285 7 ())
(287 scheme-level-0 #f #f ())
(288 string-set! 287 7 ())
(289 scheme-level-0 #f #f ())
(290 unassigned 289 7 ())
(291 scheme-level-0 #f #f ())
(292 call-external-value 291 7 ())
(293 scheme-level-0 #f #f ())
(294 values 293 7 ())
(295 scheme-level-0 #f #f ())
(296 intern 295 7 ())
(297 scheme-level-0 #f #f ())
(298 vector 297 7 ())
(299 scheme-level-0 #f #f ())
(300 write-image-low 299 7 ())
(301 scheme-level-0 #f #f ())
(302 provisional-byte-vector-ref 301 7 ())
(303 scheme-level-0 #f #f ())
(304 byte-vector-logging-set! 303 7 ())
(305 scheme-level-0 #f #f ())
(306 byte-vector-ref 305 7 ())
(307 scheme-level-0 #f #f ())
(308 make-double 307 7 ())
(309 scheme-level-0 #f #f ())
(310 provisional-set-location-id! 309 7 ())
(311 scheme-level-0 #f #f ())
(312 make-record 311 7 ())
(313 scheme-level-0 #f #f ())
(314 set-location-id! 313 7 ())
(315 scheme-level-0 #f #f ())
(316 provisional-location-id 315 7 ())
(317 scheme-level-0 #f #f ())
(318 location-id 317 7 ())
(319 scheme-level-0 #f #f ())
(320 bitwise-and 319 7 ())
(321 scheme-level-0 #f #f ())
(322 eq? 321 7 ())
(323 scheme-level-0 #f #f ())
(324 double? 323 7 ())
(325 scheme-level-0 #f #f ())
(326 extended-number-set! 325 7 ())
(327 scheme-level-0 #f #f ())
(328 make-vector 327 7 ())
(329 scheme-level-0 #f #f ())
(330 record? 329 7 ())
(331 scheme-level-0 #f #f ())
(332 provisional-set-port-buffer! 331 7 ())
(333 scheme-level-0 #f #f ())
(334 make-string 333 7 ())
(335 scheme-level-0 #f #f ())
(336 set-port-buffer! 335 7 ())
(337 scheme-level-0 #f #f ())
(338 primitive-catch 337 7 ())
(339 scheme-level-0 #f #f ())
(340 string-hash 339 7 ())
(341 scheme-level-0 #f #f ())
(342 provisional-byte-vector-set! 341 7 ())
(343 scheme-level-0 #f #f ())
(344 template-length 343 7 ())
(345 scheme-level-0 #f #f ())
(346 provisional-port-buffer 345 7 ())
(347 scheme-level-0 #f #f ())
(348 number? 347 7 ())
(349 scheme-level-0 #f #f ())
(350 port-buffer 349 7 ())
(351 scheme-level-0 #f #f ())
(352 byte-vector-set! 351 7 ())
(353 scheme-level-0 #f #f ())
(354 bitwise-ior 353 7 ())
(355 scheme-level-0 #f #f ())
(356 provisional-set-car! 355 7 ())
(357 scheme-level-0 #f #f ())
(358 provisional-set-cdr! 357 7 ())
(359 scheme-level-0 #f #f ())
(360 set-car! 359 7 ())
(361 scheme-level-0 #f #f ())
(362 closure-env 361 7 ())
(363 scheme-level-0 #f #f ())
(364 vector? 363 7 ())
(365 scheme-level-0 #f #f ())
(366 bitwise-not 365 7 ())
(367 scheme-level-0 #f #f ())
(368 set-cdr! 367 7 ())
(369 scheme-level-0 #f #f ())
(370 provisional-car 369 7 ())
(371 scheme-level-0 #f #f ())
(372 symbol? 371 7 ())
(373 scheme-level-0 #f #f ())
(374 string? 373 7 ())
(375 scheme-level-0 #f #f ())
(376 provisional-cdr 375 7 ())
(377 scheme-level-0 #f #f ())
(378 car 377 7 ())
(379 scheme-level-0 #f #f ())
(380 bitwise-xor 379 7 ())
(381 scheme-level-0 #f #f ())
(382 cdr 381 7 ())
(383 scheme-level-0 #f #f ())
(384 find-all-records 383 7 ())
(385 scheme-level-0 #f #f ())
(386 continuation-length 385 7 ())
(387 scheme-level-0 #f #f ())
(388 log 387 7 ())
(389 scheme-level-0 #f #f ())
(390 message 389 7 ())
(391 scheme-level-0 #f #f ())
(392 tan 391 7 ())
(393 scheme-level-0 #f #f ())
(394 collect 393 7 ())
(395 scheme-level-0 #f #f ())
(396 cos 395 7 ())
(397 scheme-level-0 #f #f ())
(398 channel-os-index 397 7 ())
(399 scheme-level-0 #f #f ())
(400 provisional-set-port-status! 399 7 ())
(401 scheme-level-0 #f #f ())
(402 make-extended-number 401 7 ())
(403 scheme-level-0 #f #f ())
(404 set-port-status! 403 7 ())
(405 scheme-level-0 #f #f ())
(406 sin 405 7 ())
(407 scheme-level-0 #f #f ())
(408 exp 407 7 ())
(409 scheme-level-0 #f #f ())
(410 provisional-port-status 409 7 ())
(411 scheme-level-0 #f #f ())
(412 pop 411 7 ())
(413 scheme-level-0 #f #f ())
(414 port-status 413 7 ())
(415 scheme-level-0 #f #f ())
(416 return-from-callback 415 7 ())
(417 scheme-level-0 #f #f ())
(418 provisional-set-port-locked?! 417 7 ())
(419 scheme-level-0 #f #f ())
(420 set-port-locked?! 419 7 ())
(421 scheme-level-0 #f #f ())
(422 make-byte-vector 421 7 ())
(423 scheme-level-0 #f #f ())
(424 weak-pointer-ref 423 7 ())
(425 scheme-level-0 #f #f ())
(426 call-with-values 425 7 ())
(427 scheme-level-0 #f #f ())
(428 provisional-port-locked? 427 7 ())
(429 scheme-level-0 #f #f ())
(430 denominator 429 7 ())
(431 scheme-level-0 #f #f ())
(432 port-locked? 431 7 ())
(433 scheme-level-0 #f #f ())
(434 reverse-list->string 433 7 ())
(435 scheme-level-0 #f #f ())
(436 extended-number? 435 7 ())
(437 scheme-level-0 #f #f ())
(438 shared-binding-is-import? 437 7 ())
(439 scheme-level-0 #f #f ())
(440 provisional-cell-ref 439 7 ())
(441 scheme-level-0 #f #f ())
(442 find-all 441 7 ())
(443 scheme-level-0 #f #f ())
(444 cell-ref 443 7 ())
(445 scheme-level-0 #f #f ())
(446 byte-vector? 445 7 ())
(447 scheme-level-0 #f #f ())
(448 string=? 447 7 ())
(449 scheme-level-0 #f #f ())
(450 open-channel 449 7 ())
(451 scheme-level-0 #f #f ())
(452 channel? 451 7 ())
(453 scheme-level-0 #f #f ())
(454 make-rectangular 453 7 ())
(455 scheme-level-0 #f #f ())
(456 set-session-data! 455 7 ())
(457 scheme-level-0 #f #f ())
(458 maybe-commit 457 7 ())
(459 scheme-level-0 #f #f ())
(460 template-ref 459 7 ())
(461 scheme-level-0 #f #f ())
(462 make-closure 461 7 ())
(463 scheme-level-0 #f #f ())
(464 session-data 463 7 ())
(465 scheme-level-0 #f #f ())
(466 integer? 465 7 ())
(467 scheme-level-0 #f #f ())
(468 signal-condition 467 7 ())
(469 scheme-level-0 #f #f ())
(470 provisional-set-port-pending-eof?! 469 7 ())
(471 scheme-level-0 #f #f ())
(472 port-handler 471 7 ())
(473 scheme-level-0 #f #f ())
(474 set-port-pending-eof?! 473 7 ())
(475 scheme-level-0 #f #f ())
(476 arithmetic-shift 475 7 ())
(477 scheme-level-0 #f #f ())
(478 provisional-port-pending-eof? 477 7 ())
(479 scheme-level-0 #f #f ())
(480 provisional-cell-set! 479 7 ())
(481 scheme-level-0 #f #f ())
(482 complex? 481 7 ())
(483 scheme-level-0 #f #f ())
(484 port-pending-eof? 483 7 ())
(485 scheme-level-0 #f #f ())
(486 cell-set! 485 7 ())
(487 scheme-level-0 #f #f ())
(488 binary-comparison-reduce2 487 7 ())
(489 scheme-level-0 #f #f ())
(490 scheme-level-0 #f #f ())
(491 closure? 490 7 ())
(492 scheme-level-0 #f #f ())
(493 continuation-ref 492 7 ())
(494 scheme-level-0 #f #f ())
(495 closure-template 494 7 ())
(496 scheme-level-0 #f #f ())
(497 current-cont 496 7 ())
(498 scheme-level-0 #f #f ())
(499 char->integer 498 10 ())
(500 scheme-level-0 #f #f ())
(501 integer->char 500 10 ())
(502 scheme-level-0 #f #f ())
(503 invoke-closure 502 10 ())
(504 scheme-level-0 #f #f ())
(505 primitive-cwcc 504 10 ())
(506 #f 505 18 ())
(507 scheme-level-0 #f #f ())
(508 make-undefined-location 507 10 ())
(509 scheme-level-0 #f #f ())
(510 location-assigned? 509 10 ())
(511 scheme-level-0 #f #f ())
(512 vector-unassigned? 511 10 ())
(513 scheme-level-0 #f #f ())
(514 string-copy 513 10 ())
(515 scheme-level-0 #f #f ())
(516 string->symbol 515 10 ())
(517 scheme-level-0 #f #f ())
(518 input-port? 517 10 ())
(519 scheme-level-0 #f #f ())
(520 output-port? 519 10 ())
(521 scheme-level-0 #f #f ())
(522 record-type 521 10 ())
(523 scheme-level-0 #f #f ())
(524 make-code-vector 523 10 ())
(525 scheme-level-0 #f #f ())
(526 code-vector? 525 10 ())
(527 scheme-level-0 #f #f ())
(528 code-vector-length 527 10 ())
(529 scheme-level-0 #f #f ())
(530 code-vector-ref 529 10 ())
(531 scheme-level-0 #f #f ())
(532 code-vector-set! 531 10 ())
(533 scheme-level-0 #f #f ())
(534 lookup-imported-binding 533 10 ())
(535 scheme-level-0 #f #f ())
(536 lookup-exported-binding 535 10 ())
(537 scheme-level-0 #f #f ())
(538 define-imported-binding 537 10 ())
(539 scheme-level-0 #f #f ())
(540 define-exported-binding 539 10 ())
(541 scheme-level-0 #f #f ())
(542 undefine-imported-binding 541 10 ())
(543 scheme-level-0 #f #f ())
(544 undefine-exported-binding 543 10 ())
(545 scheme-level-0 #f #f ())
(546 secret-length 545 10 ())
(547 scheme-level-0 #f #f ())
(548 byte-vector 547 10 ())
(549 loop##0 548 47 ())
(550 scheme-level-0 #f #f ())
(551 debug-message 550 10 ())
(552 scheme-level-0 #f #f ())
(553 signal 552 10 ())
(554 scheme-level-0 #f #f ())
(555 vector-prefix->list 554 10 ())
(556 loop##2 555 18 ())
(557 scheme-level-0 #f #f ())
(558 write-image 557 10 ())
(559 scheme-level-0 #f #f ())
(560 make-proposal 559 10 ())
(561 scheme-level-0 #f #f ())
(562 warn 561 10 ())
(563 scheme-level-0 #f #f ())
(564 note 563 10 ())
(565 scheme-level-0 #f #f ())
(566 syntax-error 565 10 ())
(567 scheme-level-0 #f #f ())
(568 call-error 567 10 ())
(569 scheme-level-0 #f #f ())
(570 scheme-level-0 #f #f ())
(571 scheme-level-0 #f #f ())
(572 scheme-level-1 #f #f ())
(573 scheme-level-1 #f #f ())
(574 scheme-level-1 #f #f ())
(575 scheme-level-1 #f #f ())
(576 scheme-level-1 #f #f ())
(577 scheme-level-1 #f #f ())
(578 scheme-level-1 #f #f ())
(579 scheme-level-1 #f #f ())
(580 scheme-level-1 #f #f ())
(581 scheme-level-1 #f #f ())
(582 scheme-level-1 #f #f ())
(583 scheme-level-1 #f #f ())
(584 #f 583 14 ())
(585 scheme-level-1 #f #f ())
(586 #f 585 14 ())
(587 scheme-level-1 #f #f ())
(588 scheme-level-1 #f #f ())
(589 scheme-level-1 #f #f ())
(590 scheme-level-1 #f #f ())
(591 scheme-level-1 #f #f ())
(592 scheme-level-1 #f #f ())
(593 scheme-level-1 #f #f ())
(594 not 593 10 ())
(595 scheme-level-1 #f #f ())
(596 boolean? 595 10 ())
(597 scheme-level-1 #f #f ())
(598 eqv? 597 10 ())
(599 scheme-level-1 #f #f ())
(600 equal? 599 10 ())
(601 loop 600 171 ())
(602 scheme-level-1 #f #f ())
(603 null? 602 10 ())
(604 scheme-level-1 #f #f ())
(605 inexact? 604 10 ())
(606 scheme-level-1 #f #f ())
(607 max-or-min 606 10 ())
(608 loop 607 42 ())
(609 scheme-level-1 #f #f ())
(610 max 609 10 ())
(611 scheme-level-1 #f #f ())
(612 min 611 10 ())
(613 scheme-level-1 #f #f ())
(614 abs 613 10 ())
(615 scheme-level-1 #f #f ())
(616 zero? 615 10 ())
(617 scheme-level-1 #f #f ())
(618 positive? 617 10 ())
(619 scheme-level-1 #f #f ())
(620 negative? 619 10 ())
(621 scheme-level-1 #f #f ())
(622 even? 621 10 ())
(623 scheme-level-1 #f #f ())
(624 odd? 623 10 ())
(625 scheme-level-1 #f #f ())
(626 caar 625 10 ())
(627 scheme-level-1 #f #f ())
(628 cadr 627 10 ())
(629 scheme-level-1 #f #f ())
(630 cdar 629 10 ())
(631 scheme-level-1 #f #f ())
(632 cddr 631 10 ())
(633 scheme-level-1 #f #f ())
(634 caaar 633 10 ())
(635 scheme-level-1 #f #f ())
(636 caadr 635 10 ())
(637 scheme-level-1 #f #f ())
(638 cadar 637 10 ())
(639 scheme-level-1 #f #f ())
(640 caddr 639 10 ())
(641 scheme-level-1 #f #f ())
(642 cdaar 641 10 ())
(643 scheme-level-1 #f #f ())
(644 cdadr 643 10 ())
(645 scheme-level-1 #f #f ())
(646 cddar 645 10 ())
(647 scheme-level-1 #f #f ())
(648 cdddr 647 10 ())
(649 scheme-level-1 #f #f ())
(650 caaaar 649 10 ())
(651 scheme-level-1 #f #f ())
(652 caaadr 651 10 ())
(653 scheme-level-1 #f #f ())
(654 caadar 653 10 ())
(655 scheme-level-1 #f #f ())
(656 caaddr 655 10 ())
(657 scheme-level-1 #f #f ())
(658 cadaar 657 10 ())
(659 scheme-level-1 #f #f ())
(660 cadadr 659 10 ())
(661 scheme-level-1 #f #f ())
(662 caddar 661 10 ())
(663 scheme-level-1 #f #f ())
(664 cadddr 663 10 ())
(665 scheme-level-1 #f #f ())
(666 cdaaar 665 10 ())
(667 scheme-level-1 #f #f ())
(668 cdaadr 667 10 ())
(669 scheme-level-1 #f #f ())
(670 cdadar 669 10 ())
(671 scheme-level-1 #f #f ())
(672 cdaddr 671 10 ())
(673 scheme-level-1 #f #f ())
(674 cddaar 673 10 ())
(675 scheme-level-1 #f #f ())
(676 cddadr 675 10 ())
(677 scheme-level-1 #f #f ())
(678 cdddar 677 10 ())
(679 scheme-level-1 #f #f ())
(680 cddddr 679 10 ())
(681 scheme-level-1 #f #f ())
(682 list 681 10 ())
(683 scheme-level-1 #f #f ())
(684 real-length 683 10 ())
(685 scheme-level-1 #f #f ())
(686 length 685 10 ())
(687 scheme-level-1 #f #f ())
(688 reduce 687 10 ())
(689 scheme-level-1 #f #f ())
(690 append 689 10 ())
(691 recur 690 37 ())
(692 scheme-level-1 #f #f ())
(693 append-reverse 692 10 ())
(694 scheme-level-1 #f #f ())
(695 reverse 694 10 ())
(696 scheme-level-1 #f #f ())
(697 list-tail 696 10 ())
(698 scheme-level-1 #f #f ())
(699 list-ref 698 10 ())
(700 scheme-level-1 #f #f ())
(701 mem 700 10 ())
(702 #f 701 16 ())
(703 loop 702 28 ())
(704 scheme-level-1 #f #f ())
(705 ass 704 10 ())
(706 #f 705 16 ())
(707 loop 706 28 ())
(708 scheme-level-1 #f #f ())
(709 list? 708 10 ())
(710 recur 709 24 ())
(711 scheme-level-1 #f #f ())
(712 char>? 711 10 ())
(713 scheme-level-1 #f #f ())
(714 char>=? 713 10 ())
(715 scheme-level-1 #f #f ())
(716 char<=? 715 10 ())
(717 scheme-level-1 #f #f ())
(718 char-whitespace? 717 10 ())
(719 scheme-level-1 #f #f ())
(720 char-lower-case? 719 10 ())
(721 scheme-level-1 #f #f ())
(722 char-upper-case? 721 10 ())
(723 scheme-level-1 #f #f ())
(724 char-numeric? 723 10 ())
(725 scheme-level-1 #f #f ())
(726 char-alphabetic? 725 10 ())
(727 scheme-level-1 #f #f ())
(728 make-character-map 727 10 ())
(729 loop##10 728 37 ())
(730 scheme-level-1 #f #f ())
(731 char-upcase 730 10 ())
(732 scheme-level-1 #f #f ())
(733 char-downcase 732 10 ())
(734 scheme-level-1 #f #f ())
(735 char-ci-compare 734 10 ())
(736 #f 735 16 ())
(737 scheme-level-1 #f #f ())
(738 list->string 737 10 ())
(739 loop##11 738 45 ())
(740 scheme-level-1 #f #f ())
(741 string 740 10 ())
(742 scheme-level-1 #f #f ())
(743 substring 742 10 ())
(744 loop##12 743 37 ())
(745 scheme-level-1 #f #f ())
(746 string-append 745 10 ())
(747 #f 746 15 ())
(748 loop 746 72 ())
(749 loop##13 748 59 ())
(750 scheme-level-1 #f #f ())
(751 string->list 750 10 ())
(752 loop##14 751 25 ())
(753 scheme-level-1 #f #f ())
(754 unspecific 753 10 ())
(755 scheme-level-1 #f #f ())
(756 string-fill! 755 10 ())
(757 loop##15 756 29 ())
(758 scheme-level-1 #f #f ())
(759 make-string=? 758 10 ())
(760 #f 759 16 ())
(761 loop 760 50 ())
(762 scheme-level-1 #f #f ())
(763 make-string<? 762 10 ())
(764 #f 763 17 ())
(765 loop 764 70 ())
(766 scheme-level-1 #f #f ())
(767 string>? 766 10 ())
(768 scheme-level-1 #f #f ())
(769 string<=? 768 10 ())
(770 scheme-level-1 #f #f ())
(771 string>=? 770 10 ())
(772 scheme-level-1 #f #f ())
(773 string-ci>? 772 10 ())
(774 scheme-level-1 #f #f ())
(775 string-ci<=? 774 10 ())
(776 scheme-level-1 #f #f ())
(777 string-ci>=? 776 10 ())
(778 scheme-level-1 #f #f ())
(779 vector->list 778 10 ())
(780 loop##17 779 18 ())
(781 scheme-level-1 #f #f ())
(782 list->vector 781 10 ())
(783 loop##18 782 44 ())
(784 scheme-level-1 #f #f ())
(785 vector-fill! 784 10 ())
(786 loop##19 785 30 ())
(787 scheme-level-1 #f #f ())
(788 map1 787 10 ())
(789 scheme-level-1 #f #f ())
(790 any 789 10 ())
(791 scheme-level-1 #f #f ())
(792 map2+ 791 10 ())
(793 scheme-level-1 #f #f ())
(794 map 793 10 ())
(795 scheme-level-1 #f #f ())
(796 for-each1 795 10 ())
(797 loop 796 25 ())
(798 scheme-level-1 #f #f ())
(799 for-each2+ 798 10 ())
(800 loop 799 28 ())
(801 scheme-level-1 #f #f ())
(802 for-each 801 10 ())
(803 scheme-level-1 #f #f ())
(804 make-promise 803 10 ())
(805 #f 804 44 ())
(806 scheme-level-1 #f #f ())
(807 force 806 10 ())
(808 scheme-level-1 #f #f ())
(809 filter 808 10 ())
(810 #f 809 16 ())
(811 scheme-level-1 #f #f ())
(812 pos 811 10 ())
(813 #f 812 16 ())
(814 loop 813 32 ())
(815 scheme-level-1 #f #f ())
(816 every 815 10 ())
(817 scheme-level-1 #f #f ())
(818 sublist 817 10 ())
(819 recur 818 61 ())
(820 scheme-level-1 #f #f ())
(821 last 820 10 ())
(822 scheme-level-1 #f #f ())
(823 insert 822 10 ())
(824 scheme-level-1 #f #f ())
(825 fold 824 10 ())
(826 loop##23 825 18 ())
(827 scheme-level-1 #f #f ())
(828 fold->2 827 10 ())
(829 loop 828 31 ())
(830 scheme-level-1 #f #f ())
(831 fold->3 830 10 ())
(832 loop 831 34 ())
(833 scheme-level-1 #f #f ())
(834 modulo 833 10 ())
(835 scheme-level-1 #f #f ())
(836 ceiling 835 10 ())
(837 scheme-level-1 #f #f ())
(838 truncate 837 10 ())
(839 scheme-level-1 #f #f ())
(840 round 839 10 ())
(841 scheme-level-1 #f #f ())
(842 euclid 841 10 ())
(843 scheme-level-1 #f #f ())
(844 gcd 843 10 ())
(845 #f 844 11 ())
(846 scheme-level-1 #f #f ())
(847 lcm 846 10 ())
(848 #f 847 11 ())
(849 scheme-level-1 #f #f ())
(850 raise-to-integer-power 849 10 ())
(851 loop 850 42 ())
(852 scheme-level-1 #f #f ())
(853 expt 852 10 ())
(854 scheme-level-1 #f #f ())
(855 simplest-rational 854 10 ())
(856 simplest-rational-internal 855 14 ())
(857 scheme-level-1 #f #f ())
(858 rationalize 857 10 ())
(859 record-types #f #f ())
(860 #f 859 10 ())
(861 record-types #f #f ())
(862 record-types #f #f ())
(863 record-types #f #f ())
(864 record-types #f #f ())
(865 record-type-name 864 10 ())
(866 record-types #f #f ())
(867 make-default-record-discloser 866 10 ())
(868 #f 867 16 ())
(869 record-types #f #f ())
(870 make-record-type 869 10 ())
(871 record-types #f #f ())
(872 record-type? 871 10 ())
(873 record-types #f #f ())
(874 record-type-resumer 873 10 ())
(875 record-types #f #f ())
(876 set-record-type-resumer! 875 10 ())
(877 record-types #f #f ())
(878 record-type-uid 877 10 ())
(879 record-types #f #f ())
(880 record-type-field-names 879 10 ())
(881 record-types #f #f ())
(882 record-type-number-of-fields 881 10 ())
(883 record-types #f #f ())
(884 record-type-discloser 883 10 ())
(885 record-types #f #f ())
(886 set-record-type-discloser! 885 10 ())
(887 record-types #f #f ())
(888 record-field-index 887 10 ())
(889 loop 888 37 ())
(890 record-types #f #f ())
(891 record-constructor 890 10 ())
(892 #f 891 20 ())
(893 #f 891 69 ())
(894 loop 893 59 ())
(895 record-types #f #f ())
(896 record-accessor 895 10 ())
(897 #f 896 78 ())
(898 record-types #f #f ())
(899 record-modifier 898 10 ())
(900 #f 899 78 ())
(901 record-types #f #f ())
(902 record-predicate 901 10 ())
(903 #f 902 16 ())
(904 record-types #f #f ())
(905 define-record-discloser 904 10 ())
(906 record-types #f #f ())
(907 disclose-record 906 10 ())
(908 record-types #f #f ())
(909 define-record-resumer 908 10 ())
(910 record-types #f #f ())
(911 resume-record 910 10 ())
(912 record-types #f #f ())
(913 initialize-records! 912 10 ())
(914 loop##27 913 25 ())
(915 record-types #f #f ())
(916 record-types #f #f ())
(917 record-types #f #f ())
(918 record-types #f #f ())
(919 define-record-types #f #f ())
(920 methods #f #f ())
(921 &add-method! 920 64 ())
(922 methods #f #f ())
(923 &disclose 922 57 ())
(924 methods #f #f ())
(925 &disclose 924 57 ())
(926 methods #f #f ())
(927 methods #f #f ())
(928 disclose 927 61 ())
(929 methods #f #f ())
(930 &same-type? 929 61 ())
(931 methods #f #f ())
(932 &type-priority 931 57 ())
(933 methods #f #f ())
(934 &type-predicate 933 57 ())
(935 methods #f #f ())
(936 #f 935 14 ())
(937 methods #f #f ())
(938 singleton-value 937 10 ())
(939 methods #f #f ())
(940 singleton 939 10 ())
(941 methods #f #f ())
(942 methods #f #f ())
(943 &same-type? 942 61 ())
(944 methods #f #f ())
(945 &same-type? 944 61 ())
(946 methods #f #f ())
(947 methods #f #f ())
(948 same-type? 947 65 ())
(949 methods #f #f ())
(950 &type-superiors 949 57 ())
(951 methods #f #f ())
(952 &type-superiors 951 57 ())
(953 methods #f #f ())
(954 methods #f #f ())
(955 type-superiors 954 61 ())
(956 methods #f #f ())
(957 &type-priority 956 57 ())
(958 methods #f #f ())
(959 &type-priority 958 57 ())
(960 methods #f #f ())
(961 methods #f #f ())
(962 type-priority 961 61 ())
(963 methods #f #f ())
(964 &type-predicate 963 57 ())
(965 methods #f #f ())
(966 &type-predicate 965 57 ())
(967 methods #f #f ())
(968 methods #f #f ())
(969 type-predicate 968 61 ())
(970 methods #f #f ())
(971 add-method! 970 57 ())
(972 methods #f #f ())
(973 methods #f #f ())
(974 add-method! 973 65 ())
(975 methods #f #f ())
(976 #f 975 14 ())
(977 methods #f #f ())
(978 set-method-table-methods! 977 10 ())
(979 methods #f #f ())
(980 method-table-methods 979 10 ())
(981 methods #f #f ())
(982 method-table-prototype 981 10 ())
(983 methods #f #f ())
(984 make-generic 983 10 ())
(985 methods #f #f ())
(986 method-table-get-perform 985 10 ())
(987 methods #f #f ())
(988 method-table-set-perform! 987 10 ())
(989 methods #f #f ())
(990 method-table-id 989 10 ())
(991 methods #f #f ())
(992 really-make-method-table 991 10 ())
(993 methods #f #f ())
(994 methods #f #f ())
(995 #f 994 14 ())
(996 methods #f #f ())
(997 method-info-types 996 10 ())
(998 methods #f #f ())
(999 method-info-n-ary? 998 10 ())
(1000 methods #f #f ())
(1001 method-info-proc 1000 10 ())
(1002 methods #f #f ())
(1003 really-make-method-info 1002 10 ())
(1004 methods #f #f ())
(1005 methods #f #f ())
(1006 record-type-priority 1005 66 ())
(1007 methods #f #f ())
(1008 methods #f #f ())
(1009 methods #f #f ())
(1010 methods #f #f ())
(1011 methods #f #f ())
(1012 methods #f #f ())
(1013 methods #f #f ())
(1014 methods #f #f ())
(1015 methods #f #f ())
(1016 methods #f #f ())
(1017 methods #f #f ())
(1018 methods #f #f ())
(1019 methods #f #f ())
(1020 #f 1019 30 ())
(1021 methods #f #f ())
(1022 methods #f #f ())
(1023 methods #f #f ())
(1024 methods #f #f ())
(1025 methods #f #f ())
(1026 methods #f #f ())
(1027 #f 1026 30 ())
(1028 methods #f #f ())
(1029 methods #f #f ())
(1030 methods #f #f ())
(1031 methods #f #f ())
(1032 #f 1031 14 ())
(1033 methods #f #f ())
(1034 simple-type-superiors 1033 10 ())
(1035 methods #f #f ())
(1036 simple-type-predicate 1035 10 ())
(1037 methods #f #f ())
(1038 simple-type-priority 1037 10 ())
(1039 methods #f #f ())
(1040 simple-type-id 1039 10 ())
(1041 methods #f #f ())
(1042 really-make-simple-type 1041 10 ())
(1043 methods #f #f ())
(1044 methods #f #f ())
(1045 simple-type? 1044 10 ())
(1046 methods #f #f ())
(1047 %type-priority 1046 10 ())
(1048 methods #f #f ())
(1049 compute-priority 1048 10 ())
(1050 methods #f #f ())
(1051 make-simple-type 1050 10 ())
(1052 methods #f #f ())
(1053 %type-predicate 1052 10 ())
(1054 methods #f #f ())
(1055 %same-type? 1054 10 ())
(1056 methods #f #f ())
(1057 value? 1056 10 ())
(1058 methods #f #f ())
(1059 method-info? 1058 10 ())
(1060 methods #f #f ())
(1061 make-method-info 1060 10 ())
(1062 methods #f #f ())
(1063 empty-method-list 1062 10 ())
(1064 methods #f #f ())
(1065 more-specific-type? 1064 10 ())
(1066 methods #f #f ())
(1067 more-specific? 1066 10 ())
(1068 loop 1067 159 ())
(1069 methods #f #f ())
(1070 every2 1069 10 ())
(1071 methods #f #f ())
(1072 same-applicability? 1071 10 ())
(1073 methods #f #f ())
(1074 insert-method 1073 10 ())
(1075 recur 1074 25 ())
(1076 methods #f #f ())
(1077 method-table? 1076 10 ())
(1078 methods #f #f ())
(1079 last-action 1078 10 ())
(1080 #f 1079 16 ())
(1081 methods #f #f ())
(1082 one-action 1081 10 ())
(1083 #f 1082 18 ())
(1084 #f 1083 35 ())
(1085 methods #f #f ())
(1086 check-for-next 1085 10 ())
(1087 #f 1086 16 ())
(1088 methods #f #f ())
(1089 check-next 1088 10 ())
(1090 #f 1089 17 ())
(1091 methods #f #f ())
(1092 argument-sequence-predicate 1091 10 ())
(1093 recur 1092 35 ())
(1094 methods #f #f ())
(1095 methods->perform 1094 10 ())
(1096 recur 1095 21 ())
(1097 methods #f #f ())
(1098 add-to-method-table! 1097 10 ())
(1099 methods #f #f ())
(1100 set-final-method! 1099 10 ())
(1101 methods #f #f ())
(1102 make-cell-for-generic 1101 10 ())
(1103 #f 1102 28 ())
(1104 #f 1102 43 ())
(1105 #f 1102 58 ())
(1106 methods #f #f ())
(1107 make-method-table 1106 10 ())
(1108 #f 1107 118 ())
(1109 methods #f #f ())
(1110 apply-generic 1109 10 ())
(1111 methods #f #f ())
(1112 compare-to 1111 10 ())
(1113 #f 1112 16 ())
(1114 methods #f #f ())
(1115 proc->discloser 1114 10 ())
(1116 #f 1115 16 ())
(1117 #f 1116 9 ())
(1118 methods #f #f ())
(1119 number-i/o #f #f ())
(1120 #f 1119 52 ())
(1121 #f 1119 73 ())
(1122 loop 1121 55 ())
(1123 #f 1119 95 ())
(1124 number-i/o #f #f ())
(1125 set-exactness 1124 10 ())
(1126 number-i/o #f #f ())
(1127 &really-string->number 1126 65 ())
(1128 number-i/o #f #f ())
(1129 #f 1128 30 ())
(1130 loop 1129 38 ())
(1131 number-i/o #f #f ())
(1132 &really-string->number 1131 65 ())
(1133 number-i/o #f #f ())
(1134 number-i/o #f #f ())
(1135 number-i/o #f #f ())
(1136 string->number 1135 10 ())
(1137 loop 1136 304 ())
(1138 radix-is 1137 71 ())
(1139 exactness-is 1137 94 ())
(1140 loop 1137 354 ())
(1141 number-i/o #f #f ())
(1142 #f 1141 47 ())
(1143 recur 1142 64 ())
(1144 #f 1141 69 ())
(1145 number-i/o #f #f ())
(1146 &number->string 1145 61 ())
(1147 number-i/o #f #f ())
(1148 &number->string 1147 61 ())
(1149 number-i/o #f #f ())
(1150 number->string 1149 10 ())
(1151 number-i/o #f #f ())
(1152 number-i/o #f #f ())
(1153 fluids #f #f ())
(1154 fluids #f #f ())
(1155 set-fluid-top-level-value! 1154 10 ())
(1156 fluids #f #f ())
(1157 fluid-top-level-value 1156 10 ())
(1158 fluids #f #f ())
(1159 make-fluid 1158 10 ())
(1160 fluids #f #f ())
(1161 fluids #f #f ())
(1162 thread-dynamic-env 1161 10 ())
(1163 fluids #f #f ())
(1164 thread-dynamic-point 1163 10 ())
(1165 fluids #f #f ())
(1166 thread-proposal 1165 10 ())
(1167 fluids #f #f ())
(1168 make-thread 1167 10 ())
(1169 fluids #f #f ())
(1170 fluids #f #f ())
(1171 get-dynamic-env 1170 10 ())
(1172 fluids #f #f ())
(1173 set-dynamic-env! 1172 10 ())
(1174 fluids #f #f ())
(1175 get-dynamic-point 1174 10 ())
(1176 fluids #f #f ())
(1177 set-dynamic-point! 1176 10 ())
(1178 fluids #f #f ())
(1179 empty-dynamic-env 1178 10 ())
(1180 fluids #f #f ())
(1181 initialize-dynamic-state! 1180 10 ())
(1182 fluids #f #f ())
(1183 with-dynamic-env 1182 10 ())
(1184 fluids #f #f ())
(1185 fluid 1184 10 ())
(1186 fluids #f #f ())
(1187 set-fluid! 1186 10 ())
(1188 fluids #f #f ())
(1189 let-fluid 1188 10 ())
(1190 fluids #f #f ())
(1191 let-fluids 1190 10 ())
(1192 loop 1191 32 ())
(1193 fluids #f #f ())
(1194 fluid-cell-ref 1193 10 ())
(1195 fluids #f #f ())
(1196 fluid-cell-set! 1195 10 ())
(1197 enumerated #f #f ())
(1198 lookup-enumerand 1197 10 ())
(1199 loop 1198 38 ())
(1200 architecture #f #f ())
(1201 architecture #f #f ())
(1202 architecture #f #f ())
(1203 architecture #f #f ())
(1204 architecture #f #f ())
(1205 architecture #f #f ())
(1206 architecture #f #f ())
(1207 architecture #f #f ())
(1208 architecture #f #f ())
(1209 architecture #f #f ())
(1210 architecture #f #f ())
(1211 architecture #f #f ())
(1212 architecture #f #f ())
(1213 architecture #f #f ())
(1214 architecture #f #f ())
(1215 architecture #f #f ())
(1216 architecture #f #f ())
(1217 architecture #f #f ())
(1218 architecture #f #f ())
(1219 architecture #f #f ())
(1220 architecture #f #f ())
(1221 architecture #f #f ())
(1222 architecture #f #f ())
(1223 architecture #f #f ())
(1224 architecture #f #f ())
(1225 architecture #f #f ())
(1226 next-protocol 1225 10 ())
(1227 architecture #f #f ())
(1228 architecture #f #f ())
(1229 architecture #f #f ())
(1230 architecture #f #f ())
(1231 architecture #f #f ())
(1232 architecture #f #f ())
(1233 architecture #f #f ())
(1234 architecture #f #f ())
(1235 architecture #f #f ())
(1236 architecture #f #f ())
(1237 architecture #f #f ())
(1238 architecture #f #f ())
(1239 architecture #f #f ())
(1240 architecture #f #f ())
(1241 proposals #f #f ())
(1242 proposals #f #f ())
(1243 invalidate-current-proposal! 1242 10 ())
(1244 proposals #f #f ())
(1245 remove-current-proposal! 1244 10 ())
(1246 proposals #f #f ())
(1247 call-ensuring-atomicity! 1246 10 ())
(1248 proposals #f #f ())
(1249 call-ensuring-atomicity 1248 10 ())
(1250 proposals #f #f ())
(1251 call-atomically! 1250 10 ())
(1252 lose 1251 35 ())
(1253 proposals #f #f ())
(1254 call-atomically 1253 10 ())
(1255 loop 1254 30 ())
(1256 session-data #f #f ())
(1257 make-session-data-slot! 1256 10 ())
(1258 session-data #f #f ())
(1259 session-data-ref 1258 10 ())
(1260 session-data #f #f ())
(1261 session-data-set! 1260 10 ())
(1262 session-data #f #f ())
(1263 initialize-session-data! 1262 10 ())
(1264 session-data #f #f ())
(1265 conditions #f #f ())
(1266 conditions #f #f ())
(1267 conditions #f #f ())
(1268 conditions #f #f ())
(1269 conditions #f #f ())
(1270 conditions #f #f ())
(1271 conditions #f #f ())
(1272 conditions #f #f ())
(1273 conditions #f #f ())
(1274 make-exception 1273 10 ())
(1275 conditions #f #f ())
(1276 conditions #f #f ())
(1277 conditions #f #f ())
(1278 conditions #f #f ())
(1279 conditions #f #f ())
(1280 conditions #f #f ())
(1281 conditions #f #f ())
(1282 conditions #f #f ())
(1283 conditions #f #f ())
(1284 conditions #f #f ())
(1285 conditions #f #f ())
(1286 conditions #f #f ())
(1287 conditions #f #f ())
(1288 conditions #f #f ())
(1289 condition? 1288 10 ())
(1290 conditions #f #f ())
(1291 condition-predicate 1290 10 ())
(1292 #f 1291 16 ())
(1293 conditions #f #f ())
(1294 define-condition-type 1293 10 ())
(1295 #f 1294 20 ())
(1296 conditions #f #f ())
(1297 condition-supertypes 1296 10 ())
(1298 conditions #f #f ())
(1299 wind #f #f ())
(1300 point-depth 1299 10 ())
(1301 wind #f #f ())
(1302 point-in 1301 10 ())
(1303 wind #f #f ())
(1304 point-out 1303 10 ())
(1305 wind #f #f ())
(1306 point-dynamic-env 1305 10 ())
(1307 wind #f #f ())
(1308 point-parent 1307 10 ())
(1309 wind #f #f ())
(1310 make-point 1309 10 ())
(1311 wind #f #f ())
(1312 wind #f #f ())
(1313 dynamic-wind 1312 10 ())
(1314 wind #f #f ())
(1315 travel-to-point! 1314 10 ())
(1316 wind #f #f ())
(1317 continuation->procedure 1316 10 ())
(1318 #f 1317 19 ())
(1319 #f 1318 69 ())
(1320 wind #f #f ())
(1321 call-with-current-continuation 1320 10 ())
(1322 #f 1321 16 ())
(1323 templates #f #f ())
(1324 template-code 1323 10 ())
(1325 templates #f #f ())
(1326 template-info 1325 10 ())
(1327 templates #f #f ())
(1328 set-template-code! 1327 10 ())
(1329 templates #f #f ())
(1330 set-template-info! 1329 10 ())
(1331 templates #f #f ())
(1332 more-types #f #f ())
(1333 &disclose 1332 53 ())
(1334 more-types #f #f ())
(1335 more-types #f #f ())
(1336 &disclose 1335 57 ())
(1337 more-types #f #f ())
(1338 more-types #f #f ())
(1339 more-types #f #f ())
(1340 more-types #f #f ())
(1341 more-types #f #f ())
(1342 more-types #f #f ())
(1343 more-types #f #f ())
(1344 more-types #f #f ())
(1345 more-types #f #f ())
(1346 continuations #f #f ())
(1347 &disclose 1346 53 ())
(1348 continuations #f #f ())
(1349 continuations #f #f ())
(1350 continuations #f #f ())
(1351 continuation-cont 1350 10 ())
(1352 continuations #f #f ())
(1353 real-continuation-pc 1352 10 ())
(1354 continuations #f #f ())
(1355 real-continuation-template 1354 10 ())
(1356 continuations #f #f ())
(1357 continuation-env 1356 10 ())
(1358 continuations #f #f ())
(1359 exception-continuation-pc 1358 10 ())
(1360 continuations #f #f ())
(1361 exception-continuation-template 1360 10 ())
(1362 continuations #f #f ())
(1363 exception-continuation-exception 1362 10 ())
(1364 continuations #f #f ())
(1365 exception-continuation? 1364 10 ())
(1366 continuations #f #f ())
(1367 continuation-pc 1366 10 ())
(1368 continuations #f #f ())
(1369 continuation-template 1368 10 ())
(1370 continuations #f #f ())
(1371 continuation-arg 1370 10 ())
(1372 continuations #f #f ())
(1373 continuation-arg-count 1372 10 ())
(1374 continuations #f #f ())
(1375 continuation-parent 1374 10 ())
(1376 loop 1375 122 ())
(1377 continuations #f #f ())
(1378 exceptions #f #f ())
(1379 &disclose 1378 53 ())
(1380 exceptions #f #f ())
(1381 &disclose 1380 57 ())
(1382 exceptions #f #f ())
(1383 report-errors-as-warnings 1382 10 ())
(1384 #f 1383 22 ())
(1385 exceptions #f #f ())
(1386 ignore-errors 1385 10 ())
(1387 #f 1386 16 ())
(1388 #f 1387 16 ())
(1389 exceptions #f #f ())
(1390 continuation-preview 1389 10 ())
(1391 exceptions #f #f ())
(1392 report-utter-lossage 1391 10 ())
(1393 #f 1392 154 ())
(1394 exceptions #f #f ())
(1395 last-resort-condition-handler 1394 10 ())
(1396 #f 1395 39 ())
(1397 #f 1396 39 ())
(1398 exceptions #f #f ())
(1399 initialize-exceptions! 1398 10 ())
(1400 #f 1399 16 ())
(1401 exceptions #f #f ())
(1402 exceptions #f #f ())
(1403 with-handler 1402 10 ())
(1404 exceptions #f #f ())
(1405 really-signal-condition 1404 10 ())
(1406 loop 1405 38 ())
(1407 #f 1406 22 ())
(1408 exceptions #f #f ())
(1409 extend-opcode! 1408 10 ())
(1410 except 1409 16 ())
(1411 #f 1409 54 ())
(1412 exceptions #f #f ())
(1413 #f 1412 14 ())
(1414 exceptions #f #f ())
(1415 exceptions #f #f ())
(1416 signal-exception 1415 10 ())
(1417 exceptions #f #f ())
(1418 define-exception-handler 1417 10 ())
(1419 i/o #f #f ())
(1420 i/o #f #f ())
(1421 i/o #f #f ())
(1422 i/o #f #f ())
(1423 i/o #f #f ())
(1424 i/o #f #f ())
(1425 i/o #f #f ())
(1426 i/o #f #f ())
(1427 #f 1426 14 ())
(1428 #f 1426 26 ())
(1429 #f 1426 34 ())
(1430 #f 1426 42 ())
(1431 #f 1426 50 ())
(1432 i/o #f #f ())
(1433 i/o #f #f ())
(1434 i/o #f #f ())
(1435 i/o #f #f ())
(1436 i/o #f #f ())
(1437 i/o #f #f ())
(1438 i/o #f #f ())
(1439 i/o #f #f ())
(1440 &disclose 1439 57 ())
(1441 i/o #f #f ())
(1442 &disclose 1441 57 ())
(1443 i/o #f #f ())
(1444 port-handler-discloser 1443 10 ())
(1445 i/o #f #f ())
(1446 port-handler-close 1445 10 ())
(1447 i/o #f #f ())
(1448 port-handler-char 1447 10 ())
(1449 i/o #f #f ())
(1450 port-handler-block 1449 10 ())
(1451 i/o #f #f ())
(1452 port-handler-ready? 1451 10 ())
(1453 i/o #f #f ())
(1454 port-handler-force 1453 10 ())
(1455 i/o #f #f ())
(1456 make-port-handler 1455 10 ())
(1457 i/o #f #f ())
(1458 i/o #f #f ())
(1459 port-handler? 1458 10 ())
(1460 i/o #f #f ())
(1461 disclose-port 1460 10 ())
(1462 i/o #f #f ())
(1463 one-arg-proc->handler 1462 10 ())
(1464 #f 1463 17 ())
(1465 i/o #f #f ())
(1466 two-arg-proc->handler 1465 10 ())
(1467 #f 1466 17 ())
(1468 i/o #f #f ())
(1469 initialize-i/o-handlers! 1468 10 ())
(1470 #f 1469 21 ())
(1471 #f 1469 58 ())
(1472 #f 1469 91 ())
(1473 i/o #f #f ())
(1474 open-input-port? 1473 10 ())
(1475 i/o #f #f ())
(1476 current-input-port 1475 10 ())
(1477 i/o #f #f ())
(1478 input-port-option 1477 10 ())
(1479 i/o #f #f ())
(1480 char-ready? 1479 10 ())
(1481 i/o #f #f ())
(1482 real-char-ready? 1481 10 ())
(1483 i/o #f #f ())
(1484 okay-limits? 1483 10 ())
(1485 i/o #f #f ())
(1486 read-block 1485 10 ())
(1487 i/o #f #f ())
(1488 open-output-port? 1487 10 ())
(1489 i/o #f #f ())
(1490 write-block 1489 10 ())
(1491 i/o #f #f ())
(1492 write-string 1491 10 ())
(1493 i/o #f #f ())
(1494 output-port-ready? 1493 10 ())
(1495 i/o #f #f ())
(1496 force-output 1495 10 ())
(1497 i/o #f #f ())
(1498 force-output-if-open 1497 10 ())
(1499 i/o #f #f ())
(1500 close-input-port 1499 10 ())
(1501 i/o #f #f ())
(1502 close-output-port 1501 10 ())
(1503 i/o #f #f ())
(1504 open-port? 1503 10 ())
(1505 i/o #f #f ())
(1506 make-input-port-closed! 1505 10 ())
(1507 i/o #f #f ())
(1508 make-unbuffered-input-port 1507 10 ())
(1509 i/o #f #f ())
(1510 make-output-port-closed! 1509 10 ())
(1511 i/o #f #f ())
(1512 make-unbuffered-output-port 1511 10 ())
(1513 i/o #f #f ())
(1514 make-null-output-port 1513 10 ())
(1515 i/o #f #f ())
(1516 okay-buffer? 1515 10 ())
(1517 i/o #f #f ())
(1518 make-buffered-input-port 1517 10 ())
(1519 i/o #f #f ())
(1520 make-buffered-output-port 1519 10 ())
(1521 i/o #f #f ())
(1522 make-one-char-input 1521 10 ())
(1523 #f 1522 16 ())
(1524 lose 1523 35 ())
(1525 i/o #f #f ())
(1526 get-available-bytes! 1525 10 ())
(1527 i/o #f #f ())
(1528 make-read-block 1527 10 ())
(1529 #f 1528 16 ())
(1530 loop 1529 37 ())
(1531 lose 1530 43 ())
(1532 i/o #f #f ())
(1533 make-char-ready? 1532 10 ())
(1534 #f 1533 17 ())
(1535 lose 1534 35 ())
(1536 i/o #f #f ())
(1537 make-buffered-input-port-handler 1536 10 ())
(1538 #f 1537 20 ())
(1539 #f 1537 35 ())
(1540 lose 1539 34 ())
(1541 i/o #f #f ())
(1542 note-buffer-reuse! 1541 10 ())
(1543 i/o #f #f ())
(1544 buffer-length 1543 10 ())
(1545 i/o #f #f ())
(1546 make-closer 1545 10 ())
(1547 #f 1546 17 ())
(1548 lose 1547 35 ())
(1549 i/o #f #f ())
(1550 make-one-char-output 1549 10 ())
(1551 #f 1550 16 ())
(1552 lose 1551 35 ())
(1553 i/o #f #f ())
(1554 copy-bytes-out! 1553 10 ())
(1555 i/o #f #f ())
(1556 make-write-block 1555 10 ())
(1557 #f 1556 16 ())
(1558 loop 1557 32 ())
(1559 lose 1558 41 ())
(1560 i/o #f #f ())
(1561 make-forcer 1560 10 ())
(1562 #f 1561 16 ())
(1563 lose 1562 35 ())
(1564 i/o #f #f ())
(1565 make-buffered-output-port-handler 1564 10 ())
(1566 #f 1565 20 ())
(1567 i/o #f #f ())
(1568 periodically-force-output! 1567 10 ())
(1569 i/o #f #f ())
(1570 make-forcing-thunk 1569 10 ())
(1571 #f 1570 16 ())
(1572 #f 1571 17 ())
(1573 #f 1571 81 ())
(1574 #f 1573 17 ())
(1575 i/o #f #f ())
(1576 output-port-forcers 1575 10 ())
(1577 loop 1576 47 ())
(1578 i/o #f #f ())
(1579 periodically-flushed-ports 1578 10 ())
(1580 loop 1579 52 ())
(1581 i/o #f #f ())
(1582 current-output-port 1581 10 ())
(1583 i/o #f #f ())
(1584 current-error-port 1583 10 ())
(1585 i/o #f #f ())
(1586 current-noise-port 1585 10 ())
(1587 i/o #f #f ())
(1588 with-current-ports 1587 10 ())
(1589 i/o #f #f ())
(1590 initialize-i/o 1589 10 ())
(1591 i/o #f #f ())
(1592 call-with-current-input-port 1591 10 ())
(1593 i/o #f #f ())
(1594 call-with-current-output-port 1593 10 ())
(1595 i/o #f #f ())
(1596 call-with-current-noise-port 1595 10 ())
(1597 i/o #f #f ())
(1598 silently 1597 10 ())
(1599 i/o #f #f ())
(1600 output-port-option 1599 10 ())
(1601 i/o #f #f ())
(1602 newline 1601 10 ())
(1603 i/o #f #f ())
(1604 i/o #f #f ())
(1605 i/o #f #f ())
(1606 writing #f #f ())
(1607 display 1606 10 ())
(1608 recur 1607 45 ())
(1609 writing #f #f ())
(1610 display-type-name 1609 10 ())
(1611 loop##110 1610 101 ())
(1612 writing #f #f ())
(1613 write-other 1612 10 ())
(1614 #f 1613 88 ())
(1615 writing #f #f ())
(1616 write-vector 1615 10 ())
(1617 loop 1616 91 ())
(1618 writing #f #f ())
(1619 quotation? 1618 10 ())
(1620 writing #f #f ())
(1621 write-list 1620 10 ())
(1622 loop 1621 99 ())
(1623 writing #f #f ())
(1624 write-string-literal 1623 10 ())
(1625 loop##114 1624 37 ())
(1626 writing #f #f ())
(1627 character-name 1626 10 ())
(1628 writing #f #f ())
(1629 write-char-literal 1628 10 ())
(1630 writing #f #f ())
(1631 write-number 1630 10 ())
(1632 writing #f #f ())
(1633 write-boolean 1632 10 ())
(1634 writing #f #f ())
(1635 recurring-write 1634 10 ())
(1636 writing #f #f ())
(1637 write 1636 10 ())
(1638 recur 1637 45 ())
(1639 reading #f #f ())
(1640 loop##116 1639 47 ())
(1641 reading #f #f ())
(1642 reading #f #f ())
(1643 number-sharp-macro 1642 10 ())
(1644 #f 1642 28 ())
(1645 reading #f #f ())
(1646 #f 1645 10 ())
(1647 reading #f #f ())
(1648 #f 1647 10 ())
(1649 reading #f #f ())
(1650 #f 1649 10 ())
(1651 reading #f #f ())
(1652 #f 1651 10 ())
(1653 reading #f #f ())
(1654 #f 1653 16 ())
(1655 reading #f #f ())
(1656 #f 1655 18 ())
(1657 reading #f #f ())
(1658 #f 1657 18 ())
(1659 loop 1658 32 ())
(1660 reading #f #f ())
(1661 #f 1660 18 ())
(1662 reading #f #f ())
(1663 #f 1662 18 ())
(1664 reading #f #f ())
(1665 #f 1664 18 ())
(1666 reading #f #f ())
(1667 #f 1666 18 ())
(1668 reading #f #f ())
(1669 reading #f #f ())
(1670 sub-read-constituent 1669 10 ())
(1671 #f 1669 28 ())
(1672 reading #f #f ())
(1673 sub-read-whitespace 1672 10 ())
(1674 #f 1672 28 ())
(1675 reading #f #f ())
(1676 reading #f #f ())
(1677 #f 1676 14 ())
(1678 reading #f #f ())
(1679 reading #f #f ())
(1680 reading #f #f ())
(1681 reading #f #f ())
(1682 reader-token? 1681 10 ())
(1683 reading #f #f ())
(1684 reading-error 1683 10 ())
(1685 reading #f #f ())
(1686 sub-read 1685 10 ())
(1687 reading #f #f ())
(1688 read 1687 10 ())
(1689 loop 1688 42 ())
(1690 reading #f #f ())
(1691 sub-read-carefully 1690 10 ())
(1692 reading #f #f ())
(1693 make-reader-token 1692 10 ())
(1694 reading #f #f ())
(1695 set-standard-syntax! 1694 10 ())
(1696 reading #f #f ())
(1697 set-standard-read-macro! 1696 10 ())
(1698 reading #f #f ())
(1699 sub-read-list 1698 10 ())
(1700 recur 1699 65 ())
(1701 reading #f #f ())
(1702 gobble-line 1701 10 ())
(1703 loop 1702 22 ())
(1704 reading #f #f ())
(1705 define-sharp-macro 1704 10 ())
(1706 reading #f #f ())
(1707 proper-list? 1706 10 ())
(1708 reading #f #f ())
(1709 preferred-case 1708 10 ())
(1710 reading #f #f ())
(1711 sub-read-token 1710 10 ())
(1712 loop 1711 47 ())
(1713 reading #f #f ())
(1714 parse-token 1713 10 ())
(1715 reading #f #f ())
(1716 reading #f #f ())
(1717 queues #f #f ())
(1718 queues #f #f ())
(1719 queue-uid 1718 10 ())
(1720 queues #f #f ())
(1721 set-queue-head! 1720 10 ())
(1722 queues #f #f ())
(1723 queue-head 1722 10 ())
(1724 queues #f #f ())
(1725 set-queue-tail! 1724 10 ())
(1726 queues #f #f ())
(1727 queue-tail 1726 10 ())
(1728 queues #f #f ())
(1729 really-make-queue 1728 10 ())
(1730 queues #f #f ())
(1731 queues #f #f ())
(1732 queue? 1731 10 ())
(1733 queues #f #f ())
(1734 next-uid 1733 10 ())
(1735 #f 1734 6 ())
(1736 queues #f #f ())
(1737 make-queue 1736 10 ())
(1738 queues #f #f ())
(1739 queue-empty? 1738 10 ())
(1740 queues #f #f ())
(1741 enqueue! 1740 10 ())
(1742 #f 1741 17 ())
(1743 queues #f #f ())
(1744 queue-front 1743 10 ())
(1745 #f 1744 16 ())
(1746 queues #f #f ())
(1747 dequeue! 1746 10 ())
(1748 #f 1747 16 ())
(1749 queues #f #f ())
(1750 empty-queue! 1749 10 ())
(1751 #f 1750 16 ())
(1752 queues #f #f ())
(1753 on-queue? 1752 10 ())
(1754 queues #f #f ())
(1755 delete-from-queue-if! 1754 10 ())
(1756 #f 1755 17 ())
(1757 loop 1756 140 ())
(1758 queues #f #f ())
(1759 delete-from-queue! 1758 10 ())
(1760 #f 1759 19 ())
(1761 queues #f #f ())
(1762 queue->list 1761 10 ())
(1763 #f 1762 16 ())
(1764 #f 1763 6 ())
(1765 queues #f #f ())
(1766 list->queue 1765 10 ())
(1767 loop 1766 62 ())
(1768 queues #f #f ())
(1769 queue-length 1768 10 ())
(1770 #f 1769 16 ())
(1771 interrupts #f #f ())
(1772 #f 1771 14 ())
(1773 interrupts #f #f ())
(1774 interrupts #f #f ())
(1775 interrupts #f #f ())
(1776 interrupts #f #f ())
(1777 enabled-interrupts 1776 10 ())
(1778 interrupts #f #f ())
(1779 post-gc-handler 1778 10 ())
(1780 #f 1779 16 ())
(1781 #f 1780 47 ())
(1782 #f 1780 74 ())
(1783 #f 1782 10 ())
(1784 #f 1782 28 ())
(1785 interrupts #f #f ())
(1786 initialize-interrupts! 1785 10 ())
(1787 #f 1786 17 ())
(1788 loop##138 1787 39 ())
(1789 #f 1788 41 ())
(1790 #f 1787 93 ())
(1791 #f 1790 14 ())
(1792 interrupts #f #f ())
(1793 set-interrupt-handler! 1792 10 ())
(1794 interrupts #f #f ())
(1795 with-interrupts 1794 10 ())
(1796 interrupts #f #f ())
(1797 with-interrupts-inhibited 1796 10 ())
(1798 interrupts #f #f ())
(1799 with-interrupts-allowed 1798 10 ())
(1800 interrupts #f #f ())
(1801 disable-interrupts! 1800 10 ())
(1802 interrupts #f #f ())
(1803 enable-interrupts! 1802 10 ())
(1804 interrupts #f #f ())
(1805 call-after-gc! 1804 10 ())
(1806 interrupts #f #f ())
(1807 call-before-heap-overflow! 1806 10 ())
(1808 interrupts #f #f ())
(1809 interrupts #f #f ())
(1810 threads #f #f ())
(1811 threads #f #f ())
(1812 threads #f #f ())
(1813 threads #f #f ())
(1814 threads #f #f ())
(1815 threads #f #f ())
(1816 threads #f #f ())
(1817 threads #f #f ())
(1818 threads #f #f ())
(1819 #f 1818 14 ())
(1820 threads #f #f ())
(1821 thread-dynamic-env 1820 10 ())
(1822 threads #f #f ())
(1823 set-thread-dynamic-point! 1822 10 ())
(1824 threads #f #f ())
(1825 thread-dynamic-point 1824 10 ())
(1826 threads #f #f ())
(1827 thread-proposal 1826 10 ())
(1828 threads #f #f ())
(1829 set-thread-time! 1828 10 ())
(1830 threads #f #f ())
(1831 thread-time 1830 10 ())
(1832 threads #f #f ())
(1833 set-thread-continuation! 1832 10 ())
(1834 threads #f #f ())
(1835 thread-continuation 1834 10 ())
(1836 threads #f #f ())
(1837 set-thread-arguments! 1836 10 ())
(1838 threads #f #f ())
(1839 thread-arguments 1838 10 ())
(1840 threads #f #f ())
(1841 set-thread-scheduler! 1840 10 ())
(1842 threads #f #f ())
(1843 thread-scheduler 1842 10 ())
(1844 threads #f #f ())
(1845 set-thread-current-task! 1844 10 ())
(1846 threads #f #f ())
(1847 thread-current-task 1846 10 ())
(1848 threads #f #f ())
(1849 set-thread-events! 1848 10 ())
(1850 threads #f #f ())
(1851 thread-events 1850 10 ())
(1852 threads #f #f ())
(1853 set-thread-data! 1852 10 ())
(1854 threads #f #f ())
(1855 thread-data 1854 10 ())
(1856 threads #f #f ())
(1857 set-thread-queue! 1856 10 ())
(1858 threads #f #f ())
(1859 thread-queue 1858 10 ())
(1860 threads #f #f ())
(1861 thread-uid 1860 10 ())
(1862 threads #f #f ())
(1863 thread-name 1862 10 ())
(1864 threads #f #f ())
(1865 really-make-thread 1864 10 ())
(1866 threads #f #f ())
(1867 threads #f #f ())
(1868 thread? 1867 10 ())
(1869 threads #f #f ())
(1870 compose-continuation 1869 10 ())
(1871 #f 1870 17 ())
(1872 #f 1871 42 ())
(1873 #f 1872 20 ())
(1874 #f 1873 19 ())
(1875 threads #f #f ())
(1876 thunk->continuation 1875 10 ())
(1877 threads #f #f ())
(1878 max2 1877 10 ())
(1879 threads #f #f ())
(1880 interrupt-timer-time 1879 10 ())
(1881 threads #f #f ())
(1882 debit-down! 1881 10 ())
(1883 loop 1882 35 ())
(1884 threads #f #f ())
(1885 run-thread 1884 10 ())
(1886 #f 1885 47 ())
(1887 threads #f #f ())
(1888 switch-to-thread 1887 10 ())
(1889 #f 1888 17 ())
(1890 threads #f #f ())
(1891 suspend-to 1890 10 ())
(1892 threads #f #f ())
(1893 suspend 1892 10 ())
(1894 threads #f #f ())
(1895 thread-top-level 1894 10 ())
(1896 thread-start 1895 16 ())
(1897 threads #f #f ())
(1898 make-thread 1897 10 ())
(1899 threads #f #f ())
(1900 all-threads 1899 10 ())
(1901 threads #f #f ())
(1902 thread-uid->thread 1901 10 ())
(1903 loop 1902 37 ())
(1904 threads #f #f ())
(1905 add-event! 1904 10 ())
(1906 threads #f #f ())
(1907 next-event! 1906 10 ())
(1908 threads #f #f ())
(1909 enqueue-thread! 1908 10 ())
(1910 threads #f #f ())
(1911 dequeue-thread! 1910 10 ())
(1912 threads #f #f ())
(1913 remove-thread-from-queue! 1912 10 ())
(1914 threads #f #f ())
(1915 event-pending? 1914 10 ())
(1916 threads #f #f ())
(1917 min 1916 10 ())
(1918 threads #f #f ())
(1919 schedule-interrupt! 1918 10 ())
(1920 threads #f #f ())
(1921 run-next-thread 1920 10 ())
(1922 threads #f #f ())
(1923 debit-thread-times-and-run! 1922 10 ())
(1924 loop 1923 40 ())
(1925 threads #f #f ())
(1926 find-and-run-next-thread 1925 10 ())
(1927 loop 1926 39 ())
(1928 threads #f #f ())
(1929 run 1928 10 ())
(1930 threads #f #f ())
(1931 handle-timer-interrupt 1930 10 ())
(1932 threads #f #f ())
(1933 exit 1932 10 ())
(1934 threads #f #f ())
(1935 wait 1934 10 ())
(1936 threads #f #f ())
(1937 waiting? 1936 10 ())
(1938 threads #f #f ())
(1939 relinquish-timeslice 1938 10 ())
(1940 threads #f #f ())
(1941 block 1940 10 ())
(1942 threads #f #f ())
(1943 maybe-commit-and-block 1942 10 ())
(1944 threads #f #f ())
(1945 running? 1944 10 ())
(1946 loop 1945 24 ())
(1947 threads #f #f ())
(1948 interrupt-thread 1947 10 ())
(1949 threads #f #f ())
(1950 propogate-upcall 1949 10 ())
(1951 #f 1950 68 ())
(1952 threads #f #f ())
(1953 upcall 1952 10 ())
(1954 threads #f #f ())
(1955 kill-thread! 1954 10 ())
(1956 #f 1955 12 ())
(1957 threads #f #f ())
(1958 get-next-event! 1957 10 ())
(1959 threads #f #f ())
(1960 schedule-wakeup 1959 10 ())
(1961 threads #f #f ())
(1962 really-schedule-event 1961 10 ())
(1963 threads #f #f ())
(1964 root-scheduler 1963 10 ())
(1965 threads #f #f ())
(1966 maybe-suspend 1965 10 ())
(1967 loop 1966 24 ())
(1968 threads #f #f ())
(1969 schedule-event 1968 10 ())
(1970 threads #f #f ())
(1971 show-running 1970 10 ())
(1972 loop##189 1971 19 ())
(1973 threads #f #f ())
(1974 spawn-on-scheduler 1973 10 ())
(1975 threads #f #f ())
(1976 spawn 1975 10 ())
(1977 threads #f #f ())
(1978 spawn-on-root 1977 10 ())
(1979 threads #f #f ())
(1980 make-ready 1979 10 ())
(1981 threads #f #f ())
(1982 make-threads-ready 1981 10 ())
(1983 loop 1982 22 ())
(1984 threads #f #f ())
(1985 maybe-commit-and-make-ready 1984 10 ())
(1986 threads #f #f ())
(1987 cancel-timer-interrupt! 1986 10 ())
(1988 threads #f #f ())
(1989 real-time 1988 10 ())
(1990 threads #f #f ())
(1991 start-multitasking 1990 10 ())
(1992 #f 1991 16 ())
(1993 #f 1992 16 ())
(1994 #f 1992 34 ())
(1995 #f 1994 18 ())
(1996 #f 1995 16 ())
(1997 #f 1995 32 ())
(1998 threads #f #f ())
(1999 with-threads 1998 10 ())
(2000 #f 1999 20 ())
(2001 #f 2000 6 ())
(2002 #f 2000 21 ())
(2003 #f 2000 29 ())
(2004 threads #f #f ())
(2005 terminate-current-thread 2004 10 ())
(2006 threads #f #f ())
(2007 insert 2006 10 ())
(2008 threads #f #f ())
(2009 coerce-to-nonnegative-integer 2008 10 ())
(2010 threads #f #f ())
(2011 sleep 2010 10 ())
(2012 #f 2011 139 ())
(2013 threads #f #f ())
(2014 wake-some-threads 2013 10 ())
(2015 loop 2014 63 ())
(2016 threads #f #f ())
(2017 threads #f #f ())
(2018 threads #f #f ())
(2019 condvars #f #f ())
(2020 #f 2019 10 ())
(2021 condvars #f #f ())
(2022 condvar-queue 2021 10 ())
(2023 condvars #f #f ())
(2024 set-condvar-has-value?! 2023 10 ())
(2025 condvars #f #f ())
(2026 condvar-has-value? 2025 10 ())
(2027 condvars #f #f ())
(2028 set-condvar-value! 2027 10 ())
(2029 condvars #f #f ())
(2030 condvar-value 2029 10 ())
(2031 condvars #f #f ())
(2032 condvar-id 2031 10 ())
(2033 condvars #f #f ())
(2034 really-make-condvar 2033 10 ())
(2035 condvars #f #f ())
(2036 condvars #f #f ())
(2037 condvar? 2036 10 ())
(2038 condvars #f #f ())
(2039 make-condvar 2038 10 ())
(2040 condvars #f #f ())
(2041 maybe-commit-and-wait-for-condvar 2040 10 ())
(2042 condvars #f #f ())
(2043 maybe-commit-and-set-condvar! 2042 10 ())
(2044 condvars #f #f ())
(2045 condvar-has-waiters? 2044 10 ())
(2046 channel-i/o #f #f ())
(2047 abort-unwanted-i/o! 2046 10 ())
(2048 loop 2047 43 ())
(2049 channel-i/o #f #f ())
(2050 fetch-channel-condvar! 2049 10 ())
(2051 loop 2050 99 ())
(2052 channel-i/o #f #f ())
(2053 channel-i/o #f #f ())
(2054 add-channel-condvar! 2053 10 ())
(2055 channel-i/o #f #f ())
(2056 set-channel-condvars! 2055 10 ())
(2057 channel-i/o #f #f ())
(2058 channel-condvars 2057 10 ())
(2059 channel-i/o #f #f ())
(2060 channel-i/o #f #f ())
(2061 waiting-for-i/o? 2060 10 ())
(2062 channel-i/o #f #f ())
(2063 i/o-completion-handler 2062 10 ())
(2064 channel-i/o #f #f ())
(2065 initialize-channel-i/o! 2064 10 ())
(2066 channel-i/o #f #f ())
(2067 input-channel? 2066 10 ())
(2068 channel-i/o #f #f ())
(2069 channel-maybe-commit-and-close 2068 10 ())
(2070 channel-i/o #f #f ())
(2071 channel-write 2070 10 ())
(2072 lose 2071 103 ())
(2073 channel-i/o #f #f ())
(2074 note-channel-result! 2073 10 ())
(2075 lose 2074 32 ())
(2076 channel-i/o #f #f ())
(2077 channel-i/o #f #f ())
(2078 channel-i/o #f #f ())
(2079 channel-maybe-commit-and-do-it 2078 10 ())
(2080 #f 2079 16 ())
(2081 channel-ports #f #f ())
(2082 #f 2081 14 ())
(2083 #f 2081 22 ())
(2084 #f 2081 38 ())
(2085 #f 2081 46 ())
(2086 channel-ports #f #f ())
(2087 write-block-handler 2086 10 ())
(2088 loop 2087 52 ())
(2089 channel-ports #f #f ())
(2090 one-char-handler 2089 10 ())
(2091 loop 2090 64 ())
(2092 channel-ports #f #f ())
(2093 force-channel-output-ports! 2092 10 ())
(2094 #f 2093 6 ())
(2095 channel-ports #f #f ())
(2096 with-output-to-file 2095 10 ())
(2097 #f 2096 19 ())
(2098 channel-ports #f #f ())
(2099 with-input-from-file 2098 10 ())
(2100 #f 2099 19 ())
(2101 channel-ports #f #f ())
(2102 call-with-output-file 2101 10 ())
(2103 channel-ports #f #f ())
(2104 call-with-input-file 2103 10 ())
(2105 channel-ports #f #f ())
(2106 open-output-file 2105 10 ())
(2107 channel-ports #f #f ())
(2108 open-input-file 2107 10 ())
(2109 channel-ports #f #f ())
(2110 maybe-open-file 2109 10 ())
(2111 channel-ports #f #f ())
(2112 real-output-channel->port 2111 10 ())
(2113 channel-ports #f #f ())
(2114 output-channel+closer->port 2113 10 ())
(2115 channel-ports #f #f ())
(2116 output-channel->port 2115 10 ())
(2117 channel-ports #f #f ())
(2118 #f 2117 14 ())
(2119 channel-ports #f #f ())
(2120 send-some 2119 10 ())
(2121 channel-ports #f #f ())
(2122 empty-buffer! 2121 10 ())
(2123 channel-ports #f #f ())
(2124 real-input-channel->port 2123 10 ())
(2125 channel-ports #f #f ())
(2126 input-channel+closer->port 2125 10 ())
(2127 channel-ports #f #f ())
(2128 input-channel->port 2127 10 ())
(2129 channel-ports #f #f ())
(2130 #f 2129 14 ())
(2131 channel-ports #f #f ())
(2132 channel-port-ready? 2131 10 ())
(2133 channel-ports #f #f ())
(2134 fill-buffer! 2133 10 ())
(2135 channel-ports #f #f ())
(2136 port-channel-closer 2135 10 ())
(2137 channel-ports #f #f ())
(2138 port->channel 2137 10 ())
(2139 channel-ports #f #f ())
(2140 make-channel-cell 2139 10 ())
(2141 channel-ports #f #f ())
(2142 channel-cell-ref 2141 10 ())
(2143 channel-ports #f #f ())
(2144 channel-cell-closer 2143 10 ())
(2145 channel-ports #f #f ())
(2146 channel-cell-condvar 2145 10 ())
(2147 channel-ports #f #f ())
(2148 set-channel-cell-in-use?! 2147 10 ())
(2149 channel-ports #f #f ())
(2150 channel-cell-in-use? 2149 10 ())
(2151 channel-ports #f #f ())
(2152 set-channel-cell-sent! 2151 10 ())
(2153 channel-ports #f #f ())
(2154 channel-cell-sent 2153 10 ())
(2155 channel-ports #f #f ())
(2156 channel-cell? 2155 10 ())
(2157 channel-ports #f #f ())
(2158 really-make-channel-cell 2157 10 ())
(2159 channel-ports #f #f ())
(2160 scheme-level-2 #f #f ())
(2161 features #f #f ())
(2162 tables #f #f ())
(2163 tables #f #f ())
(2164 tables #f #f ())
(2165 tables #f #f ())
(2166 make-table 2165 44 ())
(2167 tables #f #f ())
(2168 tables #f #f ())
(2169 tables #f #f ())
(2170 tables #f #f ())
(2171 tables #f #f ())
(2172 set-table-size! 2171 10 ())
(2173 tables #f #f ())
(2174 table-size 2173 10 ())
(2175 tables #f #f ())
(2176 set-table-data! 2175 10 ())
(2177 tables #f #f ())
(2178 table-data 2177 10 ())
(2179 tables #f #f ())
(2180 set-table-ref-procedure! 2179 10 ())
(2181 tables #f #f ())
(2182 table-ref-procedure 2181 10 ())
(2183 tables #f #f ())
(2184 set-table-set!-procedure! 2183 10 ())
(2185 tables #f #f ())
(2186 table-set!-procedure 2185 10 ())
(2187 tables #f #f ())
(2188 really-make-table 2187 10 ())
(2189 tables #f #f ())
(2190 tables #f #f ())
(2191 table? 2190 10 ())
(2192 tables #f #f ())
(2193 table-ref 2192 10 ())
(2194 tables #f #f ())
(2195 table-set! 2194 10 ())
(2196 tables #f #f ())
(2197 next-table-size 2196 10 ())
(2198 tables #f #f ())
(2199 delete-entry! 2198 10 ())
(2200 loop 2199 47 ())
(2201 tables #f #f ())
(2202 new-entry 2201 10 ())
(2203 tables #f #f ())
(2204 make-linear-table-set! 2203 10 ())
(2205 #f 2204 17 ())
(2206 tables #f #f ())
(2207 table-expand-table! 2206 10 ())
(2208 tables #f #f ())
(2209 table-enter-alist! 2208 10 ())
(2210 loop##239 2209 37 ())
(2211 tables #f #f ())
(2212 make-hash-table-ref 2211 10 ())
(2213 #f 2212 17 ())
(2214 tables #f #f ())
(2215 expand-hash-table! 2214 10 ())
(2216 loop##241 2215 64 ())
(2217 tables #f #f ())
(2218 make-hash-table-set! 2217 10 ())
(2219 #f 2218 17 ())
(2220 tables #f #f ())
(2221 make->hash-table 2220 10 ())
(2222 #f 2221 56 ())
(2223 tables #f #f ())
(2224 make-linear-table-ref 2223 10 ())
(2225 #f 2224 16 ())
(2226 tables #f #f ())
(2227 assoc->table-maker 2226 10 ())
(2228 #f 2227 79 ())
(2229 tables #f #f ())
(2230 make-assoc 2229 10 ())
(2231 #f 2230 30 ())
(2232 loop 2231 28 ())
(2233 tables #f #f ())
(2234 make-table-maker 2233 10 ())
(2235 tables #f #f ())
(2236 alist-walk 2235 10 ())
(2237 loop##243 2236 18 ())
(2238 tables #f #f ())
(2239 really-table-walk 2238 10 ())
(2240 loop##246 2239 74 ())
(2241 tables #f #f ())
(2242 table-walk 2241 10 ())
(2243 #f 2242 16 ())
(2244 tables #f #f ())
(2245 make-table-immutable! 2244 10 ())
(2246 tables #f #f ())
(2247 table->entry-list 2246 10 ())
(2248 #f 2247 37 ())
(2249 tables #f #f ())
(2250 default-table-hash-function 2249 10 ())
(2251 tables #f #f ())
(2252 default-table-assoc 2251 10 ())
(2253 tables #f #f ())
(2254 symbol-hash 2253 10 ())
(2255 tables #f #f ())
(2256 tables #f #f ())
(2257 weak #f #f ())
(2258 walk-population 2257 10 ())
(2259 #f 2258 16 ())
(2260 weak #f #f ())
(2261 population->list 2260 10 ())
(2262 weak #f #f ())
(2263 population-reduce 2262 10 ())
(2264 loop##247 2263 18 ())
(2265 weak #f #f ())
(2266 weak-memq 2265 10 ())
(2267 weak #f #f ())
(2268 add-to-population! 2267 10 ())
(2269 weak #f #f ())
(2270 make-population 2269 10 ())
(2271 meta-types #f #f ())
(2272 meta-types #f #f ())
(2273 meta-types #f #f ())
(2274 meta-types #f #f ())
(2275 meta-types #f #f ())
(2276 meta-types #f #f ())
(2277 meta-types #f #f ())
(2278 meta-types #f #f ())
(2279 meta-types #f #f ())
(2280 meta-types #f #f ())
(2281 meta-types #f #f ())
(2282 meta-types #f #f ())
(2283 meta-types #f #f ())
(2284 meta-types #f #f ())
(2285 meta-types #f #f ())
(2286 meta-types #f #f ())
(2287 meta-types #f #f ())
(2288 meta-types #f #f ())
(2289 meta-types #f #f ())
(2290 meta-types #f #f ())
(2291 meta-types #f #f ())
(2292 meta-types #f #f ())
(2293 meta-types #f #f ())
(2294 meta-types #f #f ())
(2295 meta-types #f #f ())
(2296 meta-types #f #f ())
(2297 meta-types #f #f ())
(2298 meta-types #f #f ())
(2299 meta-types #f #f ())
(2300 meta-types #f #f ())
(2301 loop 2300 31 ())
(2302 meta-types #f #f ())
(2303 meta-types #f #f ())
(2304 meta-types #f #f ())
(2305 meta-types #f #f ())
(2306 meta-types #f #f ())
(2307 meta-types #f #f ())
(2308 meta-types #f #f ())
(2309 meta-types #f #f ())
(2310 meta-types #f #f ())
(2311 meta-types #f #f ())
(2312 meta-types #f #f ())
(2313 meta-types #f #f ())
(2314 meta-types #f #f ())
(2315 meta-types #f #f ())
(2316 meta-types #f #f ())
(2317 meta-types #f #f ())
(2318 meta-types #f #f ())
(2319 meta-types #f #f ())
(2320 meta-types #f #f ())
(2321 meta-types #f #f ())
(2322 #f 2321 14 ())
(2323 meta-types #f #f ())
(2324 type-mask 2323 10 ())
(2325 meta-types #f #f ())
(2326 type-more 2325 10 ())
(2327 meta-types #f #f ())
(2328 type-info 2327 10 ())
(2329 meta-types #f #f ())
(2330 really-make-type 2329 10 ())
(2331 meta-types #f #f ())
(2332 meta-types #f #f ())
(2333 meta-type? 2332 10 ())
(2334 meta-types #f #f ())
(2335 make-type 2334 10 ())
(2336 meta-types #f #f ())
(2337 set-type-name! 2336 10 ())
(2338 meta-types #f #f ())
(2339 make-other-type 2338 10 ())
(2340 meta-types #f #f ())
(2341 name->type 2340 10 ())
(2342 meta-types #f #f ())
(2343 new-type-bit 2342 10 ())
(2344 meta-types #f #f ())
(2345 mask->type 2344 10 ())
(2346 meta-types #f #f ())
(2347 bottom-type? 2346 10 ())
(2348 meta-types #f #f ())
(2349 new-atomic-type 2348 10 ())
(2350 meta-types #f #f ())
(2351 named-atomic-type 2350 10 ())
(2352 meta-types #f #f ())
(2353 empty-rail-type? 2352 10 ())
(2354 meta-types #f #f ())
(2355 rest-type? 2354 10 ())
(2356 meta-types #f #f ())
(2357 same-type? 2356 10 ())
(2358 meta-types #f #f ())
(2359 head-type 2358 10 ())
(2360 meta-types #f #f ())
(2361 optional-type? 2360 10 ())
(2362 meta-types #f #f ())
(2363 rail-type 2362 10 ())
(2364 meta-types #f #f ())
(2365 make-optional-type 2364 10 ())
(2366 meta-types #f #f ())
(2367 make-rest-type 2366 10 ())
(2368 meta-types #f #f ())
(2369 head-type-really 2368 10 ())
(2370 meta-types #f #f ())
(2371 tail-type 2370 10 ())
(2372 meta-types #f #f ())
(2373 value-type? 2372 10 ())
(2374 meta-types #f #f ())
(2375 other-type-info 2374 10 ())
(2376 meta-types #f #f ())
(2377 restrictive? 2376 10 ())
(2378 meta-types #f #f ())
(2379 make-procedure-type 2378 10 ())
(2380 meta-types #f #f ())
(2381 procedure-type-domain 2380 10 ())
(2382 meta-types #f #f ())
(2383 procedure-type-codomain 2382 10 ())
(2384 meta-types #f #f ())
(2385 meet-procedure 2384 10 ())
(2386 meta-types #f #f ())
(2387 meet-rail 2386 10 ())
(2388 meta-types #f #f ())
(2389 meet-type 2388 10 ())
(2390 meta-types #f #f ())
(2391 subtype? 2390 10 ())
(2392 meta-types #f #f ())
(2393 meet-procedure? 2392 10 ())
(2394 meta-types #f #f ())
(2395 meet? 2394 10 ())
(2396 meta-types #f #f ())
(2397 procedure-type? 2396 10 ())
(2398 meta-types #f #f ())
(2399 join-procedure 2398 10 ())
(2400 meta-types #f #f ())
(2401 join-rail 2400 10 ())
(2402 meta-types #f #f ())
(2403 join-type 2402 10 ())
(2404 meta-types #f #f ())
(2405 procedure-type 2404 10 ())
(2406 meta-types #f #f ())
(2407 sexp->values-type 2406 10 ())
(2408 meta-types #f #f ())
(2409 sexp->type 2408 10 ())
(2410 #f 2409 303 ())
(2411 #f 2409 381 ())
(2412 meta-types #f #f ())
(2413 disjoin-rest 2412 10 ())
(2414 meta-types #f #f ())
(2415 disjoin-type 2414 10 ())
(2416 loop##269 2415 293 ())
(2417 meta-types #f #f ())
(2418 atomic-type->sexp 2417 10 ())
(2419 meta-types #f #f ())
(2420 rail-type->sexp 2419 10 ())
(2421 recur 2420 28 ())
(2422 meta-types #f #f ())
(2423 type->sexp 2422 10 ())
(2424 #f 2423 158 ())
(2425 meta-types #f #f ())
(2426 make-some-values-type 2425 10 ())
(2427 meta-types #f #f ())
(2428 fixed-arity-procedure-type? 2427 10 ())
(2429 loop 2428 50 ())
(2430 meta-types #f #f ())
(2431 procedure-type-arity 2430 10 ())
(2432 loop##272 2431 18 ())
(2433 meta-types #f #f ())
(2434 procedure-type-argument-types 2433 10 ())
(2435 recur 2434 37 ())
(2436 meta-types #f #f ())
(2437 variable-type 2436 10 ())
(2438 meta-types #f #f ())
(2439 variable-type? 2438 10 ())
(2440 meta-types #f #f ())
(2441 compatible-types? 2440 10 ())
(2442 meta-types #f #f ())
(2443 meta-types #f #f ())
(2444 meta-types #f #f ())
(2445 interfaces #f #f ())
(2446 #f 2445 10 ())
(2447 interfaces #f #f ())
(2448 ref-method 2447 10 ())
(2449 interfaces #f #f ())
(2450 walk-method 2449 10 ())
(2451 interfaces #f #f ())
(2452 interface-clients 2451 10 ())
(2453 interfaces #f #f ())
(2454 set-interface-name! 2453 10 ())
(2455 interfaces #f #f ())
(2456 interface-name 2455 10 ())
(2457 interfaces #f #f ())
(2458 really-make-interface 2457 10 ())
(2459 interfaces #f #f ())
(2460 interfaces #f #f ())
(2461 interface? 2460 10 ())
(2462 interfaces #f #f ())
(2463 make-interface 2462 10 ())
(2464 interfaces #f #f ())
(2465 interface-ref 2464 10 ())
(2466 interfaces #f #f ())
(2467 interface-member? 2466 10 ())
(2468 interfaces #f #f ())
(2469 for-each-declaration 2468 10 ())
(2470 interfaces #f #f ())
(2471 note-reference-to-interface! 2470 10 ())
(2472 interfaces #f #f ())
(2473 note-interface-name! 2472 10 ())
(2474 interfaces #f #f ())
(2475 make-simple-interface-table 2474 10 ())
(2476 #f 2475 35 ())
(2477 #f 2476 77 ())
(2478 interfaces #f #f ())
(2479 make-simple-interface 2478 10 ())
(2480 #f 2479 34 ())
(2481 #f 2479 49 ())
(2482 #f 2481 16 ())
(2483 interfaces #f #f ())
(2484 make-compound-interface 2483 10 ())
(2485 #f 2484 22 ())
(2486 loop 2485 25 ())
(2487 #f 2484 37 ())
(2488 #f 2487 16 ())
(2489 #f 2484 70 ())
(2490 interfaces #f #f ())
(2491 proper-list? 2490 10 ())
(2492 interfaces #f #f ())
(2493 okay-command? 2492 10 ())
(2494 #f 2493 169 ())
(2495 interfaces #f #f ())
(2496 symbol-append 2495 10 ())
(2497 interfaces #f #f ())
(2498 process-prefix 2497 10 ())
(2499 #f 2498 29 ())
(2500 #f 2498 59 ())
(2501 interfaces #f #f ())
(2502 prefix-match? 2501 10 ())
(2503 loop 2502 38 ())
(2504 interfaces #f #f ())
(2505 remove-prefix 2504 10 ())
(2506 interfaces #f #f ())
(2507 interface-lookup 2506 10 ())
(2508 interfaces #f #f ())
(2509 process-expose 2508 10 ())
(2510 loop 2509 35 ())
(2511 interfaces #f #f ())
(2512 process-hide 2511 10 ())
(2513 interfaces #f #f ())
(2514 process-alias 2513 10 ())
(2515 #f 2514 17 ())
(2516 interfaces #f #f ())
(2517 process-rename 2516 10 ())
(2518 #f 2517 17 ())
(2519 interfaces #f #f ())
(2520 process-commands 2519 10 ())
(2521 loop 2520 49 ())
(2522 #f 2521 30 ())
(2523 interfaces #f #f ())
(2524 make-lookup 2523 10 ())
(2525 #f 2524 19 ())
(2526 interfaces #f #f ())
(2527 cdr-assq 2526 10 ())
(2528 loop 2527 25 ())
(2529 interfaces #f #f ())
(2530 make-default-walker 2529 10 ())
(2531 #f 2530 19 ())
(2532 #f 2531 21 ())
(2533 interfaces #f #f ())
(2534 make-alist-walker 2533 10 ())
(2535 #f 2534 17 ())
(2536 #f 2535 19 ())
(2537 interfaces #f #f ())
(2538 make-modified-interface 2537 10 ())
(2539 bindings #f #f ())
(2540 bindings #f #f ())
(2541 binding-type 2540 10 ())
(2542 bindings #f #f ())
(2543 binding-place 2542 10 ())
(2544 bindings #f #f ())
(2545 binding-static 2544 10 ())
(2546 bindings #f #f ())
(2547 binding-path 2546 10 ())
(2548 bindings #f #f ())
(2549 set-binding-place! 2548 10 ())
(2550 bindings #f #f ())
(2551 make-binding 2550 10 ())
(2552 bindings #f #f ())
(2553 add-path 2552 10 ())
(2554 bindings #f #f ())
(2555 clobber-binding! 2554 10 ())
(2556 bindings #f #f ())
(2557 impose-type 2556 10 ())
(2558 bindings #f #f ())
(2559 forget-integration 2558 10 ())
(2560 bindings #f #f ())
(2561 same-denotation? 2560 10 ())
(2562 bindings #f #f ())
(2563 follow-forwarding-pointers 2562 10 ())
(2564 bindings #f #f ())
(2565 maybe-fix-place! 2564 10 ())
(2566 names #f #f ())
(2567 #f 2566 10 ())
(2568 names #f #f ())
(2569 transform-procedure 2568 10 ())
(2570 names #f #f ())
(2571 transform-env 2570 10 ())
(2572 names #f #f ())
(2573 transform-type 2572 10 ())
(2574 names #f #f ())
(2575 transform-aux-names 2574 10 ())
(2576 names #f #f ())
(2577 transform-source 2576 10 ())
(2578 names #f #f ())
(2579 transform-id 2578 10 ())
(2580 names #f #f ())
(2581 really-make-transform 2580 10 ())
(2582 names #f #f ())
(2583 names #f #f ())
(2584 names #f #f ())
(2585 #f 2584 14 ())
(2586 names #f #f ())
(2587 generated-name 2586 10 ())
(2588 names #f #f ())
(2589 generated-token 2588 10 ())
(2590 names #f #f ())
(2591 generated-env 2590 10 ())
(2592 names #f #f ())
(2593 generated-parent-name 2592 10 ())
(2594 names #f #f ())
(2595 make-generated 2594 10 ())
(2596 names #f #f ())
(2597 names #f #f ())
(2598 generated? 2597 10 ())
(2599 names #f #f ())
(2600 name? 2599 10 ())
(2601 names #f #f ())
(2602 generate-name 2601 10 ())
(2603 names #f #f ())
(2604 generated-uid 2603 10 ())
(2605 names #f #f ())
(2606 name->symbol 2605 10 ())
(2607 names #f #f ())
(2608 name-hash 2607 10 ())
(2609 names #f #f ())
(2610 desyntaxify 2609 10 ())
(2611 loop 2610 290 ())
(2612 names #f #f ())
(2613 make-qualified 2612 10 ())
(2614 names #f #f ())
(2615 qualified? 2614 10 ())
(2616 names #f #f ())
(2617 qualified-parent-name 2616 10 ())
(2618 names #f #f ())
(2619 qualified-symbol 2618 10 ())
(2620 names #f #f ())
(2621 qualified-uid 2620 10 ())
(2622 names #f #f ())
(2623 lookup 2622 10 ())
(2624 names #f #f ())
(2625 transform? 2624 10 ())
(2626 names #f #f ())
(2627 qualify-parent 2626 10 ())
(2628 recur 2627 25 ())
(2629 names #f #f ())
(2630 name->qualified 2629 10 ())
(2631 names #f #f ())
(2632 make-transform 2631 10 ())
(2633 names #f #f ())
(2634 name->source-name 2633 10 ())
(2635 names #f #f ())
(2636 make-keyword-comparator 2635 10 ())
(2637 #f 2636 16 ())
(2638 names #f #f ())
(2639 make-name-generator 2638 10 ())
(2640 #f 2639 38 ())
(2641 names #f #f ())
(2642 bind-aliases 2641 10 ())
(2643 #f 2642 53 ())
(2644 names #f #f ())
(2645 maybe-apply-macro-transform 2644 10 ())
(2646 names #f #f ())
(2647 apply-inline-transform 2646 10 ())
(2648 names #f #f ())
(2649 compiler-envs #f #f ())
(2650 compiler-envs #f #f ())
(2651 compiler-envs #f #f ())
(2652 compiler-envs #f #f ())
(2653 compiler-envs #f #f ())
(2654 lookup 2653 10 ())
(2655 compiler-envs #f #f ())
(2656 bind1 2655 10 ())
(2657 #f 2656 18 ())
(2658 compiler-envs #f #f ())
(2659 bind 2658 10 ())
(2660 compiler-envs #f #f ())
(2661 bindrec 2660 10 ())
(2662 #f 2661 40 ())
(2663 compiler-envs #f #f ())
(2664 make-compiler-env 2663 10 ())
(2665 #f 2664 19 ())
(2666 compiler-envs #f #f ())
(2667 environment-macro-eval 2666 10 ())
(2668 compiler-envs #f #f ())
(2669 environment-define! 2668 10 ())
(2670 compiler-envs #f #f ())
(2671 extract-package-from-environment 2670 10 ())
(2672 compiler-envs #f #f ())
(2673 bind-source-file-name 2672 10 ())
(2674 compiler-envs #f #f ())
(2675 source-file-name 2674 10 ())
(2676 thingies #f #f ())
(2677 thingie-binding 2676 10 ())
(2678 thingies #f #f ())
(2679 thingie-name 2678 10 ())
(2680 thingies #f #f ())
(2681 thingie-want-type 2680 10 ())
(2682 thingies #f #f ())
(2683 make-thingie 2682 10 ())
(2684 thingies #f #f ())
(2685 thingies #f #f ())
(2686 thingie? 2685 10 ())
(2687 packages #f #f ())
(2688 #f 2687 14 ())
(2689 packages #f #f ())
(2690 packages #f #f ())
(2691 packages #f #f ())
(2692 packages #f #f ())
(2693 packages #f #f ())
(2694 packages #f #f ())
(2695 packages #f #f ())
(2696 packages #f #f ())
(2697 #f 2696 14 ())
(2698 packages #f #f ())
(2699 package-uid 2698 10 ())
(2700 packages #f #f ())
(2701 set-package-opens! 2700 10 ())
(2702 packages #f #f ())
(2703 package-opens-really 2702 10 ())
(2704 packages #f #f ())
(2705 package-definitions 2704 10 ())
(2706 packages #f #f ())
(2707 package-unstable? 2706 10 ())
(2708 packages #f #f ())
(2709 set-package-integrate?! 2708 10 ())
(2710 packages #f #f ())
(2711 package-integrate? 2710 10 ())
(2712 packages #f #f ())
(2713 set-package-get-location! 2712 10 ())
(2714 packages #f #f ())
(2715 package-get-location 2714 10 ())
(2716 packages #f #f ())
(2717 package-file-name 2716 10 ())
(2718 packages #f #f ())
(2719 package-clauses 2718 10 ())
(2720 packages #f #f ())
(2721 set-package-loaded?! 2720 10 ())
(2722 packages #f #f ())
(2723 package-loaded? 2722 10 ())
(2724 packages #f #f ())
(2725 set-package->environment! 2724 10 ())
(2726 packages #f #f ())
(2727 package->environment 2726 10 ())
(2728 packages #f #f ())
(2729 set-package-opens-thunk! 2728 10 ())
(2730 packages #f #f ())
(2731 package-opens-thunk 2730 10 ())
(2732 packages #f #f ())
(2733 package-accesses-thunk 2732 10 ())
(2734 packages #f #f ())
(2735 set-package-undefineds! 2734 10 ())
(2736 packages #f #f ())
(2737 package-real-undefineds 2736 10 ())
(2738 packages #f #f ())
(2739 set-package-undefined-but-assigneds! 2738 10 ())
(2740 packages #f #f ())
(2741 package-real-undefined-but-assigneds 2740 10 ())
(2742 packages #f #f ())
(2743 package-clients 2742 10 ())
(2744 packages #f #f ())
(2745 package-cached 2744 10 ())
(2746 packages #f #f ())
(2747 really-make-package 2746 10 ())
(2748 packages #f #f ())
(2749 packages #f #f ())
(2750 #f 2749 14 ())
(2751 packages #f #f ())
(2752 structure-interface-thunk 2751 10 ())
(2753 packages #f #f ())
(2754 set-structure-interface! 2753 10 ())
(2755 packages #f #f ())
(2756 structure-interface-really 2755 10 ())
(2757 packages #f #f ())
(2758 structure-package 2757 10 ())
(2759 packages #f #f ())
(2760 structure-clients 2759 10 ())
(2761 packages #f #f ())
(2762 set-structure-name! 2761 10 ())
(2763 packages #f #f ())
(2764 structure-name 2763 10 ())
(2765 packages #f #f ())
(2766 really-make-structure 2765 10 ())
(2767 packages #f #f ())
(2768 packages #f #f ())
(2769 structure? 2768 10 ())
(2770 packages #f #f ())
(2771 initialize-structure! 2770 10 ())
(2772 packages #f #f ())
(2773 structure-interface 2772 10 ())
(2774 packages #f #f ())
(2775 package? 2774 10 ())
(2776 packages #f #f ())
(2777 note-package-name! 2776 10 ())
(2778 packages #f #f ())
(2779 note-structure-name! 2778 10 ())
(2780 packages #f #f ())
(2781 make-structure 2780 10 ())
(2782 #f 2781 100 ())
(2783 packages #f #f ())
(2784 structure-unstable? 2783 10 ())
(2785 packages #f #f ())
(2786 make-modified-structure 2785 10 ())
(2787 #f 2786 34 ())
(2788 packages #f #f ())
(2789 get-new-location 2788 10 ())
(2790 packages #f #f ())
(2791 package-define! 2790 10 ())
(2792 packages #f #f ())
(2793 package-accesses 2792 10 ())
(2794 packages #f #f ())
(2795 initialize-package! 2794 10 ())
(2796 #f 2795 59 ())
(2797 #f 2795 84 ())
(2798 packages #f #f ())
(2799 initialize-package-if-necessary! 2798 10 ())
(2800 packages #f #f ())
(2801 package-definition 2800 10 ())
(2802 packages #f #f ())
(2803 search-opens 2802 10 ())
(2804 loop 2803 26 ())
(2805 packages #f #f ())
(2806 structure-lookup 2805 10 ())
(2807 packages #f #f ())
(2808 package-lookup 2807 10 ())
(2809 packages #f #f ())
(2810 generic-lookup 2809 10 ())
(2811 packages #f #f ())
(2812 really-package-lookup 2811 10 ())
(2813 packages #f #f ())
(2814 real-structure-lookup 2813 10 ())
(2815 packages #f #f ())
(2816 for-each-export 2815 10 ())
(2817 #f 2816 35 ())
(2818 packages #f #f ())
(2819 really-package->environment 2818 10 ())
(2820 #f 2819 16 ())
(2821 #f 2819 31 ())
(2822 packages #f #f ())
(2823 new-package-uid 2822 10 ())
(2824 packages #f #f ())
(2825 make-package 2824 10 ())
(2826 packages #f #f ())
(2827 lazy-table-accessor 2826 10 ())
(2828 #f 2827 17 ())
(2829 packages #f #f ())
(2830 package-name 2829 10 ())
(2831 packages #f #f ())
(2832 package-opens 2831 10 ())
(2833 packages #f #f ())
(2834 make-simple-package 2833 10 ())
(2835 #f 2834 77 ())
(2836 #f 2834 85 ())
(2837 packages #f #f ())
(2838 package-add-static! 2837 10 ())
(2839 packages #f #f ())
(2840 package-refine-type! 2839 10 ())
(2841 packages #f #f ())
(2842 for-each-definition 2841 10 ())
(2843 #f 2842 16 ())
(2844 packages #f #f ())
(2845 make-new-location 2844 10 ())
(2846 packages #f #f ())
(2847 flush-location-names 2846 10 ())
(2848 packages #f #f ())
(2849 print-undefined-names 2848 10 ())
(2850 #f 2849 20 ())
(2851 #f 2849 66 ())
(2852 packages #f #f ())
(2853 noting-undefined-variables 2852 10 ())
(2854 add-name 2853 33 ())
(2855 #f 2853 55 ())
(2856 #f 2853 74 ())
(2857 #f 2856 6 ())
(2858 #f 2856 25 ())
(2859 #f 2858 13 ())
(2860 packages #f #f ())
(2861 cenv->package 2860 10 ())
(2862 packages #f #f ())
(2863 get-location-for-unassignable 2862 10 ())
(2864 #f 2863 120 ())
(2865 #f 2863 135 ())
(2866 packages #f #f ())
(2867 package-note-caching! 2866 10 ())
(2868 loop 2867 94 ())
(2869 packages #f #f ())
(2870 note-caching! 2869 10 ())
(2871 packages #f #f ())
(2872 location-for-reference 2871 10 ())
(2873 loop 2872 38 ())
(2874 packages #f #f ())
(2875 get-location-for-undefined 2874 10 ())
(2876 #f 2875 116 ())
(2877 packages #f #f ())
(2878 get-location 2877 10 ())
(2879 packages #f #f ())
(2880 really-link! 2879 10 ())
(2881 loop##418 2880 19 ())
(2882 packages #f #f ())
(2883 link! 2882 10 ())
(2884 #f 2883 25 ())
(2885 packages #f #f ())
(2886 location-on-demand 2885 10 ())
(2887 #f 2886 16 ())
(2888 packages #f #f ())
(2889 packages #f #f ())
(2890 environments #f #f ())
(2891 set-reflective-tower-maker! 2890 40 ())
(2892 environments #f #f ())
(2893 make-reflective-tower 2892 10 ())
(2894 recur 2893 28 ())
(2895 #f 2894 24 ())
(2896 environments #f #f ())
(2897 null-environment 2896 10 ())
(2898 environments #f #f ())
(2899 set-scheme-report-environment! 2898 10 ())
(2900 environments #f #f ())
(2901 environments #f #f ())
(2902 environments #f #f ())
(2903 environments #f #f ())
(2904 scheme-report-environment 2903 10 ())
(2905 environments #f #f ())
(2906 with-interaction-environment 2905 10 ())
(2907 environments #f #f ())
(2908 set-interaction-environment! 2907 10 ())
(2909 environments #f #f ())
(2910 interaction-environment 2909 10 ())
(2911 environments #f #f ())
(2912 environments #f #f ())
(2913 carefully 2912 10 ())
(2914 environments #f #f ())
(2915 *structure-ref 2914 10 ())
(2916 environments #f #f ())
(2917 environment-define! 2916 10 ())
(2918 environments #f #f ())
(2919 environment-set! 2918 10 ())
(2920 #f 2919 132 ())
(2921 environments #f #f ())
(2922 environment-ref 2921 10 ())
(2923 #f 2922 35 ())
(2924 filenames #f #f ())
(2925 translate 2924 10 ())
(2926 loop 2925 36 ())
(2927 filenames #f #f ())
(2928 set-translation! 2927 10 ())
(2929 filenames #f #f ())
(2930 translations 2929 10 ())
(2931 filenames #f #f ())
(2932 filenames #f #f ())
(2933 string-posq 2932 10 ())
(2934 loop 2933 27 ())
(2935 filenames #f #f ())
(2936 file-nondirectory-position 2935 10 ())
(2937 loop 2936 31 ())
(2938 filenames #f #f ())
(2939 file-name-nondirectory 2938 10 ())
(2940 filenames #f #f ())
(2941 file-name-directory 2940 10 ())
(2942 filenames #f #f ())
(2943 filenames #f #f ())
(2944 filenames #f #f ())
(2945 filenames #f #f ())
(2946 namestring-component 2945 10 ())
(2947 filenames #f #f ())
(2948 filenames #f #f ())
(2949 filenames #f #f ())
(2950 namestring 2949 10 ())
(2951 #f 2950 196 ())
(2952 reading-forms #f #f ())
(2953 really-read-forms 2952 10 ())
(2954 loop 2953 26 ())
(2955 reading-forms #f #f ())
(2956 read-forms 2955 10 ())
(2957 #f 2956 67 ())
(2958 reading-forms #f #f ())
(2959 #f 2958 14 ())
(2960 nodes #f #f ())
(2961 #f 2960 18 ())
(2962 nodes #f #f ())
(2963 #f 2962 22 ())
(2964 nodes #f #f ())
(2965 #f 2964 22 ())
(2966 nodes #f #f ())
(2967 #f 2966 22 ())
(2968 nodes #f #f ())
(2969 nodes #f #f ())
(2970 nodes #f #f ())
(2971 #f 2970 22 ())
(2972 #f 2971 16 ())
(2973 nodes #f #f ())
(2974 #f 2973 22 ())
(2975 nodes #f #f ())
(2976 #f 2975 22 ())
(2977 nodes #f #f ())
(2978 #f 2977 14 ())
(2979 nodes #f #f ())
(2980 #f 2979 14 ())
(2981 nodes #f #f ())
(2982 node-operator-id 2981 10 ())
(2983 nodes #f #f ())
(2984 node-form 2983 10 ())
(2985 nodes #f #f ())
(2986 set-node-plist! 2985 10 ())
(2987 nodes #f #f ())
(2988 node-plist 2987 10 ())
(2989 nodes #f #f ())
(2990 really-make-node 2989 10 ())
(2991 nodes #f #f ())
(2992 nodes #f #f ())
(2993 nodes #f #f ())
(2994 nodes #f #f ())
(2995 nodes #f #f ())
(2996 nodes #f #f ())
(2997 #f 2996 14 ())
(2998 nodes #f #f ())
(2999 set-operator-type! 2998 10 ())
(3000 nodes #f #f ())
(3001 operator-type 3000 10 ())
(3002 nodes #f #f ())
(3003 operator-nargs 3002 10 ())
(3004 nodes #f #f ())
(3005 operator-uid 3004 10 ())
(3006 nodes #f #f ())
(3007 operator-name 3006 10 ())
(3008 nodes #f #f ())
(3009 make-operator 3008 10 ())
(3010 nodes #f #f ())
(3011 nodes #f #f ())
(3012 operator? 3011 10 ())
(3013 nodes #f #f ())
(3014 get-operator 3013 10 ())
(3015 nodes #f #f ())
(3016 make-operator-table 3015 10 ())
(3017 nodes #f #f ())
(3018 operator-lookup 3017 10 ())
(3019 nodes #f #f ())
(3020 operator-define! 3019 10 ())
(3021 nodes #f #f ())
(3022 node? 3021 10 ())
(3023 nodes #f #f ())
(3024 make-node 3023 10 ())
(3025 nodes #f #f ())
(3026 node-ref 3025 10 ())
(3027 nodes #f #f ())
(3028 node-set! 3027 10 ())
(3029 loop 3028 116 ())
(3030 nodes #f #f ())
(3031 node-operator 3030 10 ())
(3032 nodes #f #f ())
(3033 node-predicate 3032 10 ())
(3034 #f 3033 50 ())
(3035 nodes #f #f ())
(3036 make-similar-node 3035 10 ())
(3037 nodes #f #f ())
(3038 force-node 3037 10 ())
(3039 nodes #f #f ())
(3040 schemify-node 3039 10 ())
(3041 nodes #f #f ())
(3042 schemify-sexp 3041 10 ())
(3043 loop 3042 163 ())
(3044 nodes #f #f ())
(3045 schemify 3044 10 ())
(3046 nodes #f #f ())
(3047 schemify-nodes 3046 10 ())
(3048 #f 3047 16 ())
(3049 nodes #f #f ())
(3050 define-schemifier 3049 10 ())
(3051 nodes #f #f ())
(3052 schemify-formals 3051 10 ())
(3053 nodes #f #f ())
(3054 schemify-lambda 3053 10 ())
(3055 nodes #f #f ())
(3056 schemify-letrec 3055 10 ())
(3057 #f 3056 24 ())
(3058 nodes #f #f ())
(3059 nodes #f #f ())
(3060 var-utilities #f #f ())
(3061 normalize-formals 3060 10 ())
(3062 var-utilities #f #f ())
(3063 n-ary? 3062 10 ())
(3064 var-utilities #f #f ())
(3065 number-of-required-args 3064 10 ())
(3066 loop##445 3065 14 ())
(3067 syntactic #f #f ())
(3068 syntactic #f #f ())
(3069 syntactic #f #f ())
(3070 syntactic #f #f ())
(3071 syntactic #f #f ())
(3072 syntactic #f #f ())
(3073 syntactic #f #f ())
(3074 syntactic #f #f ())
(3075 syntactic #f #f ())
(3076 syntactic #f #f ())
(3077 syntactic #f #f ())
(3078 syntactic #f #f ())
(3079 syntactic #f #f ())
(3080 syntactic #f #f ())
(3081 syntactic #f #f ())
(3082 syntactic #f #f ())
(3083 syntactic #f #f ())
(3084 #f 3083 22 ())
(3085 #f 3084 127 ())
(3086 syntactic #f #f ())
(3087 #f 3086 22 ())
(3088 #f 3087 108 ())
(3089 #f 3088 16 ())
(3090 syntactic #f #f ())
(3091 #f 3090 22 ())
(3092 #f 3091 112 ())
(3093 syntactic #f #f ())
(3094 #f 3093 22 ())
(3095 syntactic #f #f ())
(3096 #f 3095 22 ())
(3097 #f 3096 82 ())
(3098 syntactic #f #f ())
(3099 #f 3098 22 ())
(3100 syntactic #f #f ())
(3101 #f 3100 22 ())
(3102 syntactic #f #f ())
(3103 #f 3102 22 ())
(3104 syntactic #f #f ())
(3105 #f 3104 22 ())
(3106 syntactic #f #f ())
(3107 #f 3106 22 ())
(3108 syntactic #f #f ())
(3109 #f 3108 22 ())
(3110 syntactic #f #f ())
(3111 #f 3110 22 ())
(3112 syntactic #f #f ())
(3113 #f 3112 22 ())
(3114 syntactic #f #f ())
(3115 #f 3114 14 ())
(3116 syntactic #f #f ())
(3117 syntactic #f #f ())
(3118 syntactic #f #f ())
(3119 syntactic #f #f ())
(3120 at-least-this-long? 3119 10 ())
(3121 syntactic #f #f ())
(3122 names? 3121 10 ())
(3123 syntactic #f #f ())
(3124 destructure-define 3123 10 ())
(3125 syntactic #f #f ())
(3126 scan-define 3125 10 ())
(3127 syntactic #f #f ())
(3128 this-long? 3127 10 ())
(3129 syntactic #f #f ())
(3130 process-syntax 3129 10 ())
(3131 syntactic #f #f ())
(3132 scan-define-syntax 3131 10 ())
(3133 syntactic #f #f ())
(3134 expand-name 3133 10 ())
(3135 syntactic #f #f ())
(3136 expand-operator-form 3135 10 ())
(3137 syntactic #f #f ())
(3138 literal? 3137 10 ())
(3139 syntactic #f #f ())
(3140 expand-literal 3139 10 ())
(3141 syntactic #f #f ())
(3142 expand-list 3141 10 ())
(3143 #f 3142 16 ())
(3144 syntactic #f #f ())
(3145 expand-call 3144 10 ())
(3146 syntactic #f #f ())
(3147 expand 3146 10 ())
(3148 syntactic #f #f ())
(3149 expand-macro-application 3148 10 ())
(3150 syntactic #f #f ())
(3151 expand-structure-ref 3150 10 ())
(3152 lose 3151 41 ())
(3153 syntactic #f #f ())
(3154 expand-head 3153 10 ())
(3155 syntactic #f #f ())
(3156 scan-forms 3155 10 ())
(3157 loop 3156 29 ())
(3158 syntactic #f #f ())
(3159 expand-define 3158 10 ())
(3160 syntactic #f #f ())
(3161 expand-scanned-form 3160 10 ())
(3162 syntactic #f #f ())
(3163 expand-form 3162 10 ())
(3164 loop 3163 41 ())
(3165 syntactic #f #f ())
(3166 static-value 3165 10 ())
(3167 syntactic #f #f ())
(3168 make-operator-predicate 3167 10 ())
(3169 #f 3168 38 ())
(3170 syntactic #f #f ())
(3171 body-lossage 3170 10 ())
(3172 syntactic #f #f ())
(3173 scan-body-forms 3172 10 ())
(3174 syntactic #f #f ())
(3175 expand-letrec 3174 10 ())
(3176 #f 3175 20 ())
(3177 syntactic #f #f ())
(3178 expand-body 3177 10 ())
(3179 syntactic #f #f ())
(3180 define-expander 3179 10 ())
(3181 syntactic #f #f ())
(3182 unspecific-node 3181 10 ())
(3183 syntactic #f #f ())
(3184 bind-names 3183 10 ())
(3185 loop 3184 33 ())
(3186 syntactic #f #f ())
(3187 expand-lambda 3186 10 ())
(3188 syntactic #f #f ())
(3189 specs? 3188 10 ())
(3190 syntactic #f #f ())
(3191 syntax? 3190 10 ())
(3192 primops #f #f ())
(3193 primops #f #f ())
(3194 #f 3193 14 ())
(3195 primops #f #f ())
(3196 primop-name 3195 10 ())
(3197 primops #f #f ())
(3198 primop-type 3197 10 ())
(3199 primops #f #f ())
(3200 primop-closed 3199 10 ())
(3201 primops #f #f ())
(3202 primop-compilator 3201 10 ())
(3203 primops #f #f ())
(3204 make-primop 3203 10 ())
(3205 primops #f #f ())
(3206 primops #f #f ())
(3207 primop? 3206 10 ())
(3208 primops #f #f ())
(3209 walk-primops 3208 10 ())
(3210 #f 3209 16 ())
(3211 primops #f #f ())
(3212 define-compiler-primitive 3211 10 ())
(3213 primops #f #f ())
(3214 get-primop 3213 10 ())
(3215 debug-data #f #f ())
(3216 debug-data #f #f ())
(3217 debug-data #f #f ())
(3218 debug-data #f #f ())
(3219 debug-data #f #f ())
(3220 debug-data #f #f ())
(3221 debug-data #f #f ())
(3222 debug-data #f #f ())
(3223 debug-data #f #f ())
(3224 debug-data #f #f ())
(3225 #f 3224 14 ())
(3226 debug-data #f #f ())
(3227 debug-data-uid 3226 10 ())
(3228 debug-data #f #f ())
(3229 debug-data-name 3228 10 ())
(3230 debug-data #f #f ())
(3231 debug-data-parent 3230 10 ())
(3232 debug-data #f #f ())
(3233 debug-data-pc-in-parent 3232 10 ())
(3234 debug-data #f #f ())
(3235 set-debug-data-env-maps! 3234 10 ())
(3236 debug-data #f #f ())
(3237 debug-data-env-maps 3236 10 ())
(3238 debug-data #f #f ())
(3239 set-debug-data-source! 3238 10 ())
(3240 debug-data #f #f ())
(3241 debug-data-source 3240 10 ())
(3242 debug-data #f #f ())
(3243 make-debug-data 3242 10 ())
(3244 debug-data #f #f ())
(3245 debug-data #f #f ())
(3246 debug-data? 3245 10 ())
(3247 debug-data #f #f ())
(3248 get-debug-data 3247 10 ())
(3249 debug-data #f #f ())
(3250 debug-data-env-shape 3249 10 ())
(3251 loop 3250 102 ())
(3252 debug-data #f #f ())
(3253 new-template-uid 3252 10 ())
(3254 debug-data #f #f ())
(3255 template-uid 3254 10 ())
(3256 debug-data #f #f ())
(3257 set-template-uid! 3256 10 ())
(3258 debug-data #f #f ())
(3259 debug-flag-accessor 3258 10 ())
(3260 #f 3259 38 ())
(3261 debug-data #f #f ())
(3262 debug-flag-modifier 3261 10 ())
(3263 #f 3262 38 ())
(3264 debug-data #f #f ())
(3265 saving-and-restoring 3264 10 ())
(3266 swap 3265 28 ())
(3267 debug-data #f #f ())
(3268 with-fresh-compiler-state 3267 10 ())
(3269 #f 3268 59 ())
(3270 #f 3269 6 ())
(3271 #f 3269 14 ())
(3272 debug-data #f #f ())
(3273 note-debug-data! 3272 10 ())
(3274 debug-data #f #f ())
(3275 debug-data->info 3274 10 ())
(3276 debug-data #f #f ())
(3277 new-debug-data 3276 10 ())
(3278 debug-data #f #f ())
(3279 debug-data #f #f ())
(3280 stack-check #f #f ())
(3281 loop##486 3280 11 ())
(3282 stack-check #f #f ())
(3283 #f 3282 14 ())
(3284 loop 3283 62 ())
(3285 stack-check #f #f ())
(3286 #f 3285 14 ())
(3287 stack-check #f #f ())
(3288 #f 3287 14 ())
(3289 stack-check #f #f ())
(3290 stack-check #f #f ())
(3291 stack-check #f #f ())
(3292 #f 3291 14 ())
(3293 stack-check #f #f ())
(3294 stack-check #f #f ())
(3295 stack-check #f #f ())
(3296 #f 3295 14 ())
(3297 stack-check #f #f ())
(3298 #f 3297 14 ())
(3299 stack-check #f #f ())
(3300 #f 3299 14 ())
(3301 stack-check #f #f ())
(3302 #f 3301 14 ())
(3303 stack-check #f #f ())
(3304 stack-check #f #f ())
(3305 stack-check #f #f ())
(3306 stack-check #f #f ())
(3307 stack-check #f #f ())
(3308 stack-check #f #f ())
(3309 stack-check #f #f ())
(3310 stack-check #f #f ())
(3311 stack-check #f #f ())
(3312 stack-check #f #f ())
(3313 stack-check #f #f ())
(3314 stack-check #f #f ())
(3315 stack-check #f #f ())
(3316 stack-check #f #f ())
(3317 stack-max 3316 10 ())
(3318 stack-check #f #f ())
(3319 protocol-skip 3318 10 ())
(3320 stack-check #f #f ())
(3321 maximum-stack-use 3320 10 ())
(3322 loop##489 3321 81 ())
(3323 stack-check #f #f ())
(3324 nothing 3323 10 ())
(3325 #f 3324 16 ())
(3326 stack-check #f #f ())
(3327 popper 3326 10 ())
(3328 #f 3327 17 ())
(3329 stack-check #f #f ())
(3330 imax 3329 10 ())
(3331 stack-check #f #f ())
(3332 pusher 3331 10 ())
(3333 #f 3332 17 ())
(3334 stack-check #f #f ())
(3335 continue 3334 10 ())
(3336 stack-check #f #f ())
(3337 continuer 3336 10 ())
(3338 #f 3337 16 ())
(3339 stack-check #f #f ())
(3340 get-offset 3339 10 ())
(3341 stack-check #f #f ())
(3342 flat-env-checker 3341 10 ())
(3343 #f 3342 17 ())
(3344 loop 3343 96 ())
(3345 stack-check #f #f ())
(3346 do-make-cont 3345 10 ())
(3347 #f 3346 16 ())
(3348 stack-check #f #f ())
(3349 arg-spec-size 3348 10 ())
(3350 stack-check #f #f ())
(3351 stack-function 3350 10 ())
(3352 loop 3351 25 ())
(3353 segments #f #f ())
(3354 segments #f #f ())
(3355 segments #f #f ())
(3356 segments #f #f ())
(3357 #f 3356 18 ())
(3358 segments #f #f ())
(3359 astate-code-vector 3358 10 ())
(3360 segments #f #f ())
(3361 set-astate-pc! 3360 10 ())
(3362 segments #f #f ())
(3363 astate-pc 3362 10 ())
(3364 segments #f #f ())
(3365 set-astate-count! 3364 10 ())
(3366 segments #f #f ())
(3367 astate-count 3366 10 ())
(3368 segments #f #f ())
(3369 set-astate-literals! 3368 10 ())
(3370 segments #f #f ())
(3371 astate-literals 3370 10 ())
(3372 segments #f #f ())
(3373 make-assembly-state 3372 10 ())
(3374 segments #f #f ())
(3375 segments #f #f ())
(3376 segments #f #f ())
(3377 segments #f #f ())
(3378 segments #f #f ())
(3379 high-byte 3378 10 ())
(3380 segments #f #f ())
(3381 emit-byte! 3380 10 ())
(3382 segments #f #f ())
(3383 low-byte 3382 10 ())
(3384 segments #f #f ())
(3385 position 3384 10 ())
(3386 loop 3385 30 ())
(3387 segments #f #f ())
(3388 literal-position 3387 10 ())
(3389 #f 3388 26 ())
(3390 segments #f #f ())
(3391 literal->index 3390 10 ())
(3392 segments #f #f ())
(3393 emit-literal! 3392 10 ())
(3394 segments #f #f ())
(3395 code-vector-set2! 3394 10 ())
(3396 segments #f #f ())
(3397 check-stack-use 3396 10 ())
(3398 loop##508 3397 92 ())
(3399 segments #f #f ())
(3400 emit-segment! 3399 10 ())
(3401 segments #f #f ())
(3402 emit-with-environment-maps! 3401 10 ())
(3403 #f 3402 38 ())
(3404 segments #f #f ())
(3405 make-astate 3404 10 ())
(3406 segments #f #f ())
(3407 template 3406 10 ())
(3408 #f 3407 21 ())
(3409 segments #f #f ())
(3410 segment-data->template 3409 10 ())
(3411 loop##509 3410 79 ())
(3412 segments #f #f ())
(3413 segment->template 3412 10 ())
(3414 #f 3413 151 ())
(3415 segments #f #f ())
(3416 instruction 3415 10 ())
(3417 #f 3416 43 ())
(3418 #f 3417 33 ())
(3419 segments #f #f ())
(3420 sequentially-2 3419 10 ())
(3421 #f 3420 74 ())
(3422 segments #f #f ())
(3423 sequentially 3422 10 ())
(3424 loop 3423 100 ())
(3425 #f 3423 123 ())
(3426 loop 3425 25 ())
(3427 segments #f #f ())
(3428 instruction-with-literal 3427 10 ())
(3429 #f 3428 44 ())
(3430 #f 3429 178 ())
(3431 segments #f #f ())
(3432 instruction-with-location 3431 10 ())
(3433 #f 3432 23 ())
(3434 segments #f #f ())
(3435 make-label 3434 10 ())
(3436 segments #f #f ())
(3437 insert-label! 3436 10 ())
(3438 segments #f #f ())
(3439 instruction-using-label 3438 10 ())
(3440 #f 3439 66 ())
(3441 segments #f #f ())
(3442 computed-goto-instruction 3441 10 ())
(3443 #f 3442 90 ())
(3444 loop##511 3443 85 ())
(3445 segments #f #f ())
(3446 attach-label 3445 10 ())
(3447 #f 3446 32 ())
(3448 #f 3447 50 ())
(3449 segments #f #f ())
(3450 note-source-code 3449 10 ())
(3451 #f 3450 32 ())
(3452 segments #f #f ())
(3453 note-environment 3452 10 ())
(3454 #f 3453 46 ())
(3455 segments #f #f ())
(3456 optimizer #f #f ())
(3457 apply-optimizers 3456 10 ())
(3458 #f 3457 16 ())
(3459 optimizer #f #f ())
(3460 get-optimizer 3459 10 ())
(3461 #f 3460 16 ())
(3462 #f 3461 13 ())
(3463 #f 3462 61 ())
(3464 optimizer #f #f ())
(3465 set-optimizer! 3464 10 ())
(3466 optimizer #f #f ())
(3467 flat-environments #f #f ())
(3468 clear-var-set! 3467 10 ())
(3469 flat-environments #f #f ())
(3470 clean-var-list 3469 10 ())
(3471 flat-environments #f #f ())
(3472 set-difference! 3471 10 ())
(3473 flat-environments #f #f ())
(3474 set-union! 3473 10 ())
(3475 #f 3474 16 ())
(3476 flat-environments #f #f ())
(3477 set-add-element! 3476 10 ())
(3478 flat-environments #f #f ())
(3479 flat-environments #f #f ())
(3480 install-set! 3479 10 ())
(3481 #f 3480 16 ())
(3482 flat-environments #f #f ())
(3483 install-new-set! 3482 10 ())
(3484 flat-environments #f #f ())
(3485 cell-set!-primop 3484 10 ())
(3486 flat-environments #f #f ())
(3487 flat-environments #f #f ())
(3488 cell-ref-primop 3487 10 ())
(3489 flat-environments #f #f ())
(3490 flat-environments #f #f ())
(3491 make-cell-primop 3490 10 ())
(3492 flat-environments #f #f ())
(3493 flat-environments #f #f ())
(3494 flat-environments #f #f ())
(3495 flat-environments #f #f ())
(3496 flat-environments #f #f ())
(3497 flat-environments #f #f ())
(3498 flat-environments #f #f ())
(3499 flat-environments #f #f ())
(3500 flat-environments #f #f ())
(3501 flat-environments #f #f ())
(3502 flat-environments #f #f ())
(3503 flat-environments #f #f ())
(3504 flat-environments #f #f ())
(3505 flat-environments #f #f ())
(3506 make-primop-call 3505 10 ())
(3507 flat-environments #f #f ())
(3508 make-cell-set! 3507 10 ())
(3509 flat-environments #f #f ())
(3510 make-cell-ref 3509 10 ())
(3511 flat-environments #f #f ())
(3512 make-unassigned-cell 3511 10 ())
(3513 flat-environments #f #f ())
(3514 make-make-cell 3513 10 ())
(3515 flat-environments #f #f ())
(3516 mark-letrec-sets 3515 10 ())
(3517 #f 3516 29 ())
(3518 flat-environments #f #f ())
(3519 #f 3518 14 ())
(3520 flat-environments #f #f ())
(3521 #f 3520 14 ())
(3522 flat-environments #f #f ())
(3523 #f 3522 14 ())
(3524 flat-environments #f #f ())
(3525 #f 3524 14 ())
(3526 flat-environments #f #f ())
(3527 #f 3526 14 ())
(3528 flat-environments #f #f ())
(3529 #f 3528 14 ())
(3530 flat-environments #f #f ())
(3531 #f 3530 14 ())
(3532 flat-environments #f #f ())
(3533 flat-environments #f #f ())
(3534 flat-environments #f #f ())
(3535 flat-environments #f #f ())
(3536 flat-environments #f #f ())
(3537 flat-environments #f #f ())
(3538 no-sets 3537 10 ())
(3539 flat-environments #f #f ())
(3540 define-set-marker 3539 10 ())
(3541 flat-environments #f #f ())
(3542 #f 3541 14 ())
(3543 flat-environments #f #f ())
(3544 mark-set-variables! 3543 10 ())
(3545 flat-environments #f #f ())
(3546 assigned? 3545 10 ())
(3547 flat-environments #f #f ())
(3548 #f 3547 14 ())
(3549 #f 3548 20 ())
(3550 flat-environments #f #f ())
(3551 flatten-impure-letrec 3550 10 ())
(3552 #f 3551 13 ())
(3553 #f 3551 198 ())
(3554 flat-environments #f #f ())
(3555 flatten-pure-letrec 3554 10 ())
(3556 flat-environments #f #f ())
(3557 flatten-letrec 3556 10 ())
(3558 #f 3557 117 ())
(3559 flat-environments #f #f ())
(3560 #f 3559 14 ())
(3561 flat-environments #f #f ())
(3562 #f 3561 14 ())
(3563 flat-environments #f #f ())
(3564 #f 3563 14 ())
(3565 flat-environments #f #f ())
(3566 #f 3565 14 ())
(3567 flat-environments #f #f ())
(3568 #f 3567 14 ())
(3569 flat-environments #f #f ())
(3570 #f 3569 14 ())
(3571 flat-environments #f #f ())
(3572 add-cells 3571 10 ())
(3573 loop##517 3572 18 ())
(3574 flat-environments #f #f ())
(3575 convert-lambda-body 3574 10 ())
(3576 flat-environments #f #f ())
(3577 flatten-lambda 3576 10 ())
(3578 flat-environments #f #f ())
(3579 #f 3578 14 ())
(3580 flat-environments #f #f ())
(3581 #f 3580 14 ())
(3582 flat-environments #f #f ())
(3583 flat-environments #f #f ())
(3584 flat-environments #f #f ())
(3585 flat-environments #f #f ())
(3586 no-free-vars 3585 10 ())
(3587 flat-environments #f #f ())
(3588 flatten-list 3587 10 ())
(3589 #f 3588 16 ())
(3590 flat-environments #f #f ())
(3591 define-flattener 3590 10 ())
(3592 flat-environments #f #f ())
(3593 #f 3592 14 ())
(3594 flat-environments #f #f ())
(3595 flatten-node 3594 10 ())
(3596 flat-environments #f #f ())
(3597 flatten-form 3596 10 ())
(3598 flat-environments #f #f ())
(3599 #f 3598 14 ())
(3600 #f 3599 9 ())
(3601 reconstruction #f #f ())
(3602 constant-type 3601 10 ())
(3603 reconstruction #f #f ())
(3604 reconstruction #f #f ())
(3605 reconstruction #f #f ())
(3606 reconstruct-apply 3605 10 ())
(3607 #f 3606 68 ())
(3608 reconstruction #f #f ())
(3609 #f 3608 14 ())
(3610 reconstruction #f #f ())
(3611 #f 3610 14 ())
(3612 #f 3611 20 ())
(3613 reconstruction #f #f ())
(3614 #f 3613 18 ())
(3615 reconstruction #f #f ())
(3616 define-primop-reconstructor 3615 10 ())
(3617 reconstruction #f #f ())
(3618 reconstruction #f #f ())
(3619 reconstruction #f #f ())
(3620 reconstruction #f #f ())
(3621 reconstruction #f #f ())
(3622 #f 3621 18 ())
(3623 reconstruction #f #f ())
(3624 #f 3623 18 ())
(3625 reconstruction #f #f ())
(3626 node->type 3625 10 ())
(3627 reconstruction #f #f ())
(3628 #f 3627 18 ())
(3629 reconstruction #f #f ())
(3630 reconstruct-letrec 3629 10 ())
(3631 #f 3630 45 ())
(3632 reconstruction #f #f ())
(3633 #f 3632 18 ())
(3634 reconstruction #f #f ())
(3635 #f 3634 18 ())
(3636 reconstruction #f #f ())
(3637 #f 3636 18 ())
(3638 reconstruction #f #f ())
(3639 #f 3638 18 ())
(3640 loop##518 3639 19 ())
(3641 reconstruction #f #f ())
(3642 reconstruction #f #f ())
(3643 fork-constraints 3642 10 ())
(3644 #f 3643 16 ())
(3645 reconstruction #f #f ())
(3646 #f 3645 18 ())
(3647 #f 3646 163 ())
(3648 reconstruction #f #f ())
(3649 #f 3648 16 ())
(3650 reconstruction #f #f ())
(3651 #f 3650 16 ())
(3652 reconstruction #f #f ())
(3653 #f 3652 18 ())
(3654 reconstruction #f #f ())
(3655 #f 3654 18 ())
(3656 reconstruction #f #f ())
(3657 reconstruct-call 3656 10 ())
(3658 lose 3657 133 ())
(3659 #f 3658 13 ())
(3660 loop 3657 213 ())
(3661 reconstruction #f #f ())
(3662 proc->reconstructor 3661 10 ())
(3663 reconstruction #f #f ())
(3664 #f 3663 18 ())
(3665 reconstruction #f #f ())
(3666 reconstruct-name 3665 10 ())
(3667 reconstruction #f #f ())
(3668 #f 3667 18 ())
(3669 reconstruction #f #f ())
(3670 careful-codomain 3669 10 ())
(3671 reconstruction #f #f ())
(3672 reconstruct-lambda 3671 10 ())
(3673 #f 3672 73 ())
(3674 reconstruction #f #f ())
(3675 #f 3674 18 ())
(3676 reconstruction #f #f ())
(3677 #f 3676 18 ())
(3678 reconstruction #f #f ())
(3679 define-reconstructor 3678 10 ())
(3680 reconstruction #f #f ())
(3681 #f 3680 14 ())
(3682 reconstruction #f #f ())
(3683 examine 3682 10 ())
(3684 reconstruction #f #f ())
(3685 reconstruct 3684 10 ())
(3686 reconstruction #f #f ())
(3687 reconstruct-type 3686 10 ())
(3688 reconstruction #f #f ())
(3689 node-type 3688 10 ())
(3690 compiler #f #f ())
(3691 compiler #f #f ())
(3692 loop 3691 62 ())
(3693 compiler #f #f ())
(3694 compiler #f #f ())
(3695 compiler #f #f ())
(3696 compiler #f #f ())
(3697 define-one-or-two 3696 10 ())
(3698 #f 3697 23 ())
(3699 #f 3697 39 ())
(3700 compiler #f #f ())
(3701 #f 3700 86 ())
(3702 #f 3700 94 ())
(3703 compiler #f #f ())
(3704 define-one-or-two 3703 10 ())
(3705 #f 3704 92 ())
(3706 #f 3704 108 ())
(3707 compiler #f #f ())
(3708 compiler #f #f ())
(3709 compiler #f #f ())
(3710 define=< 3709 10 ())
(3711 #f 3710 91 ())
(3712 #f 3710 106 ())
(3713 compiler #f #f ())
(3714 define+* 3713 10 ())
(3715 #f 3714 58 ())
(3716 #f 3714 74 ())
(3717 compiler #f #f ())
(3718 define-char-io 3717 10 ())
(3719 #f 3718 22 ())
(3720 #f 3718 37 ())
(3721 compiler #f #f ())
(3722 define-char-io 3721 10 ())
(3723 #f 3722 22 ())
(3724 #f 3722 37 ())
(3725 compiler #f #f ())
(3726 n-ary-constructor 3725 10 ())
(3727 #f 3726 26 ())
(3728 #f 3726 41 ())
(3729 compiler #f #f ())
(3730 #f 3729 24 ())
(3731 compiler #f #f ())
(3732 #f 3731 56 ())
(3733 #f 3732 131 ())
(3734 #f 3731 71 ())
(3735 compiler #f #f ())
(3736 #f 3735 20 ())
(3737 #f 3735 28 ())
(3738 compiler #f #f ())
(3739 #f 3738 82 ())
(3740 #f 3738 98 ())
(3741 compiler #f #f ())
(3742 #f 3741 80 ())
(3743 #f 3741 88 ())
(3744 compiler #f #f ())
(3745 #f 3744 64 ())
(3746 #f 3744 72 ())
(3747 compiler #f #f ())
(3748 compiler #f #f ())
(3749 compiler #f #f ())
(3750 compiler #f #f ())
(3751 compiler #f #f ())
(3752 compiler #f #f ())
(3753 compiler #f #f ())
(3754 compiler #f #f ())
(3755 #f 3754 10 ())
(3756 compiler #f #f ())
(3757 #f 3756 10 ())
(3758 compiler #f #f ())
(3759 compiler #f #f ())
(3760 compiler #f #f ())
(3761 compiler #f #f ())
(3762 compiler #f #f ())
(3763 loop##526 3762 15 ())
(3764 compiler #f #f ())
(3765 compiler #f #f ())
(3766 #f 3765 22 ())
(3767 compiler #f #f ())
(3768 #f 3767 22 ())
(3769 compiler #f #f ())
(3770 #f 3769 22 ())
(3771 compiler #f #f ())
(3772 compiler #f #f ())
(3773 compiler #f #f ())
(3774 compiler #f #f ())
(3775 compiler #f #f ())
(3776 compiler #f #f ())
(3777 compiler #f #f ())
(3778 compiler #f #f ())
(3779 compiler #f #f ())
(3780 #f 3779 22 ())
(3781 compiler #f #f ())
(3782 compiler #f #f ())
(3783 compiler #f #f ())
(3784 compiler #f #f ())
(3785 #f 3784 22 ())
(3786 compiler #f #f ())
(3787 #f 3786 22 ())
(3788 #f 3787 72 ())
(3789 #f 3787 165 ())
(3790 compiler #f #f ())
(3791 compiler #f #f ())
(3792 #f 3791 22 ())
(3793 loop 3792 104 ())
(3794 compiler #f #f ())
(3795 #f 3794 22 ())
(3796 compiler #f #f ())
(3797 #f 3796 22 ())
(3798 compiler #f #f ())
(3799 #f 3798 22 ())
(3800 compiler #f #f ())
(3801 #f 3800 22 ())
(3802 compiler #f #f ())
(3803 #f 3802 46 ())
(3804 compiler #f #f ())
(3805 #f 3804 46 ())
(3806 compiler #f #f ())
(3807 #f 3806 22 ())
(3808 compiler #f #f ())
(3809 #f 3808 14 ())
(3810 compiler #f #f ())
(3811 diagnose-call-error 3810 10 ())
(3812 #f 3811 189 ())
(3813 compiler #f #f ())
(3814 type-check 3813 10 ())
(3815 #f 3814 133 ())
(3816 compiler #f #f ())
(3817 compile 3816 10 ())
(3818 compiler #f #f ())
(3819 compile-expression 3818 10 ())
(3820 compiler #f #f ())
(3821 define-compilator 3820 10 ())
(3822 compiler #f #f ())
(3823 ignore-values-cont? 3822 10 ())
(3824 compiler #f #f ())
(3825 return-cont? 3824 10 ())
(3826 compiler #f #f ())
(3827 deliver-value 3826 10 ())
(3828 compiler #f #f ())
(3829 compile-constant 3828 10 ())
(3830 compiler #f #f ())
(3831 fixup-source 3830 10 ())
(3832 compiler #f #f ())
(3833 accept-values-cont? 3832 10 ())
(3834 compiler #f #f ())
(3835 maybe-push-continuation 3834 10 ())
(3836 compiler #f #f ())
(3837 make-cont 3836 10 ())
(3838 compiler #f #f ())
(3839 fall-through-cont 3838 10 ())
(3840 compiler #f #f ())
(3841 push-arguments 3840 10 ())
(3842 recur 3841 46 ())
(3843 compiler #f #f ())
(3844 compile-unknown-call 3843 10 ())
(3845 compiler #f #f ())
(3846 name-node-binding 3845 10 ())
(3847 compiler #f #f ())
(3848 compile-name-call 3847 10 ())
(3849 compiler #f #f ())
(3850 generate-trap 3849 10 ())
(3851 compiler #f #f ())
(3852 named-cont 3851 10 ())
(3853 compiler #f #f ())
(3854 push-all-with-names 3853 10 ())
(3855 compiler #f #f ())
(3856 set-lexical-offsets! 3855 10 ())
(3857 loop 3856 29 ())
(3858 compiler #f #f ())
(3859 name-node->symbol 3858 10 ())
(3860 compiler #f #f ())
(3861 return-cont 3860 10 ())
(3862 compiler #f #f ())
(3863 compile-lambda-code 3862 10 ())
(3864 compiler #f #f ())
(3865 cont-name 3864 10 ())
(3866 compiler #f #f ())
(3867 compile-redex 3866 10 ())
(3868 compiler #f #f ())
(3869 compile-call 3868 10 ())
(3870 compiler #f #f ())
(3871 empty-segment? 3870 10 ())
(3872 compiler #f #f ())
(3873 really-compile-lambda 3872 10 ())
(3874 compiler #f #f ())
(3875 compile-lambda 3874 10 ())
(3876 compiler #f #f ())
(3877 really-compile-flat-lambda 3876 10 ())
(3878 #f 3877 192 ())
(3879 compiler #f #f ())
(3880 letrec-lambda-code 3879 10 ())
(3881 #f 3880 32 ())
(3882 #f 3880 83 ())
(3883 compiler #f #f ())
(3884 letrec-body-code 3883 10 ())
(3885 compiler #f #f ())
(3886 fall-through-cont? 3885 10 ())
(3887 compiler #f #f ())
(3888 ignore-values-cont 3887 10 ())
(3889 compiler #f #f ())
(3890 accept-values-cont 3889 10 ())
(3891 compiler #f #f ())
(3892 set-type-check?! 3891 10 ())
(3893 compiler #f #f ())
(3894 compile-continuation-lambda 3893 10 ())
(3895 compiler #f #f ())
(3896 two-byte-offsetter 3895 10 ())
(3897 compiler #f #f ())
(3898 back-env-data 3897 10 ())
(3899 loop 3898 29 ())
(3900 compiler #f #f ())
(3901 figure-env-data 3900 10 ())
(3902 level-loop 3901 33 ())
(3903 loop 3902 77 ())
(3904 compiler #f #f ())
(3905 one-byte-offsetter 3904 10 ())
(3906 compiler #f #f ())
(3907 environment-code 3906 10 ())
(3908 #f 3907 89 ())
(3909 compiler #f #f ())
(3910 sort-list 3909 10 ())
(3911 insert 3910 18 ())
(3912 sort 3910 40 ())
(3913 compiler #f #f ())
(3914 get-variables-offsets 3913 10 ())
(3915 loop 3914 29 ())
(3916 compiler #f #f ())
(3917 compile-flat-environment 3916 10 ())
(3918 #f 3917 31 ())
(3919 compiler #f #f ())
(3920 compile-flat-lambda 3919 10 ())
(3921 compiler #f #f ())
(3922 push-all-but-last 3921 10 ())
(3923 recur 3922 33 ())
(3924 compiler #f #f ())
(3925 direct-compilator 3924 10 ())
(3926 #f 3925 16 ())
(3927 compiler #f #f ())
(3928 direct-closed-compilator 3927 10 ())
(3929 #f 3928 16 ())
(3930 compiler #f #f ())
(3931 nargs->domain 3930 10 ())
(3932 loop##532 3931 14 ())
(3933 compiler #f #f ())
(3934 get-primop-type 3933 10 ())
(3935 #f 3934 20 ())
(3936 compiler #f #f ())
(3937 simple-compilator 3936 10 ())
(3938 #f 3937 16 ())
(3939 compiler #f #f ())
(3940 simple-closed-compilator 3939 10 ())
(3941 #f 3940 17 ())
(3942 compiler #f #f ())
(3943 define-simple-primitive 3942 10 ())
(3944 compiler #f #f ())
(3945 symbol-append 3944 10 ())
(3946 compiler #f #f ())
(3947 define-stob-predicate 3946 10 ())
(3948 compiler #f #f ())
(3949 define-data-struct-primitives 3948 10 ())
(3950 def-prim 3949 11 ())
(3951 loop##535 3949 222 ())
(3952 compiler #f #f ())
(3953 define-vector-primitives 3952 10 ())
(3954 def-prim 3953 38 ())
(3955 compiler #f #f ())
(3956 unflatten-form 3955 10 ())
(3957 compiler #f #f ())
(3958 thunk-node? 3957 10 ())
(3959 compiler #f #f ())
(3960 thunk-body 3959 10 ())
(3961 compiler #f #f ())
(3962 compile-call-with-values-producer 3961 10 ())
(3963 compiler #f #f ())
(3964 compile-call-with-values 3963 10 ())
(3965 compiler #f #f ())
(3966 n-ary-primitive-compilator 3965 10 ())
(3967 #f 3966 17 ())
(3968 compiler #f #f ())
(3969 define-n-ary-compiler-primitive 3968 10 ())
(3970 compiler #f #f ())
(3971 call-on-arg-and-id 3970 10 ())
(3972 compiler #f #f ())
(3973 call-on-args 3972 10 ())
(3974 do-arg 3973 18 ())
(3975 loop 3973 77 ())
(3976 compiler #f #f ())
(3977 make-dispatch-protocol 3976 10 ())
(3978 compiler #f #f ())
(3979 compile-definition 3978 10 ())
(3980 compiler #f #f ())
(3981 compile-form 3980 10 ())
(3982 #f 3981 28 ())
(3983 compiler #f #f ())
(3984 compile-forms-loop 3983 10 ())
(3985 compiler #f #f ())
(3986 compile-forms 3985 10 ())
(3987 compiler #f #f ())
(3988 append-templates 3987 10 ())
(3989 #f 3988 43 ())
(3990 compiler #f #f ())
(3991 make-startup-procedure 3990 10 ())
(3992 compiler #f #f ())
(3993 evaluation #f #f ())
(3994 compile-and-run 3993 10 ())
(3995 #f 3994 75 ())
(3996 #f 3995 19 ())
(3997 evaluation #f #f ())
(3998 really-load-into 3997 10 ())
(3999 evaluation #f #f ())
(4000 load 3999 10 ())
(4001 evaluation #f #f ())
(4002 eval-from-file 4001 10 ())
(4003 evaluation #f #f ())
(4004 load-into 4003 10 ())
(4005 evaluation #f #f ())
(4006 eval 4005 10 ())
(4007 scheme #f #f ())
(4008 display-conditions #f #f ())
(4009 limited-write 4008 10 ())
(4010 recur 4009 31 ())
(4011 #f 4010 167 ())
(4012 #f 4011 53 ())
(4013 display-conditions #f #f ())
(4014 &disclose-condition 4013 57 ())
(4015 display-conditions #f #f ())
(4016 display-conditions #f #f ())
(4017 display-conditions #f #f ())
(4018 display-conditions #f #f ())
(4019 display-conditions #f #f ())
(4020 really-display-condition 4019 10 ())
(4021 #f 4020 264 ())
(4022 display-conditions #f #f ())
(4023 display-condition 4022 33 ())
(4024 #f 4023 24 ())
(4025 mini-command #f #f ())
(4026 read-string 4025 10 ())
(4027 loop 4026 31 ())
(4028 mini-command #f #f ())
(4029 mini-load 4028 10 ())
(4030 mini-command #f #f ())
(4031 command-processor 4030 10 ())
(4032 loop 4031 95 ())
(4033 #f 4032 23 ())
(4034 #f 4033 21 ())
(4035 #f 4034 74 ())
(4036 #f 4033 42 ())
(4037 #f 4036 81 ())
(4038 #f 4036 217 ())
(4039 #f 4036 303 ())
(4040 enum-case #f #f ())
(4041 scheduler #f #f ())
(4042 decrement-counter! 4041 10 ())
(4043 scheduler #f #f ())
(4044 increment-counter! 4043 10 ())
(4045 scheduler #f #f ())
(4046 scheduler #f #f ())
(4047 make-counter 4046 10 ())
(4048 scheduler #f #f ())
(4049 round-robin-event-handler 4048 10 ())
(4050 thread-event-handler 4049 24 ())
(4051 asynchronous-event-handler 4049 26 ())
(4052 next-thread 4049 28 ())
(4053 scheduler #f #f ())
(4054 run-threads-with-housekeeper 4053 10 ())
(4055 loop 4054 65 ())
(4056 scheduler #f #f ())
(4057 run-threads 4056 10 ())
(4058 loop 4057 60 ())
(4059 root-scheduler #f #f ())
(4060 spawn-output-forcers 4059 10 ())
(4061 root-scheduler #f #f ())
(4062 call-when-deadlocked! 4061 10 ())
(4063 root-scheduler #f #f ())
(4064 root-scheduler #f #f ())
(4065 root-scheduler #f #f ())
(4066 root-scheduler #f #f ())
(4067 root-scheduler #f #f ())
(4068 do-some-waiting 4067 10 ())
(4069 root-scheduler #f #f ())
(4070 root-wait 4069 10 ())
(4071 root-scheduler #f #f ())
(4072 scheme-exit-now 4071 10 ())
(4073 root-scheduler #f #f ())
(4074 root-scheduler #f #f ())
(4075 cheap-display-condition 4074 10 ())
(4076 #f 4075 182 ())
(4077 root-scheduler #f #f ())
(4078 root-handler 4077 10 ())
(4079 root-scheduler #f #f ())
(4080 make-root-event-handler 4079 10 ())
(4081 #f 4080 127 ())
(4082 #f 4080 142 ())
(4083 root-scheduler #f #f ())
(4084 root-scheduler 4083 10 ())
(4085 #f 4084 38 ())
(4086 #f 4085 36 ())
(4087 #f 4085 58 ())
(4088 usual-resumer #f #f ())
(4089 usual-resumer #f #f ())
(4090 initialize-rts 4089 10 ())
(4091 #f 4090 41 ())
(4092 #f 4091 20 ())
(4093 #f 4092 62 ())
(4094 #f 4093 13 ())
(4095 usual-resumer #f #f ())
(4096 usual-resumer 4095 10 ())
(4097 #f 4096 16 ())
(4098 #f 4097 29 ())
(4099 initial-system #f #f ())
(4100 make-tower 4099 10 ())
(4101 initial-system #f #f ())
(4102 make-initial-package 4101 10 ())
(4103 #f 4102 27 ())
(4104 initial-system #f #f ())
(4105 initialize-interaction-environment! 4104 10 ())
(4106 initial-system #f #f ())
(4107 make-built-in-structures 4106 10 ())
(4108 #f 4107 50 ())
(4109 #f 4107 84 ())
(4110 initial-system #f #f ())
(4111 start 4110 10 ())
(4112 #f 4111 16 ())
(4113 #f 4112 19 ())
(4114 #f 4113 84 ())
(4115 usual-macros #f #f ())
(4116 find-free-names-in-syntax-rules 4115 10 ())
(4117 meta-variables 4116 18 ())
(4118 free-names 4116 20 ())
(4119 loop##556 4116 36 ())
(4120 usual-macros #f #f ())
(4121 usual-macros #f #f ())
(4122 segment-tail 4121 10 ())
(4123 loop 4122 24 ())
(4124 usual-macros #f #f ())
(4125 segment-depth 4124 10 ())
(4126 usual-macros #f #f ())
(4127 segment-template? 4126 10 ())
(4128 usual-macros #f #f ())
(4129 segment-pattern? 4128 10 ())
(4130 usual-macros #f #f ())
(4131 process-rules 4130 10 ())
(4132 #f 4131 643 ())
(4133 #f 4131 670 ())
(4134 #f 4133 122 ())
(4135 #f 4131 706 ())
(4136 #f 4131 727 ())
(4137 #f 4131 756 ())
(4138 #f 4137 126 ())
(4139 #f 4131 786 ())
(4140 loop##560 4139 333 ())
(4141 #f 4131 810 ())
(4142 #f 4131 831 ())
(4143 usual-macros #f #f ())
(4144 #f 4143 14 ())
(4145 usual-macros #f #f ())
(4146 #f 4145 14 ())
(4147 #f 4146 235 ())
(4148 #f 4146 256 ())
(4149 #f 4146 282 ())
(4150 #f 4146 306 ())
(4151 #f 4150 33 ())
(4152 #f 4151 33 ())
(4153 #f 4146 329 ())
(4154 #f 4153 39 ())
(4155 #f 4146 350 ())
(4156 usual-macros #f #f ())
(4157 case-clause? 4156 10 ())
(4158 usual-macros #f #f ())
(4159 #f 4158 14 ())
(4160 #f 4159 41 ())
(4161 #f 4159 256 ())
(4162 usual-macros #f #f ())
(4163 #f 4162 14 ())
(4164 usual-macros #f #f ())
(4165 specs? 4164 10 ())
(4166 usual-macros #f #f ())
(4167 #f 4166 14 ())
(4168 usual-macros #f #f ())
(4169 #f 4168 14 ())
(4170 usual-macros #f #f ())
(4171 do-spec? 4170 10 ())
(4172 usual-macros #f #f ())
(4173 #f 4172 14 ())
(4174 #f 4173 247 ())
(4175 usual-macros #f #f ())
(4176 #f 4175 14 ())
(4177 recur 4176 98 ())
(4178 usual-macros #f #f ())
(4179 #f 4178 14 ())
(4180 usual-macros #f #f ())
(4181 usual-transform 4180 10 ())
(4182 usual-macros #f #f ())
(4183 define-usual-macro 4182 10 ())
(4184 usual-macros #f #f ())
(4185 strong #f #f ())
(4186 pop-vertex-edge! 4185 10 ())
(4187 strong #f #f ())
(4188 follow-edge 4187 10 ())
(4189 strong #f #f ())
(4190 unwind-stack 4189 10 ())
(4191 loop 4190 30 ())
(4192 strong #f #f ())
(4193 end-vertex 4192 10 ())
(4194 strong #f #f ())
(4195 get-strong 4194 10 ())
(4196 strong #f #f ())
(4197 do-vertex 4196 10 ())
(4198 strong #f #f ())
(4199 make-vertices 4198 10 ())
(4200 maybe-slot 4199 16 ())
(4201 #f 4199 38 ())
(4202 #f 4199 71 ())
(4203 strong #f #f ())
(4204 make-vertex 4203 10 ())
(4205 strong #f #f ())
(4206 vertex? 4205 10 ())
(4207 strong #f #f ())
(4208 vertex-data 4207 10 ())
(4209 strong #f #f ())
(4210 set-vertex-edges! 4209 10 ())
(4211 strong #f #f ())
(4212 vertex-edges 4211 10 ())
(4213 strong #f #f ())
(4214 set-vertex-stack! 4213 10 ())
(4215 strong #f #f ())
(4216 vertex-stack 4215 10 ())
(4217 strong #f #f ())
(4218 set-vertex-index! 4217 10 ())
(4219 strong #f #f ())
(4220 vertex-index 4219 10 ())
(4221 strong #f #f ())
(4222 set-vertex-parent! 4221 10 ())
(4223 strong #f #f ())
(4224 vertex-parent 4223 10 ())
(4225 strong #f #f ())
(4226 set-vertex-lowpoint! 4225 10 ())
(4227 strong #f #f ())
(4228 vertex-lowpoint 4227 10 ())
(4229 strong #f #f ())
(4230 really-make-vertex 4229 10 ())
(4231 strong #f #f ())
(4232 strong #f #f ())
(4233 find-next-vertex 4232 10 ())
(4234 loop##583 4233 18 ())
(4235 strong #f #f ())
(4236 strongly-connected-components 4235 10 ())
(4237 loop 4236 62 ())
(4238 #f 4237 51 ())
(4239 usages #f #f ())
(4240 insert-aliases 4239 10 ())
(4241 loop 4240 25 ())
(4242 usages #f #f ())
(4243 make-form 4242 10 ())
(4244 usages #f #f ())
(4245 #f 4244 14 ())
(4246 usages #f #f ())
(4247 form? 4246 10 ())
(4248 usages #f #f ())
(4249 form-node 4248 10 ())
(4250 usages #f #f ())
(4251 set-form-aliases! 4250 10 ())
(4252 usages #f #f ())
(4253 form-aliases 4252 10 ())
(4254 usages #f #f ())
(4255 set-form-unaliased?! 4254 10 ())
(4256 usages #f #f ())
(4257 form-unaliased? 4256 10 ())
(4258 usages #f #f ())
(4259 set-form-free! 4258 10 ())
(4260 usages #f #f ())
(4261 form-free 4260 10 ())
(4262 usages #f #f ())
(4263 set-form-temp! 4262 10 ())
(4264 usages #f #f ())
(4265 form-temp 4264 10 ())
(4266 usages #f #f ())
(4267 really-make-form 4266 10 ())
(4268 usages #f #f ())
(4269 usages #f #f ())
(4270 topologically-sort 4269 10 ())
(4271 #f 4270 23 ())
(4272 #f 4271 9 ())
(4273 #f 4271 28 ())
(4274 usages #f #f ())
(4275 maybe-make-aliased 4274 10 ())
(4276 usages #f #f ())
(4277 stuff-count 4276 10 ())
(4278 #f 4277 13 ())
(4279 usages #f #f ())
(4280 sort-forms 4279 10 ())
(4281 #f 4280 95 ())
(4282 #f 4280 140 ())
(4283 usages #f #f ())
(4284 usages #f #f ())
(4285 usages #f #f ())
(4286 usages #f #f ())
(4287 usages #f #f ())
(4288 usages #f #f ())
(4289 usages #f #f ())
(4290 usages #f #f ())
(4291 usages #f #f ())
(4292 usages #f #f ())
(4293 usage-incrementator 4292 10 ())
(4294 #f 4293 17 ())
(4295 usages #f #f ())
(4296 package-usage? 4295 10 ())
(4297 usages #f #f ())
(4298 make-package-usage 4297 10 ())
(4299 usages #f #f ())
(4300 make-usage 4299 10 ())
(4301 usages #f #f ())
(4302 usage? 4301 10 ())
(4303 usages #f #f ())
(4304 usage-name-node 4303 10 ())
(4305 usages #f #f ())
(4306 set-reference! 4305 10 ())
(4307 usages #f #f ())
(4308 usage-reference-count 4307 10 ())
(4309 usages #f #f ())
(4310 set-operator! 4309 10 ())
(4311 usages #f #f ())
(4312 usage-operator-count 4311 10 ())
(4313 usages #f #f ())
(4314 set-assignment! 4313 10 ())
(4315 usages #f #f ())
(4316 usage-assignment-count 4315 10 ())
(4317 usages #f #f ())
(4318 really-make-usage 4317 10 ())
(4319 usages #f #f ())
(4320 usages #f #f ())
(4321 #f 4320 18 ())
(4322 usages #f #f ())
(4323 #f 4322 18 ())
(4324 usages #f #f ())
(4325 #f 4324 18 ())
(4326 usages #f #f ())
(4327 #f 4326 18 ())
(4328 usages #f #f ())
(4329 #f 4328 18 ())
(4330 usages #f #f ())
(4331 #f 4330 18 ())
(4332 usages #f #f ())
(4333 analyze-letrec 4332 10 ())
(4334 #f 4333 13 ())
(4335 usages #f #f ())
(4336 #f 4335 18 ())
(4337 usages #f #f ())
(4338 #f 4337 18 ())
(4339 usages #f #f ())
(4340 #f 4339 18 ())
(4341 #f 4340 41 ())
(4342 usages #f #f ())
(4343 #f 4342 16 ())
(4344 usages #f #f ())
(4345 add-if-free 4344 10 ())
(4346 usages #f #f ())
(4347 #f 4346 16 ())
(4348 usages #f #f ())
(4349 usages #f #f ())
(4350 usages #f #f ())
(4351 usages #f #f ())
(4352 usages #f #f ())
(4353 usages #f #f ())
(4354 nothing 4353 10 ())
(4355 usages #f #f ())
(4356 define-usage-analyzer 4355 10 ())
(4357 usages #f #f ())
(4358 #f 4357 14 ())
(4359 usages #f #f ())
(4360 analyze-nodes 4359 10 ())
(4361 #f 4360 16 ())
(4362 usages #f #f ())
(4363 analyze 4362 10 ())
(4364 usages #f #f ())
(4365 find-node-usages 4364 10 ())
(4366 #f 4365 42 ())
(4367 #f 4365 61 ())
(4368 usages #f #f ())
(4369 maybe-update-known-type 4368 10 ())
(4370 usages #f #f ())
(4371 find-usages 4370 10 ())
(4372 #f 4371 35 ())
(4373 #f 4371 64 ())
(4374 #f 4373 34 ())
(4375 #f 4371 93 ())
(4376 inline #f #f ())
(4377 inline #f #f ())
(4378 inline #f #f ())
(4379 inline #f #f ())
(4380 inline #f #f ())
(4381 inline #f #f ())
(4382 get-qualified-env 4381 10 ())
(4383 inline #f #f ())
(4384 qualified->name 4383 10 ())
(4385 recur 4384 25 ())
(4386 inline #f #f ())
(4387 inline #f #f ())
(4388 inline #f #f ())
(4389 reconstitute-name 4388 10 ())
(4390 inline #f #f ())
(4391 reconstitute 4390 10 ())
(4392 label 4391 26 ())
(4393 inline #f #f ())
(4394 make-substitution 4393 10 ())
(4395 #f 4394 44 ())
(4396 inline #f #f ())
(4397 inline-transform 4396 10 ())
(4398 #f 4397 69 ())
(4399 #f 4397 89 ())
(4400 inline #f #f ())
(4401 remove-bindings 4400 10 ())
(4402 label 4401 25 ())
(4403 inline #f #f ())
(4404 unused-name 4403 10 ())
(4405 loop##607 4404 59 ())
(4406 #f 4405 20 ())
(4407 inline #f #f ())
(4408 clean-lookup 4407 10 ())
(4409 inline #f #f ())
(4410 clean-lambda 4409 10 ())
(4411 #f 4410 41 ())
(4412 recur 4410 102 ())
(4413 inline #f #f ())
(4414 clean-node 4413 10 ())
(4415 #f 4414 147 ())
(4416 #f 4414 331 ())
(4417 inline #f #f ())
(4418 make-inline-transform 4417 10 ())
(4419 #f 4418 54 ())
(4420 #f 4418 100 ())
(4421 loop##608 4420 14 ())
(4422 for-reification #f #f ())
(4423 package-define-static! 4422 10 ())
(4424 for-reification #f #f ())
(4425 transform 4424 10 ())
(4426 for-reification #f #f ())
(4427 package 4426 10 ())
(4428 loop##610 4427 89 ())
(4429 for-reification #f #f ())
(4430 simple-interface 4429 10 ())
(4431 #f 4430 15 ())
(4432 for-reification #f #f ())
(4433 primop 4432 10 ())
(4434 for-reification #f #f ())
(4435 operator 4434 10 ())
(4436 locks #f #f ())
(4437 locks #f #f ())
(4438 set-lock-owner-uid! 4437 10 ())
(4439 locks #f #f ())
(4440 lock-owner-uid 4439 10 ())
(4441 locks #f #f ())
(4442 lock-queue 4441 10 ())
(4443 locks #f #f ())
(4444 lock-uid 4443 10 ())
(4445 locks #f #f ())
(4446 really-make-lock 4445 10 ())
(4447 locks #f #f ())
(4448 locks #f #f ())
(4449 lock? 4448 10 ())
(4450 locks #f #f ())
(4451 next-uid 4450 10 ())
(4452 #f 4451 6 ())
(4453 locks #f #f ())
(4454 make-lock 4453 10 ())
(4455 locks #f #f ())
(4456 obtain-lock 4455 10 ())
(4457 lose 4456 31 ())
(4458 locks #f #f ())
(4459 maybe-obtain-lock 4458 10 ())
(4460 lose 4459 31 ())
(4461 locks #f #f ())
(4462 release-lock 4461 10 ())
(4463 lose 4462 31 ())
(4464 types #f #f ())
(4465 types #f #f ())
(4466 types #f #f ())
(4467 types #f #f ())
(4468 types #f #f ())
(4469 types #f #f ())
(4470 types #f #f ())
(4471 types #f #f ())
(4472 types #f #f ())
(4473 types #f #f ())
(4474 types #f #f ())
(4475 types #f #f ())
(4476 types #f #f ())
(4477 types #f #f ())
(4478 types #f #f ())
(4479 types #f #f ())
(4480 types #f #f ())
(4481 types #f #f ())
(4482 types #f #f ())
(4483 types #f #f ())
(4484 types #f #f ())
(4485 types #f #f ())
(4486 procedure 4485 10 ())
(4487 types #f #f ())
(4488 types #f #f ())
(4489 types #f #f ())
(4490 types #f #f ())
(4491 defpackage #f #f ())
(4492 note-name! 4491 10 ())
(4493 defpackage #f #f ())
(4494 set-verify-later! 4493 10 ())
(4495 defpackage #f #f ())
(4496 verify-later! 4495 10 ())
(4497 defpackage #f #f ())
(4498 *verify-later!* 4497 10 ())
(4499 defpackage #f #f ())
(4500 defpackage #f #f ())
(4501 loser 4500 10 ())
(4502 defpackage #f #f ())
(4503 make-a-package 4502 10 ())
(4504 scan-package #f #f ())
(4505 check-structure 4504 10 ())
(4506 #f 4505 40 ())
(4507 scan-package #f #f ())
(4508 package-optimizer-names 4507 10 ())
(4509 #f 4508 40 ())
(4510 #f 4508 89 ())
(4511 scan-package #f #f ())
(4512 read-files 4511 10 ())
(4513 #f 4512 44 ())
(4514 scan-package #f #f ())
(4515 package-source 4514 10 ())
(4516 #f 4515 65 ())
(4517 scan-package #f #f ())
(4518 collect-packages 4517 10 ())
(4519 recur 4518 68 ())
(4520 #f 4519 184 ())
(4521 compile-packages #f #f ())
(4522 compile-packages #f #f ())
(4523 compile-packages #f #f ())
(4524 make-define-primitive-node 4523 10 ())
(4525 compile-packages #f #f ())
(4526 define-primitives 4525 10 ())
(4527 #f 4526 37 ())
(4528 #f 4526 70 ())
(4529 compile-packages #f #f ())
(4530 define-usual-transform 4529 10 ())
(4531 compile-packages #f #f ())
(4532 expand-package 4531 10 ())
(4533 #f 4532 53 ())
(4534 #f 4532 82 ())
(4535 #f 4532 143 ())
(4536 #f 4535 25 ())
(4537 #f 4536 23 ())
(4538 compile-packages #f #f ())
(4539 compile-package 4538 10 ())
(4540 module-system #f #f ())
(4541 analysis #f #f ())
(4542 analysis #f #f ())
(4543 analysis #f #f ())
(4544 analysis #f #f ())
(4545 analysis #f #f ())
(4546 analysis #f #f ())
(4547 package-lookup-type 4546 10 ())
(4548 analysis #f #f ())
(4549 analysis #f #f ())
(4550 require 4549 10 ())
(4551 analysis #f #f ())
(4552 simple-literal? 4551 10 ())
(4553 analysis #f #f ())
(4554 analysis #f #f ())
(4555 analysis #f #f ())
(4556 primitive-proc? 4555 10 ())
(4557 analysis #f #f ())
(4558 really-simple-call? 4557 10 ())
(4559 analysis #f #f ())
(4560 static-value 4559 10 ())
(4561 analysis #f #f ())
(4562 #f 4561 14 ())
(4563 analysis #f #f ())
(4564 #f 4563 14 ())
(4565 loop 4564 28 ())
(4566 analysis #f #f ())
(4567 #f 4566 14 ())
(4568 analysis #f #f ())
(4569 #f 4568 14 ())
(4570 analysis #f #f ())
(4571 #f 4570 14 ())
(4572 analysis #f #f ())
(4573 #f 4572 14 ())
(4574 analysis #f #f ())
(4575 #f 4574 14 ())
(4576 analysis #f #f ())
(4577 #f 4576 14 ())
(4578 analysis #f #f ())
(4579 #f 4578 14 ())
(4580 analysis #f #f ())
(4581 #f 4580 14 ())
(4582 analysis #f #f ())
(4583 #f 4582 14 ())
(4584 analysis #f #f ())
(4585 #f 4584 14 ())
(4586 analysis #f #f ())
(4587 #f 4586 14 ())
(4588 analysis #f #f ())
(4589 define-analyzer 4588 10 ())
(4590 analysis #f #f ())
(4591 #f 4590 14 ())
(4592 analysis #f #f ())
(4593 simple-list? 4592 10 ())
(4594 analysis #f #f ())
(4595 simple? 4594 10 ())
(4596 analysis #f #f ())
(4597 analysis #f #f ())
(4598 simple-lambda? 4597 10 ())
(4599 #f 4598 133 ())
(4600 analysis #f #f ())
(4601 inlinable-rhs? 4600 10 ())
(4602 analysis #f #f ())
(4603 analyze-form 4602 10 ())
(4604 analysis #f #f ())
(4605 analyze-forms 4604 10 ())
(4606 #f 4605 40 ())
(4607 analysis #f #f ())
(4608 #f 4607 14 ())
(4609 ensures-loaded #f #f ())
(4610 ensure-loaded 4609 10 ())
(4611 #f 4610 64 ())
(4612 #f 4611 70 ())
(4613 #f 4610 79 ())
(4614 #f #f #f ())
(4615 #f 4614 6 ())
(4616 get-location 4615 6 ())
(4617 #f 4615 15307 ())
(4618 #f 4615 15369 ())
(4619 #f 4615 15513 ())
(4620 #f 4615 15660 ())
(4621 #f 4615 15763 ())
(4622 conc 4621 42 ())
(4623 #f 4622 19 ())
(4624 #f 4615 17368 ())
(4625 loop 4624 120 ())
(4626 #f 4624 208 ())
(4627 #f 4624 244 ())
(4628 #f 4624 448 ())
(4629 #f 4624 517 ())
(4630 #f 4615 17836 ())
(4631 mem? 4630 212 ())
(4632 every? 4630 214 ())
(4633 #f 4630 234 ())
(4634 #f 4630 313 ())
(4635 #f 4615 18075 ())
(4636 mem? 4635 84 ())
(4637 loop##639 4635 105 ())
(4638 #f 4615 18137 ())
(4639 #f 4615 18199 ())
(4640 #f 4615 18390 ())
(4641 #f 4615 24430 ())
(4642 #f 4615 34442 ())
(4643 #f 4642 494 ())
(4644 #f 4615 35178 ())
(4645 #f 4615 35505 ())
(4646 #f 4615 35652 ())
(4647 #f 4615 35887 ())
(4648 #f 4615 35990 ())
(4649 loop 4648 172 ())
(4650 #f 4648 307 ())
(4651 #f 4648 349 ())
(4652 #f 4648 559 ())
(4653 #f 4648 866 ())
(4654 #f 4615 36225 ())
(4655 #f 4615 36827 ())
(4656 #f 4615 36889 ())
(4657 #f 4615 36951 ())
(4658 #f 4615 38188 ())
(4659 loop 4658 108 ())
(4660 #f 4615 38394 ())
(4661 loop 4660 108 ())
(4662 #f 4615 38559 ())
(4663 loop 4662 108 ())
(4664 #f 4615 38683 ())
(4665 loop 4664 108 ())
(4666 #f 4615 38807 ())
(4667 loop 4666 108 ())
(4668 #f 4615 38931 ())
(4669 loop 4668 108 ())
(4670 #f 4615 39055 ())
(4671 loop 4670 108 ())
(4672 #f 4615 39179 ())
(4673 loop 4672 108 ())
(4674 #f 4615 39303 ())
(4675 loop 4674 108 ())
(4676 #f 4615 42151 ())
(4677 #f 4615 42350 ())
(4678 #f 4615 42412 ())
(4679 #f 4615 42474 ())
(4680 #f 4615 42659 ())
(4681 #f 4615 42933 ())
(4682 #f 4615 47291 ())
(4683 loop 4682 108 ())
(4684 #f 4615 48683 ())
(4685 #f 4615 48882 ())
(4686 #f 4615 49125 ())
(4687 #f 4615 49187 ())
(4688 #f 4615 49249 ())
(4689 #f 4688 164 ())
(4690 #f 4615 49311 ())
(4691 #f 4690 355 ())
(4692 #f 4690 449 ())
(4693 #f 4615 49724 ())
(4694 #f 4615 49786 ())
(4695 #f 4694 198 ())
(4696 parse-package-clauses 4615 49857 ())
(4697 loop 4696 94 ())
(4698 #f 4615 49870 ())
(4699 #f 4698 214 ())
(4700 #f 4615 50191 ())
(4701 #f 4615 50294 ())
(4702 #f 4615 50356 ())
(4703 loop 4702 42 ())
(4704 #f 4615 50500 ())
(4705 #f 4615 50603 ())
(4706 #f 4615 50706 ())
(4707 #f 4615 50809 ())
(4708 loop 4707 54 ())
(4709 #f 4707 96 ())
(4710 #f 4707 125 ())
(4711 #f 4615 50912 ())
(4712 #f 4615 52158 ())
(4713 #f 4615 52328 ())
(4714 #f #f #f ())
-
