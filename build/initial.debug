; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 export-the-record-type)
(18 define-record-types)
(19 methods)
(20 number-i/o)
(21 fluids)
(22 wind)
(23 session-data)
(24 i/o)
(25 channels)
(26 channel-i/o)
(27 conditions)
(28 writing)
(29 reading)
(30 scheme-level-2)
(31 features)
(32 templates)
(33 continuations)
(34 more-types)
(35 enumerated)
(36 architecture)
(37 exceptions)
(38 interrupts)
(39 threads)
(40 scheduler)
(41 root-scheduler)
(42 enum-case)
(43 queues)
(44 locks)
(45 usual-resumer)
(46 weak)
(47 display-conditions)
(48 meta-types)
(49 bindings)
(50 names)
(51 thingies)
(52 nodes)
(53 compiler-envs)
(54 syntactic)
(55 usual-macros)
(56 var-utilities)
(57 debug-data)
(58 stack-check)
(59 segments)
(60 primops)
(61 reconstruction)
(62 compiler)
(63 reading-forms)
(64 flat-environments)
(65 interfaces)
(66 packages)
(67 scan-package)
(68 optimizer)
(69 compile-packages)
(70 defpackage)
(71 types)
(72 module-system)
(73 usages)
(74 analysis)
(75 inline)
(76 strong)
(77 tables)
(78 filenames)
(79 environments)
(80 evaluation)
(81 ensures-loaded)
(82 for-reification)
(83 scheme)
(84 mini-command)
(85 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (flat-lambda . 14))
(14 (define . 14))
(15 (primitive-procedure . 14))
(16 (if . 14))
(17 (letrec-syntax . 14))
(18 (%file-name% . 14))
(19 (let-syntax . 14))
(20 (structure-ref . 14))
(21 (loophole . 14))
(22 (letrec . 14))
(23 (lap . 14))
(24 (set! . 14))
(25 (call . 14))
(26 (atan . 14))
(27 (set-location-defined?! . 14))
(28 (acos . 14))
(29 (vm-extension . 14))
(30 (asin . 14))
(31 (location-defined? . 14))
(32 (time . 14))
(33 (template-set! . 14))
(34 (cons . 14))
(35 (wait . 14))
(36 (trap . 14))
(37 (assq . 14))
(38 (make-weak-pointer . 14))
(39 (lookup-shared-binding . 14))
(40 (push . 14))
(41 (set-contents! . 14))
(42 (read-char . 14))
(43 (make-cell . 14))
(44 (sqrt . 14))
(45 (* . 14))
(46 (contents . 14))
(47 (+ . 14))
(48 (peek-char . 14))
(49 (- . 14))
(50 (continuation-set! . 14))
(51 (/ . 14))
(52 (weak-pointer? . 14))
(53 (quotient . 14))
(54 (close-channel . 14))
(55 (channel-abort . 14))
(56 (char? . 14))
(57 (< . 14))
(58 (= . 14))
(59 (> . 14))
(60 (make-location . 14))
(61 (imag-part . 14))
(62 (set-port-data! . 14))
(63 (make-template . 14))
(64 (real? . 14))
(65 (real-part . 14))
(66 (get-cont-from-heap . 14))
(67 (record-length . 14))
(68 (port-data . 14))
(69 (pair? . 14))
(70 (make-port . 14))
(71 (set-port-lock! . 14))
(72 (return-from-exception . 14))
(73 (location? . 14))
(74 (channel-maybe-read . 14))
(75 (checked-record-ref . 14))
(76 (add-finalizer! . 14))
(77 (rational? . 14))
(78 (template? . 14))
(79 (port-lock . 14))
(80 (vector-length . 14))
(81 (make-continuation . 14))
(82 (string-length . 14))
(83 (shared-binding-ref . 14))
(84 (port? . 14))
(85 (angle . 14))
(86 (false . 14))
(87 (remainder . 14))
(88 (continuation? . 14))
(89 (binary-reduce1 . 14))
(90 (binary-reduce2 . 14))
(91 (char<? . 14))
(92 (char=? . 14))
(93 (<= . 14))
(94 (magnitude . 14))
(95 (>= . 14))
(96 (with-continuation . 14))
(97 (floor . 14))
(98 (apply . 14))
(99 (memory-status . 14))
(100 (checked-record-set! . 14))
(101 (inexact->exact . 14))
(102 (exact->inexact . 14))
(103 (error . 14))
(104 (extended-number-length . 14))
(105 (open-channels-list . 14))
(106 (channel-id . 14))
(107 (shared-binding-set! . 14))
(108 (numerator . 14))
(109 (eof-object . 14))
(110 (byte-vector-length . 14))
(111 (record-ref . 14))
(112 (make-polar . 14))
(113 (write-char . 14))
(114 (symbol->string . 14))
(115 (exact? . 14))
(116 (vector-ref . 14))
(117 (set-current-thread! . 14))
(118 (immutable? . 14))
(119 (set-exception-handlers! . 14))
(120 (string-ref . 14))
(121 (set-port-index! . 14))
(122 (make-shared-binding . 14))
(123 (current-thread . 14))
(124 (channel-status . 14))
(125 (set-port-limit! . 14))
(126 (shared-binding-name . 14))
(127 (port-index . 14))
(128 (make-immutable! . 14))
(129 (set-enabled-interrupts! . 14))
(130 (port-limit . 14))
(131 (ascii->char . 14))
(132 (char->ascii . 14))
(133 (undefine-shared-binding . 14))
(134 (record-set! . 14))
(135 (shared-binding? . 14))
(136 (eof-object? . 14))
(137 (set-interrupt-handlers! . 14))
(138 (record . 14))
(139 (schedule-interrupt . 14))
(140 (channel-maybe-write . 14))
(141 (extended-number-ref . 14))
(142 (vector-set! . 14))
(143 (copy-bytes! . 14))
(144 (string-set! . 14))
(145 (call-external-value . 14))
(146 (values . 14))
(147 (intern . 14))
(148 (vector . 14))
(149 (byte-vector-ref . 14))
(150 (make-double . 14))
(151 (make-record . 14))
(152 (set-location-id! . 14))
(153 (location-id . 14))
(154 (bitwise-and . 14))
(155 (eq? . 14))
(156 (write-image . 14))
(157 (double? . 14))
(158 (extended-number-set! . 14))
(159 (make-vector . 14))
(160 (record? . 14))
(161 (make-string . 14))
(162 (set-port-buffer! . 14))
(163 (primitive-catch . 14))
(164 (string-hash . 14))
(165 (template-length . 14))
(166 (number? . 14))
(167 (port-buffer . 14))
(168 (byte-vector-set! . 14))
(169 (bitwise-ior . 14))
(170 (set-car! . 14))
(171 (closure-env . 14))
(172 (vector? . 14))
(173 (bitwise-not . 14))
(174 (set-cdr! . 14))
(175 (symbol? . 14))
(176 (string? . 14))
(177 (car . 14))
(178 (bitwise-xor . 14))
(179 (cdr . 14))
(180 (find-all-records . 14))
(181 (continuation-length . 14))
(182 (log . 14))
(183 (message . 14))
(184 (tan . 14))
(185 (collect . 14))
(186 (cos . 14))
(187 (channel-os-index . 14))
(188 (make-extended-number . 14))
(189 (set-port-status! . 14))
(190 (sin . 14))
(191 (exp . 14))
(192 (pop . 14))
(193 (port-status . 14))
(194 (return-from-callback . 14))
(195 (set-port-locked?! . 14))
(196 (make-byte-vector . 14))
(197 (weak-pointer-ref . 14))
(198 (call-with-values . 14))
(199 (denominator . 14))
(200 (reverse-list->string . 14))
(201 (port-locked? . 14))
(202 (extended-number? . 14))
(203 (shared-binding-is-import? . 14))
(204 (find-all . 14))
(205 (cell-ref . 14))
(206 (byte-vector? . 14))
(207 (string=? . 14))
(208 (open-channel . 14))
(209 (channel? . 14))
(210 (make-rectangular . 14))
(211 (set-session-data! . 14))
(212 (template-ref . 14))
(213 (make-closure . 14))
(214 (session-data . 14))
(215 (integer? . 14))
(216 (signal-condition . 14))
(217 (port-handler . 14))
(218 (set-port-pending-eof?! . 14))
(219 (define-shared-binding . 14))
(220 (arithmetic-shift . 14))
(221 (complex? . 14))
(222 (port-pending-eof? . 14))
(223 (cell-set! . 14))
(224 (binary-comparison-reduce2 . 14))
(225 (closure? . 14))
(226 (continuation-ref . 14))
(227 (closure-template . 14))
(228 (current-cont . 14))
(229 (char->integer . 14))
(230 (integer->char . 14))
(231 (ascii-limit . 14))
(232 (ascii-whitespaces . 14))
(233 (procedure? . 14))
(234 (invoke-closure . 14))
(235 (primitive-cwcc . 14))
(236 (make-undefined-location . 14))
(237 (location-assigned? . 14))
(238 (vector-unassigned? . 14))
(239 (string-copy . 14))
(240 (string->symbol . 14))
(241 (input-port? . 14))
(242 (output-port? . 14))
(243 (make-code-vector . 14))
(244 (code-vector? . 14))
(245 (code-vector-length . 14))
(246 (code-vector-ref . 14))
(247 (code-vector-set! . 14))
(248 (channel-read . 14))
(249 (buffer-length . 14))
(250 (channel-write . 14))
(251 (lookup-imported-binding . 14))
(252 (lookup-exported-binding . 14))
(253 (define-imported-binding . 14))
(254 (define-exported-binding . 14))
(255 (undefine-imported-binding . 14))
(256 (undefine-exported-binding . 14))
(257 (debug-message . 14))
(258 (make-condition . 14))
(259 (signal . 14))
(260 (warn . 14))
(261 (syntax-error . 14))
(262 (call-error . 14))
(263 (case . 15))
(264 (quasiquote . 15))
(265 (syntax-rules . 15))
(266 (not . 15))
(267 (boolean? . 15))
(268 (eqv? . 15))
(269 (equal? . 15))
(270 (max . 15))
(271 (min . 15))
(272 (max-or-min . 15))
(273 (abs . 15))
(274 (zero? . 15))
(275 (positive? . 15))
(276 (negative? . 15))
(277 (even? . 15))
(278 (odd? . 15))
(279 (caar . 15))
(280 (cadr . 15))
(281 (cdar . 15))
(282 (cddr . 15))
(283 (caaar . 15))
(284 (caadr . 15))
(285 (cadar . 15))
(286 (caddr . 15))
(287 (cdaar . 15))
(288 (cdadr . 15))
(289 (cddar . 15))
(290 (cdddr . 15))
(291 (caaaar . 15))
(292 (caaadr . 15))
(293 (caadar . 15))
(294 (caaddr . 15))
(295 (cadaar . 15))
(296 (cadadr . 15))
(297 (caddar . 15))
(298 (cadddr . 15))
(299 (cdaaar . 15))
(300 (cdaadr . 15))
(301 (cdadar . 15))
(302 (cdaddr . 15))
(303 (cddaar . 15))
(304 (cddadr . 15))
(305 (cdddar . 15))
(306 (cddddr . 15))
(307 (null? . 15))
(308 (list . 15))
(309 (length . 15))
(310 (real-length . 15))
(311 (append . 15))
(312 (reverse . 15))
(313 (append-reverse . 15))
(314 (list-tail . 15))
(315 (list-ref . 15))
(316 (mem . 15))
(317 (memq . 15))
(318 (memv . 15))
(319 (member . 15))
(320 (ass . 15))
(321 (assv . 15))
(322 (assoc . 15))
(323 (list? . 15))
(324 (char>? . 15))
(325 (char>=? . 15))
(326 (char<=? . 15))
(327 (char-whitespace? . 15))
(328 (char-lower-case? . 15))
(329 (char-upper-case? . 15))
(330 (char-numeric? . 15))
(331 (char-alphabetic? . 15))
(332 (char-case-delta . 15))
(333 (make-character-map . 15))
(334 (upcase-map . 15))
(335 (char-upcase . 15))
(336 (downcase-map . 15))
(337 (char-downcase . 15))
(338 (char-ci-compare . 15))
(339 (char-ci=? . 15))
(340 (char-ci<? . 15))
(341 (char-ci<=? . 15))
(342 (char-ci>? . 15))
(343 (char-ci>=? . 15))
(344 (string . 15))
(345 (substring . 15))
(346 (string-append . 15))
(347 (string->list . 15))
(348 (list->string . 15))
(349 (string-fill! . 15))
(350 (make-string=? . 15))
(351 (string-ci=? . 15))
(352 (make-string<? . 15))
(353 (string<? . 15))
(354 (string-ci<? . 15))
(355 (string>? . 15))
(356 (string<=? . 15))
(357 (string>=? . 15))
(358 (string-ci>? . 15))
(359 (string-ci<=? . 15))
(360 (string-ci>=? . 15))
(361 (vector->list . 15))
(362 (list->vector . 15))
(363 (vector-fill! . 15))
(364 (map . 15))
(365 (map1 . 15))
(366 (map2+ . 15))
(367 (for-each . 15))
(368 (for-each1 . 15))
(369 (for-each2+ . 15))
(370 (delay . 15))
(371 (make-promise . 15))
(372 (force . 15))
(373 (unspecific . 15))
(374 (reduce . 15))
(375 (filter . 15))
(376 (pos . 15))
(377 (posq . 15))
(378 (posv . 15))
(379 (position . 15))
(380 (any . 15))
(381 (every . 15))
(382 (sublist . 15))
(383 (last . 15))
(384 (insert . 15))
(385 (fold . 15))
(386 (fold->2 . 15))
(387 (fold->3 . 15))
(388 (inexact? . 15))
(389 (modulo . 15))
(390 (ceiling . 15))
(391 (truncate . 15))
(392 (round . 15))
(393 (gcd . 15))
(394 (euclid . 15))
(395 (lcm . 15))
(396 (expt . 15))
(397 (raise-to-integer-power . 15))
(398 (rationalize . 15))
(399 (simplest-rational . 15))
(400 (record-type . 16))
(401 (*record-type-uid* . 16))
(402 (*record-type* . 16))
(403 (make-record-type . 16))
(404 (record-type? . 16))
(405 (record-type-resumer . 16))
(406 (set-record-type-resumer! . 16))
(407 (record-type-uid . 16))
(408 (record-type-name . 16))
(409 (record-type-field-names . 16))
(410 (record-type-number-of-fields . 16))
(411 (record-type-discloser . 16))
(412 (set-record-type-discloser! . 16))
(413 (record-type-fields . 16))
(414 (record-field-index . 16))
(415 (record-constructor . 16))
(416 (record-accessor . 16))
(417 (record-modifier . 16))
(418 (record-predicate . 16))
(419 (define-record-discloser . 16))
(420 (make-default-record-discloser . 16))
(421 (disclose-record . 16))
(422 (define-record-resumer . 16))
(423 (default-record-resumer . 16))
(424 (initialize-records! . 16))
(425 (resume-record . 16))
(426 (:record-type . 16))
(427 (define-record-type . 18))
(428 (define-constructor . 18))
(429 (define-accessors . 18))
(430 (define-accessor . 18))
(431 (:simple-type . 19))
(432 (really-make-simple-type . 19))
(433 (simple-type-id . 19))
(434 (simple-type-priority . 19))
(435 (simple-type-predicate . 19))
(436 (simple-type-superiors . 19))
(437 (simple-type? . 19))
(438 (make-simple-type . 19))
(439 (compute-priority . 19))
(440 (*increment* . 19))
(441 (%type-priority . 19))
(442 (%type-predicate . 19))
(443 (%same-type? . 19))
(444 (define-simple-type . 19))
(445 (:syntax . 19))
(446 (:values . 19))
(447 (value? . 19))
(448 (:value . 19))
(449 (:zero . 19))
(450 (:number . 19))
(451 (:complex . 19))
(452 (:real . 19))
(453 (:rational . 19))
(454 (:integer . 19))
(455 (:exact-integer . 19))
(456 (:boolean . 19))
(457 (:symbol . 19))
(458 (:char . 19))
(459 (:null . 19))
(460 (:pair . 19))
(461 (:vector . 19))
(462 (:string . 19))
(463 (:procedure . 19))
(464 (:input-port . 19))
(465 (:output-port . 19))
(466 (:eof-object . 19))
(467 (:record . 19))
(468 (record-type-priority . 19))
(469 (:method-info . 19))
(470 (really-make-method-info . 19))
(471 (method-info-proc . 19))
(472 (method-info-n-ary? . 19))
(473 (method-info-types . 19))
(474 (method-info? . 19))
(475 (make-method-info . 19))
(476 (empty-method-list . 19))
(477 (insert-method . 19))
(478 (same-applicability? . 19))
(479 (every2 . 19))
(480 (more-specific? . 19))
(481 (more-specific-type? . 19))
(482 (:method-table . 19))
(483 (really-make-method-table . 19))
(484 (method-table-id . 19))
(485 (method-table-set-perform! . 19))
(486 (method-table-get-perform . 19))
(487 (make-generic . 19))
(488 (method-table-prototype . 19))
(489 (method-table-methods . 19))
(490 (set-method-table-methods! . 19))
(491 (method-table? . 19))
(492 (make-method-table . 19))
(493 (make-cell-for-generic . 19))
(494 (add-to-method-table! . 19))
(495 (set-final-method! . 19))
(496 (apply-generic . 19))
(497 (define-generic . 19))
(498 (methods->perform . 19))
(499 (last-action . 19))
(500 (one-action . 19))
(501 (argument-sequence-predicate . 19))
(502 (check-for-next . 19))
(503 (check-next . 19))
(504 (method-info . 19))
(505 (method-internal . 19))
(506 (with-next-method . 19))
(507 (define-method . 19))
(508 (&add-method! . 19))
(509 (add-method! . 19))
(510 (&type-predicate . 19))
(511 (type-predicate . 19))
(512 (&type-priority . 19))
(513 (type-priority . 19))
(514 (&type-superiors . 19))
(515 (type-superiors . 19))
(516 (&same-type? . 19))
(517 (same-type? . 19))
(518 (:singleton . 19))
(519 (singleton . 19))
(520 (singleton-value . 19))
(521 (compare-to . 19))
(522 (&disclose . 19))
(523 (disclose . 19))
(524 (proc->discloser . 19))
(525 (&number->string . 20))
(526 (real-number->string . 20))
(527 (number->string . 20))
(528 (integer->string . 20))
(529 (string->number . 20))
(530 (&really-string->number . 20))
(531 (really-string->number . 20))
(532 (:integer-string . 20))
(533 (set-exactness . 20))
(534 (string->integer . 20))
(535 (:thread . 21))
(536 (make-thread . 21))
(537 (thread-dynamic-point . 21))
(538 (thread-dynamic-env . 21))
(539 (get-dynamic-env . 21))
(540 (set-dynamic-env! . 21))
(541 (get-dynamic-point . 21))
(542 (set-dynamic-point! . 21))
(543 (initialize-dynamic-state! . 21))
(544 (with-dynamic-env . 21))
(545 (empty-dynamic-env . 21))
(546 (:fluid . 21))
(547 (make-fluid . 21))
(548 (fluid-top-level-value . 21))
(549 (set-fluid-top-level-value! . 21))
(550 (fluid . 21))
(551 (set-fluid! . 21))
(552 (let-fluid . 21))
(553 (let-fluids . 21))
(554 (define-enumeration . 35))
(555 (components . 35))
(556 (enum . 35))
(557 (enumerand->name . 35))
(558 (name->enumerand . 35))
(559 (lookup-enumerand . 35))
(560 (architecture-version . 36))
(561 (bits-used-per-byte . 36))
(562 (byte-limit . 36))
(563 (define-instruction-set . 36))
(564 (op . 36))
(565 (op-enumeration . 36))
(566 (op-count . 36))
(567 (opcode-arg-specs . 36))
(568 (interrupt . 36))
(569 (interrupt-enumeration . 36))
(570 (interrupt-count . 36))
(571 (exception . 36))
(572 (exception-enumeration . 36))
(573 (exception-count . 36))
(574 (current-port-marker . 36))
(575 (current-port-marker-enumeration . 36))
(576 (current-port-marker-count . 36))
(577 (maximum-stack-args . 36))
(578 (*last-protocol* . 36))
(579 (next-protocol . 36))
(580 (two-byte-nargs-protocol . 36))
(581 (two-byte-nargs+list-protocol . 36))
(582 (big-stack-protocol . 36))
(583 (args+nargs-protocol . 36))
(584 (nary-dispatch-protocol . 36))
(585 (maximum-external-call-args . 36))
(586 (default-stack-space . 36))
(587 (environment-stack-size . 36))
(588 (continuation-stack-size . 36))
(589 (available-stack-space . 36))
(590 (time-option . 36))
(591 (time-option-enumeration . 36))
(592 (time-option-count . 36))
(593 (memory-status-option . 36))
(594 (memory-status-option-enumeration . 36))
(595 (memory-status-option-count . 36))
(596 (channel-status-option . 36))
(597 (channel-status-option-enumeration . 36))
(598 (channel-status-option-count . 36))
(599 (port-status-options . 36))
(600 (port-status-options-enumeration . 36))
(601 (port-status-options-count . 36))
(602 (stob . 36))
(603 (stob-enumeration . 36))
(604 (stob-count . 36))
(605 (least-b-vector-type . 36))
(606 (stob-data . 36))
(607 (:queue . 43))
(608 (really-make-queue . 43))
(609 (queue-tail . 43))
(610 (set-queue-tail! . 43))
(611 (queue-head . 43))
(612 (set-queue-head! . 43))
(613 (queue-uid . 43))
(614 (queue? . 43))
(615 (*queue-uid* . 43))
(616 (make-queue . 43))
(617 (queue-empty? . 43))
(618 (enqueue! . 43))
(619 (queue-front . 43))
(620 (dequeue! . 43))
(621 (on-queue? . 43))
(622 (delete-from-queue! . 43))
(623 (delete-from-queue-if! . 43))
(624 (queue->list . 43))
(625 (queue-length . 43))
(626 (*condition-types* . 27))
(627 (condition-supertypes . 27))
(628 (define-condition-type . 27))
(629 (condition-predicate . 27))
(630 (condition? . 27))
(631 (condition-type . 27))
(632 (condition-stuff . 27))
(633 (error? . 27))
(634 (call-error? . 27))
(635 (read-error? . 27))
(636 (exception? . 27))
(637 (exception-opcode . 27))
(638 (exception-reason . 27))
(639 (exception-arguments . 27))
(640 (make-exception . 27))
(641 (warning? . 27))
(642 (syntax-error? . 27))
(643 (interrupt? . 27))
(644 (*session-data-initializers* . 23))
(645 (make-session-data-slot! . 23))
(646 (session-data-ref . 23))
(647 (session-data-set! . 23))
(648 (initialize-session-data! . 23))
(649 (initialize-interrupts! . 38))
(650 (interrupt-handlers . 38))
(651 (set-interrupt-handler! . 38))
(652 (no-interrupts . 38))
(653 (all-interrupts . 38))
(654 (with-interrupts-inhibited . 38))
(655 (with-interrupts-allowed . 38))
(656 (disable-interrupts! . 38))
(657 (enable-interrupts! . 38))
(658 (with-interrupts . 38))
(659 (enabled-interrupts . 38))
(660 (*post-gc-procedures* . 38))
(661 (call-after-gc! . 38))
(662 (post-gc-handler . 38))
(663 (required-post-gc-space . 38))
(664 (space-shortage-handler . 38))
(665 (call-before-heap-overflow! . 38))
(666 (dynamic-wind . 22))
(667 (call-with-current-continuation . 22))
(668 (continuation->procedure . 22))
(669 (:point . 22))
(670 (make-point . 22))
(671 (point-parent . 22))
(672 (point-dynamic-env . 22))
(673 (point-out . 22))
(674 (point-in . 22))
(675 (point-depth . 22))
(676 (travel-to-point! . 22))
(677 (template-overhead . 32))
(678 (template-code . 32))
(679 (template-info . 32))
(680 (set-template-code! . 32))
(681 (set-template-info! . 32))
(682 (:closure . 34))
(683 (:code-vector . 34))
(684 (:location . 34))
(685 (:template . 34))
(686 (:channel . 34))
(687 (:port . 34))
(688 (:double . 34))
(689 (:weak-pointer . 34))
(690 (:shared-binding . 34))
(691 (continuation-cont . 33))
(692 (real-continuation-pc . 33))
(693 (real-continuation-template . 33))
(694 (continuation-env . 33))
(695 (exception-continuation-pc . 33))
(696 (exception-continuation-template . 33))
(697 (exception-continuation-exception . 33))
(698 (exception-continuation? . 33))
(699 (continuation-pc . 33))
(700 (continuation-template . 33))
(701 (normal-continuation-overhead . 33))
(702 (exception-continuation-overhead . 33))
(703 (continuation-arg . 33))
(704 (continuation-arg-count . 33))
(705 (:continuation . 33))
(706 (continuation-parent . 33))
(707 (define-exception-handler . 37))
(708 (signal-exception . 37))
(709 (exception-handlers . 37))
(710 (extend-opcode! . 37))
(711 (really-signal-condition . 37))
(712 (with-handler . 37))
(713 ($condition-handlers . 37))
(714 (initialize-exceptions! . 37))
(715 (last-resort-condition-handler . 37))
(716 (report-utter-lossage . 37))
(717 (continuation-preview . 37))
(718 (ignore-errors . 37))
(719 (report-errors-as-warnings . 37))
(720 (:thread . 39))
(721 (really-make-thread . 39))
(722 (thread-name . 39))
(723 (thread-uid . 39))
(724 (thread-current-task . 39))
(725 (set-thread-current-task! . 39))
(726 (thread-events . 39))
(727 (set-thread-events! . 39))
(728 (thread-data . 39))
(729 (set-thread-data! . 39))
(730 (thread-scheduler . 39))
(731 (set-thread-scheduler! . 39))
(732 (thread-time . 39))
(733 (set-thread-time! . 39))
(734 (thread-arguments . 39))
(735 (set-thread-arguments! . 39))
(736 (thread-queue . 39))
(737 (set-thread-queue! . 39))
(738 (thread-continuation . 39))
(739 (set-thread-continuation! . 39))
(740 (thread-dynamic-point . 39))
(741 (set-thread-dynamic-point! . 39))
(742 (thread-dynamic-env . 39))
(743 (thread? . 39))
(744 (*thread-uid* . 39))
(745 (make-thread . 39))
(746 (thread-top-level . 39))
(747 (thread-uid->thread . 39))
(748 (all-threads . 39))
(749 (add-event! . 39))
(750 (thunk->continuation . 39))
(751 (compose-continuation . 39))
(752 (make-thread-queue . 39))
(753 (thread-queue-empty? . 39))
(754 (enqueue-thread! . 39))
(755 (dequeue-thread! . 39))
(756 (remove-thread-from-queue! . 39))
(757 (current-thread . 39))
(758 (set-current-thread! . 39))
(759 (event-type . 39))
(760 (event-type-enumeration . 39))
(761 (event-type-count . 39))
(762 (run . 39))
(763 (find-and-run-next-thread . 39))
(764 (debit-thread-times-and-run! . 39))
(765 (handle-timer-interrupt . 39))
(766 (run-next-thread . 39))
(767 (min . 39))
(768 (switch-to-thread . 39))
(769 (run-thread . 39))
(770 (suspend . 39))
(771 (suspend-to . 39))
(772 (debit-down! . 39))
(773 (exit . 39))
(774 (wait . 39))
(775 (waiting? . 39))
(776 (block . 39))
(777 (relinquish-timeslice . 39))
(778 (upcall . 39))
(779 (propogate-upcall . 39))
(780 (kill-thread! . 39))
(781 (interrupt-thread . 39))
(782 (get-next-event! . 39))
(783 (event-pending? . 39))
(784 (schedule-event . 39))
(785 (schedule-wakeup . 39))
(786 (show-running . 39))
(787 (running? . 39))
(788 (spawn . 39))
(789 (spawn-on-root . 39))
(790 (spawn-on-scheduler . 39))
(791 (make-ready . 39))
(792 (schedule-interrupt! . 39))
(793 (cancel-timer-interrupt! . 39))
(794 (interrupt-timer-time . 39))
(795 (real-time . 39))
(796 (with-threads . 39))
(797 (start-multitasking . 39))
(798 (deadlock? . 39))
(799 (terminate? . 39))
(800 (terminate-current-thread . 39))
(801 (root-scheduler-slot . 39))
(802 (root-scheduler . 39))
(803 (sleep . 39))
(804 (*dozers* . 39))
(805 (insert . 39))
(806 (wake-some-threads . 39))
(807 (:lock . 44))
(808 (really-make-lock . 44))
(809 (lock-uid . 44))
(810 (lock-queue . 44))
(811 (lock-owner-uid . 44))
(812 (set-lock-owner-uid! . 44))
(813 (lock? . 44))
(814 (*lock-uid* . 44))
(815 (make-lock . 44))
(816 (obtain-lock . 44))
(817 (maybe-obtain-lock . 44))
(818 (release-lock . 44))
(819 (:port-handler . 24))
(820 (make-port-handler . 24))
(821 (port-handler-buffer-proc . 24))
(822 (port-handler-close . 24))
(823 (port-handler-discloser . 24))
(824 (port-handler? . 24))
(825 (disclose-port . 24))
(826 (obtain-port-lock . 24))
(827 (maybe-obtain-port-lock . 24))
(828 (release-port-lock . 24))
(829 (initialize-i/o-handlers! . 24))
(830 (one-arg-proc->handler . 24))
(831 (two-arg-proc->handler . 24))
(832 (read-char-handler . 24))
(833 (fill-port-buffer! . 24))
(834 (write-char-handler . 24))
(835 (empty-port-buffer! . 24))
(836 (port-flushed? . 24))
(837 (set-port-flushed?! . 24))
(838 (close-input-port . 24))
(839 (close-output-port . 24))
(840 (define-port-op . 24))
(841 (real-char-ready? . 24))
(842 (read-block . 24))
(843 (really-read-block . 24))
(844 (buffer-length . 24))
(845 (read-more . 24))
(846 (okay-limits? . 24))
(847 (write-block . 24))
(848 (write-string . 24))
(849 (write-buffered-block . 24))
(850 (write-unbuffered-block . 24))
(851 (force-output . 24))
(852 (really-force-output . 24))
(853 (force-output-if-open . 24))
(854 (default-buffer-size . 24))
(855 (open-port? . 24))
(856 (open-port-mask . 24))
(857 (input-port-mask . 24))
(858 (open-input-port-mask . 24))
(859 (open-input-port-status . 24))
(860 (open-input-port? . 24))
(861 (make-input-port-closed! . 24))
(862 (make-input-port . 24))
(863 (okay-buffer? . 24))
(864 (output-port-mask . 24))
(865 (open-output-port-mask . 24))
(866 (open-output-port-status . 24))
(867 (open-output-port? . 24))
(868 (make-output-port-closed! . 24))
(869 (make-output-port . 24))
(870 (make-unbuffered-output-port . 24))
(871 (null-output-port-handler . 24))
(872 (make-null-output-port . 24))
(873 (*flush-these-ports* . 24))
(874 (initialize-output-port-list! . 24))
(875 (periodically-force-output! . 24))
(876 (output-port-forcers . 24))
(877 (periodically-flushed-ports . 24))
(878 (make-forcing-thunk . 24))
(879 ($current-input-port . 24))
(880 ($current-output-port . 24))
(881 ($current-error-port . 24))
(882 ($current-noise-port . 24))
(883 (current-input-port . 24))
(884 (current-output-port . 24))
(885 (current-error-port . 24))
(886 (current-noise-port . 24))
(887 (initialize-i/o . 24))
(888 (with-current-ports . 24))
(889 (call-with-current-input-port . 24))
(890 (call-with-current-output-port . 24))
(891 (call-with-current-noise-port . 24))
(892 (silently . 24))
(893 (newline . 24))
(894 (char-ready? . 24))
(895 (output-port-option . 24))
(896 (input-port-option . 24))
(897 (write . 28))
(898 (recurring-write . 28))
(899 (write-boolean . 28))
(900 (write-number . 28))
(901 (write-char-literal . 28))
(902 (character-name . 28))
(903 (write-string-literal . 28))
(904 (write-list . 28))
(905 (quotation? . 28))
(906 (write-vector . 28))
(907 (write-other . 28))
(908 (display-type-name . 28))
(909 (display . 28))
(910 (read . 29))
(911 (sub-read-carefully . 29))
(912 (reader-token-marker . 29))
(913 (make-reader-token . 29))
(914 (reader-token? . 29))
(915 (close-paren . 29))
(916 (dot . 29))
(917 (sub-read . 29))
(918 (read-dispatch-vector . 29))
(919 (read-terminating?-vector . 29))
(920 (set-standard-syntax! . 29))
(921 (set-standard-read-macro! . 29))
(922 (sub-read-list . 29))
(923 (gobble-line . 29))
(924 (*sharp-macros* . 29))
(925 (define-sharp-macro . 29))
(926 (sub-read-token . 29))
(927 (parse-token . 29))
(928 (strange-symbol-names . 29))
(929 (p-c-v . 29))
(930 (preferred-case . 29))
(931 (reading-error . 29))
(932 (input-channel? . 25))
(933 (output-channel? . 25))
(934 (open-input-channel . 25))
(935 (open-output-channel . 25))
(936 (close-input-channel . 25))
(937 (close-output-channel . 25))
(938 (input-channel-handler . 26))
(939 (input-channel->port . 26))
(940 (input-channel+closer->port . 26))
(941 (real-input-channel->port . 26))
(942 (output-channel-handler . 26))
(943 (make-unbuffered-output-channel-handler . 26))
(944 (output-channel->port . 26))
(945 (output-channel+closer->port . 26))
(946 (real-output-channel->port . 26))
(947 (maybe-force-output . 26))
(948 (:channel-cell . 26))
(949 (make-channel-cell . 26))
(950 (channel-cell-closer . 26))
(951 (channel-cell-ref . 26))
(952 (channel-cell? . 26))
(953 (port->channel . 26))
(954 (open-input-file . 26))
(955 (open-output-file . 26))
(956 (call-with-input-file . 26))
(957 (call-with-output-file . 26))
(958 (with-input-from-file . 26))
(959 (with-output-to-file . 26))
(960 (force-channel-output-ports! . 26))
(961 (steal-channel-port! . 26))
(962 (really-steal-channel-port! . 26))
(963 (initialize-channel-i/o! . 26))
(964 (i/o-completion-handler . 26))
(965 (waiting-for-i/o? . 26))
(966 (wait-for-channel . 26))
(967 (nothing . 26))
(968 (steal-channel! . 26))
(969 (channel-wait-count-slot . 26))
(970 (channel-wait-count . 26))
(971 (increment-channel-wait-count! . 26))
(972 (decrement-channel-wait-count! . 26))
(973 (channel-wait-queues-slot . 26))
(974 (add-channel-wait-queue! . 26))
(975 (fetch-channel-wait-queue! . 26))
(976 (:table . 77))
(977 (really-make-table . 77))
(978 (table-set!-procedure . 77))
(979 (set-table-set!-procedure! . 77))
(980 (table-ref-procedure . 77))
(981 (set-table-ref-procedure! . 77))
(982 (table-data . 77))
(983 (set-table-data! . 77))
(984 (table-size . 77))
(985 (set-table-size! . 77))
(986 (table? . 77))
(987 (table-ref . 77))
(988 (table-set! . 77))
(989 (linear-table-size-limit . 77))
(990 (next-table-size . 77))
(991 (make-table-maker . 77))
(992 (assoc->table-maker . 77))
(993 (null-entry . 77))
(994 (new-entry . 77))
(995 (entry-value . 77))
(996 (entry-key . 77))
(997 (set-entry-value! . 77))
(998 (delete-entry! . 77))
(999 (make-assoc . 77))
(1000 (make-linear-table-ref . 77))
(1001 (make-linear-table-set! . 77))
(1002 (make->hash-table . 77))
(1003 (make-hash-table-ref . 77))
(1004 (make-hash-table-set! . 77))
(1005 (expand-hash-table! . 77))
(1006 (table-enter-alist! . 77))
(1007 (table-expand-table! . 77))
(1008 (table-walk . 77))
(1009 (really-table-walk . 77))
(1010 (alist-walk . 77))
(1011 (make-table-immutable! . 77))
(1012 (table->entry-list . 77))
(1013 (default-table-hash-function . 77))
(1014 (eqv?-assoc . 77))
(1015 (default-table-assoc . 77))
(1016 (symbol-hash . 77))
(1017 (make-table . 77))
(1018 (make-string-table . 77))
(1019 (make-symbol-table . 77))
(1020 (make-integer-table . 77))
(1021 (make-population . 46))
(1022 (add-to-population! . 46))
(1023 (weak-memq . 46))
(1024 (population-reduce . 46))
(1025 (population->list . 46))
(1026 (walk-population . 46))
(1027 (:meta-type . 48))
(1028 (really-make-type . 48))
(1029 (type-info . 48))
(1030 (type-more . 48))
(1031 (type-mask . 48))
(1032 (meta-type? . 48))
(1033 (make-type . 48))
(1034 (name->type-table . 48))
(1035 (mask->name-table . 48))
(1036 (name->type . 48))
(1037 (set-type-name! . 48))
(1038 (*mask* . 48))
(1039 (new-type-bit . 48))
(1040 (mask->type . 48))
(1041 (bottom-type . 48))
(1042 (error-type . 48))
(1043 (bottom-type? . 48))
(1044 (new-atomic-type . 48))
(1045 (named-atomic-type . 48))
(1046 (syntax-type . 48))
(1047 (other-static-type . 48))
(1048 (empty-rail-type . 48))
(1049 (rail-type . 48))
(1050 (make-optional-type . 48))
(1051 (make-rest-type . 48))
(1052 (head-type . 48))
(1053 (head-type-really . 48))
(1054 (tail-type . 48))
(1055 (empty-rail-type? . 48))
(1056 (rest-type? . 48))
(1057 (optional-type? . 48))
(1058 (mask/no-values . 48))
(1059 (mask/two-or-more . 48))
(1060 (mask/&rest . 48))
(1061 (value-type . 48))
(1062 (mask/value . 48))
(1063 (value-type? . 48))
(1064 (any-values-type . 48))
(1065 (any-arguments-type . 48))
(1066 (mask/one-or-more . 48))
(1067 (same-type? . 48))
(1068 (subtype? . 48))
(1069 (meet-type . 48))
(1070 (other-type-info . 48))
(1071 (meet-rail . 48))
(1072 (meet-procedure . 48))
(1073 (meet? . 48))
(1074 (meet-procedure? . 48))
(1075 (join-type . 48))
(1076 (join-rail . 48))
(1077 (join-procedure . 48))
(1078 (number-hierarchy . 48))
(1079 (integer-type . 48))
(1080 (rational-type . 48))
(1081 (real-type . 48))
(1082 (complex-type . 48))
(1083 (number-type . 48))
(1084 (exact-type . 48))
(1085 (inexact-type . 48))
(1086 (exact-integer-type . 48))
(1087 (inexact-real-type . 48))
(1088 (boolean-type . 48))
(1089 (pair-type . 48))
(1090 (null-type . 48))
(1091 (record-type . 48))
(1092 (any-procedure-type . 48))
(1093 (other-value-type . 48))
(1094 (mask/other . 48))
(1095 (make-other-type . 48))
(1096 (char-type . 48))
(1097 (unspecific-type . 48))
(1098 (string-type . 48))
(1099 (symbol-type . 48))
(1100 (vector-type . 48))
(1101 (escape-type . 48))
(1102 (structure-type . 48))
(1103 (mask/procedure . 48))
(1104 (procedure-type . 48))
(1105 (make-procedure-type . 48))
(1106 (procedure-type-domain . 48))
(1107 (procedure-type-codomain . 48))
(1108 (restrictive? . 48))
(1109 (sexp->type . 48))
(1110 (sexp->values-type . 48))
(1111 (type->sexp . 48))
(1112 (atomic-type->sexp . 48))
(1113 (rail-type->sexp . 48))
(1114 (disjoin-type . 48))
(1115 (disjoin-rest . 48))
(1116 (mask/number . 48))
(1117 (make-some-values-type . 48))
(1118 (proc . 48))
(1119 (some-values . 48))
(1120 (procedure-type? . 48))
(1121 (fixed-arity-procedure-type? . 48))
(1122 (procedure-type-arity . 48))
(1123 (procedure-type-argument-types . 48))
(1124 (variable-type . 48))
(1125 (variable-type? . 48))
(1126 (variable-value-type . 48))
(1127 (usual-variable-type . 48))
(1128 (undeclared-type . 48))
(1129 (compatible-types? . 48))
(1130 (:interface . 65))
(1131 (really-make-interface . 65))
(1132 (interface-name . 65))
(1133 (set-interface-name! . 65))
(1134 (interface-clients . 65))
(1135 (walk-method . 65))
(1136 (ref-method . 65))
(1137 (interface? . 65))
(1138 (interface-ref . 65))
(1139 (for-each-declaration . 65))
(1140 (note-reference-to-interface! . 65))
(1141 (make-interface . 65))
(1142 (make-simple-interface . 65))
(1143 (really-make-simple-interface . 65))
(1144 (make-compound-interface . 65))
(1145 (note-interface-name! . 65))
(1146 (binding? . 49))
(1147 (binding-type . 49))
(1148 (binding-place . 49))
(1149 (binding-static . 49))
(1150 (binding-path . 49))
(1151 (set-binding-place! . 49))
(1152 (make-binding . 49))
(1153 (add-path . 49))
(1154 (clobber-binding! . 49))
(1155 (impose-type . 49))
(1156 (forget-integration . 49))
(1157 (same-denotation? . 49))
(1158 (maybe-fix-place! . 49))
(1159 (follow-forwarding-pointers . 49))
(1160 (name? . 50))
(1161 (:generated . 50))
(1162 (make-generated . 50))
(1163 (generated-parent-name . 50))
(1164 (generated-env . 50))
(1165 (generated-token . 50))
(1166 (generated-symbol . 50))
(1167 (generated? . 50))
(1168 (generate-name . 50))
(1169 (generated-uid . 50))
(1170 (*generated-uid* . 50))
(1171 (name->symbol . 50))
(1172 (name-hash . 50))
(1173 (make-name-table . 50))
(1174 (desyntaxify . 50))
(1175 (make-qualified . 50))
(1176 (qualified? . 50))
(1177 (qualified-parent-name . 50))
(1178 (qualified-symbol . 50))
(1179 (name->qualified . 50))
(1180 (qualify-parent . 50))
(1181 (:transform . 50))
(1182 (really-make-transform . 50))
(1183 (transform-id . 50))
(1184 (transform-source . 50))
(1185 (transform-aux-names . 50))
(1186 (transform-type . 50))
(1187 (transform-env . 50))
(1188 (transform-procedure . 50))
(1189 (transform? . 50))
(1190 (make-transform . 50))
(1191 (maybe-apply-macro-transform . 50))
(1192 (apply-inline-transform . 50))
(1193 (make-keyword-comparator . 50))
(1194 (name->source-name . 50))
(1195 (bind-aliases . 50))
(1196 (make-name-generator . 50))
(1197 (lookup . 50))
(1198 (lookup . 53))
(1199 (bind1 . 53))
(1200 (bind . 53))
(1201 (bindrec . 53))
(1202 (make-compiler-env . 53))
(1203 (funny-name/macro-eval . 53))
(1204 (environment-macro-eval . 53))
(1205 (funny-name/define! . 53))
(1206 (environment-define! . 53))
(1207 (funny-name/package . 53))
(1208 (extract-package-from-environment . 53))
(1209 (funny-name/source-file-name . 53))
(1210 (bind-source-file-name . 53))
(1211 (source-file-name . 53))
(1212 (:thingie . 51))
(1213 (make-thingie . 51))
(1214 (thingie-want-type . 51))
(1215 (thingie-name . 51))
(1216 (thingie-binding . 51))
(1217 (thingie? . 51))
(1218 (:structure . 66))
(1219 (really-make-structure . 66))
(1220 (structure-name . 66))
(1221 (set-structure-name! . 66))
(1222 (structure-clients . 66))
(1223 (structure-package . 66))
(1224 (structure-interface-really . 66))
(1225 (set-structure-interface! . 66))
(1226 (structure-interface-thunk . 66))
(1227 (structure? . 66))
(1228 (structure-interface . 66))
(1229 (initialize-structure! . 66))
(1230 (make-structure . 66))
(1231 (note-structure-name! . 66))
(1232 (structure-unstable? . 66))
(1233 (for-each-export . 66))
(1234 (:package . 66))
(1235 (really-make-package . 66))
(1236 (package-cached . 66))
(1237 (package-clients . 66))
(1238 (package-real-undefined-but-assigneds . 66))
(1239 (set-package-undefined-but-assigneds! . 66))
(1240 (package-real-undefineds . 66))
(1241 (set-package-undefineds! . 66))
(1242 (package-accesses-thunk . 66))
(1243 (package-opens-thunk . 66))
(1244 (set-package-opens-thunk! . 66))
(1245 (package->environment . 66))
(1246 (set-package->environment! . 66))
(1247 (package-loaded? . 66))
(1248 (set-package-loaded?! . 66))
(1249 (package-clauses . 66))
(1250 (package-file-name . 66))
(1251 (package-get-location . 66))
(1252 (set-package-get-location! . 66))
(1253 (package-integrate? . 66))
(1254 (set-package-integrate?! . 66))
(1255 (package-unstable? . 66))
(1256 (package-definitions . 66))
(1257 (package-opens-really . 66))
(1258 (set-package-opens! . 66))
(1259 (package-uid . 66))
(1260 (package? . 66))
(1261 (make-package . 66))
(1262 (really-package->environment . 66))
(1263 (lazy-table-accessor . 66))
(1264 (package-undefineds . 66))
(1265 (package-undefined-but-assigneds . 66))
(1266 (new-package-uid . 66))
(1267 (*package-uid* . 66))
(1268 (package-name-table . 66))
(1269 (package-name . 66))
(1270 (note-package-name! . 66))
(1271 (package-opens . 66))
(1272 (initialize-package-if-necessary! . 66))
(1273 (package-accesses . 66))
(1274 (make-simple-package . 66))
(1275 (package-definition . 66))
(1276 (package-define! . 66))
(1277 (package-add-static! . 66))
(1278 (package-refine-type! . 66))
(1279 (package-lookup . 66))
(1280 (really-package-lookup . 66))
(1281 (search-opens . 66))
(1282 (structure-lookup . 66))
(1283 (real-structure-lookup . 66))
(1284 (generic-lookup . 66))
(1285 (initialize-package! . 66))
(1286 (for-each-definition . 66))
(1287 (get-new-location . 66))
(1288 (make-new-location . 66))
(1289 ($get-location . 66))
(1290 (*location-uid* . 66))
(1291 (location-info-table . 66))
(1292 (flush-location-names . 66))
(1293 (link! . 66))
(1294 (really-link! . 66))
(1295 (get-location . 66))
(1296 (location-on-demand . 66))
(1297 (get-undefined . 66))
(1298 (location-for-assignment . 66))
(1299 (package-note-caching! . 66))
(1300 (note-caching! . 66))
(1301 (get-location-for-unassignable . 66))
(1302 (get-location-for-undefined . 66))
(1303 ($note-undefined . 66))
(1304 (cenv->package . 66))
(1305 (location-for-reference . 66))
(1306 (noting-undefined-variables . 66))
(1307 (print-undefined-names . 66))
(1308 (environment-ref . 79))
(1309 (environment-set! . 79))
(1310 (environment-define! . 79))
(1311 (*structure-ref . 79))
(1312 (carefully . 79))
(1313 ($interaction-environment . 79))
(1314 (interaction-environment . 79))
(1315 (set-interaction-environment! . 79))
(1316 (with-interaction-environment . 79))
(1317 (scheme-report-environment . 79))
(1318 (*scheme-report-environment* . 79))
(1319 (*null-environment* . 79))
(1320 (*scheme-report-number* . 79))
(1321 (set-scheme-report-environment! . 79))
(1322 (null-environment . 79))
(1323 (make-reflective-tower . 79))
(1324 (set-reflective-tower-maker! . 79))
(1325 (namestring . 78))
(1326 (directory-component-separator . 78))
(1327 (type-component-separator . 78))
(1328 (namestring-component . 78))
(1329 (file-name-preferred-case . 78))
(1330 (*scheme-file-type* . 78))
(1331 (*load-file-type* . 78))
(1332 (file-name-directory . 78))
(1333 (file-name-nondirectory . 78))
(1334 (file-nondirectory-position . 78))
(1335 (string-posq . 78))
(1336 (*translations* . 78))
(1337 (translations . 78))
(1338 (set-translation! . 78))
(1339 (translate . 78))
(1340 ($note-file-package . 63))
(1341 (read-forms . 63))
(1342 (really-read-forms . 63))
(1343 (:operator . 52))
(1344 (make-operator . 52))
(1345 (operator-name . 52))
(1346 (operator-uid . 52))
(1347 (operator-nargs . 52))
(1348 (operator-type . 52))
(1349 (set-operator-type! . 52))
(1350 (operator? . 52))
(1351 (usual-operator-type . 52))
(1352 (get-operator . 52))
(1353 (*operator-uid* . 52))
(1354 (operators-table . 52))
(1355 (number-of-operators . 52))
(1356 (the-operators . 52))
(1357 (make-operator-table . 52))
(1358 (operator-table-ref . 52))
(1359 (operator-lookup . 52))
(1360 (operator-define! . 52))
(1361 (:node . 52))
(1362 (really-make-node . 52))
(1363 (node-plist . 52))
(1364 (set-node-plist! . 52))
(1365 (node-form . 52))
(1366 (node-operator-id . 52))
(1367 (node? . 52))
(1368 (make-node . 52))
(1369 (node-ref . 52))
(1370 (node-set! . 52))
(1371 (node-operator . 52))
(1372 (node-predicate . 52))
(1373 (make-similar-node . 52))
(1374 (force-node . 52))
(1375 (schemify . 52))
(1376 (schemifiers . 52))
(1377 (schemify-node . 52))
(1378 (schemify-nodes . 52))
(1379 (define-schemifier . 52))
(1380 (schemify-lambda . 52))
(1381 (schemify-formals . 52))
(1382 (schemify-sexp . 52))
(1383 (number-of-required-args . 56))
(1384 (n-ary? . 56))
(1385 (normalize-formals . 56))
(1386 (scan-forms . 54))
(1387 (expand-scanned-form . 54))
(1388 (scan-define . 54))
(1389 (expand-define . 54))
(1390 (scan-define-syntax . 54))
(1391 (expand-form . 54))
(1392 (expand-head . 54))
(1393 (destructure-define . 54))
(1394 (make-operator-predicate . 54))
(1395 (define? . 54))
(1396 (begin? . 54))
(1397 (define-syntax? . 54))
(1398 (static-value . 54))
(1399 (expand-body . 54))
(1400 (scan-body-forms . 54))
(1401 (body-lossage . 54))
(1402 (expand . 54))
(1403 (expand-list . 54))
(1404 (expand-literal . 54))
(1405 (expand-call . 54))
(1406 (expand-name . 54))
(1407 (expand-macro-application . 54))
(1408 (expand-operator-form . 54))
(1409 (expanders . 54))
(1410 (define-expander . 54))
(1411 (unspecific-node . 54))
(1412 (expand-structure-ref . 54))
(1413 (expand-lambda . 54))
(1414 (bind-names . 54))
(1415 (names? . 54))
(1416 (expand-letrec . 54))
(1417 (process-syntax . 54))
(1418 (this-long? . 54))
(1419 (at-least-this-long? . 54))
(1420 (specs? . 54))
(1421 (literal? . 54))
(1422 (syntax? . 54))
(1423 (begin-node? . 54))
(1424 (call-node? . 54))
(1425 (name-node? . 54))
(1426 (operator/literal . 54))
(1427 (operator/quote . 54))
(1428 (operator/call . 54))
(1429 (operator/name . 54))
(1430 (operator/unspecific . 54))
(1431 (operator/unassigned . 54))
(1432 (operator/lambda . 54))
(1433 (operator/begin . 54))
(1434 (operator/letrec . 54))
(1435 (operator/define . 54))
(1436 (operator/define-syntax . 54))
(1437 (operator/primitive-procedure . 54))
(1438 (operator/structure-ref . 54))
(1439 (:primop . 60))
(1440 (make-primop . 60))
(1441 (primop-compilator . 60))
(1442 (primop-closed . 60))
(1443 (primop-type . 60))
(1444 (primop-name . 60))
(1445 (primop? . 60))
(1446 (primop-table . 60))
(1447 (walk-primops . 60))
(1448 (define-compiler-primitive . 60))
(1449 (get-primop . 60))
(1450 (:debug-data . 57))
(1451 (make-debug-data . 57))
(1452 (debug-data-source . 57))
(1453 (set-debug-data-source! . 57))
(1454 (debug-data-env-maps . 57))
(1455 (set-debug-data-env-maps! . 57))
(1456 (debug-data-pc-in-parent . 57))
(1457 (debug-data-parent . 57))
(1458 (debug-data-name . 57))
(1459 (debug-data-uid . 57))
(1460 (debug-data? . 57))
(1461 (maximum-stack-use . 58))
(1462 (protocol-skip . 58))
(1463 (stack-delta . 58))
(1464 (define-delta . 58))
(1465 (stack-max . 58))
(1466 (nothing . 58))
(1467 (popper . 58))
(1468 (pusher . 58))
(1469 (continue . 58))
(1470 (continuer . 58))
(1471 (do-make-cont . 58))
(1472 (stack-function . 58))
(1473 (arg-spec-size . 58))
(1474 (imax . 58))
(1475 (get-offset . 58))
(1476 (new-template-uid . 59))
(1477 (*template-uid* . 59))
(1478 (template-uid . 59))
(1479 (set-template-uid! . 59))
(1480 (debug-flag-names . 59))
(1481 (type/debug-flags . 59))
(1482 (make-debug-flags . 59))
(1483 ($debug-flags . 59))
(1484 (debug-flag-accessor . 59))
(1485 (debug-flag-modifier . 59))
(1486 (keep-source-code? . 59))
(1487 (keep-environment-maps? . 59))
(1488 (keep-procedure-names? . 59))
(1489 (keep-file-names? . 59))
(1490 (tabulate-debug-data? . 59))
(1491 (debug-data-table . 59))
(1492 (with-fresh-compiler-state . 59))
(1493 (saving-and-restoring . 59))
(1494 (debug-data->info . 59))
(1495 (get-debug-data . 59))
(1496 (note-debug-data! . 59))
(1497 (new-debug-data . 59))
(1498 (make-segment . 59))
(1499 (segment-size . 59))
(1500 (segment-emitter . 59))
(1501 (segment->template . 59))
(1502 (segment-data->template . 59))
(1503 (check-stack-use . 59))
(1504 (:assembly-state . 59))
(1505 (make-assembly-state . 59))
(1506 (astate-literals . 59))
(1507 (set-astate-literals! . 59))
(1508 (astate-count . 59))
(1509 (set-astate-count! . 59))
(1510 (astate-pc . 59))
(1511 (set-astate-pc! . 59))
(1512 (astate-code-vector . 59))
(1513 (make-astate . 59))
(1514 (emit-byte! . 59))
(1515 (literal->index . 59))
(1516 (literal-position . 59))
(1517 (position . 59))
(1518 (emit-literal! . 59))
(1519 (emit-segment! . 59))
(1520 (empty-segment . 59))
(1521 (instruction . 59))
(1522 (sequentially . 59))
(1523 (sequentially-2 . 59))
(1524 (instruction-with-literal . 59))
(1525 (instruction-with-location . 59))
(1526 (template . 59))
(1527 (make-label . 59))
(1528 (instruction-using-label . 59))
(1529 (computed-goto-label-size . 59))
(1530 (computed-goto-instruction . 59))
(1531 (attach-label . 59))
(1532 (insert-label! . 59))
(1533 (code-vector-set2! . 59))
(1534 (two-byte-limit . 59))
(1535 (high-byte . 59))
(1536 (low-byte . 59))
(1537 ($debug-data . 59))
(1538 (note-source-code . 59))
(1539 (note-environment . 59))
(1540 (emit-with-environment-maps! . 59))
(1541 ($environment-maps . 59))
(1542 (node-type . 61))
(1543 (reconstruct-type . 61))
(1544 (reconstruct . 61))
(1545 (examine . 61))
(1546 (reconstructors . 61))
(1547 (define-reconstructor . 61))
(1548 (reconstruct-lambda . 61))
(1549 (careful-codomain . 61))
(1550 (reconstruct-name . 61))
(1551 (proc->reconstructor . 61))
(1552 (reconstruct-call . 61))
(1553 (fork-constraints . 61))
(1554 (node->type . 61))
(1555 (name-node? . 61))
(1556 (lambda-node? . 61))
(1557 (literal-node? . 61))
(1558 (primop-reconstructors . 61))
(1559 (define-primop-reconstructor . 61))
(1560 (reconstruct-apply . 61))
(1561 (constant-type . 61))
(1562 (compile-expression . 62))
(1563 (compile . 62))
(1564 (compilators . 62))
(1565 (define-compilator . 62))
(1566 (compile-constant . 62))
(1567 (compile-call . 62))
(1568 (compile-name-call . 62))
(1569 (compile-redex . 62))
(1570 (compile-unknown-call . 62))
(1571 (maybe-push-continuation . 62))
(1572 (fixup-source . 62))
(1573 (push-arguments . 62))
(1574 (push-all-with-names . 62))
(1575 (compile-lambda . 62))
(1576 (compile-lambda-code . 62))
(1577 (name-node->symbol . 62))
(1578 (set-lexical-offsets! . 62))
(1579 (compile-flat-lambda . 62))
(1580 (get-variables-offsets . 62))
(1581 (variable-env-data . 62))
(1582 (sort-list . 62))
(1583 (make-cont . 62))
(1584 (cont-segment . 62))
(1585 (cont-source-info . 62))
(1586 (return-cont-segment . 62))
(1587 (return-cont . 62))
(1588 (return-cont? . 62))
(1589 (fall-through-cont . 62))
(1590 (fall-through-cont? . 62))
(1591 (ignore-values-segment . 62))
(1592 (ignore-values-cont . 62))
(1593 (ignore-values-cont? . 62))
(1594 (deliver-value . 62))
(1595 (named-cont . 62))
(1596 (cont-name . 62))
(1597 (name-node-binding . 62))
(1598 (generate-trap . 62))
(1599 (type-check . 62))
(1600 (set-type-check?! . 62))
(1601 (*type-check?* . 62))
(1602 (diagnose-call-error . 62))
(1603 (lambda-node? . 62))
(1604 (name-node? . 62))
(1605 (literal-node? . 62))
(1606 (operator/lambda . 62))
(1607 (operator/set! . 62))
(1608 (operator/call . 62))
(1609 (operator/begin . 62))
(1610 (direct-compilator . 62))
(1611 (direct-closed-compilator . 62))
(1612 (nargs->domain . 62))
(1613 (get-primop-type . 62))
(1614 (primop-types . 62))
(1615 (define-simple-primitive . 62))
(1616 (simple-compilator . 62))
(1617 (simple-closed-compilator . 62))
(1618 (symbol-append . 62))
(1619 (define-stob-predicate . 62))
(1620 (define-data-struct-primitives . 62))
(1621 (define-vector-primitives . 62))
(1622 (define-n-ary-compiler-primitive . 62))
(1623 (n-ary-primitive-compilator . 62))
(1624 (call-on-arg-and-id . 62))
(1625 (call-on-args . 62))
(1626 (op/unspecific . 62))
(1627 (op/literal . 62))
(1628 (push-all-but-last . 62))
(1629 (dispatch-protocol-size . 62))
(1630 (make-dispatch-protocol . 62))
(1631 (compile-forms . 62))
(1632 (compile-forms-loop . 62))
(1633 (compile-form . 62))
(1634 (define-node? . 62))
(1635 (compile-definition . 62))
(1636 (location-contents-offset . 62))
(1637 (make-startup-procedure . 62))
(1638 (append-templates . 62))
(1639 (an-ignore-values-cont . 62))
(1640 (eval . 80))
(1641 (load-into . 80))
(1642 (eval-from-file . 80))
(1643 (load . 80))
(1644 (really-load-into . 80))
(1645 (compile-and-run . 80))
(1646 (display-condition . 47))
(1647 (really-display-condition . 47))
(1648 (*depth* . 47))
(1649 (*length* . 47))
(1650 (&disclose-condition . 47))
(1651 (disclose-condition . 47))
(1652 (limited-write . 47))
(1653 (command-processor . 84))
(1654 (mini-load . 84))
(1655 (read-string . 84))
(1656 (enum-case . 42))
(1657 (run-threads . 40))
(1658 (run-threads-with-housekeeper . 40))
(1659 (round-robin-event-handler . 40))
(1660 (make-counter . 40))
(1661 (counter-value . 40))
(1662 (increment-counter! . 40))
(1663 (decrement-counter! . 40))
(1664 (root-scheduler . 41))
(1665 (make-root-event-handler . 41))
(1666 (root-handler . 41))
(1667 (cheap-display-condition . 41))
(1668 (abort-token . 41))
(1669 (scheme-exit-now . 41))
(1670 (root-wait . 41))
(1671 (one-day-of-milliseconds . 41))
(1672 (do-some-waiting . 41))
(1673 (deadlock-handler . 41))
(1674 (call-when-deadlocked! . 41))
(1675 (spawn-output-forcers . 41))
(1676 (unspecific . 41))
(1677 (usual-resumer . 45))
(1678 (initialize-rts . 45))
(1679 (start . 85))
(1680 (make-built-in-structures . 85))
(1681 (initialize-interaction-environment! . 85))
(1682 (make-initial-package . 85))
(1683 (make-tower . 85))
(1684 (the-usual-transforms . 55))
(1685 (define-usual-macro . 55))
(1686 (usual-transform . 55))
(1687 (do-spec? . 55))
(1688 (specs? . 55))
(1689 (case-clause? . 55))
(1690 (process-rules . 55))
(1691 (segment-pattern? . 55))
(1692 (segment-template? . 55))
(1693 (segment-depth . 55))
(1694 (segment-tail . 55))
(1695 (indicators-for-zero-or-more . 55))
(1696 (find-free-names-in-syntax-rules . 55))
(1697 (strongly-connected-components . 76))
(1698 (find-next-vertex . 76))
(1699 (:vertex . 76))
(1700 (really-make-vertex . 76))
(1701 (vertex-lowpoint . 76))
(1702 (set-vertex-lowpoint! . 76))
(1703 (vertex-parent . 76))
(1704 (set-vertex-parent! . 76))
(1705 (vertex-index . 76))
(1706 (set-vertex-index! . 76))
(1707 (vertex-stack . 76))
(1708 (set-vertex-stack! . 76))
(1709 (vertex-edges . 76))
(1710 (set-vertex-edges! . 76))
(1711 (vertex-data . 76))
(1712 (vertex? . 76))
(1713 (make-vertex . 76))
(1714 (make-vertices . 76))
(1715 (do-vertex . 76))
(1716 (get-strong . 76))
(1717 (end-vertex . 76))
(1718 (unwind-stack . 76))
(1719 (follow-edge . 76))
(1720 (pop-vertex-edge! . 76))
(1721 (find-usages . 73))
(1722 (maybe-update-known-type . 73))
(1723 (find-node-usages . 73))
(1724 (analyze . 73))
(1725 (analyze-nodes . 73))
(1726 (usage-analyzers . 73))
(1727 (define-usage-analyzer . 73))
(1728 (nothing . 73))
(1729 (add-if-free . 73))
(1730 (:usage . 73))
(1731 (really-make-usage . 73))
(1732 (usage-assignment-count . 73))
(1733 (set-assignment! . 73))
(1734 (usage-operator-count . 73))
(1735 (set-operator! . 73))
(1736 (usage-reference-count . 73))
(1737 (set-reference! . 73))
(1738 (usage-name-node . 73))
(1739 (usage? . 73))
(1740 (make-usage . 73))
(1741 (make-package-usage . 73))
(1742 (package-usage? . 73))
(1743 (usage-incrementator . 73))
(1744 (note-reference! . 73))
(1745 (note-operator! . 73))
(1746 (note-assignment! . 73))
(1747 (lambda-node? . 73))
(1748 (quote-node? . 73))
(1749 (literal-node? . 73))
(1750 (call-node? . 73))
(1751 (name-node? . 73))
(1752 (define-node? . 73))
(1753 (sort-forms . 73))
(1754 (stuff-count . 73))
(1755 (maybe-make-aliased . 73))
(1756 (topologically-sort . 73))
(1757 (:form . 73))
(1758 (really-make-form . 73))
(1759 (form-temp . 73))
(1760 (set-form-temp! . 73))
(1761 (form-free . 73))
(1762 (set-form-free! . 73))
(1763 (form-unaliased? . 73))
(1764 (set-form-unaliased?! . 73))
(1765 (form-aliases . 73))
(1766 (set-form-aliases! . 73))
(1767 (form-node . 73))
(1768 (form? . 73))
(1769 (make-form . 73))
(1770 (insert-aliases . 73))
(1771 (make-inline-transform . 75))
(1772 (clean-node . 75))
(1773 (clean-lambda . 75))
(1774 (clean-lookup . 75))
(1775 (unused-name . 75))
(1776 (inline-transform . 75))
(1777 (make-substitution . 75))
(1778 (reconstitute . 75))
(1779 (reconstitute-name . 75))
(1780 (operator/name . 75))
(1781 (operator/literal . 75))
(1782 (qualified->name . 75))
(1783 (get-qualified-env . 75))
(1784 (quote-node? . 75))
(1785 (call-node? . 75))
(1786 (lambda-node? . 75))
(1787 (name-node? . 75))
(1788 (loophole-node? . 75))
(1789 (operator . 82))
(1790 (primop . 82))
(1791 (simple-interface . 82))
(1792 (package . 82))
(1793 (transform . 82))
(1794 (package-define-static! . 82))
(1795 (:syntax . 71))
(1796 (:values . 71))
(1797 (:arguments . 71))
(1798 (:value . 71))
(1799 (procedure . 71))
(1800 (:boolean . 71))
(1801 (:char . 71))
(1802 (:null . 71))
(1803 (:unspecific . 71))
(1804 (:number . 71))
(1805 (:complex . 71))
(1806 (:real . 71))
(1807 (:rational . 71))
(1808 (:integer . 71))
(1809 (:exact-integer . 71))
(1810 (:pair . 71))
(1811 (:string . 71))
(1812 (:symbol . 71))
(1813 (:vector . 71))
(1814 (:procedure . 71))
(1815 (:input-port . 71))
(1816 (:output-port . 71))
(1817 (:error . 71))
(1818 (:escape . 71))
(1819 (:structure . 71))
(1820 (:type . 71))
(1821 (def . 70))
(1822 (really-def . 70))
(1823 (define-multiple . 70))
(1824 (define-interface . 70))
(1825 (compound-interface . 70))
(1826 (export . 70))
(1827 (define-structure . 70))
(1828 (define-structures . 70))
(1829 (structure . 70))
(1830 (structures . 70))
(1831 (a-package . 70))
(1832 (receive . 70))
(1833 (define-reflective-tower-maker . 70))
(1834 (export-reflective-tower-maker . 70))
(1835 (define-module . 70))
(1836 (make-a-package . 70))
(1837 (loser . 70))
(1838 (interface-of . 70))
(1839 (*verify-later!* . 70))
(1840 (verify-later! . 70))
(1841 (set-verify-later! . 70))
(1842 (note-name! . 70))
(1843 (optimizers-table . 68))
(1844 (set-optimizer! . 68))
(1845 (get-optimizer . 68))
(1846 (apply-optimizers . 68))
(1847 (collect-packages . 67))
(1848 (package-source . 67))
(1849 (read-files . 67))
(1850 (package-optimizer-names . 67))
(1851 (check-structure . 67))
(1852 (compile-package . 69))
(1853 (expand-package . 69))
(1854 (define-usual-transform . 69))
(1855 (define-primitives . 69))
(1856 (make-define-primitive-node . 69))
(1857 (operator/define . 69))
(1858 (operator/primitive-procedure . 69))
(1859 (analyze-forms . 74))
(1860 (analyze-form . 74))
(1861 (inlinable-rhs? . 74))
(1862 (simple-lambda? . 74))
(1863 (operator/name . 74))
(1864 (simple? . 74))
(1865 (simple-list? . 74))
(1866 (analyzers . 74))
(1867 (define-analyzer . 74))
(1868 (static-value . 74))
(1869 (really-simple-call? . 74))
(1870 (lexical-node? . 74))
(1871 (no-ret . 74))
(1872 (ret . 74))
(1873 (simple-literal? . 74))
(1874 (require . 74))
(1875 (*debug?* . 74))
(1876 (package-lookup-type . 74))
(1877 (lambda-node? . 74))
(1878 (name-node? . 74))
(1879 (loophole-node? . 74))
(1880 (define-node? . 74))
(1881 (flatten-form . 64))
(1882 (flatten-node . 64))
(1883 (flatteners . 64))
(1884 (define-flattener . 64))
(1885 (flatten-list . 64))
(1886 (no-free-vars . 64))
(1887 (flatten-lambda . 64))
(1888 (convert-lambda-body . 64))
(1889 (add-cells . 64))
(1890 (assigned? . 64))
(1891 (mark-set-variables! . 64))
(1892 (mark-sets . 64))
(1893 (define-set-marker . 64))
(1894 (no-sets . 64))
(1895 (make-cell . 64))
(1896 (make-unassigned-cell . 64))
(1897 (make-cell-ref . 64))
(1898 (make-cell-set! . 64))
(1899 (make-primop-call . 64))
(1900 (operator/flat-lambda . 64))
(1901 (operator/lambda . 64))
(1902 (operator/begin . 64))
(1903 (operator/literal . 64))
(1904 (operator/call . 64))
(1905 (operator/unassigned . 64))
(1906 (operator/set! . 64))
(1907 (define-node? . 64))
(1908 (lambda-node? . 64))
(1909 (define-primop . 64))
(1910 (temp0 . 64))
(1911 (make-cell-primop . 64))
(1912 (temp1 . 64))
(1913 (cell-ref-primop . 64))
(1914 (temp2 . 64))
(1915 (cell-set!-primop . 64))
(1916 (union . 64))
(1917 (set-difference . 64))
(1918 (ensure-loaded . 81))
-
; Template uid -> name, parent, pc in parent, env maps
(0 scheme-level-0 #f #f ())
(1 atan 0 7 ())
(2 scheme-level-0 #f #f ())
(3 set-location-defined?! 2 7 ())
(4 scheme-level-0 #f #f ())
(5 acos 4 7 ())
(6 scheme-level-0 #f #f ())
(7 vm-extension 6 7 ())
(8 scheme-level-0 #f #f ())
(9 asin 8 7 ())
(10 scheme-level-0 #f #f ())
(11 location-defined? 10 7 ())
(12 scheme-level-0 #f #f ())
(13 time 12 7 ())
(14 scheme-level-0 #f #f ())
(15 template-set! 14 7 ())
(16 scheme-level-0 #f #f ())
(17 scheme-level-0 #f #f ())
(18 cons 17 7 ())
(19 scheme-level-0 #f #f ())
(20 wait 19 7 ())
(21 scheme-level-0 #f #f ())
(22 trap 21 7 ())
(23 scheme-level-0 #f #f ())
(24 assq 23 7 ())
(25 scheme-level-0 #f #f ())
(26 make-weak-pointer 25 7 ())
(27 scheme-level-0 #f #f ())
(28 lookup-shared-binding 27 7 ())
(29 scheme-level-0 #f #f ())
(30 push 29 7 ())
(31 scheme-level-0 #f #f ())
(32 set-contents! 31 7 ())
(33 scheme-level-0 #f #f ())
(34 read-char 33 7 ())
(35 scheme-level-0 #f #f ())
(36 make-cell 35 7 ())
(37 scheme-level-0 #f #f ())
(38 sqrt 37 7 ())
(39 scheme-level-0 #f #f ())
(40 * 39 7 ())
(41 scheme-level-0 #f #f ())
(42 contents 41 7 ())
(43 scheme-level-0 #f #f ())
(44 + 43 7 ())
(45 scheme-level-0 #f #f ())
(46 peek-char 45 7 ())
(47 scheme-level-0 #f #f ())
(48 - 47 7 ())
(49 scheme-level-0 #f #f ())
(50 continuation-set! 49 7 ())
(51 scheme-level-0 #f #f ())
(52 / 51 7 ())
(53 scheme-level-0 #f #f ())
(54 weak-pointer? 53 7 ())
(55 scheme-level-0 #f #f ())
(56 quotient 55 7 ())
(57 scheme-level-0 #f #f ())
(58 close-channel 57 7 ())
(59 scheme-level-0 #f #f ())
(60 channel-abort 59 7 ())
(61 scheme-level-0 #f #f ())
(62 char? 61 7 ())
(63 scheme-level-0 #f #f ())
(64 < 63 7 ())
(65 scheme-level-0 #f #f ())
(66 = 65 7 ())
(67 scheme-level-0 #f #f ())
(68 > 67 7 ())
(69 scheme-level-0 #f #f ())
(70 make-location 69 7 ())
(71 scheme-level-0 #f #f ())
(72 imag-part 71 7 ())
(73 scheme-level-0 #f #f ())
(74 set-port-data! 73 7 ())
(75 scheme-level-0 #f #f ())
(76 make-template 75 7 ())
(77 scheme-level-0 #f #f ())
(78 real? 77 7 ())
(79 scheme-level-0 #f #f ())
(80 real-part 79 7 ())
(81 scheme-level-0 #f #f ())
(82 get-cont-from-heap 81 7 ())
(83 scheme-level-0 #f #f ())
(84 record-length 83 7 ())
(85 scheme-level-0 #f #f ())
(86 port-data 85 7 ())
(87 scheme-level-0 #f #f ())
(88 pair? 87 7 ())
(89 scheme-level-0 #f #f ())
(90 make-port 89 7 ())
(91 scheme-level-0 #f #f ())
(92 set-port-lock! 91 7 ())
(93 scheme-level-0 #f #f ())
(94 return-from-exception 93 7 ())
(95 scheme-level-0 #f #f ())
(96 location? 95 7 ())
(97 scheme-level-0 #f #f ())
(98 channel-maybe-read 97 7 ())
(99 scheme-level-0 #f #f ())
(100 checked-record-ref 99 7 ())
(101 scheme-level-0 #f #f ())
(102 add-finalizer! 101 7 ())
(103 scheme-level-0 #f #f ())
(104 rational? 103 7 ())
(105 scheme-level-0 #f #f ())
(106 template? 105 7 ())
(107 scheme-level-0 #f #f ())
(108 port-lock 107 7 ())
(109 scheme-level-0 #f #f ())
(110 vector-length 109 7 ())
(111 scheme-level-0 #f #f ())
(112 make-continuation 111 7 ())
(113 scheme-level-0 #f #f ())
(114 string-length 113 7 ())
(115 scheme-level-0 #f #f ())
(116 shared-binding-ref 115 7 ())
(117 scheme-level-0 #f #f ())
(118 port? 117 7 ())
(119 scheme-level-0 #f #f ())
(120 angle 119 7 ())
(121 scheme-level-0 #f #f ())
(122 false 121 7 ())
(123 scheme-level-0 #f #f ())
(124 remainder 123 7 ())
(125 scheme-level-0 #f #f ())
(126 continuation? 125 7 ())
(127 scheme-level-0 #f #f ())
(128 binary-reduce1 127 7 ())
(129 scheme-level-0 #f #f ())
(130 binary-reduce2 129 7 ())
(131 scheme-level-0 #f #f ())
(132 char<? 131 7 ())
(133 scheme-level-0 #f #f ())
(134 char=? 133 7 ())
(135 scheme-level-0 #f #f ())
(136 <= 135 7 ())
(137 scheme-level-0 #f #f ())
(138 magnitude 137 7 ())
(139 scheme-level-0 #f #f ())
(140 >= 139 7 ())
(141 scheme-level-0 #f #f ())
(142 with-continuation 141 7 ())
(143 scheme-level-0 #f #f ())
(144 floor 143 7 ())
(145 scheme-level-0 #f #f ())
(146 apply 145 7 ())
(147 scheme-level-0 #f #f ())
(148 memory-status 147 7 ())
(149 scheme-level-0 #f #f ())
(150 checked-record-set! 149 7 ())
(151 scheme-level-0 #f #f ())
(152 inexact->exact 151 7 ())
(153 scheme-level-0 #f #f ())
(154 exact->inexact 153 7 ())
(155 scheme-level-0 #f #f ())
(156 error 155 7 ())
(157 scheme-level-0 #f #f ())
(158 extended-number-length 157 7 ())
(159 scheme-level-0 #f #f ())
(160 open-channels-list 159 7 ())
(161 scheme-level-0 #f #f ())
(162 channel-id 161 7 ())
(163 scheme-level-0 #f #f ())
(164 shared-binding-set! 163 7 ())
(165 scheme-level-0 #f #f ())
(166 numerator 165 7 ())
(167 scheme-level-0 #f #f ())
(168 eof-object 167 7 ())
(169 scheme-level-0 #f #f ())
(170 byte-vector-length 169 7 ())
(171 scheme-level-0 #f #f ())
(172 record-ref 171 7 ())
(173 scheme-level-0 #f #f ())
(174 make-polar 173 7 ())
(175 scheme-level-0 #f #f ())
(176 write-char 175 7 ())
(177 scheme-level-0 #f #f ())
(178 symbol->string 177 7 ())
(179 scheme-level-0 #f #f ())
(180 exact? 179 7 ())
(181 scheme-level-0 #f #f ())
(182 vector-ref 181 7 ())
(183 scheme-level-0 #f #f ())
(184 set-current-thread! 183 7 ())
(185 scheme-level-0 #f #f ())
(186 immutable? 185 7 ())
(187 scheme-level-0 #f #f ())
(188 set-exception-handlers! 187 7 ())
(189 scheme-level-0 #f #f ())
(190 string-ref 189 7 ())
(191 scheme-level-0 #f #f ())
(192 set-port-index! 191 7 ())
(193 scheme-level-0 #f #f ())
(194 make-shared-binding 193 7 ())
(195 scheme-level-0 #f #f ())
(196 current-thread 195 7 ())
(197 scheme-level-0 #f #f ())
(198 channel-status 197 7 ())
(199 scheme-level-0 #f #f ())
(200 set-port-limit! 199 7 ())
(201 scheme-level-0 #f #f ())
(202 shared-binding-name 201 7 ())
(203 scheme-level-0 #f #f ())
(204 port-index 203 7 ())
(205 scheme-level-0 #f #f ())
(206 make-immutable! 205 7 ())
(207 scheme-level-0 #f #f ())
(208 set-enabled-interrupts! 207 7 ())
(209 scheme-level-0 #f #f ())
(210 port-limit 209 7 ())
(211 scheme-level-0 #f #f ())
(212 ascii->char 211 7 ())
(213 scheme-level-0 #f #f ())
(214 char->ascii 213 7 ())
(215 scheme-level-0 #f #f ())
(216 undefine-shared-binding 215 7 ())
(217 scheme-level-0 #f #f ())
(218 record-set! 217 7 ())
(219 scheme-level-0 #f #f ())
(220 shared-binding? 219 7 ())
(221 scheme-level-0 #f #f ())
(222 eof-object? 221 7 ())
(223 scheme-level-0 #f #f ())
(224 set-interrupt-handlers! 223 7 ())
(225 scheme-level-0 #f #f ())
(226 record 225 7 ())
(227 scheme-level-0 #f #f ())
(228 schedule-interrupt 227 7 ())
(229 scheme-level-0 #f #f ())
(230 channel-maybe-write 229 7 ())
(231 scheme-level-0 #f #f ())
(232 unspecific 231 7 ())
(233 scheme-level-0 #f #f ())
(234 extended-number-ref 233 7 ())
(235 scheme-level-0 #f #f ())
(236 vector-set! 235 7 ())
(237 scheme-level-0 #f #f ())
(238 copy-bytes! 237 7 ())
(239 scheme-level-0 #f #f ())
(240 string-set! 239 7 ())
(241 scheme-level-0 #f #f ())
(242 unassigned 241 7 ())
(243 scheme-level-0 #f #f ())
(244 call-external-value 243 7 ())
(245 scheme-level-0 #f #f ())
(246 values 245 7 ())
(247 scheme-level-0 #f #f ())
(248 intern 247 7 ())
(249 scheme-level-0 #f #f ())
(250 vector 249 7 ())
(251 scheme-level-0 #f #f ())
(252 byte-vector-ref 251 7 ())
(253 scheme-level-0 #f #f ())
(254 make-double 253 7 ())
(255 scheme-level-0 #f #f ())
(256 make-record 255 7 ())
(257 scheme-level-0 #f #f ())
(258 set-location-id! 257 7 ())
(259 scheme-level-0 #f #f ())
(260 location-id 259 7 ())
(261 scheme-level-0 #f #f ())
(262 bitwise-and 261 7 ())
(263 scheme-level-0 #f #f ())
(264 eq? 263 7 ())
(265 scheme-level-0 #f #f ())
(266 write-image 265 7 ())
(267 scheme-level-0 #f #f ())
(268 double? 267 7 ())
(269 scheme-level-0 #f #f ())
(270 extended-number-set! 269 7 ())
(271 scheme-level-0 #f #f ())
(272 make-vector 271 7 ())
(273 scheme-level-0 #f #f ())
(274 record? 273 7 ())
(275 scheme-level-0 #f #f ())
(276 make-string 275 7 ())
(277 scheme-level-0 #f #f ())
(278 set-port-buffer! 277 7 ())
(279 scheme-level-0 #f #f ())
(280 primitive-catch 279 7 ())
(281 scheme-level-0 #f #f ())
(282 string-hash 281 7 ())
(283 scheme-level-0 #f #f ())
(284 template-length 283 7 ())
(285 scheme-level-0 #f #f ())
(286 number? 285 7 ())
(287 scheme-level-0 #f #f ())
(288 port-buffer 287 7 ())
(289 scheme-level-0 #f #f ())
(290 byte-vector-set! 289 7 ())
(291 scheme-level-0 #f #f ())
(292 bitwise-ior 291 7 ())
(293 scheme-level-0 #f #f ())
(294 set-car! 293 7 ())
(295 scheme-level-0 #f #f ())
(296 closure-env 295 7 ())
(297 scheme-level-0 #f #f ())
(298 vector? 297 7 ())
(299 scheme-level-0 #f #f ())
(300 bitwise-not 299 7 ())
(301 scheme-level-0 #f #f ())
(302 set-cdr! 301 7 ())
(303 scheme-level-0 #f #f ())
(304 symbol? 303 7 ())
(305 scheme-level-0 #f #f ())
(306 string? 305 7 ())
(307 scheme-level-0 #f #f ())
(308 car 307 7 ())
(309 scheme-level-0 #f #f ())
(310 bitwise-xor 309 7 ())
(311 scheme-level-0 #f #f ())
(312 cdr 311 7 ())
(313 scheme-level-0 #f #f ())
(314 find-all-records 313 7 ())
(315 scheme-level-0 #f #f ())
(316 continuation-length 315 7 ())
(317 scheme-level-0 #f #f ())
(318 log 317 7 ())
(319 scheme-level-0 #f #f ())
(320 message 319 7 ())
(321 scheme-level-0 #f #f ())
(322 tan 321 7 ())
(323 scheme-level-0 #f #f ())
(324 collect 323 7 ())
(325 scheme-level-0 #f #f ())
(326 cos 325 7 ())
(327 scheme-level-0 #f #f ())
(328 channel-os-index 327 7 ())
(329 scheme-level-0 #f #f ())
(330 make-extended-number 329 7 ())
(331 scheme-level-0 #f #f ())
(332 set-port-status! 331 7 ())
(333 scheme-level-0 #f #f ())
(334 sin 333 7 ())
(335 scheme-level-0 #f #f ())
(336 exp 335 7 ())
(337 scheme-level-0 #f #f ())
(338 pop 337 7 ())
(339 scheme-level-0 #f #f ())
(340 port-status 339 7 ())
(341 scheme-level-0 #f #f ())
(342 return-from-callback 341 7 ())
(343 scheme-level-0 #f #f ())
(344 set-port-locked?! 343 7 ())
(345 scheme-level-0 #f #f ())
(346 make-byte-vector 345 7 ())
(347 scheme-level-0 #f #f ())
(348 weak-pointer-ref 347 7 ())
(349 scheme-level-0 #f #f ())
(350 call-with-values 349 7 ())
(351 scheme-level-0 #f #f ())
(352 denominator 351 7 ())
(353 scheme-level-0 #f #f ())
(354 reverse-list->string 353 7 ())
(355 scheme-level-0 #f #f ())
(356 port-locked? 355 7 ())
(357 scheme-level-0 #f #f ())
(358 extended-number? 357 7 ())
(359 scheme-level-0 #f #f ())
(360 shared-binding-is-import? 359 7 ())
(361 scheme-level-0 #f #f ())
(362 find-all 361 7 ())
(363 scheme-level-0 #f #f ())
(364 cell-ref 363 7 ())
(365 scheme-level-0 #f #f ())
(366 byte-vector? 365 7 ())
(367 scheme-level-0 #f #f ())
(368 string=? 367 7 ())
(369 scheme-level-0 #f #f ())
(370 open-channel 369 7 ())
(371 scheme-level-0 #f #f ())
(372 channel? 371 7 ())
(373 scheme-level-0 #f #f ())
(374 make-rectangular 373 7 ())
(375 scheme-level-0 #f #f ())
(376 set-session-data! 375 7 ())
(377 scheme-level-0 #f #f ())
(378 template-ref 377 7 ())
(379 scheme-level-0 #f #f ())
(380 make-closure 379 7 ())
(381 scheme-level-0 #f #f ())
(382 session-data 381 7 ())
(383 scheme-level-0 #f #f ())
(384 integer? 383 7 ())
(385 scheme-level-0 #f #f ())
(386 signal-condition 385 7 ())
(387 scheme-level-0 #f #f ())
(388 port-handler 387 7 ())
(389 scheme-level-0 #f #f ())
(390 set-port-pending-eof?! 389 7 ())
(391 scheme-level-0 #f #f ())
(392 define-shared-binding 391 7 ())
(393 scheme-level-0 #f #f ())
(394 arithmetic-shift 393 7 ())
(395 scheme-level-0 #f #f ())
(396 complex? 395 7 ())
(397 scheme-level-0 #f #f ())
(398 port-pending-eof? 397 7 ())
(399 scheme-level-0 #f #f ())
(400 cell-set! 399 7 ())
(401 scheme-level-0 #f #f ())
(402 binary-comparison-reduce2 401 7 ())
(403 scheme-level-0 #f #f ())
(404 scheme-level-0 #f #f ())
(405 closure? 404 7 ())
(406 scheme-level-0 #f #f ())
(407 continuation-ref 406 7 ())
(408 scheme-level-0 #f #f ())
(409 closure-template 408 7 ())
(410 scheme-level-0 #f #f ())
(411 current-cont 410 7 ())
(412 scheme-level-0 #f #f ())
(413 char->integer 412 7 ())
(414 scheme-level-0 #f #f ())
(415 integer->char 414 7 ())
(416 scheme-level-0 #f #f ())
(417 invoke-closure 416 7 ())
(418 scheme-level-0 #f #f ())
(419 primitive-cwcc 418 7 ())
(420 #f 419 8 ())
(421 scheme-level-0 #f #f ())
(422 make-undefined-location 421 7 ())
(423 scheme-level-0 #f #f ())
(424 location-assigned? 423 7 ())
(425 scheme-level-0 #f #f ())
(426 vector-unassigned? 425 7 ())
(427 scheme-level-0 #f #f ())
(428 string-copy 427 7 ())
(429 scheme-level-0 #f #f ())
(430 string->symbol 429 7 ())
(431 scheme-level-0 #f #f ())
(432 input-port? 431 7 ())
(433 scheme-level-0 #f #f ())
(434 output-port? 433 7 ())
(435 scheme-level-0 #f #f ())
(436 make-code-vector 435 7 ())
(437 scheme-level-0 #f #f ())
(438 code-vector? 437 7 ())
(439 scheme-level-0 #f #f ())
(440 code-vector-length 439 7 ())
(441 scheme-level-0 #f #f ())
(442 code-vector-ref 441 7 ())
(443 scheme-level-0 #f #f ())
(444 code-vector-set! 443 7 ())
(445 scheme-level-0 #f #f ())
(446 buffer-length 445 7 ())
(447 scheme-level-0 #f #f ())
(448 channel-read 447 7 ())
(449 #f 448 6 ())
(450 loop 449 19 ())
(451 scheme-level-0 #f #f ())
(452 channel-write 451 7 ())
(453 loop 452 19 ())
(454 scheme-level-0 #f #f ())
(455 lookup-imported-binding 454 7 ())
(456 scheme-level-0 #f #f ())
(457 lookup-exported-binding 456 7 ())
(458 scheme-level-0 #f #f ())
(459 define-imported-binding 458 7 ())
(460 scheme-level-0 #f #f ())
(461 define-exported-binding 460 7 ())
(462 scheme-level-0 #f #f ())
(463 undefine-imported-binding 462 7 ())
(464 scheme-level-0 #f #f ())
(465 undefine-exported-binding 464 7 ())
(466 scheme-level-0 #f #f ())
(467 debug-message 466 7 ())
(468 scheme-level-0 #f #f ())
(469 signal 468 7 ())
(470 scheme-level-0 #f #f ())
(471 warn 470 7 ())
(472 scheme-level-0 #f #f ())
(473 syntax-error 472 7 ())
(474 scheme-level-0 #f #f ())
(475 call-error 474 7 ())
(476 scheme-level-0 #f #f ())
(477 scheme-level-0 #f #f ())
(478 scheme-level-1 #f #f ())
(479 scheme-level-1 #f #f ())
(480 scheme-level-1 #f #f ())
(481 scheme-level-1 #f #f ())
(482 scheme-level-1 #f #f ())
(483 scheme-level-1 #f #f ())
(484 scheme-level-1 #f #f ())
(485 scheme-level-1 #f #f ())
(486 scheme-level-1 #f #f ())
(487 scheme-level-1 #f #f ())
(488 scheme-level-1 #f #f ())
(489 scheme-level-1 #f #f ())
(490 #f 489 11 ())
(491 scheme-level-1 #f #f ())
(492 #f 491 11 ())
(493 scheme-level-1 #f #f ())
(494 scheme-level-1 #f #f ())
(495 scheme-level-1 #f #f ())
(496 scheme-level-1 #f #f ())
(497 scheme-level-1 #f #f ())
(498 scheme-level-1 #f #f ())
(499 scheme-level-1 #f #f ())
(500 not 499 7 ())
(501 scheme-level-1 #f #f ())
(502 boolean? 501 7 ())
(503 scheme-level-1 #f #f ())
(504 eqv? 503 7 ())
(505 scheme-level-1 #f #f ())
(506 equal? 505 7 ())
(507 loop 506 156 ())
(508 scheme-level-1 #f #f ())
(509 null? 508 7 ())
(510 scheme-level-1 #f #f ())
(511 inexact? 510 7 ())
(512 scheme-level-1 #f #f ())
(513 max-or-min 512 7 ())
(514 loop 513 34 ())
(515 scheme-level-1 #f #f ())
(516 max 515 7 ())
(517 scheme-level-1 #f #f ())
(518 min 517 7 ())
(519 scheme-level-1 #f #f ())
(520 abs 519 7 ())
(521 scheme-level-1 #f #f ())
(522 zero? 521 7 ())
(523 scheme-level-1 #f #f ())
(524 positive? 523 7 ())
(525 scheme-level-1 #f #f ())
(526 negative? 525 7 ())
(527 scheme-level-1 #f #f ())
(528 even? 527 7 ())
(529 scheme-level-1 #f #f ())
(530 odd? 529 7 ())
(531 scheme-level-1 #f #f ())
(532 caar 531 7 ())
(533 scheme-level-1 #f #f ())
(534 cadr 533 7 ())
(535 scheme-level-1 #f #f ())
(536 cdar 535 7 ())
(537 scheme-level-1 #f #f ())
(538 cddr 537 7 ())
(539 scheme-level-1 #f #f ())
(540 caaar 539 7 ())
(541 scheme-level-1 #f #f ())
(542 caadr 541 7 ())
(543 scheme-level-1 #f #f ())
(544 cadar 543 7 ())
(545 scheme-level-1 #f #f ())
(546 caddr 545 7 ())
(547 scheme-level-1 #f #f ())
(548 cdaar 547 7 ())
(549 scheme-level-1 #f #f ())
(550 cdadr 549 7 ())
(551 scheme-level-1 #f #f ())
(552 cddar 551 7 ())
(553 scheme-level-1 #f #f ())
(554 cdddr 553 7 ())
(555 scheme-level-1 #f #f ())
(556 caaaar 555 7 ())
(557 scheme-level-1 #f #f ())
(558 caaadr 557 7 ())
(559 scheme-level-1 #f #f ())
(560 caadar 559 7 ())
(561 scheme-level-1 #f #f ())
(562 caaddr 561 7 ())
(563 scheme-level-1 #f #f ())
(564 cadaar 563 7 ())
(565 scheme-level-1 #f #f ())
(566 cadadr 565 7 ())
(567 scheme-level-1 #f #f ())
(568 caddar 567 7 ())
(569 scheme-level-1 #f #f ())
(570 cadddr 569 7 ())
(571 scheme-level-1 #f #f ())
(572 cdaaar 571 7 ())
(573 scheme-level-1 #f #f ())
(574 cdaadr 573 7 ())
(575 scheme-level-1 #f #f ())
(576 cdadar 575 7 ())
(577 scheme-level-1 #f #f ())
(578 cdaddr 577 7 ())
(579 scheme-level-1 #f #f ())
(580 cddaar 579 7 ())
(581 scheme-level-1 #f #f ())
(582 cddadr 581 7 ())
(583 scheme-level-1 #f #f ())
(584 cdddar 583 7 ())
(585 scheme-level-1 #f #f ())
(586 cddddr 585 7 ())
(587 scheme-level-1 #f #f ())
(588 list 587 7 ())
(589 scheme-level-1 #f #f ())
(590 real-length 589 7 ())
(591 scheme-level-1 #f #f ())
(592 length 591 7 ())
(593 scheme-level-1 #f #f ())
(594 reduce 593 7 ())
(595 scheme-level-1 #f #f ())
(596 append 595 7 ())
(597 recur 596 34 ())
(598 scheme-level-1 #f #f ())
(599 append-reverse 598 7 ())
(600 scheme-level-1 #f #f ())
(601 reverse 600 7 ())
(602 scheme-level-1 #f #f ())
(603 list-tail 602 7 ())
(604 scheme-level-1 #f #f ())
(605 list-ref 604 7 ())
(606 scheme-level-1 #f #f ())
(607 mem 606 7 ())
(608 #f 607 6 ())
(609 loop 608 18 ())
(610 scheme-level-1 #f #f ())
(611 ass 610 7 ())
(612 #f 611 6 ())
(613 loop 612 18 ())
(614 scheme-level-1 #f #f ())
(615 list? 614 7 ())
(616 recur 615 21 ())
(617 scheme-level-1 #f #f ())
(618 char>? 617 7 ())
(619 scheme-level-1 #f #f ())
(620 char>=? 619 7 ())
(621 scheme-level-1 #f #f ())
(622 char<=? 621 7 ())
(623 scheme-level-1 #f #f ())
(624 char-whitespace? 623 7 ())
(625 scheme-level-1 #f #f ())
(626 char-lower-case? 625 7 ())
(627 scheme-level-1 #f #f ())
(628 char-upper-case? 627 7 ())
(629 scheme-level-1 #f #f ())
(630 char-numeric? 629 7 ())
(631 scheme-level-1 #f #f ())
(632 char-alphabetic? 631 7 ())
(633 scheme-level-1 #f #f ())
(634 make-character-map 633 7 ())
(635 loop##6 634 27 ())
(636 scheme-level-1 #f #f ())
(637 char-upcase 636 7 ())
(638 scheme-level-1 #f #f ())
(639 char-downcase 638 7 ())
(640 scheme-level-1 #f #f ())
(641 char-ci-compare 640 7 ())
(642 #f 641 6 ())
(643 scheme-level-1 #f #f ())
(644 list->string 643 7 ())
(645 loop##8 644 36 ())
(646 scheme-level-1 #f #f ())
(647 string 646 7 ())
(648 scheme-level-1 #f #f ())
(649 substring 648 7 ())
(650 loop##9 649 26 ())
(651 scheme-level-1 #f #f ())
(652 string-append 651 7 ())
(653 #f 652 12 ())
(654 loop 652 60 ())
(655 loop##10 654 40 ())
(656 scheme-level-1 #f #f ())
(657 string->list 656 7 ())
(658 loop##11 657 18 ())
(659 scheme-level-1 #f #f ())
(660 unspecific 659 7 ())
(661 scheme-level-1 #f #f ())
(662 string-fill! 661 7 ())
(663 loop##12 662 18 ())
(664 scheme-level-1 #f #f ())
(665 make-string=? 664 7 ())
(666 #f 665 6 ())
(667 loop 666 36 ())
(668 scheme-level-1 #f #f ())
(669 make-string<? 668 7 ())
(670 #f 669 6 ())
(671 loop 670 49 ())
(672 scheme-level-1 #f #f ())
(673 string>? 672 7 ())
(674 scheme-level-1 #f #f ())
(675 string<=? 674 7 ())
(676 scheme-level-1 #f #f ())
(677 string>=? 676 7 ())
(678 scheme-level-1 #f #f ())
(679 string-ci>? 678 7 ())
(680 scheme-level-1 #f #f ())
(681 string-ci<=? 680 7 ())
(682 scheme-level-1 #f #f ())
(683 string-ci>=? 682 7 ())
(684 scheme-level-1 #f #f ())
(685 vector->list 684 7 ())
(686 loop##14 685 11 ())
(687 scheme-level-1 #f #f ())
(688 list->vector 687 7 ())
(689 loop##15 688 35 ())
(690 scheme-level-1 #f #f ())
(691 vector-fill! 690 7 ())
(692 loop##16 691 19 ())
(693 scheme-level-1 #f #f ())
(694 map1 693 7 ())
(695 scheme-level-1 #f #f ())
(696 any 695 7 ())
(697 scheme-level-1 #f #f ())
(698 map2+ 697 7 ())
(699 scheme-level-1 #f #f ())
(700 map 699 7 ())
(701 scheme-level-1 #f #f ())
(702 for-each1 701 7 ())
(703 loop 702 18 ())
(704 scheme-level-1 #f #f ())
(705 for-each2+ 704 7 ())
(706 loop 705 21 ())
(707 scheme-level-1 #f #f ())
(708 for-each 707 7 ())
(709 scheme-level-1 #f #f ())
(710 make-promise 709 7 ())
(711 #f 710 11 ())
(712 scheme-level-1 #f #f ())
(713 force 712 7 ())
(714 scheme-level-1 #f #f ())
(715 filter 714 7 ())
(716 #f 715 6 ())
(717 scheme-level-1 #f #f ())
(718 pos 717 7 ())
(719 #f 718 6 ())
(720 loop 719 22 ())
(721 scheme-level-1 #f #f ())
(722 every 721 7 ())
(723 scheme-level-1 #f #f ())
(724 sublist 723 7 ())
(725 recur 724 58 ())
(726 scheme-level-1 #f #f ())
(727 last 726 7 ())
(728 scheme-level-1 #f #f ())
(729 insert 728 7 ())
(730 scheme-level-1 #f #f ())
(731 fold 730 7 ())
(732 loop##20 731 11 ())
(733 scheme-level-1 #f #f ())
(734 fold->2 733 7 ())
(735 loop 734 24 ())
(736 #f 735 25 ())
(737 scheme-level-1 #f #f ())
(738 fold->3 737 7 ())
(739 loop 738 27 ())
(740 #f 739 28 ())
(741 scheme-level-1 #f #f ())
(742 modulo 741 7 ())
(743 scheme-level-1 #f #f ())
(744 ceiling 743 7 ())
(745 scheme-level-1 #f #f ())
(746 truncate 745 7 ())
(747 scheme-level-1 #f #f ())
(748 round 747 7 ())
(749 scheme-level-1 #f #f ())
(750 euclid 749 7 ())
(751 scheme-level-1 #f #f ())
(752 gcd 751 7 ())
(753 #f 752 8 ())
(754 scheme-level-1 #f #f ())
(755 lcm 754 7 ())
(756 #f 755 8 ())
(757 scheme-level-1 #f #f ())
(758 raise-to-integer-power 757 7 ())
(759 loop 758 39 ())
(760 scheme-level-1 #f #f ())
(761 expt 760 7 ())
(762 scheme-level-1 #f #f ())
(763 simplest-rational 762 7 ())
(764 simplest-rational-internal 763 11 ())
(765 scheme-level-1 #f #f ())
(766 rationalize 765 7 ())
(767 records #f #f ())
(768 #f 767 7 ())
(769 records #f #f ())
(770 records #f #f ())
(771 records #f #f ())
(772 records #f #f ())
(773 record-type 772 7 ())
(774 records #f #f ())
(775 record-type-name 774 7 ())
(776 records #f #f ())
(777 make-default-record-discloser 776 7 ())
(778 #f 777 6 ())
(779 records #f #f ())
(780 make-record-type 779 7 ())
(781 records #f #f ())
(782 record-type? 781 7 ())
(783 records #f #f ())
(784 record-type-resumer 783 7 ())
(785 records #f #f ())
(786 set-record-type-resumer! 785 7 ())
(787 records #f #f ())
(788 record-type-uid 787 7 ())
(789 records #f #f ())
(790 record-type-field-names 789 7 ())
(791 records #f #f ())
(792 record-type-number-of-fields 791 7 ())
(793 records #f #f ())
(794 record-type-discloser 793 7 ())
(795 records #f #f ())
(796 set-record-type-discloser! 795 7 ())
(797 records #f #f ())
(798 record-field-index 797 7 ())
(799 loop 798 28 ())
(800 records #f #f ())
(801 record-constructor 800 7 ())
(802 #f 801 10 ())
(803 #f 801 41 ())
(804 loop 803 45 ())
(805 records #f #f ())
(806 record-accessor 805 7 ())
(807 #f 806 62 ())
(808 records #f #f ())
(809 record-modifier 808 7 ())
(810 #f 809 62 ())
(811 records #f #f ())
(812 record-predicate 811 7 ())
(813 #f 812 6 ())
(814 records #f #f ())
(815 define-record-discloser 814 7 ())
(816 records #f #f ())
(817 disclose-record 816 7 ())
(818 records #f #f ())
(819 define-record-resumer 818 7 ())
(820 records #f #f ())
(821 resume-record 820 7 ())
(822 records #f #f ())
(823 initialize-records! 822 7 ())
(824 loop##23 823 18 ())
(825 records #f #f ())
(826 records #f #f ())
(827 records #f #f ())
(828 records #f #f ())
(829 define-record-types #f #f ())
(830 methods #f #f ())
(831 &add-method! 830 59 ())
(832 methods #f #f ())
(833 &disclose 832 52 ())
(834 methods #f #f ())
(835 &disclose 834 52 ())
(836 methods #f #f ())
(837 methods #f #f ())
(838 disclose 837 56 ())
(839 methods #f #f ())
(840 &same-type? 839 56 ())
(841 methods #f #f ())
(842 &type-priority 841 52 ())
(843 methods #f #f ())
(844 &type-predicate 843 52 ())
(845 methods #f #f ())
(846 #f 845 11 ())
(847 methods #f #f ())
(848 singleton-value 847 7 ())
(849 methods #f #f ())
(850 singleton 849 7 ())
(851 methods #f #f ())
(852 methods #f #f ())
(853 &same-type? 852 56 ())
(854 methods #f #f ())
(855 &same-type? 854 56 ())
(856 methods #f #f ())
(857 methods #f #f ())
(858 same-type? 857 60 ())
(859 methods #f #f ())
(860 &type-superiors 859 52 ())
(861 methods #f #f ())
(862 &type-superiors 861 52 ())
(863 methods #f #f ())
(864 methods #f #f ())
(865 type-superiors 864 56 ())
(866 methods #f #f ())
(867 &type-priority 866 52 ())
(868 methods #f #f ())
(869 &type-priority 868 52 ())
(870 methods #f #f ())
(871 methods #f #f ())
(872 type-priority 871 56 ())
(873 methods #f #f ())
(874 &type-predicate 873 52 ())
(875 methods #f #f ())
(876 &type-predicate 875 52 ())
(877 methods #f #f ())
(878 methods #f #f ())
(879 type-predicate 878 56 ())
(880 methods #f #f ())
(881 add-method! 880 52 ())
(882 methods #f #f ())
(883 methods #f #f ())
(884 add-method! 883 60 ())
(885 methods #f #f ())
(886 #f 885 11 ())
(887 methods #f #f ())
(888 set-method-table-methods! 887 7 ())
(889 methods #f #f ())
(890 method-table-methods 889 7 ())
(891 methods #f #f ())
(892 method-table-prototype 891 7 ())
(893 methods #f #f ())
(894 make-generic 893 7 ())
(895 methods #f #f ())
(896 method-table-get-perform 895 7 ())
(897 methods #f #f ())
(898 method-table-set-perform! 897 7 ())
(899 methods #f #f ())
(900 method-table-id 899 7 ())
(901 methods #f #f ())
(902 really-make-method-table 901 7 ())
(903 methods #f #f ())
(904 methods #f #f ())
(905 #f 904 11 ())
(906 methods #f #f ())
(907 method-info-types 906 7 ())
(908 methods #f #f ())
(909 method-info-n-ary? 908 7 ())
(910 methods #f #f ())
(911 method-info-proc 910 7 ())
(912 methods #f #f ())
(913 really-make-method-info 912 7 ())
(914 methods #f #f ())
(915 methods #f #f ())
(916 record-type-priority 915 51 ())
(917 methods #f #f ())
(918 methods #f #f ())
(919 methods #f #f ())
(920 methods #f #f ())
(921 methods #f #f ())
(922 methods #f #f ())
(923 methods #f #f ())
(924 methods #f #f ())
(925 methods #f #f ())
(926 methods #f #f ())
(927 methods #f #f ())
(928 methods #f #f ())
(929 methods #f #f ())
(930 #f 929 25 ())
(931 methods #f #f ())
(932 methods #f #f ())
(933 methods #f #f ())
(934 methods #f #f ())
(935 methods #f #f ())
(936 methods #f #f ())
(937 #f 936 25 ())
(938 methods #f #f ())
(939 methods #f #f ())
(940 methods #f #f ())
(941 methods #f #f ())
(942 #f 941 11 ())
(943 methods #f #f ())
(944 simple-type-superiors 943 7 ())
(945 methods #f #f ())
(946 simple-type-predicate 945 7 ())
(947 methods #f #f ())
(948 simple-type-priority 947 7 ())
(949 methods #f #f ())
(950 simple-type-id 949 7 ())
(951 methods #f #f ())
(952 really-make-simple-type 951 7 ())
(953 methods #f #f ())
(954 methods #f #f ())
(955 simple-type? 954 7 ())
(956 methods #f #f ())
(957 %type-priority 956 7 ())
(958 methods #f #f ())
(959 compute-priority 958 7 ())
(960 methods #f #f ())
(961 make-simple-type 960 7 ())
(962 methods #f #f ())
(963 %type-predicate 962 7 ())
(964 methods #f #f ())
(965 %same-type? 964 7 ())
(966 methods #f #f ())
(967 value? 966 7 ())
(968 methods #f #f ())
(969 method-info? 968 7 ())
(970 methods #f #f ())
(971 make-method-info 970 7 ())
(972 methods #f #f ())
(973 empty-method-list 972 7 ())
(974 methods #f #f ())
(975 more-specific-type? 974 7 ())
(976 methods #f #f ())
(977 more-specific? 976 7 ())
(978 loop 977 148 ())
(979 methods #f #f ())
(980 every2 979 7 ())
(981 methods #f #f ())
(982 same-applicability? 981 7 ())
(983 methods #f #f ())
(984 insert-method 983 7 ())
(985 recur 984 18 ())
(986 methods #f #f ())
(987 method-table? 986 7 ())
(988 methods #f #f ())
(989 last-action 988 7 ())
(990 #f 989 6 ())
(991 methods #f #f ())
(992 one-action 991 7 ())
(993 #f 992 6 ())
(994 #f 993 20 ())
(995 methods #f #f ())
(996 check-for-next 995 7 ())
(997 #f 996 6 ())
(998 methods #f #f ())
(999 check-next 998 7 ())
(1000 #f 999 6 ())
(1001 methods #f #f ())
(1002 argument-sequence-predicate 1001 7 ())
(1003 recur 1002 27 ())
(1004 methods #f #f ())
(1005 methods->perform 1004 7 ())
(1006 recur 1005 18 ())
(1007 methods #f #f ())
(1008 add-to-method-table! 1007 7 ())
(1009 methods #f #f ())
(1010 set-final-method! 1009 7 ())
(1011 methods #f #f ())
(1012 make-cell-for-generic 1011 7 ())
(1013 #f 1012 8 ())
(1014 #f 1012 13 ())
(1015 #f 1012 18 ())
(1016 methods #f #f ())
(1017 make-method-table 1016 7 ())
(1018 #f 1017 53 ())
(1019 #f 1017 79 ())
(1020 methods #f #f ())
(1021 apply-generic 1020 7 ())
(1022 methods #f #f ())
(1023 compare-to 1022 7 ())
(1024 #f 1023 6 ())
(1025 methods #f #f ())
(1026 proc->discloser 1025 7 ())
(1027 #f 1026 6 ())
(1028 #f 1027 6 ())
(1029 methods #f #f ())
(1030 number-i/o #f #f ())
(1031 string->integer 1030 24 ())
(1032 do-it 1030 33 ())
(1033 loop 1032 40 ())
(1034 digit->integer 1030 42 ())
(1035 number-i/o #f #f ())
(1036 set-exactness 1035 7 ())
(1037 number-i/o #f #f ())
(1038 &really-string->number 1037 60 ())
(1039 number-i/o #f #f ())
(1040 #f 1039 25 ())
(1041 loop 1040 31 ())
(1042 number-i/o #f #f ())
(1043 &really-string->number 1042 60 ())
(1044 number-i/o #f #f ())
(1045 number-i/o #f #f ())
(1046 number-i/o #f #f ())
(1047 string->number 1046 7 ())
(1048 loop 1047 285 ())
(1049 radix-is 1048 55 ())
(1050 exactness-is 1048 60 ())
(1051 loop 1048 300 ())
(1052 number-i/o #f #f ())
(1053 integer->string 1052 22 ())
(1054 recur 1053 52 ())
(1055 integer->digit 1052 31 ())
(1056 number-i/o #f #f ())
(1057 &number->string 1056 56 ())
(1058 number-i/o #f #f ())
(1059 &number->string 1058 56 ())
(1060 number-i/o #f #f ())
(1061 number->string 1060 7 ())
(1062 number-i/o #f #f ())
(1063 number-i/o #f #f ())
(1064 fluids #f #f ())
(1065 fluids #f #f ())
(1066 set-fluid-top-level-value! 1065 7 ())
(1067 fluids #f #f ())
(1068 fluid-top-level-value 1067 7 ())
(1069 fluids #f #f ())
(1070 make-fluid 1069 7 ())
(1071 fluids #f #f ())
(1072 fluids #f #f ())
(1073 thread-dynamic-env 1072 7 ())
(1074 fluids #f #f ())
(1075 thread-dynamic-point 1074 7 ())
(1076 fluids #f #f ())
(1077 make-thread 1076 7 ())
(1078 fluids #f #f ())
(1079 fluids #f #f ())
(1080 get-dynamic-env 1079 7 ())
(1081 fluids #f #f ())
(1082 set-dynamic-env! 1081 7 ())
(1083 fluids #f #f ())
(1084 get-dynamic-point 1083 7 ())
(1085 fluids #f #f ())
(1086 set-dynamic-point! 1085 7 ())
(1087 fluids #f #f ())
(1088 empty-dynamic-env 1087 7 ())
(1089 fluids #f #f ())
(1090 initialize-dynamic-state! 1089 7 ())
(1091 fluids #f #f ())
(1092 with-dynamic-env 1091 7 ())
(1093 #f 1092 38 ())
(1094 fluids #f #f ())
(1095 fluid 1094 7 ())
(1096 fluids #f #f ())
(1097 set-fluid! 1096 7 ())
(1098 fluids #f #f ())
(1099 let-fluid 1098 7 ())
(1100 fluids #f #f ())
(1101 let-fluids 1100 7 ())
(1102 loop 1101 30 ())
(1103 enumerated #f #f ())
(1104 lookup-enumerand 1103 7 ())
(1105 loop 1104 27 ())
(1106 architecture #f #f ())
(1107 architecture #f #f ())
(1108 architecture #f #f ())
(1109 architecture #f #f ())
(1110 architecture #f #f ())
(1111 architecture #f #f ())
(1112 architecture #f #f ())
(1113 architecture #f #f ())
(1114 architecture #f #f ())
(1115 architecture #f #f ())
(1116 architecture #f #f ())
(1117 architecture #f #f ())
(1118 architecture #f #f ())
(1119 architecture #f #f ())
(1120 architecture #f #f ())
(1121 architecture #f #f ())
(1122 architecture #f #f ())
(1123 architecture #f #f ())
(1124 architecture #f #f ())
(1125 architecture #f #f ())
(1126 architecture #f #f ())
(1127 architecture #f #f ())
(1128 architecture #f #f ())
(1129 next-protocol 1128 7 ())
(1130 architecture #f #f ())
(1131 architecture #f #f ())
(1132 architecture #f #f ())
(1133 architecture #f #f ())
(1134 architecture #f #f ())
(1135 architecture #f #f ())
(1136 architecture #f #f ())
(1137 architecture #f #f ())
(1138 architecture #f #f ())
(1139 architecture #f #f ())
(1140 architecture #f #f ())
(1141 architecture #f #f ())
(1142 architecture #f #f ())
(1143 architecture #f #f ())
(1144 queues #f #f ())
(1145 queue-uid 1144 7 ())
(1146 queues #f #f ())
(1147 set-queue-head! 1146 7 ())
(1148 queues #f #f ())
(1149 queue-head 1148 7 ())
(1150 queues #f #f ())
(1151 set-queue-tail! 1150 7 ())
(1152 queues #f #f ())
(1153 queue-tail 1152 7 ())
(1154 queues #f #f ())
(1155 really-make-queue 1154 7 ())
(1156 queues #f #f ())
(1157 queues #f #f ())
(1158 queue? 1157 7 ())
(1159 queues #f #f ())
(1160 make-queue 1159 7 ())
(1161 queues #f #f ())
(1162 queue-empty? 1161 7 ())
(1163 queues #f #f ())
(1164 enqueue! 1163 7 ())
(1165 queues #f #f ())
(1166 queue-front 1165 7 ())
(1167 queues #f #f ())
(1168 dequeue! 1167 7 ())
(1169 queues #f #f ())
(1170 on-queue? 1169 7 ())
(1171 queues #f #f ())
(1172 delete-from-queue-if! 1171 7 ())
(1173 loop 1172 130 ())
(1174 queues #f #f ())
(1175 delete-from-queue! 1174 7 ())
(1176 #f 1175 9 ())
(1177 queues #f #f ())
(1178 queue->list 1177 7 ())
(1179 #f 1178 6 ())
(1180 queues #f #f ())
(1181 queue-length 1180 7 ())
(1182 queues #f #f ())
(1183 conditions #f #f ())
(1184 conditions #f #f ())
(1185 conditions #f #f ())
(1186 conditions #f #f ())
(1187 conditions #f #f ())
(1188 conditions #f #f ())
(1189 conditions #f #f ())
(1190 make-exception 1189 7 ())
(1191 conditions #f #f ())
(1192 conditions #f #f ())
(1193 conditions #f #f ())
(1194 conditions #f #f ())
(1195 conditions #f #f ())
(1196 conditions #f #f ())
(1197 conditions #f #f ())
(1198 conditions #f #f ())
(1199 conditions #f #f ())
(1200 conditions #f #f ())
(1201 conditions #f #f ())
(1202 conditions #f #f ())
(1203 conditions #f #f ())
(1204 conditions #f #f ())
(1205 condition? 1204 7 ())
(1206 conditions #f #f ())
(1207 condition-predicate 1206 7 ())
(1208 #f 1207 6 ())
(1209 conditions #f #f ())
(1210 define-condition-type 1209 7 ())
(1211 #f 1210 17 ())
(1212 conditions #f #f ())
(1213 condition-supertypes 1212 7 ())
(1214 conditions #f #f ())
(1215 session-data #f #f ())
(1216 make-session-data-slot! 1215 7 ())
(1217 session-data #f #f ())
(1218 session-data-ref 1217 7 ())
(1219 session-data #f #f ())
(1220 session-data-set! 1219 7 ())
(1221 session-data #f #f ())
(1222 initialize-session-data! 1221 7 ())
(1223 session-data #f #f ())
(1224 interrupts #f #f ())
(1225 #f 1224 11 ())
(1226 interrupts #f #f ())
(1227 interrupts #f #f ())
(1228 interrupts #f #f ())
(1229 interrupts #f #f ())
(1230 enabled-interrupts 1229 7 ())
(1231 interrupts #f #f ())
(1232 post-gc-handler 1231 7 ())
(1233 #f 1232 6 ())
(1234 #f 1233 42 ())
(1235 #f 1233 58 ())
(1236 #f 1235 7 ())
(1237 #f 1235 21 ())
(1238 interrupts #f #f ())
(1239 initialize-interrupts! 1238 7 ())
(1240 #f 1239 6 ())
(1241 loop##72 1240 32 ())
(1242 #f 1241 32 ())
(1243 #f 1240 78 ())
(1244 #f 1243 11 ())
(1245 interrupts #f #f ())
(1246 set-interrupt-handler! 1245 7 ())
(1247 interrupts #f #f ())
(1248 with-interrupts 1247 7 ())
(1249 #f 1248 13 ())
(1250 interrupts #f #f ())
(1251 with-interrupts-inhibited 1250 7 ())
(1252 interrupts #f #f ())
(1253 with-interrupts-allowed 1252 7 ())
(1254 interrupts #f #f ())
(1255 disable-interrupts! 1254 7 ())
(1256 interrupts #f #f ())
(1257 enable-interrupts! 1256 7 ())
(1258 interrupts #f #f ())
(1259 call-after-gc! 1258 7 ())
(1260 interrupts #f #f ())
(1261 call-before-heap-overflow! 1260 7 ())
(1262 interrupts #f #f ())
(1263 interrupts #f #f ())
(1264 wind #f #f ())
(1265 point-depth 1264 7 ())
(1266 wind #f #f ())
(1267 point-in 1266 7 ())
(1268 wind #f #f ())
(1269 point-out 1268 7 ())
(1270 wind #f #f ())
(1271 point-dynamic-env 1270 7 ())
(1272 wind #f #f ())
(1273 point-parent 1272 7 ())
(1274 wind #f #f ())
(1275 make-point 1274 7 ())
(1276 wind #f #f ())
(1277 wind #f #f ())
(1278 dynamic-wind 1277 7 ())
(1279 wind #f #f ())
(1280 travel-to-point! 1279 7 ())
(1281 wind #f #f ())
(1282 continuation->procedure 1281 7 ())
(1283 #f 1282 6 ())
(1284 #f 1283 60 ())
(1285 wind #f #f ())
(1286 call-with-current-continuation 1285 7 ())
(1287 #f 1286 6 ())
(1288 templates #f #f ())
(1289 template-code 1288 7 ())
(1290 templates #f #f ())
(1291 template-info 1290 7 ())
(1292 templates #f #f ())
(1293 set-template-code! 1292 7 ())
(1294 templates #f #f ())
(1295 set-template-info! 1294 7 ())
(1296 templates #f #f ())
(1297 more-types #f #f ())
(1298 &disclose 1297 48 ())
(1299 more-types #f #f ())
(1300 more-types #f #f ())
(1301 &disclose 1300 52 ())
(1302 more-types #f #f ())
(1303 more-types #f #f ())
(1304 more-types #f #f ())
(1305 more-types #f #f ())
(1306 more-types #f #f ())
(1307 more-types #f #f ())
(1308 more-types #f #f ())
(1309 more-types #f #f ())
(1310 continuations #f #f ())
(1311 &disclose 1310 48 ())
(1312 continuations #f #f ())
(1313 continuations #f #f ())
(1314 continuations #f #f ())
(1315 continuation-cont 1314 7 ())
(1316 continuations #f #f ())
(1317 real-continuation-pc 1316 7 ())
(1318 continuations #f #f ())
(1319 real-continuation-template 1318 7 ())
(1320 continuations #f #f ())
(1321 continuation-env 1320 7 ())
(1322 continuations #f #f ())
(1323 exception-continuation-pc 1322 7 ())
(1324 continuations #f #f ())
(1325 exception-continuation-template 1324 7 ())
(1326 continuations #f #f ())
(1327 exception-continuation-exception 1326 7 ())
(1328 continuations #f #f ())
(1329 exception-continuation? 1328 7 ())
(1330 continuations #f #f ())
(1331 continuation-pc 1330 7 ())
(1332 continuations #f #f ())
(1333 continuation-template 1332 7 ())
(1334 continuations #f #f ())
(1335 continuation-arg 1334 7 ())
(1336 continuations #f #f ())
(1337 continuation-arg-count 1336 7 ())
(1338 continuations #f #f ())
(1339 continuation-parent 1338 7 ())
(1340 loop 1339 105 ())
(1341 continuations #f #f ())
(1342 exceptions #f #f ())
(1343 &disclose 1342 48 ())
(1344 exceptions #f #f ())
(1345 &disclose 1344 52 ())
(1346 exceptions #f #f ())
(1347 report-errors-as-warnings 1346 7 ())
(1348 #f 1347 12 ())
(1349 exceptions #f #f ())
(1350 ignore-errors 1349 7 ())
(1351 #f 1350 6 ())
(1352 #f 1351 6 ())
(1353 exceptions #f #f ())
(1354 continuation-preview 1353 7 ())
(1355 exceptions #f #f ())
(1356 report-utter-lossage 1355 7 ())
(1357 #f 1356 183 ())
(1358 exceptions #f #f ())
(1359 last-resort-condition-handler 1358 7 ())
(1360 #f 1359 15 ())
(1361 #f 1360 23 ())
(1362 exceptions #f #f ())
(1363 initialize-exceptions! 1362 7 ())
(1364 #f 1363 6 ())
(1365 exceptions #f #f ())
(1366 exceptions #f #f ())
(1367 with-handler 1366 7 ())
(1368 exceptions #f #f ())
(1369 really-signal-condition 1368 7 ())
(1370 loop 1369 29 ())
(1371 #f 1370 9 ())
(1372 exceptions #f #f ())
(1373 extend-opcode! 1372 7 ())
(1374 except 1373 6 ())
(1375 #f 1373 32 ())
(1376 exceptions #f #f ())
(1377 #f 1376 11 ())
(1378 exceptions #f #f ())
(1379 exceptions #f #f ())
(1380 signal-exception 1379 7 ())
(1381 exceptions #f #f ())
(1382 define-exception-handler 1381 7 ())
(1383 threads #f #f ())
(1384 threads #f #f ())
(1385 threads #f #f ())
(1386 threads #f #f ())
(1387 threads #f #f ())
(1388 threads #f #f ())
(1389 threads #f #f ())
(1390 threads #f #f ())
(1391 threads #f #f ())
(1392 threads #f #f ())
(1393 #f 1392 11 ())
(1394 threads #f #f ())
(1395 thread-dynamic-env 1394 7 ())
(1396 threads #f #f ())
(1397 set-thread-dynamic-point! 1396 7 ())
(1398 threads #f #f ())
(1399 thread-dynamic-point 1398 7 ())
(1400 threads #f #f ())
(1401 set-thread-continuation! 1400 7 ())
(1402 threads #f #f ())
(1403 thread-continuation 1402 7 ())
(1404 threads #f #f ())
(1405 set-thread-queue! 1404 7 ())
(1406 threads #f #f ())
(1407 thread-queue 1406 7 ())
(1408 threads #f #f ())
(1409 set-thread-arguments! 1408 7 ())
(1410 threads #f #f ())
(1411 thread-arguments 1410 7 ())
(1412 threads #f #f ())
(1413 set-thread-time! 1412 7 ())
(1414 threads #f #f ())
(1415 thread-time 1414 7 ())
(1416 threads #f #f ())
(1417 set-thread-scheduler! 1416 7 ())
(1418 threads #f #f ())
(1419 thread-scheduler 1418 7 ())
(1420 threads #f #f ())
(1421 set-thread-data! 1420 7 ())
(1422 threads #f #f ())
(1423 thread-data 1422 7 ())
(1424 threads #f #f ())
(1425 set-thread-events! 1424 7 ())
(1426 threads #f #f ())
(1427 thread-events 1426 7 ())
(1428 threads #f #f ())
(1429 set-thread-current-task! 1428 7 ())
(1430 threads #f #f ())
(1431 thread-current-task 1430 7 ())
(1432 threads #f #f ())
(1433 thread-uid 1432 7 ())
(1434 threads #f #f ())
(1435 thread-name 1434 7 ())
(1436 threads #f #f ())
(1437 really-make-thread 1436 7 ())
(1438 threads #f #f ())
(1439 threads #f #f ())
(1440 thread? 1439 7 ())
(1441 threads #f #f ())
(1442 compose-continuation 1441 7 ())
(1443 #f 1442 6 ())
(1444 #f 1443 27 ())
(1445 #f 1444 10 ())
(1446 #f 1445 9 ())
(1447 threads #f #f ())
(1448 thunk->continuation 1447 7 ())
(1449 threads #f #f ())
(1450 interrupt-timer-time 1449 7 ())
(1451 threads #f #f ())
(1452 debit-down! 1451 7 ())
(1453 loop 1452 28 ())
(1454 threads #f #f ())
(1455 run-thread 1454 7 ())
(1456 #f 1455 44 ())
(1457 threads #f #f ())
(1458 switch-to-thread 1457 7 ())
(1459 #f 1458 6 ())
(1460 threads #f #f ())
(1461 suspend-to 1460 7 ())
(1462 threads #f #f ())
(1463 suspend 1462 7 ())
(1464 threads #f #f ())
(1465 thread-top-level 1464 7 ())
(1466 thread-start 1465 6 ())
(1467 #f 1466 3 ())
(1468 threads #f #f ())
(1469 make-thread 1468 7 ())
(1470 threads #f #f ())
(1471 all-threads 1470 7 ())
(1472 threads #f #f ())
(1473 thread-uid->thread 1472 7 ())
(1474 loop 1473 27 ())
(1475 threads #f #f ())
(1476 add-event! 1475 7 ())
(1477 threads #f #f ())
(1478 enqueue-thread! 1477 7 ())
(1479 threads #f #f ())
(1480 dequeue-thread! 1479 7 ())
(1481 threads #f #f ())
(1482 remove-thread-from-queue! 1481 7 ())
(1483 threads #f #f ())
(1484 event-pending? 1483 7 ())
(1485 threads #f #f ())
(1486 min 1485 7 ())
(1487 threads #f #f ())
(1488 schedule-interrupt! 1487 7 ())
(1489 threads #f #f ())
(1490 run-next-thread 1489 7 ())
(1491 threads #f #f ())
(1492 debit-thread-times-and-run! 1491 7 ())
(1493 loop 1492 41 ())
(1494 threads #f #f ())
(1495 find-and-run-next-thread 1494 7 ())
(1496 loop 1495 35 ())
(1497 threads #f #f ())
(1498 run 1497 7 ())
(1499 threads #f #f ())
(1500 handle-timer-interrupt 1499 7 ())
(1501 threads #f #f ())
(1502 exit 1501 7 ())
(1503 threads #f #f ())
(1504 wait 1503 7 ())
(1505 threads #f #f ())
(1506 waiting? 1505 7 ())
(1507 threads #f #f ())
(1508 block 1507 7 ())
(1509 threads #f #f ())
(1510 relinquish-timeslice 1509 7 ())
(1511 threads #f #f ())
(1512 running? 1511 7 ())
(1513 loop 1512 25 ())
(1514 threads #f #f ())
(1515 interrupt-thread 1514 7 ())
(1516 threads #f #f ())
(1517 propogate-upcall 1516 7 ())
(1518 #f 1517 62 ())
(1519 threads #f #f ())
(1520 upcall 1519 7 ())
(1521 threads #f #f ())
(1522 kill-thread! 1521 7 ())
(1523 #f 1522 9 ())
(1524 threads #f #f ())
(1525 get-next-event! 1524 7 ())
(1526 threads #f #f ())
(1527 schedule-wakeup 1526 7 ())
(1528 threads #f #f ())
(1529 schedule-event 1528 7 ())
(1530 threads #f #f ())
(1531 show-running 1530 7 ())
(1532 loop##111 1531 16 ())
(1533 threads #f #f ())
(1534 spawn-on-scheduler 1533 7 ())
(1535 threads #f #f ())
(1536 spawn 1535 7 ())
(1537 threads #f #f ())
(1538 root-scheduler 1537 7 ())
(1539 threads #f #f ())
(1540 spawn-on-root 1539 7 ())
(1541 threads #f #f ())
(1542 make-ready 1541 7 ())
(1543 threads #f #f ())
(1544 cancel-timer-interrupt! 1543 7 ())
(1545 threads #f #f ())
(1546 real-time 1545 7 ())
(1547 threads #f #f ())
(1548 start-multitasking 1547 7 ())
(1549 #f 1548 6 ())
(1550 #f 1549 6 ())
(1551 #f 1549 11 ())
(1552 #f 1551 7 ())
(1553 #f 1552 6 ())
(1554 #f 1552 11 ())
(1555 threads #f #f ())
(1556 with-threads 1555 7 ())
(1557 #f 1556 10 ())
(1558 #f 1557 3 ())
(1559 #f 1557 8 ())
(1560 #f 1557 13 ())
(1561 threads #f #f ())
(1562 terminate-current-thread 1561 7 ())
(1563 threads #f #f ())
(1564 insert 1563 7 ())
(1565 threads #f #f ())
(1566 sleep 1565 7 ())
(1567 #f 1566 71 ())
(1568 threads #f #f ())
(1569 wake-some-threads 1568 7 ())
(1570 loop 1569 46 ())
(1571 threads #f #f ())
(1572 threads #f #f ())
(1573 threads #f #f ())
(1574 threads #f #f ())
(1575 locks #f #f ())
(1576 set-lock-owner-uid! 1575 7 ())
(1577 locks #f #f ())
(1578 lock-owner-uid 1577 7 ())
(1579 locks #f #f ())
(1580 lock-queue 1579 7 ())
(1581 locks #f #f ())
(1582 lock-uid 1581 7 ())
(1583 locks #f #f ())
(1584 really-make-lock 1583 7 ())
(1585 locks #f #f ())
(1586 locks #f #f ())
(1587 lock? 1586 7 ())
(1588 locks #f #f ())
(1589 make-lock 1588 7 ())
(1590 locks #f #f ())
(1591 obtain-lock 1590 7 ())
(1592 #f 1591 10 ())
(1593 locks #f #f ())
(1594 maybe-obtain-lock 1593 7 ())
(1595 #f 1594 10 ())
(1596 locks #f #f ())
(1597 release-lock 1596 7 ())
(1598 #f 1597 10 ())
(1599 locks #f #f ())
(1600 i/o #f #f ())
(1601 i/o #f #f ())
(1602 i/o #f #f ())
(1603 i/o #f #f ())
(1604 #f 1603 11 ())
(1605 #f 1603 16 ())
(1606 #f 1603 21 ())
(1607 i/o #f #f ())
(1608 i/o #f #f ())
(1609 i/o #f #f ())
(1610 i/o #f #f ())
(1611 i/o #f #f ())
(1612 i/o #f #f ())
(1613 i/o #f #f ())
(1614 i/o #f #f ())
(1615 i/o #f #f ())
(1616 i/o #f #f ())
(1617 &disclose 1616 52 ())
(1618 i/o #f #f ())
(1619 &disclose 1618 52 ())
(1620 i/o #f #f ())
(1621 port-handler-discloser 1620 7 ())
(1622 i/o #f #f ())
(1623 port-handler-close 1622 7 ())
(1624 i/o #f #f ())
(1625 port-handler-buffer-proc 1624 7 ())
(1626 i/o #f #f ())
(1627 make-port-handler 1626 7 ())
(1628 i/o #f #f ())
(1629 i/o #f #f ())
(1630 port-handler? 1629 7 ())
(1631 i/o #f #f ())
(1632 disclose-port 1631 7 ())
(1633 i/o #f #f ())
(1634 obtain-port-lock 1633 7 ())
(1635 i/o #f #f ())
(1636 maybe-obtain-port-lock 1635 7 ())
(1637 i/o #f #f ())
(1638 release-port-lock 1637 7 ())
(1639 i/o #f #f ())
(1640 one-arg-proc->handler 1639 7 ())
(1641 #f 1640 6 ())
(1642 i/o #f #f ())
(1643 fill-port-buffer! 1642 7 ())
(1644 i/o #f #f ())
(1645 read-char-handler 1644 7 ())
(1646 #f 1645 6 ())
(1647 i/o #f #f ())
(1648 two-arg-proc->handler 1647 7 ())
(1649 #f 1648 6 ())
(1650 i/o #f #f ())
(1651 empty-port-buffer! 1650 7 ())
(1652 i/o #f #f ())
(1653 write-char-handler 1652 7 ())
(1654 i/o #f #f ())
(1655 initialize-i/o-handlers! 1654 7 ())
(1656 i/o #f #f ())
(1657 open-input-port? 1656 7 ())
(1658 i/o #f #f ())
(1659 make-input-port-closed! 1658 7 ())
(1660 i/o #f #f ())
(1661 close-input-port 1660 7 ())
(1662 i/o #f #f ())
(1663 open-output-port? 1662 7 ())
(1664 i/o #f #f ())
(1665 really-force-output 1664 7 ())
(1666 i/o #f #f ())
(1667 make-output-port-closed! 1666 7 ())
(1668 i/o #f #f ())
(1669 close-output-port 1668 7 ())
(1670 i/o #f #f ())
(1671 open-port? 1670 7 ())
(1672 i/o #f #f ())
(1673 current-input-port 1672 7 ())
(1674 i/o #f #f ())
(1675 input-port-option 1674 7 ())
(1676 i/o #f #f ())
(1677 char-ready? 1676 7 ())
(1678 i/o #f #f ())
(1679 real-char-ready? 1678 7 ())
(1680 i/o #f #f ())
(1681 okay-limits? 1680 7 ())
(1682 i/o #f #f ())
(1683 read-more 1682 7 ())
(1684 i/o #f #f ())
(1685 buffer-length 1684 7 ())
(1686 i/o #f #f ())
(1687 really-read-block 1686 7 ())
(1688 i/o #f #f ())
(1689 read-block 1688 7 ())
(1690 i/o #f #f ())
(1691 write-unbuffered-block 1690 7 ())
(1692 loop##127 1691 40 ())
(1693 i/o #f #f ())
(1694 write-buffered-block 1693 7 ())
(1695 i/o #f #f ())
(1696 write-block 1695 7 ())
(1697 i/o #f #f ())
(1698 write-string 1697 7 ())
(1699 i/o #f #f ())
(1700 force-output 1699 7 ())
(1701 i/o #f #f ())
(1702 force-output-if-open 1701 7 ())
(1703 i/o #f #f ())
(1704 okay-buffer? 1703 7 ())
(1705 i/o #f #f ())
(1706 make-input-port 1705 7 ())
(1707 i/o #f #f ())
(1708 make-output-port 1707 7 ())
(1709 i/o #f #f ())
(1710 make-unbuffered-output-port 1709 7 ())
(1711 i/o #f #f ())
(1712 make-null-output-port 1711 7 ())
(1713 i/o #f #f ())
(1714 initialize-output-port-list! 1713 7 ())
(1715 i/o #f #f ())
(1716 periodically-force-output! 1715 7 ())
(1717 i/o #f #f ())
(1718 make-forcing-thunk 1717 7 ())
(1719 #f 1718 6 ())
(1720 #f 1719 7 ())
(1721 #f 1719 46 ())
(1722 i/o #f #f ())
(1723 output-port-forcers 1722 7 ())
(1724 loop 1723 30 ())
(1725 i/o #f #f ())
(1726 periodically-flushed-ports 1725 7 ())
(1727 loop 1726 35 ())
(1728 i/o #f #f ())
(1729 current-output-port 1728 7 ())
(1730 i/o #f #f ())
(1731 current-error-port 1730 7 ())
(1732 i/o #f #f ())
(1733 current-noise-port 1732 7 ())
(1734 i/o #f #f ())
(1735 with-current-ports 1734 7 ())
(1736 i/o #f #f ())
(1737 initialize-i/o 1736 7 ())
(1738 i/o #f #f ())
(1739 call-with-current-input-port 1738 7 ())
(1740 i/o #f #f ())
(1741 call-with-current-output-port 1740 7 ())
(1742 i/o #f #f ())
(1743 call-with-current-noise-port 1742 7 ())
(1744 i/o #f #f ())
(1745 silently 1744 7 ())
(1746 i/o #f #f ())
(1747 output-port-option 1746 7 ())
(1748 i/o #f #f ())
(1749 newline 1748 7 ())
(1750 i/o #f #f ())
(1751 i/o #f #f ())
(1752 i/o #f #f ())
(1753 writing #f #f ())
(1754 display 1753 7 ())
(1755 recur 1754 36 ())
(1756 writing #f #f ())
(1757 display-type-name 1756 7 ())
(1758 loop##133 1757 90 ())
(1759 writing #f #f ())
(1760 write-other 1759 7 ())
(1761 #f 1760 73 ())
(1762 writing #f #f ())
(1763 write-vector 1762 7 ())
(1764 loop 1763 76 ())
(1765 writing #f #f ())
(1766 quotation? 1765 7 ())
(1767 writing #f #f ())
(1768 write-list 1767 7 ())
(1769 loop 1768 92 ())
(1770 writing #f #f ())
(1771 write-string-literal 1770 7 ())
(1772 loop##137 1771 26 ())
(1773 writing #f #f ())
(1774 character-name 1773 7 ())
(1775 writing #f #f ())
(1776 write-char-literal 1775 7 ())
(1777 writing #f #f ())
(1778 write-number 1777 7 ())
(1779 writing #f #f ())
(1780 write-boolean 1779 7 ())
(1781 writing #f #f ())
(1782 recurring-write 1781 7 ())
(1783 writing #f #f ())
(1784 write 1783 7 ())
(1785 recur 1784 36 ())
(1786 reading #f #f ())
(1787 loop##139 1786 40 ())
(1788 reading #f #f ())
(1789 reading #f #f ())
(1790 number-sharp-macro 1789 7 ())
(1791 #f 1789 15 ())
(1792 reading #f #f ())
(1793 #f 1792 11 ())
(1794 reading #f #f ())
(1795 #f 1794 11 ())
(1796 reading #f #f ())
(1797 #f 1796 11 ())
(1798 reading #f #f ())
(1799 #f 1798 11 ())
(1800 reading #f #f ())
(1801 #f 1800 13 ())
(1802 reading #f #f ())
(1803 #f 1802 15 ())
(1804 reading #f #f ())
(1805 #f 1804 15 ())
(1806 loop 1805 25 ())
(1807 reading #f #f ())
(1808 #f 1807 15 ())
(1809 reading #f #f ())
(1810 #f 1809 15 ())
(1811 reading #f #f ())
(1812 #f 1811 15 ())
(1813 reading #f #f ())
(1814 #f 1813 15 ())
(1815 reading #f #f ())
(1816 reading #f #f ())
(1817 sub-read-constituent 1816 7 ())
(1818 #f 1816 15 ())
(1819 reading #f #f ())
(1820 sub-read-whitespace 1819 7 ())
(1821 #f 1819 15 ())
(1822 reading #f #f ())
(1823 reading #f #f ())
(1824 #f 1823 11 ())
(1825 reading #f #f ())
(1826 reading #f #f ())
(1827 reading #f #f ())
(1828 reading #f #f ())
(1829 reader-token? 1828 7 ())
(1830 reading #f #f ())
(1831 reading-error 1830 7 ())
(1832 reading #f #f ())
(1833 sub-read 1832 7 ())
(1834 reading #f #f ())
(1835 read 1834 7 ())
(1836 loop 1835 33 ())
(1837 reading #f #f ())
(1838 sub-read-carefully 1837 7 ())
(1839 reading #f #f ())
(1840 make-reader-token 1839 7 ())
(1841 reading #f #f ())
(1842 set-standard-syntax! 1841 7 ())
(1843 reading #f #f ())
(1844 set-standard-read-macro! 1843 7 ())
(1845 reading #f #f ())
(1846 sub-read-list 1845 7 ())
(1847 recur 1846 56 ())
(1848 reading #f #f ())
(1849 gobble-line 1848 7 ())
(1850 loop 1849 15 ())
(1851 reading #f #f ())
(1852 define-sharp-macro 1851 7 ())
(1853 reading #f #f ())
(1854 preferred-case 1853 7 ())
(1855 reading #f #f ())
(1856 sub-read-token 1855 7 ())
(1857 loop 1856 42 ())
(1858 reading #f #f ())
(1859 parse-token 1858 7 ())
(1860 reading #f #f ())
(1861 reading #f #f ())
(1862 channels #f #f ())
(1863 close-output-channel 1862 7 ())
(1864 channels #f #f ())
(1865 close-input-channel 1864 7 ())
(1866 channels #f #f ())
(1867 open-output-channel 1866 7 ())
(1868 channels #f #f ())
(1869 open-input-channel 1868 7 ())
(1870 channels #f #f ())
(1871 output-channel? 1870 7 ())
(1872 channels #f #f ())
(1873 input-channel? 1872 7 ())
(1874 channel-i/o #f #f ())
(1875 fetch-channel-wait-queue! 1874 7 ())
(1876 loop 1875 113 ())
(1877 channel-i/o #f #f ())
(1878 add-channel-wait-queue! 1877 7 ())
(1879 channel-i/o #f #f ())
(1880 channel-i/o #f #f ())
(1881 decrement-channel-wait-count! 1880 7 ())
(1882 channel-i/o #f #f ())
(1883 increment-channel-wait-count! 1882 7 ())
(1884 channel-i/o #f #f ())
(1885 channel-wait-count 1884 7 ())
(1886 channel-i/o #f #f ())
(1887 channel-i/o #f #f ())
(1888 #f 1887 11 ())
(1889 channel-i/o #f #f ())
(1890 #f 1889 11 ())
(1891 channel-i/o #f #f ())
(1892 steal-channel! 1891 7 ())
(1893 channel-i/o #f #f ())
(1894 nothing 1893 7 ())
(1895 channel-i/o #f #f ())
(1896 wait-for-channel 1895 7 ())
(1897 #f 1896 135 ())
(1898 channel-i/o #f #f ())
(1899 waiting-for-i/o? 1898 7 ())
(1900 channel-i/o #f #f ())
(1901 i/o-completion-handler 1900 7 ())
(1902 channel-i/o #f #f ())
(1903 initialize-channel-i/o! 1902 7 ())
(1904 channel-i/o #f #f ())
(1905 really-steal-channel-port! 1904 7 ())
(1906 #f 1905 154 ())
(1907 channel-i/o #f #f ())
(1908 steal-channel-port! 1907 7 ())
(1909 channel-i/o #f #f ())
(1910 force-channel-output-ports! 1909 7 ())
(1911 #f 1910 3 ())
(1912 channel-i/o #f #f ())
(1913 with-output-to-file 1912 7 ())
(1914 #f 1913 9 ())
(1915 channel-i/o #f #f ())
(1916 with-input-from-file 1915 7 ())
(1917 #f 1916 9 ())
(1918 channel-i/o #f #f ())
(1919 call-with-output-file 1918 7 ())
(1920 channel-i/o #f #f ())
(1921 call-with-input-file 1920 7 ())
(1922 channel-i/o #f #f ())
(1923 open-output-file 1922 7 ())
(1924 channel-i/o #f #f ())
(1925 open-input-file 1924 7 ())
(1926 channel-i/o #f #f ())
(1927 port->channel 1926 7 ())
(1928 channel-i/o #f #f ())
(1929 channel-cell? 1928 7 ())
(1930 channel-i/o #f #f ())
(1931 channel-cell-ref 1930 7 ())
(1932 channel-i/o #f #f ())
(1933 channel-cell-closer 1932 7 ())
(1934 channel-i/o #f #f ())
(1935 make-channel-cell 1934 7 ())
(1936 channel-i/o #f #f ())
(1937 channel-i/o #f #f ())
(1938 maybe-force-output 1937 7 ())
(1939 #f 1938 28 ())
(1940 channel-i/o #f #f ())
(1941 real-output-channel->port 1940 7 ())
(1942 channel-i/o #f #f ())
(1943 output-channel+closer->port 1942 7 ())
(1944 channel-i/o #f #f ())
(1945 output-channel->port 1944 7 ())
(1946 channel-i/o #f #f ())
(1947 make-unbuffered-output-channel-handler 1946 7 ())
(1948 #f 1947 19 ())
(1949 #f 1947 24 ())
(1950 #f 1947 29 ())
(1951 channel-i/o #f #f ())
(1952 #f 1951 11 ())
(1953 #f 1951 16 ())
(1954 #f 1951 21 ())
(1955 channel-i/o #f #f ())
(1956 real-input-channel->port 1955 7 ())
(1957 channel-i/o #f #f ())
(1958 input-channel+closer->port 1957 7 ())
(1959 channel-i/o #f #f ())
(1960 input-channel->port 1959 7 ())
(1961 channel-i/o #f #f ())
(1962 #f 1961 11 ())
(1963 #f 1961 16 ())
(1964 #f 1961 21 ())
(1965 scheme-level-2 #f #f ())
(1966 features #f #f ())
(1967 tables #f #f ())
(1968 tables #f #f ())
(1969 tables #f #f ())
(1970 tables #f #f ())
(1971 make-table 1970 32 ())
(1972 tables #f #f ())
(1973 tables #f #f ())
(1974 tables #f #f ())
(1975 tables #f #f ())
(1976 tables #f #f ())
(1977 set-table-size! 1976 7 ())
(1978 tables #f #f ())
(1979 table-size 1978 7 ())
(1980 tables #f #f ())
(1981 set-table-data! 1980 7 ())
(1982 tables #f #f ())
(1983 table-data 1982 7 ())
(1984 tables #f #f ())
(1985 set-table-ref-procedure! 1984 7 ())
(1986 tables #f #f ())
(1987 table-ref-procedure 1986 7 ())
(1988 tables #f #f ())
(1989 set-table-set!-procedure! 1988 7 ())
(1990 tables #f #f ())
(1991 table-set!-procedure 1990 7 ())
(1992 tables #f #f ())
(1993 really-make-table 1992 7 ())
(1994 tables #f #f ())
(1995 tables #f #f ())
(1996 table? 1995 7 ())
(1997 tables #f #f ())
(1998 table-ref 1997 7 ())
(1999 tables #f #f ())
(2000 table-set! 1999 7 ())
(2001 tables #f #f ())
(2002 next-table-size 2001 7 ())
(2003 tables #f #f ())
(2004 delete-entry! 2003 7 ())
(2005 loop 2004 40 ())
(2006 tables #f #f ())
(2007 new-entry 2006 7 ())
(2008 tables #f #f ())
(2009 make-linear-table-set! 2008 7 ())
(2010 #f 2009 6 ())
(2011 tables #f #f ())
(2012 table-expand-table! 2011 7 ())
(2013 tables #f #f ())
(2014 table-enter-alist! 2013 7 ())
(2015 loop##166 2014 26 ())
(2016 tables #f #f ())
(2017 make-hash-table-ref 2016 7 ())
(2018 #f 2017 6 ())
(2019 tables #f #f ())
(2020 expand-hash-table! 2019 7 ())
(2021 loop##168 2020 52 ())
(2022 tables #f #f ())
(2023 make-hash-table-set! 2022 7 ())
(2024 #f 2023 6 ())
(2025 tables #f #f ())
(2026 make->hash-table 2025 7 ())
(2027 #f 2026 41 ())
(2028 tables #f #f ())
(2029 make-linear-table-ref 2028 7 ())
(2030 #f 2029 6 ())
(2031 tables #f #f ())
(2032 assoc->table-maker 2031 7 ())
(2033 #f 2032 60 ())
(2034 tables #f #f ())
(2035 make-assoc 2034 7 ())
(2036 #f 2035 20 ())
(2037 loop 2036 18 ())
(2038 tables #f #f ())
(2039 make-table-maker 2038 7 ())
(2040 tables #f #f ())
(2041 alist-walk 2040 7 ())
(2042 loop##170 2041 11 ())
(2043 tables #f #f ())
(2044 really-table-walk 2043 7 ())
(2045 loop##173 2044 63 ())
(2046 tables #f #f ())
(2047 table-walk 2046 7 ())
(2048 #f 2047 6 ())
(2049 tables #f #f ())
(2050 make-table-immutable! 2049 7 ())
(2051 tables #f #f ())
(2052 table->entry-list 2051 7 ())
(2053 #f 2052 17 ())
(2054 tables #f #f ())
(2055 default-table-hash-function 2054 7 ())
(2056 tables #f #f ())
(2057 default-table-assoc 2056 7 ())
(2058 tables #f #f ())
(2059 symbol-hash 2058 7 ())
(2060 tables #f #f ())
(2061 tables #f #f ())
(2062 weak #f #f ())
(2063 walk-population 2062 7 ())
(2064 #f 2063 6 ())
(2065 weak #f #f ())
(2066 population->list 2065 7 ())
(2067 weak #f #f ())
(2068 population-reduce 2067 7 ())
(2069 loop##175 2068 11 ())
(2070 weak #f #f ())
(2071 weak-memq 2070 7 ())
(2072 weak #f #f ())
(2073 add-to-population! 2072 7 ())
(2074 weak #f #f ())
(2075 make-population 2074 7 ())
(2076 meta-types #f #f ())
(2077 meta-types #f #f ())
(2078 meta-types #f #f ())
(2079 meta-types #f #f ())
(2080 meta-types #f #f ())
(2081 meta-types #f #f ())
(2082 meta-types #f #f ())
(2083 meta-types #f #f ())
(2084 meta-types #f #f ())
(2085 meta-types #f #f ())
(2086 meta-types #f #f ())
(2087 meta-types #f #f ())
(2088 meta-types #f #f ())
(2089 meta-types #f #f ())
(2090 meta-types #f #f ())
(2091 meta-types #f #f ())
(2092 meta-types #f #f ())
(2093 meta-types #f #f ())
(2094 meta-types #f #f ())
(2095 meta-types #f #f ())
(2096 meta-types #f #f ())
(2097 meta-types #f #f ())
(2098 meta-types #f #f ())
(2099 meta-types #f #f ())
(2100 meta-types #f #f ())
(2101 meta-types #f #f ())
(2102 meta-types #f #f ())
(2103 meta-types #f #f ())
(2104 meta-types #f #f ())
(2105 meta-types #f #f ())
(2106 loop 2105 28 ())
(2107 meta-types #f #f ())
(2108 meta-types #f #f ())
(2109 meta-types #f #f ())
(2110 meta-types #f #f ())
(2111 meta-types #f #f ())
(2112 meta-types #f #f ())
(2113 meta-types #f #f ())
(2114 meta-types #f #f ())
(2115 meta-types #f #f ())
(2116 meta-types #f #f ())
(2117 meta-types #f #f ())
(2118 meta-types #f #f ())
(2119 meta-types #f #f ())
(2120 meta-types #f #f ())
(2121 meta-types #f #f ())
(2122 meta-types #f #f ())
(2123 meta-types #f #f ())
(2124 meta-types #f #f ())
(2125 meta-types #f #f ())
(2126 meta-types #f #f ())
(2127 #f 2126 11 ())
(2128 meta-types #f #f ())
(2129 type-mask 2128 7 ())
(2130 meta-types #f #f ())
(2131 type-more 2130 7 ())
(2132 meta-types #f #f ())
(2133 type-info 2132 7 ())
(2134 meta-types #f #f ())
(2135 really-make-type 2134 7 ())
(2136 meta-types #f #f ())
(2137 meta-types #f #f ())
(2138 meta-type? 2137 7 ())
(2139 meta-types #f #f ())
(2140 make-type 2139 7 ())
(2141 meta-types #f #f ())
(2142 set-type-name! 2141 7 ())
(2143 meta-types #f #f ())
(2144 make-other-type 2143 7 ())
(2145 meta-types #f #f ())
(2146 name->type 2145 7 ())
(2147 meta-types #f #f ())
(2148 new-type-bit 2147 7 ())
(2149 meta-types #f #f ())
(2150 mask->type 2149 7 ())
(2151 meta-types #f #f ())
(2152 bottom-type? 2151 7 ())
(2153 meta-types #f #f ())
(2154 new-atomic-type 2153 7 ())
(2155 meta-types #f #f ())
(2156 named-atomic-type 2155 7 ())
(2157 meta-types #f #f ())
(2158 empty-rail-type? 2157 7 ())
(2159 meta-types #f #f ())
(2160 rest-type? 2159 7 ())
(2161 meta-types #f #f ())
(2162 same-type? 2161 7 ())
(2163 meta-types #f #f ())
(2164 head-type 2163 7 ())
(2165 meta-types #f #f ())
(2166 optional-type? 2165 7 ())
(2167 meta-types #f #f ())
(2168 rail-type 2167 7 ())
(2169 meta-types #f #f ())
(2170 make-optional-type 2169 7 ())
(2171 meta-types #f #f ())
(2172 make-rest-type 2171 7 ())
(2173 meta-types #f #f ())
(2174 head-type-really 2173 7 ())
(2175 meta-types #f #f ())
(2176 tail-type 2175 7 ())
(2177 meta-types #f #f ())
(2178 value-type? 2177 7 ())
(2179 meta-types #f #f ())
(2180 other-type-info 2179 7 ())
(2181 meta-types #f #f ())
(2182 restrictive? 2181 7 ())
(2183 meta-types #f #f ())
(2184 make-procedure-type 2183 7 ())
(2185 meta-types #f #f ())
(2186 procedure-type-domain 2185 7 ())
(2187 meta-types #f #f ())
(2188 procedure-type-codomain 2187 7 ())
(2189 meta-types #f #f ())
(2190 meet-procedure 2189 7 ())
(2191 meta-types #f #f ())
(2192 meet-rail 2191 7 ())
(2193 meta-types #f #f ())
(2194 meet-type 2193 7 ())
(2195 meta-types #f #f ())
(2196 subtype? 2195 7 ())
(2197 meta-types #f #f ())
(2198 meet-procedure? 2197 7 ())
(2199 meta-types #f #f ())
(2200 meet? 2199 7 ())
(2201 meta-types #f #f ())
(2202 procedure-type? 2201 7 ())
(2203 meta-types #f #f ())
(2204 join-procedure 2203 7 ())
(2205 meta-types #f #f ())
(2206 join-rail 2205 7 ())
(2207 meta-types #f #f ())
(2208 join-type 2207 7 ())
(2209 meta-types #f #f ())
(2210 procedure-type 2209 7 ())
(2211 meta-types #f #f ())
(2212 sexp->values-type 2211 7 ())
(2213 meta-types #f #f ())
(2214 sexp->type 2213 7 ())
(2215 #f 2214 285 ())
(2216 #f 2214 349 ())
(2217 meta-types #f #f ())
(2218 disjoin-rest 2217 7 ())
(2219 meta-types #f #f ())
(2220 disjoin-type 2219 7 ())
(2221 loop##194 2220 262 ())
(2222 meta-types #f #f ())
(2223 atomic-type->sexp 2222 7 ())
(2224 meta-types #f #f ())
(2225 rail-type->sexp 2224 7 ())
(2226 recur 2225 25 ())
(2227 meta-types #f #f ())
(2228 type->sexp 2227 7 ())
(2229 #f 2228 141 ())
(2230 meta-types #f #f ())
(2231 make-some-values-type 2230 7 ())
(2232 meta-types #f #f ())
(2233 fixed-arity-procedure-type? 2232 7 ())
(2234 loop 2233 43 ())
(2235 meta-types #f #f ())
(2236 procedure-type-arity 2235 7 ())
(2237 loop##197 2236 11 ())
(2238 meta-types #f #f ())
(2239 procedure-type-argument-types 2238 7 ())
(2240 recur 2239 28 ())
(2241 meta-types #f #f ())
(2242 variable-type 2241 7 ())
(2243 meta-types #f #f ())
(2244 variable-type? 2243 7 ())
(2245 meta-types #f #f ())
(2246 compatible-types? 2245 7 ())
(2247 meta-types #f #f ())
(2248 meta-types #f #f ())
(2249 meta-types #f #f ())
(2250 interfaces #f #f ())
(2251 #f 2250 7 ())
(2252 interfaces #f #f ())
(2253 ref-method 2252 7 ())
(2254 interfaces #f #f ())
(2255 walk-method 2254 7 ())
(2256 interfaces #f #f ())
(2257 interface-clients 2256 7 ())
(2258 interfaces #f #f ())
(2259 set-interface-name! 2258 7 ())
(2260 interfaces #f #f ())
(2261 interface-name 2260 7 ())
(2262 interfaces #f #f ())
(2263 really-make-interface 2262 7 ())
(2264 interfaces #f #f ())
(2265 interfaces #f #f ())
(2266 interface? 2265 7 ())
(2267 interfaces #f #f ())
(2268 interface-ref 2267 7 ())
(2269 interfaces #f #f ())
(2270 for-each-declaration 2269 7 ())
(2271 interfaces #f #f ())
(2272 note-reference-to-interface! 2271 7 ())
(2273 interfaces #f #f ())
(2274 make-interface 2273 7 ())
(2275 interfaces #f #f ())
(2276 really-make-simple-interface 2275 7 ())
(2277 #f 2276 6 ())
(2278 #f 2276 11 ())
(2279 interfaces #f #f ())
(2280 make-simple-interface 2279 7 ())
(2281 #f 2280 23 ())
(2282 #f 2281 66 ())
(2283 interfaces #f #f ())
(2284 make-compound-interface 2283 7 ())
(2285 #f 2284 12 ())
(2286 loop 2285 18 ())
(2287 #f 2284 17 ())
(2288 #f 2287 6 ())
(2289 #f 2284 38 ())
(2290 interfaces #f #f ())
(2291 note-interface-name! 2290 7 ())
(2292 bindings #f #f ())
(2293 bindings #f #f ())
(2294 binding-type 2293 7 ())
(2295 bindings #f #f ())
(2296 binding-place 2295 7 ())
(2297 bindings #f #f ())
(2298 binding-static 2297 7 ())
(2299 bindings #f #f ())
(2300 binding-path 2299 7 ())
(2301 bindings #f #f ())
(2302 set-binding-place! 2301 7 ())
(2303 bindings #f #f ())
(2304 make-binding 2303 7 ())
(2305 bindings #f #f ())
(2306 add-path 2305 7 ())
(2307 bindings #f #f ())
(2308 clobber-binding! 2307 7 ())
(2309 bindings #f #f ())
(2310 impose-type 2309 7 ())
(2311 bindings #f #f ())
(2312 forget-integration 2311 7 ())
(2313 bindings #f #f ())
(2314 same-denotation? 2313 7 ())
(2315 bindings #f #f ())
(2316 follow-forwarding-pointers 2315 7 ())
(2317 bindings #f #f ())
(2318 maybe-fix-place! 2317 7 ())
(2319 names #f #f ())
(2320 #f 2319 7 ())
(2321 names #f #f ())
(2322 transform-procedure 2321 7 ())
(2323 names #f #f ())
(2324 transform-env 2323 7 ())
(2325 names #f #f ())
(2326 transform-type 2325 7 ())
(2327 names #f #f ())
(2328 transform-aux-names 2327 7 ())
(2329 names #f #f ())
(2330 transform-source 2329 7 ())
(2331 names #f #f ())
(2332 transform-id 2331 7 ())
(2333 names #f #f ())
(2334 really-make-transform 2333 7 ())
(2335 names #f #f ())
(2336 names #f #f ())
(2337 names #f #f ())
(2338 #f 2337 11 ())
(2339 names #f #f ())
(2340 generated-symbol 2339 7 ())
(2341 names #f #f ())
(2342 generated-token 2341 7 ())
(2343 names #f #f ())
(2344 generated-env 2343 7 ())
(2345 names #f #f ())
(2346 generated-parent-name 2345 7 ())
(2347 names #f #f ())
(2348 make-generated 2347 7 ())
(2349 names #f #f ())
(2350 names #f #f ())
(2351 generated? 2350 7 ())
(2352 names #f #f ())
(2353 name? 2352 7 ())
(2354 names #f #f ())
(2355 generate-name 2354 7 ())
(2356 names #f #f ())
(2357 generated-uid 2356 7 ())
(2358 names #f #f ())
(2359 name->symbol 2358 7 ())
(2360 names #f #f ())
(2361 name-hash 2360 7 ())
(2362 names #f #f ())
(2363 desyntaxify 2362 7 ())
(2364 loop 2363 267 ())
(2365 names #f #f ())
(2366 make-qualified 2365 7 ())
(2367 names #f #f ())
(2368 qualified? 2367 7 ())
(2369 names #f #f ())
(2370 qualified-parent-name 2369 7 ())
(2371 names #f #f ())
(2372 qualified-symbol 2371 7 ())
(2373 names #f #f ())
(2374 lookup 2373 7 ())
(2375 names #f #f ())
(2376 transform? 2375 7 ())
(2377 names #f #f ())
(2378 qualify-parent 2377 7 ())
(2379 recur 2378 18 ())
(2380 names #f #f ())
(2381 name->qualified 2380 7 ())
(2382 names #f #f ())
(2383 make-transform 2382 7 ())
(2384 names #f #f ())
(2385 name->source-name 2384 7 ())
(2386 names #f #f ())
(2387 make-keyword-comparator 2386 7 ())
(2388 #f 2387 6 ())
(2389 names #f #f ())
(2390 make-name-generator 2389 7 ())
(2391 #f 2390 13 ())
(2392 names #f #f ())
(2393 bind-aliases 2392 7 ())
(2394 #f 2393 36 ())
(2395 names #f #f ())
(2396 maybe-apply-macro-transform 2395 7 ())
(2397 names #f #f ())
(2398 apply-inline-transform 2397 7 ())
(2399 names #f #f ())
(2400 compiler-envs #f #f ())
(2401 compiler-envs #f #f ())
(2402 compiler-envs #f #f ())
(2403 compiler-envs #f #f ())
(2404 compiler-envs #f #f ())
(2405 lookup 2404 7 ())
(2406 compiler-envs #f #f ())
(2407 bind1 2406 7 ())
(2408 #f 2407 6 ())
(2409 compiler-envs #f #f ())
(2410 bind 2409 7 ())
(2411 compiler-envs #f #f ())
(2412 bindrec 2411 7 ())
(2413 #f 2412 17 ())
(2414 compiler-envs #f #f ())
(2415 make-compiler-env 2414 7 ())
(2416 #f 2415 6 ())
(2417 compiler-envs #f #f ())
(2418 environment-macro-eval 2417 7 ())
(2419 compiler-envs #f #f ())
(2420 environment-define! 2419 7 ())
(2421 compiler-envs #f #f ())
(2422 extract-package-from-environment 2421 7 ())
(2423 compiler-envs #f #f ())
(2424 bind-source-file-name 2423 7 ())
(2425 compiler-envs #f #f ())
(2426 source-file-name 2425 7 ())
(2427 thingies #f #f ())
(2428 thingie-binding 2427 7 ())
(2429 thingies #f #f ())
(2430 thingie-name 2429 7 ())
(2431 thingies #f #f ())
(2432 thingie-want-type 2431 7 ())
(2433 thingies #f #f ())
(2434 make-thingie 2433 7 ())
(2435 thingies #f #f ())
(2436 thingies #f #f ())
(2437 thingie? 2436 7 ())
(2438 packages #f #f ())
(2439 #f 2438 11 ())
(2440 packages #f #f ())
(2441 packages #f #f ())
(2442 packages #f #f ())
(2443 packages #f #f ())
(2444 packages #f #f ())
(2445 packages #f #f ())
(2446 packages #f #f ())
(2447 packages #f #f ())
(2448 #f 2447 11 ())
(2449 packages #f #f ())
(2450 package-uid 2449 7 ())
(2451 packages #f #f ())
(2452 set-package-opens! 2451 7 ())
(2453 packages #f #f ())
(2454 package-opens-really 2453 7 ())
(2455 packages #f #f ())
(2456 package-definitions 2455 7 ())
(2457 packages #f #f ())
(2458 package-unstable? 2457 7 ())
(2459 packages #f #f ())
(2460 set-package-integrate?! 2459 7 ())
(2461 packages #f #f ())
(2462 package-integrate? 2461 7 ())
(2463 packages #f #f ())
(2464 set-package-get-location! 2463 7 ())
(2465 packages #f #f ())
(2466 package-get-location 2465 7 ())
(2467 packages #f #f ())
(2468 package-file-name 2467 7 ())
(2469 packages #f #f ())
(2470 package-clauses 2469 7 ())
(2471 packages #f #f ())
(2472 set-package-loaded?! 2471 7 ())
(2473 packages #f #f ())
(2474 package-loaded? 2473 7 ())
(2475 packages #f #f ())
(2476 set-package->environment! 2475 7 ())
(2477 packages #f #f ())
(2478 package->environment 2477 7 ())
(2479 packages #f #f ())
(2480 set-package-opens-thunk! 2479 7 ())
(2481 packages #f #f ())
(2482 package-opens-thunk 2481 7 ())
(2483 packages #f #f ())
(2484 package-accesses-thunk 2483 7 ())
(2485 packages #f #f ())
(2486 set-package-undefineds! 2485 7 ())
(2487 packages #f #f ())
(2488 package-real-undefineds 2487 7 ())
(2489 packages #f #f ())
(2490 set-package-undefined-but-assigneds! 2489 7 ())
(2491 packages #f #f ())
(2492 package-real-undefined-but-assigneds 2491 7 ())
(2493 packages #f #f ())
(2494 package-clients 2493 7 ())
(2495 packages #f #f ())
(2496 package-cached 2495 7 ())
(2497 packages #f #f ())
(2498 really-make-package 2497 7 ())
(2499 packages #f #f ())
(2500 packages #f #f ())
(2501 #f 2500 11 ())
(2502 packages #f #f ())
(2503 structure-interface-thunk 2502 7 ())
(2504 packages #f #f ())
(2505 set-structure-interface! 2504 7 ())
(2506 packages #f #f ())
(2507 structure-interface-really 2506 7 ())
(2508 packages #f #f ())
(2509 structure-package 2508 7 ())
(2510 packages #f #f ())
(2511 structure-clients 2510 7 ())
(2512 packages #f #f ())
(2513 set-structure-name! 2512 7 ())
(2514 packages #f #f ())
(2515 structure-name 2514 7 ())
(2516 packages #f #f ())
(2517 really-make-structure 2516 7 ())
(2518 packages #f #f ())
(2519 packages #f #f ())
(2520 structure? 2519 7 ())
(2521 packages #f #f ())
(2522 initialize-structure! 2521 7 ())
(2523 packages #f #f ())
(2524 structure-interface 2523 7 ())
(2525 packages #f #f ())
(2526 package? 2525 7 ())
(2527 packages #f #f ())
(2528 note-package-name! 2527 7 ())
(2529 packages #f #f ())
(2530 note-structure-name! 2529 7 ())
(2531 packages #f #f ())
(2532 make-structure 2531 7 ())
(2533 #f 2532 85 ())
(2534 packages #f #f ())
(2535 structure-unstable? 2534 7 ())
(2536 packages #f #f ())
(2537 get-new-location 2536 7 ())
(2538 packages #f #f ())
(2539 package-define! 2538 7 ())
(2540 packages #f #f ())
(2541 package-accesses 2540 7 ())
(2542 packages #f #f ())
(2543 initialize-package! 2542 7 ())
(2544 #f 2543 45 ())
(2545 #f 2543 59 ())
(2546 packages #f #f ())
(2547 initialize-package-if-necessary! 2546 7 ())
(2548 packages #f #f ())
(2549 package-definition 2548 7 ())
(2550 packages #f #f ())
(2551 search-opens 2550 7 ())
(2552 loop 2551 18 ())
(2553 packages #f #f ())
(2554 structure-lookup 2553 7 ())
(2555 packages #f #f ())
(2556 package-lookup 2555 7 ())
(2557 packages #f #f ())
(2558 generic-lookup 2557 7 ())
(2559 packages #f #f ())
(2560 really-package-lookup 2559 7 ())
(2561 packages #f #f ())
(2562 real-structure-lookup 2561 7 ())
(2563 packages #f #f ())
(2564 for-each-export 2563 7 ())
(2565 #f 2564 22 ())
(2566 packages #f #f ())
(2567 really-package->environment 2566 7 ())
(2568 #f 2567 6 ())
(2569 #f 2567 11 ())
(2570 packages #f #f ())
(2571 new-package-uid 2570 7 ())
(2572 packages #f #f ())
(2573 make-package 2572 7 ())
(2574 packages #f #f ())
(2575 lazy-table-accessor 2574 7 ())
(2576 #f 2575 6 ())
(2577 packages #f #f ())
(2578 package-name 2577 7 ())
(2579 packages #f #f ())
(2580 package-opens 2579 7 ())
(2581 packages #f #f ())
(2582 make-simple-package 2581 7 ())
(2583 #f 2582 65 ())
(2584 #f 2582 70 ())
(2585 packages #f #f ())
(2586 package-add-static! 2585 7 ())
(2587 packages #f #f ())
(2588 package-refine-type! 2587 7 ())
(2589 packages #f #f ())
(2590 for-each-definition 2589 7 ())
(2591 #f 2590 6 ())
(2592 packages #f #f ())
(2593 make-new-location 2592 7 ())
(2594 packages #f #f ())
(2595 flush-location-names 2594 7 ())
(2596 packages #f #f ())
(2597 print-undefined-names 2596 7 ())
(2598 #f 2597 10 ())
(2599 #f 2597 184 ())
(2600 packages #f #f ())
(2601 noting-undefined-variables 2600 7 ())
(2602 add-name 2601 13 ())
(2603 #f 2601 25 ())
(2604 #f 2601 30 ())
(2605 #f 2604 3 ())
(2606 #f 2604 11 ())
(2607 #f 2606 3 ())
(2608 packages #f #f ())
(2609 cenv->package 2608 7 ())
(2610 packages #f #f ())
(2611 get-location-for-unassignable 2610 7 ())
(2612 #f 2611 98 ())
(2613 #f 2611 103 ())
(2614 packages #f #f ())
(2615 package-note-caching! 2614 7 ())
(2616 loop 2615 79 ())
(2617 packages #f #f ())
(2618 note-caching! 2617 7 ())
(2619 packages #f #f ())
(2620 location-for-reference 2619 7 ())
(2621 loop 2620 28 ())
(2622 packages #f #f ())
(2623 get-location-for-undefined 2622 7 ())
(2624 #f 2623 105 ())
(2625 packages #f #f ())
(2626 get-location 2625 7 ())
(2627 packages #f #f ())
(2628 really-link! 2627 7 ())
(2629 loop##277 2628 11 ())
(2630 packages #f #f ())
(2631 link! 2630 7 ())
(2632 #f 2631 14 ())
(2633 packages #f #f ())
(2634 location-on-demand 2633 7 ())
(2635 #f 2634 6 ())
(2636 packages #f #f ())
(2637 packages #f #f ())
(2638 environments #f #f ())
(2639 set-reflective-tower-maker! 2638 28 ())
(2640 environments #f #f ())
(2641 make-reflective-tower 2640 7 ())
(2642 recur 2641 19 ())
(2643 #f 2642 6 ())
(2644 environments #f #f ())
(2645 null-environment 2644 7 ())
(2646 environments #f #f ())
(2647 set-scheme-report-environment! 2646 7 ())
(2648 environments #f #f ())
(2649 environments #f #f ())
(2650 environments #f #f ())
(2651 environments #f #f ())
(2652 scheme-report-environment 2651 7 ())
(2653 environments #f #f ())
(2654 with-interaction-environment 2653 7 ())
(2655 environments #f #f ())
(2656 set-interaction-environment! 2655 7 ())
(2657 environments #f #f ())
(2658 interaction-environment 2657 7 ())
(2659 environments #f #f ())
(2660 environments #f #f ())
(2661 carefully 2660 7 ())
(2662 environments #f #f ())
(2663 *structure-ref 2662 7 ())
(2664 environments #f #f ())
(2665 environment-define! 2664 7 ())
(2666 environments #f #f ())
(2667 environment-set! 2666 7 ())
(2668 #f 2667 115 ())
(2669 environments #f #f ())
(2670 environment-ref 2669 7 ())
(2671 #f 2670 22 ())
(2672 filenames #f #f ())
(2673 translate 2672 7 ())
(2674 loop 2673 26 ())
(2675 filenames #f #f ())
(2676 set-translation! 2675 7 ())
(2677 filenames #f #f ())
(2678 translations 2677 7 ())
(2679 filenames #f #f ())
(2680 filenames #f #f ())
(2681 string-posq 2680 7 ())
(2682 loop 2681 19 ())
(2683 filenames #f #f ())
(2684 file-nondirectory-position 2683 7 ())
(2685 loop 2684 24 ())
(2686 filenames #f #f ())
(2687 file-name-nondirectory 2686 7 ())
(2688 filenames #f #f ())
(2689 file-name-directory 2688 7 ())
(2690 filenames #f #f ())
(2691 filenames #f #f ())
(2692 filenames #f #f ())
(2693 filenames #f #f ())
(2694 namestring-component 2693 7 ())
(2695 filenames #f #f ())
(2696 filenames #f #f ())
(2697 filenames #f #f ())
(2698 namestring 2697 7 ())
(2699 #f 2698 192 ())
(2700 reading-forms #f #f ())
(2701 really-read-forms 2700 7 ())
(2702 loop 2701 19 ())
(2703 reading-forms #f #f ())
(2704 read-forms 2703 7 ())
(2705 #f 2704 47 ())
(2706 reading-forms #f #f ())
(2707 #f 2706 11 ())
(2708 nodes #f #f ())
(2709 #f 2708 15 ())
(2710 nodes #f #f ())
(2711 #f 2710 19 ())
(2712 nodes #f #f ())
(2713 #f 2712 19 ())
(2714 #f 2713 29 ())
(2715 #f 2713 57 ())
(2716 nodes #f #f ())
(2717 nodes #f #f ())
(2718 nodes #f #f ())
(2719 #f 2718 19 ())
(2720 #f 2719 6 ())
(2721 nodes #f #f ())
(2722 #f 2721 19 ())
(2723 nodes #f #f ())
(2724 #f 2723 19 ())
(2725 nodes #f #f ())
(2726 #f 2725 11 ())
(2727 nodes #f #f ())
(2728 #f 2727 11 ())
(2729 nodes #f #f ())
(2730 node-operator-id 2729 7 ())
(2731 nodes #f #f ())
(2732 node-form 2731 7 ())
(2733 nodes #f #f ())
(2734 set-node-plist! 2733 7 ())
(2735 nodes #f #f ())
(2736 node-plist 2735 7 ())
(2737 nodes #f #f ())
(2738 really-make-node 2737 7 ())
(2739 nodes #f #f ())
(2740 nodes #f #f ())
(2741 nodes #f #f ())
(2742 nodes #f #f ())
(2743 nodes #f #f ())
(2744 nodes #f #f ())
(2745 #f 2744 11 ())
(2746 nodes #f #f ())
(2747 set-operator-type! 2746 7 ())
(2748 nodes #f #f ())
(2749 operator-type 2748 7 ())
(2750 nodes #f #f ())
(2751 operator-nargs 2750 7 ())
(2752 nodes #f #f ())
(2753 operator-uid 2752 7 ())
(2754 nodes #f #f ())
(2755 operator-name 2754 7 ())
(2756 nodes #f #f ())
(2757 make-operator 2756 7 ())
(2758 nodes #f #f ())
(2759 nodes #f #f ())
(2760 operator? 2759 7 ())
(2761 nodes #f #f ())
(2762 get-operator 2761 7 ())
(2763 nodes #f #f ())
(2764 make-operator-table 2763 7 ())
(2765 nodes #f #f ())
(2766 operator-lookup 2765 7 ())
(2767 nodes #f #f ())
(2768 operator-define! 2767 7 ())
(2769 nodes #f #f ())
(2770 node? 2769 7 ())
(2771 nodes #f #f ())
(2772 make-node 2771 7 ())
(2773 nodes #f #f ())
(2774 node-ref 2773 7 ())
(2775 nodes #f #f ())
(2776 node-set! 2775 7 ())
(2777 loop 2776 103 ())
(2778 nodes #f #f ())
(2779 node-operator 2778 7 ())
(2780 nodes #f #f ())
(2781 node-predicate 2780 7 ())
(2782 #f 2781 37 ())
(2783 nodes #f #f ())
(2784 make-similar-node 2783 7 ())
(2785 nodes #f #f ())
(2786 force-node 2785 7 ())
(2787 nodes #f #f ())
(2788 schemify-node 2787 7 ())
(2789 nodes #f #f ())
(2790 schemify-sexp 2789 7 ())
(2791 loop 2790 147 ())
(2792 nodes #f #f ())
(2793 schemify 2792 7 ())
(2794 nodes #f #f ())
(2795 schemify-nodes 2794 7 ())
(2796 #f 2795 6 ())
(2797 nodes #f #f ())
(2798 define-schemifier 2797 7 ())
(2799 nodes #f #f ())
(2800 schemify-formals 2799 7 ())
(2801 nodes #f #f ())
(2802 schemify-lambda 2801 7 ())
(2803 nodes #f #f ())
(2804 nodes #f #f ())
(2805 var-utilities #f #f ())
(2806 normalize-formals 2805 7 ())
(2807 var-utilities #f #f ())
(2808 n-ary? 2807 7 ())
(2809 var-utilities #f #f ())
(2810 number-of-required-args 2809 7 ())
(2811 loop##296 2810 11 ())
(2812 syntactic #f #f ())
(2813 syntactic #f #f ())
(2814 syntactic #f #f ())
(2815 syntactic #f #f ())
(2816 syntactic #f #f ())
(2817 syntactic #f #f ())
(2818 syntactic #f #f ())
(2819 syntactic #f #f ())
(2820 syntactic #f #f ())
(2821 syntactic #f #f ())
(2822 syntactic #f #f ())
(2823 syntactic #f #f ())
(2824 syntactic #f #f ())
(2825 syntactic #f #f ())
(2826 syntactic #f #f ())
(2827 syntactic #f #f ())
(2828 syntactic #f #f ())
(2829 #f 2828 19 ())
(2830 #f 2829 113 ())
(2831 syntactic #f #f ())
(2832 #f 2831 19 ())
(2833 #f 2832 104 ())
(2834 #f 2833 6 ())
(2835 syntactic #f #f ())
(2836 #f 2835 19 ())
(2837 #f 2836 108 ())
(2838 syntactic #f #f ())
(2839 #f 2838 19 ())
(2840 syntactic #f #f ())
(2841 #f 2840 19 ())
(2842 #f 2841 87 ())
(2843 syntactic #f #f ())
(2844 #f 2843 19 ())
(2845 syntactic #f #f ())
(2846 #f 2845 19 ())
(2847 syntactic #f #f ())
(2848 #f 2847 19 ())
(2849 syntactic #f #f ())
(2850 #f 2849 19 ())
(2851 syntactic #f #f ())
(2852 #f 2851 19 ())
(2853 syntactic #f #f ())
(2854 #f 2853 19 ())
(2855 syntactic #f #f ())
(2856 #f 2855 19 ())
(2857 syntactic #f #f ())
(2858 #f 2857 19 ())
(2859 syntactic #f #f ())
(2860 #f 2859 11 ())
(2861 syntactic #f #f ())
(2862 syntactic #f #f ())
(2863 syntactic #f #f ())
(2864 syntactic #f #f ())
(2865 at-least-this-long? 2864 7 ())
(2866 syntactic #f #f ())
(2867 names? 2866 7 ())
(2868 syntactic #f #f ())
(2869 destructure-define 2868 7 ())
(2870 syntactic #f #f ())
(2871 scan-define 2870 7 ())
(2872 syntactic #f #f ())
(2873 this-long? 2872 7 ())
(2874 syntactic #f #f ())
(2875 process-syntax 2874 7 ())
(2876 syntactic #f #f ())
(2877 scan-define-syntax 2876 7 ())
(2878 syntactic #f #f ())
(2879 expand-name 2878 7 ())
(2880 syntactic #f #f ())
(2881 expand-operator-form 2880 7 ())
(2882 syntactic #f #f ())
(2883 literal? 2882 7 ())
(2884 syntactic #f #f ())
(2885 expand-literal 2884 7 ())
(2886 syntactic #f #f ())
(2887 expand-list 2886 7 ())
(2888 #f 2887 6 ())
(2889 syntactic #f #f ())
(2890 expand-call 2889 7 ())
(2891 syntactic #f #f ())
(2892 expand 2891 7 ())
(2893 syntactic #f #f ())
(2894 expand-macro-application 2893 7 ())
(2895 #f 2894 6 ())
(2896 syntactic #f #f ())
(2897 expand-structure-ref 2896 7 ())
(2898 lose 2897 32 ())
(2899 syntactic #f #f ())
(2900 expand-head 2899 7 ())
(2901 syntactic #f #f ())
(2902 scan-forms 2901 7 ())
(2903 loop 2902 22 ())
(2904 syntactic #f #f ())
(2905 expand-define 2904 7 ())
(2906 syntactic #f #f ())
(2907 expand-scanned-form 2906 7 ())
(2908 syntactic #f #f ())
(2909 expand-form 2908 7 ())
(2910 loop 2909 32 ())
(2911 syntactic #f #f ())
(2912 static-value 2911 7 ())
(2913 syntactic #f #f ())
(2914 make-operator-predicate 2913 7 ())
(2915 #f 2914 26 ())
(2916 syntactic #f #f ())
(2917 body-lossage 2916 7 ())
(2918 syntactic #f #f ())
(2919 scan-body-forms 2918 7 ())
(2920 #f 2919 231 ())
(2921 syntactic #f #f ())
(2922 expand-letrec 2921 7 ())
(2923 #f 2922 10 ())
(2924 syntactic #f #f ())
(2925 expand-body 2924 7 ())
(2926 #f 2925 33 ())
(2927 syntactic #f #f ())
(2928 define-expander 2927 7 ())
(2929 syntactic #f #f ())
(2930 unspecific-node 2929 7 ())
(2931 syntactic #f #f ())
(2932 bind-names 2931 7 ())
(2933 loop 2932 26 ())
(2934 syntactic #f #f ())
(2935 expand-lambda 2934 7 ())
(2936 #f 2935 6 ())
(2937 syntactic #f #f ())
(2938 specs? 2937 7 ())
(2939 syntactic #f #f ())
(2940 syntax? 2939 7 ())
(2941 primops #f #f ())
(2942 primops #f #f ())
(2943 #f 2942 11 ())
(2944 primops #f #f ())
(2945 primop-name 2944 7 ())
(2946 primops #f #f ())
(2947 primop-type 2946 7 ())
(2948 primops #f #f ())
(2949 primop-closed 2948 7 ())
(2950 primops #f #f ())
(2951 primop-compilator 2950 7 ())
(2952 primops #f #f ())
(2953 make-primop 2952 7 ())
(2954 primops #f #f ())
(2955 primops #f #f ())
(2956 primop? 2955 7 ())
(2957 primops #f #f ())
(2958 walk-primops 2957 7 ())
(2959 #f 2958 6 ())
(2960 primops #f #f ())
(2961 define-compiler-primitive 2960 7 ())
(2962 primops #f #f ())
(2963 get-primop 2962 7 ())
(2964 debug-data #f #f ())
(2965 #f 2964 7 ())
(2966 debug-data #f #f ())
(2967 debug-data-uid 2966 7 ())
(2968 debug-data #f #f ())
(2969 debug-data-name 2968 7 ())
(2970 debug-data #f #f ())
(2971 debug-data-parent 2970 7 ())
(2972 debug-data #f #f ())
(2973 debug-data-pc-in-parent 2972 7 ())
(2974 debug-data #f #f ())
(2975 set-debug-data-env-maps! 2974 7 ())
(2976 debug-data #f #f ())
(2977 debug-data-env-maps 2976 7 ())
(2978 debug-data #f #f ())
(2979 set-debug-data-source! 2978 7 ())
(2980 debug-data #f #f ())
(2981 debug-data-source 2980 7 ())
(2982 debug-data #f #f ())
(2983 make-debug-data 2982 7 ())
(2984 debug-data #f #f ())
(2985 debug-data #f #f ())
(2986 debug-data? 2985 7 ())
(2987 stack-check #f #f ())
(2988 loop##324 2987 8 ())
(2989 stack-check #f #f ())
(2990 #f 2989 11 ())
(2991 loop 2990 48 ())
(2992 stack-check #f #f ())
(2993 #f 2992 11 ())
(2994 stack-check #f #f ())
(2995 #f 2994 11 ())
(2996 stack-check #f #f ())
(2997 stack-check #f #f ())
(2998 stack-check #f #f ())
(2999 #f 2998 11 ())
(3000 loop 2999 68 ())
(3001 stack-check #f #f ())
(3002 #f 3001 11 ())
(3003 stack-check #f #f ())
(3004 #f 3003 11 ())
(3005 stack-check #f #f ())
(3006 #f 3005 11 ())
(3007 stack-check #f #f ())
(3008 #f 3007 11 ())
(3009 stack-check #f #f ())
(3010 stack-check #f #f ())
(3011 stack-check #f #f ())
(3012 stack-check #f #f ())
(3013 stack-check #f #f ())
(3014 stack-check #f #f ())
(3015 stack-check #f #f ())
(3016 stack-check #f #f ())
(3017 stack-check #f #f ())
(3018 stack-check #f #f ())
(3019 stack-check #f #f ())
(3020 stack-check #f #f ())
(3021 stack-check #f #f ())
(3022 stack-check #f #f ())
(3023 stack-check #f #f ())
(3024 stack-check #f #f ())
(3025 stack-check #f #f ())
(3026 stack-max 3025 7 ())
(3027 stack-check #f #f ())
(3028 protocol-skip 3027 7 ())
(3029 stack-check #f #f ())
(3030 maximum-stack-use 3029 7 ())
(3031 loop##327 3030 74 ())
(3032 stack-check #f #f ())
(3033 nothing 3032 7 ())
(3034 #f 3033 6 ())
(3035 stack-check #f #f ())
(3036 popper 3035 7 ())
(3037 #f 3036 6 ())
(3038 stack-check #f #f ())
(3039 imax 3038 7 ())
(3040 stack-check #f #f ())
(3041 pusher 3040 7 ())
(3042 #f 3041 6 ())
(3043 stack-check #f #f ())
(3044 continue 3043 7 ())
(3045 stack-check #f #f ())
(3046 continuer 3045 7 ())
(3047 #f 3046 6 ())
(3048 stack-check #f #f ())
(3049 get-offset 3048 7 ())
(3050 stack-check #f #f ())
(3051 do-make-cont 3050 7 ())
(3052 #f 3051 6 ())
(3053 stack-check #f #f ())
(3054 arg-spec-size 3053 7 ())
(3055 stack-check #f #f ())
(3056 stack-function 3055 7 ())
(3057 loop 3056 22 ())
(3058 segments #f #f ())
(3059 segments #f #f ())
(3060 segments #f #f ())
(3061 segments #f #f ())
(3062 #f 3061 15 ())
(3063 segments #f #f ())
(3064 astate-code-vector 3063 7 ())
(3065 segments #f #f ())
(3066 set-astate-pc! 3065 7 ())
(3067 segments #f #f ())
(3068 astate-pc 3067 7 ())
(3069 segments #f #f ())
(3070 set-astate-count! 3069 7 ())
(3071 segments #f #f ())
(3072 astate-count 3071 7 ())
(3073 segments #f #f ())
(3074 set-astate-literals! 3073 7 ())
(3075 segments #f #f ())
(3076 astate-literals 3075 7 ())
(3077 segments #f #f ())
(3078 make-assembly-state 3077 7 ())
(3079 segments #f #f ())
(3080 segments #f #f ())
(3081 segments #f #f ())
(3082 segments #f #f ())
(3083 segments #f #f ())
(3084 segments #f #f ())
(3085 segments #f #f ())
(3086 segments #f #f ())
(3087 segments #f #f ())
(3088 segments #f #f ())
(3089 segments #f #f ())
(3090 segments #f #f ())
(3091 segments #f #f ())
(3092 segments #f #f ())
(3093 new-template-uid 3092 7 ())
(3094 segments #f #f ())
(3095 template-uid 3094 7 ())
(3096 segments #f #f ())
(3097 set-template-uid! 3096 7 ())
(3098 segments #f #f ())
(3099 debug-flag-accessor 3098 7 ())
(3100 #f 3099 26 ())
(3101 segments #f #f ())
(3102 debug-flag-modifier 3101 7 ())
(3103 #f 3102 26 ())
(3104 segments #f #f ())
(3105 saving-and-restoring 3104 7 ())
(3106 swap 3105 6 ())
(3107 segments #f #f ())
(3108 with-fresh-compiler-state 3107 7 ())
(3109 #f 3108 44 ())
(3110 #f 3109 3 ())
(3111 #f 3109 8 ())
(3112 segments #f #f ())
(3113 note-debug-data! 3112 7 ())
(3114 segments #f #f ())
(3115 debug-data->info 3114 7 ())
(3116 segments #f #f ())
(3117 get-debug-data 3116 7 ())
(3118 segments #f #f ())
(3119 new-debug-data 3118 7 ())
(3120 segments #f #f ())
(3121 high-byte 3120 7 ())
(3122 segments #f #f ())
(3123 emit-byte! 3122 7 ())
(3124 segments #f #f ())
(3125 low-byte 3124 7 ())
(3126 segments #f #f ())
(3127 position 3126 7 ())
(3128 loop 3127 22 ())
(3129 segments #f #f ())
(3130 literal-position 3129 7 ())
(3131 #f 3130 21 ())
(3132 segments #f #f ())
(3133 literal->index 3132 7 ())
(3134 segments #f #f ())
(3135 emit-literal! 3134 7 ())
(3136 segments #f #f ())
(3137 code-vector-set2! 3136 7 ())
(3138 segments #f #f ())
(3139 check-stack-use 3138 7 ())
(3140 loop##338 3139 77 ())
(3141 segments #f #f ())
(3142 emit-segment! 3141 7 ())
(3143 segments #f #f ())
(3144 emit-with-environment-maps! 3143 7 ())
(3145 #f 3144 14 ())
(3146 segments #f #f ())
(3147 make-astate 3146 7 ())
(3148 segments #f #f ())
(3149 template 3148 7 ())
(3150 #f 3149 10 ())
(3151 segments #f #f ())
(3152 segment-data->template 3151 7 ())
(3153 loop##340 3152 68 ())
(3154 segments #f #f ())
(3155 segment->template 3154 7 ())
(3156 #f 3155 124 ())
(3157 segments #f #f ())
(3158 instruction 3157 7 ())
(3159 #f 3158 30 ())
(3160 #f 3159 22 ())
(3161 segments #f #f ())
(3162 sequentially-2 3161 7 ())
(3163 #f 3162 59 ())
(3164 segments #f #f ())
(3165 sequentially 3164 7 ())
(3166 loop 3165 105 ())
(3167 #f 3165 120 ())
(3168 loop 3167 18 ())
(3169 segments #f #f ())
(3170 instruction-with-literal 3169 7 ())
(3171 #f 3170 30 ())
(3172 #f 3171 160 ())
(3173 segments #f #f ())
(3174 instruction-with-location 3173 7 ())
(3175 #f 3174 10 ())
(3176 segments #f #f ())
(3177 make-label 3176 7 ())
(3178 segments #f #f ())
(3179 insert-label! 3178 7 ())
(3180 segments #f #f ())
(3181 instruction-using-label 3180 7 ())
(3182 #f 3181 49 ())
(3183 segments #f #f ())
(3184 computed-goto-instruction 3183 7 ())
(3185 #f 3184 68 ())
(3186 loop##341 3185 75 ())
(3187 segments #f #f ())
(3188 attach-label 3187 7 ())
(3189 #f 3188 19 ())
(3190 #f 3189 37 ())
(3191 segments #f #f ())
(3192 note-source-code 3191 7 ())
(3193 #f 3192 19 ())
(3194 segments #f #f ())
(3195 note-environment 3194 7 ())
(3196 #f 3195 31 ())
(3197 segments #f #f ())
(3198 segments #f #f ())
(3199 segments #f #f ())
(3200 reconstruction #f #f ())
(3201 constant-type 3200 7 ())
(3202 reconstruction #f #f ())
(3203 reconstruction #f #f ())
(3204 reconstruction #f #f ())
(3205 reconstruct-apply 3204 7 ())
(3206 #f 3205 56 ())
(3207 reconstruction #f #f ())
(3208 #f 3207 11 ())
(3209 reconstruction #f #f ())
(3210 #f 3209 11 ())
(3211 #f 3210 10 ())
(3212 reconstruction #f #f ())
(3213 #f 3212 15 ())
(3214 reconstruction #f #f ())
(3215 define-primop-reconstructor 3214 7 ())
(3216 reconstruction #f #f ())
(3217 reconstruction #f #f ())
(3218 reconstruction #f #f ())
(3219 reconstruction #f #f ())
(3220 reconstruction #f #f ())
(3221 #f 3220 15 ())
(3222 reconstruction #f #f ())
(3223 #f 3222 15 ())
(3224 reconstruction #f #f ())
(3225 node->type 3224 7 ())
(3226 reconstruction #f #f ())
(3227 #f 3226 15 ())
(3228 reconstruction #f #f ())
(3229 #f 3228 15 ())
(3230 #f 3229 60 ())
(3231 reconstruction #f #f ())
(3232 #f 3231 15 ())
(3233 reconstruction #f #f ())
(3234 #f 3233 15 ())
(3235 loop##343 3234 11 ())
(3236 reconstruction #f #f ())
(3237 reconstruction #f #f ())
(3238 fork-constraints 3237 7 ())
(3239 #f 3238 13 ())
(3240 reconstruction #f #f ())
(3241 #f 3240 15 ())
(3242 #f 3241 153 ())
(3243 reconstruction #f #f ())
(3244 #f 3243 13 ())
(3245 reconstruction #f #f ())
(3246 #f 3245 13 ())
(3247 reconstruction #f #f ())
(3248 #f 3247 15 ())
(3249 reconstruction #f #f ())
(3250 #f 3249 15 ())
(3251 reconstruction #f #f ())
(3252 reconstruct-call 3251 7 ())
(3253 lose 3252 112 ())
(3254 #f 3253 3 ())
(3255 loop 3252 179 ())
(3256 reconstruction #f #f ())
(3257 proc->reconstructor 3256 7 ())
(3258 reconstruction #f #f ())
(3259 #f 3258 15 ())
(3260 reconstruction #f #f ())
(3261 reconstruct-name 3260 7 ())
(3262 reconstruction #f #f ())
(3263 #f 3262 15 ())
(3264 reconstruction #f #f ())
(3265 careful-codomain 3264 7 ())
(3266 reconstruction #f #f ())
(3267 reconstruct-lambda 3266 7 ())
(3268 #f 3267 71 ())
(3269 reconstruction #f #f ())
(3270 #f 3269 15 ())
(3271 reconstruction #f #f ())
(3272 #f 3271 15 ())
(3273 reconstruction #f #f ())
(3274 define-reconstructor 3273 7 ())
(3275 reconstruction #f #f ())
(3276 #f 3275 11 ())
(3277 reconstruction #f #f ())
(3278 examine 3277 7 ())
(3279 reconstruction #f #f ())
(3280 reconstruct 3279 7 ())
(3281 reconstruction #f #f ())
(3282 reconstruct-type 3281 7 ())
(3283 reconstruction #f #f ())
(3284 node-type 3283 7 ())
(3285 compiler #f #f ())
(3286 compiler #f #f ())
(3287 loop 3286 60 ())
(3288 compiler #f #f ())
(3289 compiler #f #f ())
(3290 compiler #f #f ())
(3291 define-one-or-two 3290 7 ())
(3292 #f 3291 12 ())
(3293 #f 3291 17 ())
(3294 compiler #f #f ())
(3295 define-one-or-two 3294 7 ())
(3296 #f 3295 73 ())
(3297 #f 3295 78 ())
(3298 compiler #f #f ())
(3299 compiler #f #f ())
(3300 compiler #f #f ())
(3301 define=< 3300 7 ())
(3302 #f 3301 73 ())
(3303 #f 3301 78 ())
(3304 compiler #f #f ())
(3305 define+* 3304 7 ())
(3306 #f 3305 43 ())
(3307 #f 3305 48 ())
(3308 compiler #f #f ())
(3309 define-char-io 3308 7 ())
(3310 #f 3309 12 ())
(3311 #f 3309 17 ())
(3312 compiler #f #f ())
(3313 define-char-io 3312 7 ())
(3314 #f 3313 12 ())
(3315 #f 3313 17 ())
(3316 compiler #f #f ())
(3317 n-ary-constructor 3316 7 ())
(3318 #f 3317 16 ())
(3319 #f 3317 21 ())
(3320 compiler #f #f ())
(3321 #f 3320 21 ())
(3322 compiler #f #f ())
(3323 #f 3322 44 ())
(3324 #f 3323 112 ())
(3325 #f 3322 49 ())
(3326 compiler #f #f ())
(3327 #f 3326 17 ())
(3328 #f 3326 22 ())
(3329 compiler #f #f ())
(3330 #f 3329 73 ())
(3331 #f 3329 84 ())
(3332 compiler #f #f ())
(3333 #f 3332 71 ())
(3334 #f 3332 76 ())
(3335 compiler #f #f ())
(3336 #f 3335 57 ())
(3337 #f 3335 62 ())
(3338 compiler #f #f ())
(3339 compiler #f #f ())
(3340 #f 3339 7 ())
(3341 compiler #f #f ())
(3342 compiler #f #f ())
(3343 #f 3342 7 ())
(3344 compiler #f #f ())
(3345 compiler #f #f ())
(3346 compiler #f #f ())
(3347 compiler #f #f ())
(3348 compiler #f #f ())
(3349 loop##347 3348 12 ())
(3350 compiler #f #f ())
(3351 compiler #f #f ())
(3352 #f 3351 19 ())
(3353 compiler #f #f ())
(3354 compiler #f #f ())
(3355 compiler #f #f ())
(3356 compiler #f #f ())
(3357 compiler #f #f ())
(3358 compiler #f #f ())
(3359 compiler #f #f ())
(3360 compiler #f #f ())
(3361 #f 3360 19 ())
(3362 compiler #f #f ())
(3363 compiler #f #f ())
(3364 compiler #f #f ())
(3365 compiler #f #f ())
(3366 compiler #f #f ())
(3367 #f 3366 19 ())
(3368 #f 3367 73 ())
(3369 #f 3367 157 ())
(3370 compiler #f #f ())
(3371 #f 3370 19 ())
(3372 compiler #f #f ())
(3373 #f 3372 19 ())
(3374 compiler #f #f ())
(3375 compiler #f #f ())
(3376 #f 3375 19 ())
(3377 loop 3376 89 ())
(3378 compiler #f #f ())
(3379 #f 3378 19 ())
(3380 compiler #f #f ())
(3381 #f 3380 19 ())
(3382 compiler #f #f ())
(3383 #f 3382 19 ())
(3384 compiler #f #f ())
(3385 #f 3384 19 ())
(3386 compiler #f #f ())
(3387 #f 3386 41 ())
(3388 compiler #f #f ())
(3389 #f 3388 41 ())
(3390 compiler #f #f ())
(3391 #f 3390 19 ())
(3392 compiler #f #f ())
(3393 #f 3392 11 ())
(3394 compiler #f #f ())
(3395 diagnose-call-error 3394 7 ())
(3396 #f 3395 173 ())
(3397 compiler #f #f ())
(3398 type-check 3397 7 ())
(3399 #f 3398 121 ())
(3400 compiler #f #f ())
(3401 compile 3400 7 ())
(3402 compiler #f #f ())
(3403 compile-expression 3402 7 ())
(3404 compiler #f #f ())
(3405 define-compilator 3404 7 ())
(3406 compiler #f #f ())
(3407 ignore-values-cont? 3406 7 ())
(3408 compiler #f #f ())
(3409 deliver-value 3408 7 ())
(3410 compiler #f #f ())
(3411 compile-constant 3410 7 ())
(3412 compiler #f #f ())
(3413 return-cont? 3412 7 ())
(3414 compiler #f #f ())
(3415 fixup-source 3414 7 ())
(3416 compiler #f #f ())
(3417 maybe-push-continuation 3416 7 ())
(3418 compiler #f #f ())
(3419 make-cont 3418 7 ())
(3420 compiler #f #f ())
(3421 fall-through-cont 3420 7 ())
(3422 compiler #f #f ())
(3423 push-arguments 3422 7 ())
(3424 recur 3423 37 ())
(3425 compiler #f #f ())
(3426 compile-unknown-call 3425 7 ())
(3427 compiler #f #f ())
(3428 name-node-binding 3427 7 ())
(3429 compiler #f #f ())
(3430 compile-name-call 3429 7 ())
(3431 compiler #f #f ())
(3432 generate-trap 3431 7 ())
(3433 compiler #f #f ())
(3434 named-cont 3433 7 ())
(3435 compiler #f #f ())
(3436 push-all-with-names 3435 7 ())
(3437 compiler #f #f ())
(3438 set-lexical-offsets! 3437 7 ())
(3439 loop 3438 22 ())
(3440 compiler #f #f ())
(3441 name-node->symbol 3440 7 ())
(3442 compiler #f #f ())
(3443 return-cont 3442 7 ())
(3444 compiler #f #f ())
(3445 compile-lambda-code 3444 7 ())
(3446 compiler #f #f ())
(3447 cont-name 3446 7 ())
(3448 compiler #f #f ())
(3449 compile-redex 3448 7 ())
(3450 compiler #f #f ())
(3451 compile-call 3450 7 ())
(3452 compiler #f #f ())
(3453 compile-lambda 3452 7 ())
(3454 compiler #f #f ())
(3455 variable-env-data 3454 7 ())
(3456 level-loop 3455 26 ())
(3457 loop 3456 60 ())
(3458 loop 3457 123 ())
(3459 compiler #f #f ())
(3460 sort-list 3459 7 ())
(3461 insert 3460 11 ())
(3462 sort 3460 32 ())
(3463 compiler #f #f ())
(3464 get-variables-offsets 3463 7 ())
(3465 loop 3464 22 ())
(3466 compiler #f #f ())
(3467 compile-flat-lambda 3466 7 ())
(3468 #f 3467 26 ())
(3469 #f 3467 366 ())
(3470 compiler #f #f ())
(3471 fall-through-cont? 3470 7 ())
(3472 compiler #f #f ())
(3473 ignore-values-cont 3472 7 ())
(3474 compiler #f #f ())
(3475 set-type-check?! 3474 7 ())
(3476 compiler #f #f ())
(3477 push-all-but-last 3476 7 ())
(3478 recur 3477 25 ())
(3479 compiler #f #f ())
(3480 direct-compilator 3479 7 ())
(3481 #f 3480 6 ())
(3482 compiler #f #f ())
(3483 direct-closed-compilator 3482 7 ())
(3484 #f 3483 6 ())
(3485 compiler #f #f ())
(3486 nargs->domain 3485 7 ())
(3487 loop##356 3486 11 ())
(3488 compiler #f #f ())
(3489 get-primop-type 3488 7 ())
(3490 #f 3489 10 ())
(3491 compiler #f #f ())
(3492 simple-compilator 3491 7 ())
(3493 #f 3492 6 ())
(3494 compiler #f #f ())
(3495 simple-closed-compilator 3494 7 ())
(3496 #f 3495 6 ())
(3497 compiler #f #f ())
(3498 define-simple-primitive 3497 7 ())
(3499 compiler #f #f ())
(3500 symbol-append 3499 7 ())
(3501 compiler #f #f ())
(3502 define-stob-predicate 3501 7 ())
(3503 compiler #f #f ())
(3504 define-data-struct-primitives 3503 7 ())
(3505 def-prim 3504 8 ())
(3506 loop##358 3504 190 ())
(3507 compiler #f #f ())
(3508 define-vector-primitives 3507 7 ())
(3509 def-prim 3508 26 ())
(3510 compiler #f #f ())
(3511 n-ary-primitive-compilator 3510 7 ())
(3512 #f 3511 6 ())
(3513 compiler #f #f ())
(3514 define-n-ary-compiler-primitive 3513 7 ())
(3515 compiler #f #f ())
(3516 call-on-arg-and-id 3515 7 ())
(3517 compiler #f #f ())
(3518 call-on-args 3517 7 ())
(3519 do-arg 3518 6 ())
(3520 loop 3518 52 ())
(3521 compiler #f #f ())
(3522 make-dispatch-protocol 3521 7 ())
(3523 compiler #f #f ())
(3524 compile-definition 3523 7 ())
(3525 compiler #f #f ())
(3526 compile-form 3525 7 ())
(3527 compiler #f #f ())
(3528 compile-forms-loop 3527 7 ())
(3529 compiler #f #f ())
(3530 compile-forms 3529 7 ())
(3531 compiler #f #f ())
(3532 append-templates 3531 7 ())
(3533 #f 3532 31 ())
(3534 compiler #f #f ())
(3535 make-startup-procedure 3534 7 ())
(3536 compiler #f #f ())
(3537 evaluation #f #f ())
(3538 compile-and-run 3537 7 ())
(3539 #f 3538 61 ())
(3540 #f 3539 6 ())
(3541 evaluation #f #f ())
(3542 really-load-into 3541 7 ())
(3543 evaluation #f #f ())
(3544 load 3543 7 ())
(3545 evaluation #f #f ())
(3546 eval-from-file 3545 7 ())
(3547 evaluation #f #f ())
(3548 load-into 3547 7 ())
(3549 evaluation #f #f ())
(3550 eval 3549 7 ())
(3551 scheme #f #f ())
(3552 display-conditions #f #f ())
(3553 limited-write 3552 7 ())
(3554 recur 3553 22 ())
(3555 #f 3554 145 ())
(3556 #f 3555 24 ())
(3557 display-conditions #f #f ())
(3558 &disclose-condition 3557 52 ())
(3559 display-conditions #f #f ())
(3560 display-conditions #f #f ())
(3561 display-conditions #f #f ())
(3562 display-conditions #f #f ())
(3563 display-conditions #f #f ())
(3564 really-display-condition 3563 7 ())
(3565 #f 3564 246 ())
(3566 display-conditions #f #f ())
(3567 display-condition 3566 22 ())
(3568 #f 3567 10 ())
(3569 mini-command #f #f ())
(3570 read-string 3569 7 ())
(3571 loop 3570 23 ())
(3572 mini-command #f #f ())
(3573 mini-load 3572 7 ())
(3574 mini-command #f #f ())
(3575 command-processor 3574 7 ())
(3576 loop 3575 77 ())
(3577 #f 3576 7 ())
(3578 #f 3577 6 ())
(3579 #f 3578 68 ())
(3580 #f 3577 11 ())
(3581 #f 3580 75 ())
(3582 #f 3580 201 ())
(3583 #f 3580 246 ())
(3584 #f 3583 12 ())
(3585 export-the-record-type #f #f ())
(3586 enum-case #f #f ())
(3587 scheduler #f #f ())
(3588 decrement-counter! 3587 7 ())
(3589 scheduler #f #f ())
(3590 increment-counter! 3589 7 ())
(3591 scheduler #f #f ())
(3592 scheduler #f #f ())
(3593 make-counter 3592 7 ())
(3594 scheduler #f #f ())
(3595 round-robin-event-handler 3594 7 ())
(3596 thread-event-handler 3595 15 ())
(3597 #f 3596 111 ())
(3598 asynchronous-event-handler 3595 24 ())
(3599 next-thread 3595 33 ())
(3600 #f 3599 18 ())
(3601 scheduler #f #f ())
(3602 run-threads-with-housekeeper 3601 7 ())
(3603 #f 3602 6 ())
(3604 loop 3603 29 ())
(3605 #f 3604 6 ())
(3606 #f 3605 57 ())
(3607 scheduler #f #f ())
(3608 run-threads 3607 7 ())
(3609 #f 3608 6 ())
(3610 loop 3609 26 ())
(3611 #f 3610 6 ())
(3612 #f 3611 8 ())
(3613 root-scheduler #f #f ())
(3614 root-scheduler #f #f ())
(3615 spawn-output-forcers 3614 7 ())
(3616 root-scheduler #f #f ())
(3617 call-when-deadlocked! 3616 7 ())
(3618 root-scheduler #f #f ())
(3619 root-scheduler #f #f ())
(3620 do-some-waiting 3619 7 ())
(3621 root-scheduler #f #f ())
(3622 root-scheduler #f #f ())
(3623 root-wait 3622 7 ())
(3624 #f 3623 22 ())
(3625 root-scheduler #f #f ())
(3626 scheme-exit-now 3625 7 ())
(3627 root-scheduler #f #f ())
(3628 root-scheduler #f #f ())
(3629 cheap-display-condition 3628 7 ())
(3630 #f 3629 164 ())
(3631 root-scheduler #f #f ())
(3632 root-handler 3631 7 ())
(3633 root-scheduler #f #f ())
(3634 make-root-event-handler 3633 7 ())
(3635 #f 3634 115 ())
(3636 #f 3634 120 ())
(3637 root-scheduler #f #f ())
(3638 root-scheduler 3637 7 ())
(3639 #f 3638 13 ())
(3640 #f 3639 24 ())
(3641 #f 3639 41 ())
(3642 usual-resumer #f #f ())
(3643 usual-resumer #f #f ())
(3644 initialize-rts 3643 7 ())
(3645 #f 3644 44 ())
(3646 #f 3645 7 ())
(3647 #f 3646 46 ())
(3648 #f 3647 3 ())
(3649 usual-resumer #f #f ())
(3650 usual-resumer 3649 7 ())
(3651 #f 3650 6 ())
(3652 #f 3651 15 ())
(3653 initial-system #f #f ())
(3654 make-tower 3653 7 ())
(3655 initial-system #f #f ())
(3656 make-initial-package 3655 7 ())
(3657 #f 3656 17 ())
(3658 initial-system #f #f ())
(3659 initialize-interaction-environment! 3658 7 ())
(3660 initial-system #f #f ())
(3661 make-built-in-structures 3660 7 ())
(3662 #f 3661 38 ())
(3663 #f 3661 60 ())
(3664 initial-system #f #f ())
(3665 start 3664 7 ())
(3666 #f 3665 6 ())
(3667 #f 3666 6 ())
(3668 #f 3667 64 ())
(3669 usual-macros #f #f ())
(3670 find-free-names-in-syntax-rules 3669 7 ())
(3671 meta-variables 3670 13 ())
(3672 free-names 3670 22 ())
(3673 loop##378 3670 36 ())
(3674 usual-macros #f #f ())
(3675 usual-macros #f #f ())
(3676 segment-tail 3675 7 ())
(3677 loop 3676 21 ())
(3678 usual-macros #f #f ())
(3679 segment-depth 3678 7 ())
(3680 usual-macros #f #f ())
(3681 segment-template? 3680 7 ())
(3682 usual-macros #f #f ())
(3683 segment-pattern? 3682 7 ())
(3684 usual-macros #f #f ())
(3685 process-rules 3684 7 ())
(3686 make-transformer 3685 424 ())
(3687 process-rule 3685 433 ())
(3688 #f 3687 114 ())
(3689 process-match 3685 442 ())
(3690 process-segment-match 3685 451 ())
(3691 process-pattern 3685 460 ())
(3692 #f 3691 97 ())
(3693 process-template 3685 469 ())
(3694 loop##382 3693 294 ())
(3695 meta-variables 3685 478 ())
(3696 free-meta-variables 3685 487 ())
(3697 usual-macros #f #f ())
(3698 #f 3697 11 ())
(3699 usual-macros #f #f ())
(3700 #f 3699 11 ())
(3701 expand-quasiquote 3700 154 ())
(3702 finalize-quasiquote 3700 163 ())
(3703 descend-quasiquote 3700 172 ())
(3704 descend-quasiquote-pair 3700 181 ())
(3705 #f 3704 15 ())
(3706 #f 3705 15 ())
(3707 descend-quasiquote-vector 3700 190 ())
(3708 #f 3707 22 ())
(3709 interesting-to-quasiquote? 3700 199 ())
(3710 usual-macros #f #f ())
(3711 case-clause? 3710 7 ())
(3712 usual-macros #f #f ())
(3713 #f 3712 11 ())
(3714 #f 3713 28 ())
(3715 #f 3713 218 ())
(3716 usual-macros #f #f ())
(3717 #f 3716 11 ())
(3718 usual-macros #f #f ())
(3719 specs? 3718 7 ())
(3720 usual-macros #f #f ())
(3721 #f 3720 11 ())
(3722 usual-macros #f #f ())
(3723 #f 3722 11 ())
(3724 usual-macros #f #f ())
(3725 do-spec? 3724 7 ())
(3726 usual-macros #f #f ())
(3727 #f 3726 11 ())
(3728 #f 3727 238 ())
(3729 usual-macros #f #f ())
(3730 #f 3729 11 ())
(3731 recur 3730 85 ())
(3732 usual-macros #f #f ())
(3733 #f 3732 11 ())
(3734 usual-macros #f #f ())
(3735 usual-transform 3734 7 ())
(3736 usual-macros #f #f ())
(3737 define-usual-macro 3736 7 ())
(3738 usual-macros #f #f ())
(3739 strong #f #f ())
(3740 pop-vertex-edge! 3739 7 ())
(3741 strong #f #f ())
(3742 follow-edge 3741 7 ())
(3743 strong #f #f ())
(3744 unwind-stack 3743 7 ())
(3745 loop 3744 22 ())
(3746 strong #f #f ())
(3747 end-vertex 3746 7 ())
(3748 #f 3747 6 ())
(3749 strong #f #f ())
(3750 get-strong 3749 7 ())
(3751 strong #f #f ())
(3752 do-vertex 3751 7 ())
(3753 strong #f #f ())
(3754 make-vertices 3753 7 ())
(3755 maybe-slot 3754 6 ())
(3756 #f 3754 18 ())
(3757 #f 3754 36 ())
(3758 strong #f #f ())
(3759 make-vertex 3758 7 ())
(3760 strong #f #f ())
(3761 vertex? 3760 7 ())
(3762 strong #f #f ())
(3763 vertex-data 3762 7 ())
(3764 strong #f #f ())
(3765 set-vertex-edges! 3764 7 ())
(3766 strong #f #f ())
(3767 vertex-edges 3766 7 ())
(3768 strong #f #f ())
(3769 set-vertex-stack! 3768 7 ())
(3770 strong #f #f ())
(3771 vertex-stack 3770 7 ())
(3772 strong #f #f ())
(3773 set-vertex-index! 3772 7 ())
(3774 strong #f #f ())
(3775 vertex-index 3774 7 ())
(3776 strong #f #f ())
(3777 set-vertex-parent! 3776 7 ())
(3778 strong #f #f ())
(3779 vertex-parent 3778 7 ())
(3780 strong #f #f ())
(3781 set-vertex-lowpoint! 3780 7 ())
(3782 strong #f #f ())
(3783 vertex-lowpoint 3782 7 ())
(3784 strong #f #f ())
(3785 really-make-vertex 3784 7 ())
(3786 strong #f #f ())
(3787 strong #f #f ())
(3788 find-next-vertex 3787 7 ())
(3789 loop##404 3788 11 ())
(3790 strong #f #f ())
(3791 strongly-connected-components 3790 7 ())
(3792 loop 3791 52 ())
(3793 #f 3792 39 ())
(3794 #f 3792 57 ())
(3795 usages #f #f ())
(3796 insert-aliases 3795 7 ())
(3797 loop 3796 22 ())
(3798 usages #f #f ())
(3799 make-form 3798 7 ())
(3800 usages #f #f ())
(3801 #f 3800 11 ())
(3802 usages #f #f ())
(3803 form? 3802 7 ())
(3804 usages #f #f ())
(3805 form-node 3804 7 ())
(3806 usages #f #f ())
(3807 set-form-aliases! 3806 7 ())
(3808 usages #f #f ())
(3809 form-aliases 3808 7 ())
(3810 usages #f #f ())
(3811 set-form-unaliased?! 3810 7 ())
(3812 usages #f #f ())
(3813 form-unaliased? 3812 7 ())
(3814 usages #f #f ())
(3815 set-form-free! 3814 7 ())
(3816 usages #f #f ())
(3817 form-free 3816 7 ())
(3818 usages #f #f ())
(3819 set-form-temp! 3818 7 ())
(3820 usages #f #f ())
(3821 form-temp 3820 7 ())
(3822 usages #f #f ())
(3823 really-make-form 3822 7 ())
(3824 usages #f #f ())
(3825 usages #f #f ())
(3826 topologically-sort 3825 7 ())
(3827 #f 3826 13 ())
(3828 #f 3827 6 ())
(3829 #f 3827 15 ())
(3830 usages #f #f ())
(3831 maybe-make-aliased 3830 7 ())
(3832 usages #f #f ())
(3833 stuff-count 3832 7 ())
(3834 #f 3833 10 ())
(3835 usages #f #f ())
(3836 sort-forms 3835 7 ())
(3837 #f 3836 39 ())
(3838 #f 3836 71 ())
(3839 usages #f #f ())
(3840 usages #f #f ())
(3841 usages #f #f ())
(3842 usages #f #f ())
(3843 usages #f #f ())
(3844 usages #f #f ())
(3845 usages #f #f ())
(3846 usages #f #f ())
(3847 usages #f #f ())
(3848 usages #f #f ())
(3849 usage-incrementator 3848 7 ())
(3850 #f 3849 6 ())
(3851 usages #f #f ())
(3852 package-usage? 3851 7 ())
(3853 usages #f #f ())
(3854 make-package-usage 3853 7 ())
(3855 usages #f #f ())
(3856 make-usage 3855 7 ())
(3857 usages #f #f ())
(3858 usage? 3857 7 ())
(3859 usages #f #f ())
(3860 usage-name-node 3859 7 ())
(3861 usages #f #f ())
(3862 set-reference! 3861 7 ())
(3863 usages #f #f ())
(3864 usage-reference-count 3863 7 ())
(3865 usages #f #f ())
(3866 set-operator! 3865 7 ())
(3867 usages #f #f ())
(3868 usage-operator-count 3867 7 ())
(3869 usages #f #f ())
(3870 set-assignment! 3869 7 ())
(3871 usages #f #f ())
(3872 usage-assignment-count 3871 7 ())
(3873 usages #f #f ())
(3874 really-make-usage 3873 7 ())
(3875 usages #f #f ())
(3876 usages #f #f ())
(3877 #f 3876 15 ())
(3878 usages #f #f ())
(3879 #f 3878 15 ())
(3880 usages #f #f ())
(3881 #f 3880 15 ())
(3882 usages #f #f ())
(3883 #f 3882 15 ())
(3884 usages #f #f ())
(3885 #f 3884 15 ())
(3886 usages #f #f ())
(3887 #f 3886 15 ())
(3888 usages #f #f ())
(3889 #f 3888 15 ())
(3890 #f 3889 57 ())
(3891 usages #f #f ())
(3892 #f 3891 15 ())
(3893 #f 3892 41 ())
(3894 usages #f #f ())
(3895 #f 3894 13 ())
(3896 usages #f #f ())
(3897 add-if-free 3896 7 ())
(3898 usages #f #f ())
(3899 #f 3898 13 ())
(3900 usages #f #f ())
(3901 usages #f #f ())
(3902 usages #f #f ())
(3903 usages #f #f ())
(3904 usages #f #f ())
(3905 usages #f #f ())
(3906 nothing 3905 7 ())
(3907 usages #f #f ())
(3908 define-usage-analyzer 3907 7 ())
(3909 usages #f #f ())
(3910 #f 3909 11 ())
(3911 usages #f #f ())
(3912 analyze-nodes 3911 7 ())
(3913 #f 3912 6 ())
(3914 usages #f #f ())
(3915 analyze 3914 7 ())
(3916 usages #f #f ())
(3917 find-node-usages 3916 7 ())
(3918 #f 3917 30 ())
(3919 #f 3917 44 ())
(3920 usages #f #f ())
(3921 maybe-update-known-type 3920 7 ())
(3922 usages #f #f ())
(3923 find-usages 3922 7 ())
(3924 #f 3923 23 ())
(3925 #f 3923 41 ())
(3926 #f 3925 24 ())
(3927 #f 3923 59 ())
(3928 inline #f #f ())
(3929 inline #f #f ())
(3930 inline #f #f ())
(3931 inline #f #f ())
(3932 inline #f #f ())
(3933 inline #f #f ())
(3934 get-qualified-env 3933 7 ())
(3935 inline #f #f ())
(3936 qualified->name 3935 7 ())
(3937 recur 3936 18 ())
(3938 inline #f #f ())
(3939 inline #f #f ())
(3940 inline #f #f ())
(3941 reconstitute-name 3940 7 ())
(3942 inline #f #f ())
(3943 reconstitute 3942 7 ())
(3944 label 3943 18 ())
(3945 inline #f #f ())
(3946 make-substitution 3945 7 ())
(3947 #f 3946 29 ())
(3948 inline #f #f ())
(3949 inline-transform 3948 7 ())
(3950 #f 3949 63 ())
(3951 #f 3949 71 ())
(3952 inline #f #f ())
(3953 unused-name 3952 7 ())
(3954 loop##428 3953 46 ())
(3955 #f 3954 10 ())
(3956 inline #f #f ())
(3957 clean-lookup 3956 7 ())
(3958 inline #f #f ())
(3959 clean-lambda 3958 7 ())
(3960 #f 3959 41 ())
(3961 recur 3959 91 ())
(3962 inline #f #f ())
(3963 clean-node 3962 7 ())
(3964 #f 3963 132 ())
(3965 #f 3963 296 ())
(3966 inline #f #f ())
(3967 make-inline-transform 3966 7 ())
(3968 #f 3967 41 ())
(3969 #f 3967 96 ())
(3970 loop##429 3969 11 ())
(3971 for-reification #f #f ())
(3972 package-define-static! 3971 7 ())
(3973 for-reification #f #f ())
(3974 transform 3973 7 ())
(3975 for-reification #f #f ())
(3976 package 3975 7 ())
(3977 loop##430 3976 73 ())
(3978 for-reification #f #f ())
(3979 simple-interface 3978 7 ())
(3980 #f 3979 12 ())
(3981 for-reification #f #f ())
(3982 primop 3981 7 ())
(3983 for-reification #f #f ())
(3984 operator 3983 7 ())
(3985 types #f #f ())
(3986 types #f #f ())
(3987 types #f #f ())
(3988 types #f #f ())
(3989 types #f #f ())
(3990 types #f #f ())
(3991 types #f #f ())
(3992 types #f #f ())
(3993 types #f #f ())
(3994 types #f #f ())
(3995 types #f #f ())
(3996 types #f #f ())
(3997 types #f #f ())
(3998 types #f #f ())
(3999 types #f #f ())
(4000 types #f #f ())
(4001 types #f #f ())
(4002 types #f #f ())
(4003 types #f #f ())
(4004 types #f #f ())
(4005 types #f #f ())
(4006 types #f #f ())
(4007 procedure 4006 7 ())
(4008 types #f #f ())
(4009 types #f #f ())
(4010 types #f #f ())
(4011 types #f #f ())
(4012 defpackage #f #f ())
(4013 note-name! 4012 7 ())
(4014 defpackage #f #f ())
(4015 set-verify-later! 4014 7 ())
(4016 defpackage #f #f ())
(4017 verify-later! 4016 7 ())
(4018 defpackage #f #f ())
(4019 *verify-later!* 4018 7 ())
(4020 defpackage #f #f ())
(4021 defpackage #f #f ())
(4022 loser 4021 7 ())
(4023 defpackage #f #f ())
(4024 make-a-package 4023 7 ())
(4025 optimizer #f #f ())
(4026 apply-optimizers 4025 7 ())
(4027 #f 4026 6 ())
(4028 optimizer #f #f ())
(4029 get-optimizer 4028 7 ())
(4030 #f 4029 6 ())
(4031 #f 4030 10 ())
(4032 #f 4031 55 ())
(4033 optimizer #f #f ())
(4034 set-optimizer! 4033 7 ())
(4035 optimizer #f #f ())
(4036 scan-package #f #f ())
(4037 check-structure 4036 7 ())
(4038 #f 4037 17 ())
(4039 scan-package #f #f ())
(4040 package-optimizer-names 4039 7 ())
(4041 #f 4040 36 ())
(4042 #f 4040 75 ())
(4043 scan-package #f #f ())
(4044 read-files 4043 7 ())
(4045 #f 4044 30 ())
(4046 scan-package #f #f ())
(4047 package-source 4046 7 ())
(4048 #f 4047 46 ())
(4049 scan-package #f #f ())
(4050 collect-packages 4049 7 ())
(4051 recur 4050 26 ())
(4052 #f 4051 150 ())
(4053 compile-packages #f #f ())
(4054 compile-packages #f #f ())
(4055 compile-packages #f #f ())
(4056 make-define-primitive-node 4055 7 ())
(4057 compile-packages #f #f ())
(4058 define-primitives 4057 7 ())
(4059 #f 4058 17 ())
(4060 #f 4058 36 ())
(4061 compile-packages #f #f ())
(4062 define-usual-transform 4061 7 ())
(4063 compile-packages #f #f ())
(4064 expand-package 4063 7 ())
(4065 #f 4064 21 ())
(4066 #f 4065 10 ())
(4067 #f 4065 28 ())
(4068 #f 4065 82 ())
(4069 #f 4068 15 ())
(4070 #f 4069 10 ())
(4071 compile-packages #f #f ())
(4072 compile-package 4071 7 ())
(4073 module-system #f #f ())
(4074 analysis #f #f ())
(4075 analysis #f #f ())
(4076 analysis #f #f ())
(4077 analysis #f #f ())
(4078 analysis #f #f ())
(4079 package-lookup-type 4078 7 ())
(4080 analysis #f #f ())
(4081 analysis #f #f ())
(4082 require 4081 7 ())
(4083 analysis #f #f ())
(4084 simple-literal? 4083 7 ())
(4085 analysis #f #f ())
(4086 analysis #f #f ())
(4087 analysis #f #f ())
(4088 lexical-node? 4087 7 ())
(4089 analysis #f #f ())
(4090 really-simple-call? 4089 7 ())
(4091 analysis #f #f ())
(4092 static-value 4091 7 ())
(4093 analysis #f #f ())
(4094 #f 4093 11 ())
(4095 analysis #f #f ())
(4096 #f 4095 11 ())
(4097 loop 4096 21 ())
(4098 analysis #f #f ())
(4099 #f 4098 11 ())
(4100 analysis #f #f ())
(4101 #f 4100 11 ())
(4102 analysis #f #f ())
(4103 #f 4102 11 ())
(4104 analysis #f #f ())
(4105 #f 4104 11 ())
(4106 analysis #f #f ())
(4107 #f 4106 11 ())
(4108 analysis #f #f ())
(4109 #f 4108 11 ())
(4110 analysis #f #f ())
(4111 #f 4110 11 ())
(4112 analysis #f #f ())
(4113 #f 4112 11 ())
(4114 analysis #f #f ())
(4115 #f 4114 11 ())
(4116 analysis #f #f ())
(4117 #f 4116 11 ())
(4118 analysis #f #f ())
(4119 define-analyzer 4118 7 ())
(4120 analysis #f #f ())
(4121 #f 4120 11 ())
(4122 analysis #f #f ())
(4123 simple-list? 4122 7 ())
(4124 analysis #f #f ())
(4125 simple? 4124 7 ())
(4126 analysis #f #f ())
(4127 analysis #f #f ())
(4128 simple-lambda? 4127 7 ())
(4129 #f 4128 128 ())
(4130 analysis #f #f ())
(4131 inlinable-rhs? 4130 7 ())
(4132 analysis #f #f ())
(4133 analyze-form 4132 7 ())
(4134 analysis #f #f ())
(4135 analyze-forms 4134 7 ())
(4136 #f 4135 17 ())
(4137 analysis #f #f ())
(4138 #f 4137 11 ())
(4139 flat-environments #f #f ())
(4140 set-difference 4139 7 ())
(4141 recur 4140 18 ())
(4142 flat-environments #f #f ())
(4143 union 4142 7 ())
(4144 recur 4143 31 ())
(4145 flat-environments #f #f ())
(4146 cell-set!-primop 4145 7 ())
(4147 flat-environments #f #f ())
(4148 flat-environments #f #f ())
(4149 cell-ref-primop 4148 7 ())
(4150 flat-environments #f #f ())
(4151 flat-environments #f #f ())
(4152 make-cell-primop 4151 7 ())
(4153 flat-environments #f #f ())
(4154 flat-environments #f #f ())
(4155 flat-environments #f #f ())
(4156 flat-environments #f #f ())
(4157 flat-environments #f #f ())
(4158 flat-environments #f #f ())
(4159 flat-environments #f #f ())
(4160 flat-environments #f #f ())
(4161 flat-environments #f #f ())
(4162 flat-environments #f #f ())
(4163 flat-environments #f #f ())
(4164 make-primop-call 4163 7 ())
(4165 flat-environments #f #f ())
(4166 make-cell-set! 4165 7 ())
(4167 flat-environments #f #f ())
(4168 make-cell-ref 4167 7 ())
(4169 flat-environments #f #f ())
(4170 make-unassigned-cell 4169 7 ())
(4171 flat-environments #f #f ())
(4172 make-cell 4171 7 ())
(4173 flat-environments #f #f ())
(4174 #f 4173 11 ())
(4175 #f 4174 25 ())
(4176 flat-environments #f #f ())
(4177 #f 4176 11 ())
(4178 flat-environments #f #f ())
(4179 #f 4178 11 ())
(4180 flat-environments #f #f ())
(4181 #f 4180 11 ())
(4182 flat-environments #f #f ())
(4183 #f 4182 11 ())
(4184 flat-environments #f #f ())
(4185 flat-environments #f #f ())
(4186 flat-environments #f #f ())
(4187 flat-environments #f #f ())
(4188 flat-environments #f #f ())
(4189 flat-environments #f #f ())
(4190 no-sets 4189 7 ())
(4191 flat-environments #f #f ())
(4192 define-set-marker 4191 7 ())
(4193 flat-environments #f #f ())
(4194 #f 4193 11 ())
(4195 flat-environments #f #f ())
(4196 mark-set-variables! 4195 7 ())
(4197 flat-environments #f #f ())
(4198 assigned? 4197 7 ())
(4199 flat-environments #f #f ())
(4200 #f 4199 11 ())
(4201 flat-environments #f #f ())
(4202 #f 4201 11 ())
(4203 #f 4202 85 ())
(4204 #f 4202 99 ())
(4205 #f 4204 119 ())
(4206 flat-environments #f #f ())
(4207 #f 4206 11 ())
(4208 #f 4207 21 ())
(4209 flat-environments #f #f ())
(4210 #f 4209 11 ())
(4211 #f 4210 21 ())
(4212 #f 4211 6 ())
(4213 flat-environments #f #f ())
(4214 #f 4213 11 ())
(4215 #f 4214 37 ())
(4216 flat-environments #f #f ())
(4217 #f 4216 11 ())
(4218 flat-environments #f #f ())
(4219 add-cells 4218 7 ())
(4220 loop##443 4219 11 ())
(4221 flat-environments #f #f ())
(4222 convert-lambda-body 4221 7 ())
(4223 #f 4222 47 ())
(4224 flat-environments #f #f ())
(4225 flatten-lambda 4224 7 ())
(4226 #f 4225 21 ())
(4227 flat-environments #f #f ())
(4228 #f 4227 11 ())
(4229 flat-environments #f #f ())
(4230 flat-environments #f #f ())
(4231 flat-environments #f #f ())
(4232 flat-environments #f #f ())
(4233 flat-environments #f #f ())
(4234 no-free-vars 4233 7 ())
(4235 flat-environments #f #f ())
(4236 flatten-list 4235 7 ())
(4237 loop 4236 26 ())
(4238 #f 4237 39 ())
(4239 flat-environments #f #f ())
(4240 define-flattener 4239 7 ())
(4241 flat-environments #f #f ())
(4242 #f 4241 11 ())
(4243 #f 4242 6 ())
(4244 flat-environments #f #f ())
(4245 flatten-node 4244 7 ())
(4246 flat-environments #f #f ())
(4247 flatten-form 4246 7 ())
(4248 #f 4247 73 ())
(4249 #f 4247 120 ())
(4250 flat-environments #f #f ())
(4251 #f 4250 11 ())
(4252 #f 4251 6 ())
(4253 ensures-loaded #f #f ())
(4254 ensure-loaded 4253 7 ())
(4255 #f 4254 49 ())
(4256 #f 4255 56 ())
(4257 #f 4254 61 ())
(4258 #f #f #f ())
(4259 #f 4258 3 ())
(4260 get-location 4259 3 ())
(4261 #f 4259 10490 ())
(4262 #f 4259 10539 ())
(4263 #f 4259 10652 ())
(4264 #f 4259 10770 ())
(4265 #f 4259 10851 ())
(4266 conc 4265 42 ())
(4267 #f 4266 16 ())
(4268 #f 4259 12161 ())
(4269 loop 4268 115 ())
(4270 #f 4268 202 ())
(4271 #f 4268 233 ())
(4272 #f 4268 413 ())
(4273 #f 4268 471 ())
(4274 #f 4259 12549 ())
(4275 mem? 4274 197 ())
(4276 every? 4274 206 ())
(4277 #f 4274 219 ())
(4278 #f 4274 282 ())
(4279 #f 4259 12745 ())
(4280 loop##448 4279 66 ())
(4281 #f 4259 12794 ())
(4282 #f 4259 14536 ())
(4283 #f 4259 21629 ())
(4284 #f 4283 456 ())
(4285 #f 4259 22563 ())
(4286 loop 4285 95 ())
(4287 #f 4259 22720 ())
(4288 loop 4287 95 ())
(4289 #f 4259 22845 ())
(4290 loop 4289 95 ())
(4291 #f 4259 22938 ())
(4292 loop 4291 95 ())
(4293 #f 4259 23031 ())
(4294 loop 4293 95 ())
(4295 #f 4259 23124 ())
(4296 loop 4295 95 ())
(4297 #f 4259 23217 ())
(4298 loop 4297 95 ())
(4299 #f 4259 23310 ())
(4300 loop 4299 95 ())
(4301 #f 4259 23403 ())
(4302 loop 4301 95 ())
(4303 #f 4259 24099 ())
(4304 loop 4303 95 ())
(4305 #f 4259 26351 ())
(4306 #f 4259 26514 ())
(4307 #f 4259 26563 ())
(4308 #f 4259 26612 ())
(4309 #f 4259 26757 ())
(4310 #f 4259 26975 ())
(4311 #f 4259 29898 ())
(4312 #f 4259 30098 ())
(4313 #f 4259 30147 ())
(4314 #f 4259 30196 ())
(4315 #f 4314 146 ())
(4316 #f 4259 30245 ())
(4317 #f 4316 329 ())
(4318 #f 4316 403 ())
(4319 #f 4259 30624 ())
(4320 #f 4259 30673 ())
(4321 #f 4320 176 ())
(4322 parse-package-clauses 4259 30731 ())
(4323 loop 4322 76 ())
(4324 #f 4259 30740 ())
(4325 #f 4324 35 ())
(4326 #f 4325 146 ())
(4327 #f 4259 30996 ())
(4328 #f 4259 31045 ())
(4329 loop 4328 35 ())
(4330 #f 4259 31158 ())
(4331 #f 4259 31239 ())
(4332 #f 4259 31320 ())
(4333 loop 4332 51 ())
(4334 #f 4332 90 ())
(4335 #f 4332 114 ())
(4336 #f 4259 31401 ())
(4337 #f 4259 32658 ())
(4338 #f 4259 32794 ())
(4339 #f #f #f ())
-
