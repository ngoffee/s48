; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 record-types)
(17 export-the-record-type)
(18 define-record-types)
(19 methods)
(20 number-i/o)
(21 fluids)
(22 wind)
(23 session-data)
(24 i/o)
(25 channel-i/o)
(26 channel-ports)
(27 conditions)
(28 writing)
(29 reading)
(30 scheme-level-2)
(31 features)
(32 templates)
(33 continuations)
(34 more-types)
(35 enumerated)
(36 architecture)
(37 exceptions)
(38 interrupts)
(39 threads)
(40 proposals)
(41 scheduler)
(42 root-scheduler)
(43 enum-case)
(44 queues)
(45 locks)
(46 condvars)
(47 usual-resumer)
(48 weak)
(49 display-conditions)
(50 meta-types)
(51 bindings)
(52 names)
(53 thingies)
(54 nodes)
(55 compiler-envs)
(56 syntactic)
(57 usual-macros)
(58 var-utilities)
(59 debug-data)
(60 stack-check)
(61 segments)
(62 primops)
(63 reconstruction)
(64 compiler)
(65 reading-forms)
(66 flat-environments)
(67 interfaces)
(68 packages)
(69 scan-package)
(70 optimizer)
(71 compile-packages)
(72 defpackage)
(73 types)
(74 module-system)
(75 usages)
(76 analysis)
(77 inline)
(78 strong)
(79 tables)
(80 filenames)
(81 environments)
(82 evaluation)
(83 ensures-loaded)
(84 for-reification)
(85 scheme)
(86 mini-command)
(87 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (flat-lambda . 14))
(14 (primitive-procedure . 14))
(15 (define . 14))
(16 (if . 14))
(17 (pure-letrec . 14))
(18 (letrec-syntax . 14))
(19 (%file-name% . 14))
(20 (let-syntax . 14))
(21 (structure-ref . 14))
(22 (loophole . 14))
(23 (letrec . 14))
(24 (lap . 14))
(25 (set! . 14))
(26 (call . 14))
(27 (atan . 14))
(28 (set-location-defined?! . 14))
(29 (acos . 14))
(30 (vm-extension . 14))
(31 (asin . 14))
(32 (location-defined? . 14))
(33 (time . 14))
(34 (template-set! . 14))
(35 (set-current-proposal! . 14))
(36 (cons . 14))
(37 (wait . 14))
(38 (trap . 14))
(39 (assq . 14))
(40 (current-proposal . 14))
(41 (make-weak-pointer . 14))
(42 (lookup-shared-binding . 14))
(43 (push . 14))
(44 (provisional-set-contents! . 14))
(45 (set-contents! . 14))
(46 (read-char . 14))
(47 (provisional-contents . 14))
(48 (make-cell . 14))
(49 (sqrt . 14))
(50 (* . 14))
(51 (contents . 14))
(52 (+ . 14))
(53 (peek-char . 14))
(54 (- . 14))
(55 (continuation-set! . 14))
(56 (/ . 14))
(57 (weak-pointer? . 14))
(58 (quotient . 14))
(59 (close-channel . 14))
(60 (channel-abort . 14))
(61 (char? . 14))
(62 (< . 14))
(63 (= . 14))
(64 (provisional-set-port-data! . 14))
(65 (cell? . 14))
(66 (> . 14))
(67 (make-location . 14))
(68 (imag-part . 14))
(69 (set-port-data! . 14))
(70 (make-template . 14))
(71 (real? . 14))
(72 (real-part . 14))
(73 (provisional-port-data . 14))
(74 (record-length . 14))
(75 (port-data . 14))
(76 (pair? . 14))
(77 (provisional-set-port-lock! . 14))
(78 (make-port . 14))
(79 (set-port-lock! . 14))
(80 (bit-count . 14))
(81 (provisional-checked-record-ref . 14))
(82 (return-from-exception . 14))
(83 (provisional-port-lock . 14))
(84 (location? . 14))
(85 (checked-record-ref . 14))
(86 (channel-maybe-read . 14))
(87 (add-finalizer! . 14))
(88 (rational? . 14))
(89 (template? . 14))
(90 (port-lock . 14))
(91 (vector-length . 14))
(92 (make-continuation . 14))
(93 (provisional-shared-binding-ref . 14))
(94 (string-length . 14))
(95 (shared-binding-ref . 14))
(96 (port? . 14))
(97 (angle . 14))
(98 (false . 14))
(99 (remainder . 14))
(100 (continuation? . 14))
(101 (channel-ready? . 14))
(102 (binary-reduce1 . 14))
(103 (binary-reduce2 . 14))
(104 (char<? . 14))
(105 (char=? . 14))
(106 (<= . 14))
(107 (magnitude . 14))
(108 (>= . 14))
(109 (with-continuation . 14))
(110 (floor . 14))
(111 (provisional-checked-record-set! . 14))
(112 (apply . 14))
(113 (memory-status . 14))
(114 (checked-record-set! . 14))
(115 (exact->inexact . 14))
(116 (inexact->exact . 14))
(117 (error . 14))
(118 (extended-number-length . 14))
(119 (open-channels-list . 14))
(120 (provisional-shared-binding-set! . 14))
(121 (channel-id . 14))
(122 (shared-binding-set! . 14))
(123 (numerator . 14))
(124 (eof-object . 14))
(125 (byte-vector-length . 14))
(126 (record-ref . 14))
(127 (make-polar . 14))
(128 (write-char . 14))
(129 (symbol->string . 14))
(130 (exact? . 14))
(131 (provisional-vector-ref . 14))
(132 (vector-ref . 14))
(133 (set-current-thread! . 14))
(134 (provisional-set-port-index! . 14))
(135 (immutable? . 14))
(136 (set-exception-handlers! . 14))
(137 (string-ref . 14))
(138 (set-port-index! . 14))
(139 (provisional-set-port-limit! . 14))
(140 (make-shared-binding . 14))
(141 (current-thread . 14))
(142 (provisional-port-index . 14))
(143 (channel-status . 14))
(144 (set-port-limit! . 14))
(145 (shared-binding-name . 14))
(146 (port-index . 14))
(147 (make-immutable! . 14))
(148 (byte-vector-logging-ref . 14))
(149 (set-enabled-interrupts! . 14))
(150 (provisional-port-limit . 14))
(151 (port-limit . 14))
(152 (ascii->char . 14))
(153 (char->ascii . 14))
(154 (undefine-shared-binding . 14))
(155 (attempt-copy-bytes! . 14))
(156 (record-set! . 14))
(157 (shared-binding? . 14))
(158 (eof-object? . 14))
(159 (set-interrupt-handlers! . 14))
(160 (record . 14))
(161 (schedule-interrupt . 14))
(162 (channel-maybe-write . 14))
(163 (provisional-vector-set! . 14))
(164 (extended-number-ref . 14))
(165 (vector-set! . 14))
(166 (copy-bytes! . 14))
(167 (string-set! . 14))
(168 (call-external-value . 14))
(169 (values . 14))
(170 (intern . 14))
(171 (vector . 14))
(172 (write-image-low . 14))
(173 (provisional-byte-vector-ref . 14))
(174 (byte-vector-logging-set! . 14))
(175 (byte-vector-ref . 14))
(176 (make-double . 14))
(177 (provisional-set-location-id! . 14))
(178 (make-record . 14))
(179 (set-location-id! . 14))
(180 (provisional-location-id . 14))
(181 (location-id . 14))
(182 (bitwise-and . 14))
(183 (eq? . 14))
(184 (double? . 14))
(185 (extended-number-set! . 14))
(186 (make-vector . 14))
(187 (record? . 14))
(188 (provisional-set-port-buffer! . 14))
(189 (make-string . 14))
(190 (set-port-buffer! . 14))
(191 (primitive-catch . 14))
(192 (string-hash . 14))
(193 (provisional-byte-vector-set! . 14))
(194 (template-length . 14))
(195 (provisional-port-buffer . 14))
(196 (number? . 14))
(197 (port-buffer . 14))
(198 (byte-vector-set! . 14))
(199 (bitwise-ior . 14))
(200 (provisional-set-car! . 14))
(201 (provisional-set-cdr! . 14))
(202 (set-car! . 14))
(203 (closure-env . 14))
(204 (vector? . 14))
(205 (bitwise-not . 14))
(206 (set-cdr! . 14))
(207 (provisional-car . 14))
(208 (symbol? . 14))
(209 (string? . 14))
(210 (provisional-cdr . 14))
(211 (car . 14))
(212 (bitwise-xor . 14))
(213 (cdr . 14))
(214 (find-all-records . 14))
(215 (continuation-length . 14))
(216 (log . 14))
(217 (message . 14))
(218 (tan . 14))
(219 (collect . 14))
(220 (cos . 14))
(221 (channel-os-index . 14))
(222 (provisional-set-port-status! . 14))
(223 (make-extended-number . 14))
(224 (set-port-status! . 14))
(225 (sin . 14))
(226 (exp . 14))
(227 (provisional-port-status . 14))
(228 (pop . 14))
(229 (port-status . 14))
(230 (return-from-callback . 14))
(231 (provisional-set-port-locked?! . 14))
(232 (set-port-locked?! . 14))
(233 (make-byte-vector . 14))
(234 (weak-pointer-ref . 14))
(235 (call-with-values . 14))
(236 (provisional-port-locked? . 14))
(237 (denominator . 14))
(238 (port-locked? . 14))
(239 (reverse-list->string . 14))
(240 (extended-number? . 14))
(241 (shared-binding-is-import? . 14))
(242 (provisional-cell-ref . 14))
(243 (find-all . 14))
(244 (cell-ref . 14))
(245 (byte-vector? . 14))
(246 (string=? . 14))
(247 (open-channel . 14))
(248 (channel? . 14))
(249 (make-rectangular . 14))
(250 (set-session-data! . 14))
(251 (maybe-commit . 14))
(252 (template-ref . 14))
(253 (make-closure . 14))
(254 (session-data . 14))
(255 (integer? . 14))
(256 (signal-condition . 14))
(257 (provisional-set-port-pending-eof?! . 14))
(258 (port-handler . 14))
(259 (set-port-pending-eof?! . 14))
(260 (arithmetic-shift . 14))
(261 (provisional-port-pending-eof? . 14))
(262 (provisional-cell-set! . 14))
(263 (complex? . 14))
(264 (port-pending-eof? . 14))
(265 (cell-set! . 14))
(266 (binary-comparison-reduce2 . 14))
(267 (closure? . 14))
(268 (continuation-ref . 14))
(269 (closure-template . 14))
(270 (current-cont . 14))
(271 (char->integer . 14))
(272 (integer->char . 14))
(273 (ascii-limit . 14))
(274 (ascii-whitespaces . 14))
(275 (procedure? . 14))
(276 (invoke-closure . 14))
(277 (primitive-cwcc . 14))
(278 (make-undefined-location . 14))
(279 (location-assigned? . 14))
(280 (vector-unassigned? . 14))
(281 (string-copy . 14))
(282 (string->symbol . 14))
(283 (input-port? . 14))
(284 (output-port? . 14))
(285 (record-type . 14))
(286 (make-code-vector . 14))
(287 (code-vector? . 14))
(288 (code-vector-length . 14))
(289 (code-vector-ref . 14))
(290 (code-vector-set! . 14))
(291 (lookup-imported-binding . 14))
(292 (lookup-exported-binding . 14))
(293 (define-imported-binding . 14))
(294 (define-exported-binding . 14))
(295 (undefine-imported-binding . 14))
(296 (undefine-exported-binding . 14))
(297 (byte-vector . 14))
(298 (secret-length . 14))
(299 (debug-message . 14))
(300 (write-image . 14))
(301 (vector-prefix->list . 14))
(302 (empty-log . 14))
(303 (make-proposal . 14))
(304 (make-condition . 14))
(305 (signal . 14))
(306 (warn . 14))
(307 (note . 14))
(308 (syntax-error . 14))
(309 (call-error . 14))
(310 (case . 15))
(311 (quasiquote . 15))
(312 (syntax-rules . 15))
(313 (not . 15))
(314 (boolean? . 15))
(315 (eqv? . 15))
(316 (equal? . 15))
(317 (max . 15))
(318 (min . 15))
(319 (max-or-min . 15))
(320 (abs . 15))
(321 (zero? . 15))
(322 (positive? . 15))
(323 (negative? . 15))
(324 (even? . 15))
(325 (odd? . 15))
(326 (caar . 15))
(327 (cadr . 15))
(328 (cdar . 15))
(329 (cddr . 15))
(330 (caaar . 15))
(331 (caadr . 15))
(332 (cadar . 15))
(333 (caddr . 15))
(334 (cdaar . 15))
(335 (cdadr . 15))
(336 (cddar . 15))
(337 (cdddr . 15))
(338 (caaaar . 15))
(339 (caaadr . 15))
(340 (caadar . 15))
(341 (caaddr . 15))
(342 (cadaar . 15))
(343 (cadadr . 15))
(344 (caddar . 15))
(345 (cadddr . 15))
(346 (cdaaar . 15))
(347 (cdaadr . 15))
(348 (cdadar . 15))
(349 (cdaddr . 15))
(350 (cddaar . 15))
(351 (cddadr . 15))
(352 (cdddar . 15))
(353 (cddddr . 15))
(354 (null? . 15))
(355 (list . 15))
(356 (length . 15))
(357 (real-length . 15))
(358 (append . 15))
(359 (reverse . 15))
(360 (append-reverse . 15))
(361 (list-tail . 15))
(362 (list-ref . 15))
(363 (mem . 15))
(364 (memq . 15))
(365 (memv . 15))
(366 (member . 15))
(367 (ass . 15))
(368 (assv . 15))
(369 (assoc . 15))
(370 (list? . 15))
(371 (char>? . 15))
(372 (char>=? . 15))
(373 (char<=? . 15))
(374 (char-whitespace? . 15))
(375 (char-lower-case? . 15))
(376 (char-upper-case? . 15))
(377 (char-numeric? . 15))
(378 (char-alphabetic? . 15))
(379 (char-case-delta . 15))
(380 (make-character-map . 15))
(381 (upcase-map . 15))
(382 (char-upcase . 15))
(383 (downcase-map . 15))
(384 (char-downcase . 15))
(385 (char-ci-compare . 15))
(386 (char-ci=? . 15))
(387 (char-ci<? . 15))
(388 (char-ci<=? . 15))
(389 (char-ci>? . 15))
(390 (char-ci>=? . 15))
(391 (string . 15))
(392 (substring . 15))
(393 (string-append . 15))
(394 (string->list . 15))
(395 (list->string . 15))
(396 (string-fill! . 15))
(397 (make-string=? . 15))
(398 (string-ci=? . 15))
(399 (make-string<? . 15))
(400 (string<? . 15))
(401 (string-ci<? . 15))
(402 (string>? . 15))
(403 (string<=? . 15))
(404 (string>=? . 15))
(405 (string-ci>? . 15))
(406 (string-ci<=? . 15))
(407 (string-ci>=? . 15))
(408 (vector->list . 15))
(409 (list->vector . 15))
(410 (vector-fill! . 15))
(411 (map . 15))
(412 (map1 . 15))
(413 (map2+ . 15))
(414 (for-each . 15))
(415 (for-each1 . 15))
(416 (for-each2+ . 15))
(417 (delay . 15))
(418 (make-promise . 15))
(419 (force . 15))
(420 (unspecific . 15))
(421 (reduce . 15))
(422 (filter . 15))
(423 (pos . 15))
(424 (posq . 15))
(425 (posv . 15))
(426 (position . 15))
(427 (any . 15))
(428 (every . 15))
(429 (sublist . 15))
(430 (last . 15))
(431 (insert . 15))
(432 (fold . 15))
(433 (fold->2 . 15))
(434 (fold->3 . 15))
(435 (mvlet . 15))
(436 (mvlet-helper . 15))
(437 (copy-vars . 15))
(438 (mvlet* . 15))
(439 (inexact? . 15))
(440 (modulo . 15))
(441 (ceiling . 15))
(442 (truncate . 15))
(443 (round . 15))
(444 (gcd . 15))
(445 (euclid . 15))
(446 (lcm . 15))
(447 (expt . 15))
(448 (raise-to-integer-power . 15))
(449 (rationalize . 15))
(450 (simplest-rational . 15))
(451 (*record-type-uid* . 16))
(452 (*record-type* . 16))
(453 (make-record-type . 16))
(454 (record-type? . 16))
(455 (record-type-resumer . 16))
(456 (set-record-type-resumer! . 16))
(457 (record-type-uid . 16))
(458 (record-type-name . 16))
(459 (record-type-field-names . 16))
(460 (record-type-number-of-fields . 16))
(461 (record-type-discloser . 16))
(462 (set-record-type-discloser! . 16))
(463 (record-type-fields . 16))
(464 (record-field-index . 16))
(465 (record-constructor . 16))
(466 (record-accessor . 16))
(467 (record-modifier . 16))
(468 (record-predicate . 16))
(469 (define-record-discloser . 16))
(470 (make-default-record-discloser . 16))
(471 (disclose-record . 16))
(472 (define-record-resumer . 16))
(473 (default-record-resumer . 16))
(474 (initialize-records! . 16))
(475 (resume-record . 16))
(476 (:record-type . 16))
(477 (define-record-type . 18))
(478 (define-synchronized-record-type . 18))
(479 (define-constructor . 18))
(480 (define-accessors . 18))
(481 (define-accessor . 18))
(482 (ref-proc . 18))
(483 (set-proc . 18))
(484 (:simple-type . 19))
(485 (really-make-simple-type . 19))
(486 (simple-type-id . 19))
(487 (simple-type-priority . 19))
(488 (simple-type-predicate . 19))
(489 (simple-type-superiors . 19))
(490 (simple-type? . 19))
(491 (make-simple-type . 19))
(492 (compute-priority . 19))
(493 (*increment* . 19))
(494 (%type-priority . 19))
(495 (%type-predicate . 19))
(496 (%same-type? . 19))
(497 (define-simple-type . 19))
(498 (:syntax . 19))
(499 (:values . 19))
(500 (value? . 19))
(501 (:value . 19))
(502 (:zero . 19))
(503 (:number . 19))
(504 (:complex . 19))
(505 (:real . 19))
(506 (:rational . 19))
(507 (:integer . 19))
(508 (:exact-integer . 19))
(509 (:boolean . 19))
(510 (:symbol . 19))
(511 (:char . 19))
(512 (:null . 19))
(513 (:pair . 19))
(514 (:vector . 19))
(515 (:string . 19))
(516 (:procedure . 19))
(517 (:input-port . 19))
(518 (:output-port . 19))
(519 (:eof-object . 19))
(520 (:record . 19))
(521 (record-type-priority . 19))
(522 (:method-info . 19))
(523 (really-make-method-info . 19))
(524 (method-info-proc . 19))
(525 (method-info-n-ary? . 19))
(526 (method-info-types . 19))
(527 (method-info? . 19))
(528 (make-method-info . 19))
(529 (empty-method-list . 19))
(530 (insert-method . 19))
(531 (same-applicability? . 19))
(532 (every2 . 19))
(533 (more-specific? . 19))
(534 (more-specific-type? . 19))
(535 (:method-table . 19))
(536 (really-make-method-table . 19))
(537 (method-table-id . 19))
(538 (method-table-set-perform! . 19))
(539 (method-table-get-perform . 19))
(540 (make-generic . 19))
(541 (method-table-prototype . 19))
(542 (method-table-methods . 19))
(543 (set-method-table-methods! . 19))
(544 (method-table? . 19))
(545 (make-method-table . 19))
(546 (make-cell-for-generic . 19))
(547 (add-to-method-table! . 19))
(548 (set-final-method! . 19))
(549 (apply-generic . 19))
(550 (define-generic . 19))
(551 (methods->perform . 19))
(552 (last-action . 19))
(553 (one-action . 19))
(554 (argument-sequence-predicate . 19))
(555 (check-for-next . 19))
(556 (check-next . 19))
(557 (method-info . 19))
(558 (method-internal . 19))
(559 (with-next-method . 19))
(560 (define-method . 19))
(561 (&add-method! . 19))
(562 (add-method! . 19))
(563 (&type-predicate . 19))
(564 (type-predicate . 19))
(565 (&type-priority . 19))
(566 (type-priority . 19))
(567 (&type-superiors . 19))
(568 (type-superiors . 19))
(569 (&same-type? . 19))
(570 (same-type? . 19))
(571 (:singleton . 19))
(572 (singleton . 19))
(573 (singleton-value . 19))
(574 (compare-to . 19))
(575 (&disclose . 19))
(576 (disclose . 19))
(577 (proc->discloser . 19))
(578 (&number->string . 20))
(579 (real-number->string . 20))
(580 (number->string . 20))
(581 (integer->string . 20))
(582 (string->number . 20))
(583 (&really-string->number . 20))
(584 (really-string->number . 20))
(585 (:integer-string . 20))
(586 (set-exactness . 20))
(587 (string->integer . 20))
(588 (:thread . 21))
(589 (make-thread . 21))
(590 (thread-proposal . 21))
(591 (thread-dynamic-point . 21))
(592 (thread-dynamic-env . 21))
(593 (get-dynamic-env . 21))
(594 (set-dynamic-env! . 21))
(595 (get-dynamic-point . 21))
(596 (set-dynamic-point! . 21))
(597 (initialize-dynamic-state! . 21))
(598 (with-dynamic-env . 21))
(599 (empty-dynamic-env . 21))
(600 (:fluid . 21))
(601 (make-fluid . 21))
(602 (fluid-top-level-value . 21))
(603 (set-fluid-top-level-value! . 21))
(604 (fluid . 21))
(605 (set-fluid! . 21))
(606 (let-fluid . 21))
(607 (let-fluids . 21))
(608 (fluid-cell-ref . 21))
(609 (fluid-cell-set! . 21))
(610 (define-enumeration . 35))
(611 (components . 35))
(612 (enum . 35))
(613 (enumerand->name . 35))
(614 (name->enumerand . 35))
(615 (lookup-enumerand . 35))
(616 (architecture-version . 36))
(617 (bits-used-per-byte . 36))
(618 (byte-limit . 36))
(619 (define-instruction-set . 36))
(620 (op . 36))
(621 (op-enumeration . 36))
(622 (op-count . 36))
(623 (opcode-arg-specs . 36))
(624 (interrupt . 36))
(625 (interrupt-enumeration . 36))
(626 (interrupt-count . 36))
(627 (exception . 36))
(628 (exception-enumeration . 36))
(629 (exception-count . 36))
(630 (current-port-marker . 36))
(631 (current-port-marker-enumeration . 36))
(632 (current-port-marker-count . 36))
(633 (maximum-stack-args . 36))
(634 (*last-protocol* . 36))
(635 (next-protocol . 36))
(636 (two-byte-nargs-protocol . 36))
(637 (two-byte-nargs+list-protocol . 36))
(638 (ignore-values-protocol . 36))
(639 (big-stack-protocol . 36))
(640 (args+nargs-protocol . 36))
(641 (nary-dispatch-protocol . 36))
(642 (call-with-values-protocol . 36))
(643 (bottom-of-stack-protocol . 36))
(644 (maximum-external-call-args . 36))
(645 (default-stack-space . 36))
(646 (environment-stack-size . 36))
(647 (continuation-stack-size . 36))
(648 (available-stack-space . 36))
(649 (time-option . 36))
(650 (time-option-enumeration . 36))
(651 (time-option-count . 36))
(652 (memory-status-option . 36))
(653 (memory-status-option-enumeration . 36))
(654 (memory-status-option-count . 36))
(655 (channel-status-option . 36))
(656 (channel-status-option-enumeration . 36))
(657 (channel-status-option-count . 36))
(658 (port-status-options . 36))
(659 (port-status-options-enumeration . 36))
(660 (port-status-options-count . 36))
(661 (stob . 36))
(662 (stob-enumeration . 36))
(663 (stob-count . 36))
(664 (least-b-vector-type . 36))
(665 (stob-data . 36))
(666 (call-atomically . 40))
(667 (call-atomically! . 40))
(668 (call-ensuring-atomicity . 40))
(669 (call-ensuring-atomicity! . 40))
(670 (atomically . 40))
(671 (atomically! . 40))
(672 (ensure-atomicity . 40))
(673 (ensure-atomicity! . 40))
(674 (with-new-proposal . 40))
(675 (remove-current-proposal! . 40))
(676 (invalidate-current-proposal! . 40))
(677 (j-random-pair . 40))
(678 (*session-data-initializers* . 23))
(679 (make-session-data-slot! . 23))
(680 (session-data-ref . 23))
(681 (session-data-set! . 23))
(682 (initialize-session-data! . 23))
(683 (*condition-types* . 27))
(684 (condition-supertypes . 27))
(685 (define-condition-type . 27))
(686 (condition-predicate . 27))
(687 (condition? . 27))
(688 (condition-type . 27))
(689 (condition-stuff . 27))
(690 (error? . 27))
(691 (call-error? . 27))
(692 (read-error? . 27))
(693 (exception? . 27))
(694 (exception-opcode . 27))
(695 (exception-reason . 27))
(696 (exception-arguments . 27))
(697 (make-exception . 27))
(698 (warning? . 27))
(699 (syntax-error? . 27))
(700 (note? . 27))
(701 (interrupt? . 27))
(702 (dynamic-wind . 22))
(703 (call-with-current-continuation . 22))
(704 (continuation->procedure . 22))
(705 (:point . 22))
(706 (make-point . 22))
(707 (point-parent . 22))
(708 (point-dynamic-env . 22))
(709 (point-out . 22))
(710 (point-in . 22))
(711 (point-depth . 22))
(712 (travel-to-point! . 22))
(713 (template-overhead . 32))
(714 (template-code . 32))
(715 (template-info . 32))
(716 (set-template-code! . 32))
(717 (set-template-info! . 32))
(718 (:closure . 34))
(719 (:code-vector . 34))
(720 (:location . 34))
(721 (:cell . 34))
(722 (:template . 34))
(723 (:channel . 34))
(724 (:port . 34))
(725 (:double . 34))
(726 (:weak-pointer . 34))
(727 (:shared-binding . 34))
(728 (continuation-cont . 33))
(729 (real-continuation-pc . 33))
(730 (real-continuation-template . 33))
(731 (continuation-env . 33))
(732 (exception-continuation-pc . 33))
(733 (exception-continuation-template . 33))
(734 (exception-continuation-exception . 33))
(735 (exception-continuation? . 33))
(736 (continuation-pc . 33))
(737 (continuation-template . 33))
(738 (normal-continuation-overhead . 33))
(739 (exception-continuation-overhead . 33))
(740 (continuation-arg . 33))
(741 (continuation-arg-count . 33))
(742 (:continuation . 33))
(743 (continuation-parent . 33))
(744 (define-exception-handler . 37))
(745 (signal-exception . 37))
(746 (exception-handlers . 37))
(747 (extend-opcode! . 37))
(748 (really-signal-condition . 37))
(749 (with-handler . 37))
(750 ($condition-handlers . 37))
(751 (initialize-exceptions! . 37))
(752 (last-resort-condition-handler . 37))
(753 (report-utter-lossage . 37))
(754 (continuation-preview . 37))
(755 (ignore-errors . 37))
(756 (report-errors-as-warnings . 37))
(757 (:port-handler . 24))
(758 (make-port-handler . 24))
(759 (port-handler-force . 24))
(760 (port-handler-ready? . 24))
(761 (port-handler-block . 24))
(762 (port-handler-char . 24))
(763 (port-handler-close . 24))
(764 (port-handler-discloser . 24))
(765 (port-handler? . 24))
(766 (disclose-port . 24))
(767 (initialize-i/o-handlers! . 24))
(768 (one-arg-proc->handler . 24))
(769 (two-arg-proc->handler . 24))
(770 (real-char-ready? . 24))
(771 (read-block . 24))
(772 (write-block . 24))
(773 (write-string . 24))
(774 (output-port-ready? . 24))
(775 (force-output . 24))
(776 (force-output-if-open . 24))
(777 (close-input-port . 24))
(778 (close-output-port . 24))
(779 (okay-limits? . 24))
(780 (open-port? . 24))
(781 (open-port-mask . 24))
(782 (input-port-mask . 24))
(783 (open-input-port-mask . 24))
(784 (open-input-port-status . 24))
(785 (open-input-port? . 24))
(786 (make-input-port-closed! . 24))
(787 (make-unbuffered-input-port . 24))
(788 (output-port-mask . 24))
(789 (open-output-port-mask . 24))
(790 (open-output-port-status . 24))
(791 (open-output-port? . 24))
(792 (make-output-port-closed! . 24))
(793 (make-unbuffered-output-port . 24))
(794 (null-output-port-handler . 24))
(795 (null-output-buffer . 24))
(796 (make-null-output-port . 24))
(797 (make-buffered-input-port . 24))
(798 (make-buffered-output-port . 24))
(799 (okay-buffer? . 24))
(800 (make-buffered-input-port-handler . 24))
(801 (note-buffer-reuse! . 24))
(802 (check-buffer-timestamp! . 24))
(803 (port-flushed? . 24))
(804 (set-port-flushed?! . 24))
(805 (make-one-char-input . 24))
(806 (make-char-ready? . 24))
(807 (make-read-block . 24))
(808 (get-available-bytes! . 24))
(809 (buffer-length . 24))
(810 (make-buffered-output-port-handler . 24))
(811 (make-closer . 24))
(812 (make-one-char-output . 24))
(813 (make-write-block . 24))
(814 (copy-bytes-out! . 24))
(815 (make-forcer . 24))
(816 (default-buffer-size . 24))
(817 (flush-these-ports . 24))
(818 (periodically-force-output! . 24))
(819 (output-port-forcers . 24))
(820 (periodically-flushed-ports . 24))
(821 (make-forcing-thunk . 24))
(822 ($current-input-port . 24))
(823 ($current-output-port . 24))
(824 ($current-error-port . 24))
(825 ($current-noise-port . 24))
(826 (current-input-port . 24))
(827 (current-output-port . 24))
(828 (current-error-port . 24))
(829 (current-noise-port . 24))
(830 (initialize-i/o . 24))
(831 (with-current-ports . 24))
(832 (call-with-current-input-port . 24))
(833 (call-with-current-output-port . 24))
(834 (call-with-current-noise-port . 24))
(835 (silently . 24))
(836 (newline . 24))
(837 (char-ready? . 24))
(838 (output-port-option . 24))
(839 (input-port-option . 24))
(840 (write . 28))
(841 (recurring-write . 28))
(842 (write-boolean . 28))
(843 (write-number . 28))
(844 (write-char-literal . 28))
(845 (character-name . 28))
(846 (write-string-literal . 28))
(847 (write-list . 28))
(848 (quotation? . 28))
(849 (write-vector . 28))
(850 (write-other . 28))
(851 (display-type-name . 28))
(852 (display . 28))
(853 (read . 29))
(854 (sub-read-carefully . 29))
(855 (reader-token-marker . 29))
(856 (make-reader-token . 29))
(857 (reader-token? . 29))
(858 (close-paren . 29))
(859 (dot . 29))
(860 (sub-read . 29))
(861 (read-dispatch-vector . 29))
(862 (read-terminating?-vector . 29))
(863 (set-standard-syntax! . 29))
(864 (set-standard-read-macro! . 29))
(865 (sub-read-list . 29))
(866 (gobble-line . 29))
(867 (*sharp-macros* . 29))
(868 (define-sharp-macro . 29))
(869 (proper-list? . 29))
(870 (sub-read-token . 29))
(871 (parse-token . 29))
(872 (strange-symbol-names . 29))
(873 (p-c-v . 29))
(874 (preferred-case . 29))
(875 (reading-error . 29))
(876 (:queue . 44))
(877 (really-make-queue . 44))
(878 (queue? . 44))
(879 (queue-tail . 44))
(880 (set-queue-tail! . 44))
(881 (queue-head . 44))
(882 (set-queue-head! . 44))
(883 (queue-uid . 44))
(884 (next-uid . 44))
(885 (make-queue . 44))
(886 (queue-empty? . 44))
(887 (enqueue! . 44))
(888 (queue-front . 44))
(889 (dequeue! . 44))
(890 (empty-queue! . 44))
(891 (on-queue? . 44))
(892 (delete-from-queue! . 44))
(893 (delete-from-queue-if! . 44))
(894 (queue->list . 44))
(895 (list->queue . 44))
(896 (queue-length . 44))
(897 (initialize-interrupts! . 38))
(898 (interrupt-handlers . 38))
(899 (set-interrupt-handler! . 38))
(900 (no-interrupts . 38))
(901 (all-interrupts . 38))
(902 (with-interrupts-inhibited . 38))
(903 (with-interrupts-allowed . 38))
(904 (disable-interrupts! . 38))
(905 (enable-interrupts! . 38))
(906 (with-interrupts . 38))
(907 (enabled-interrupts . 38))
(908 (*post-gc-procedures* . 38))
(909 (call-after-gc! . 38))
(910 (post-gc-handler . 38))
(911 (required-post-gc-space . 38))
(912 (space-shortage-handler . 38))
(913 (call-before-heap-overflow! . 38))
(914 (:thread . 39))
(915 (really-make-thread . 39))
(916 (thread-name . 39))
(917 (thread-uid . 39))
(918 (thread-queue . 39))
(919 (set-thread-queue! . 39))
(920 (thread-data . 39))
(921 (set-thread-data! . 39))
(922 (thread-events . 39))
(923 (set-thread-events! . 39))
(924 (thread-current-task . 39))
(925 (set-thread-current-task! . 39))
(926 (thread-scheduler . 39))
(927 (set-thread-scheduler! . 39))
(928 (thread-arguments . 39))
(929 (set-thread-arguments! . 39))
(930 (thread-continuation . 39))
(931 (set-thread-continuation! . 39))
(932 (thread-time . 39))
(933 (set-thread-time! . 39))
(934 (thread-proposal . 39))
(935 (thread-dynamic-point . 39))
(936 (set-thread-dynamic-point! . 39))
(937 (thread-dynamic-env . 39))
(938 (thread? . 39))
(939 (*thread-uid* . 39))
(940 (make-thread . 39))
(941 (thread-top-level . 39))
(942 (thread-uid->thread . 39))
(943 (all-threads . 39))
(944 (add-event! . 39))
(945 (next-event! . 39))
(946 (thunk->continuation . 39))
(947 (compose-continuation . 39))
(948 (make-thread-queue . 39))
(949 (thread-queue-empty? . 39))
(950 (enqueue-thread! . 39))
(951 (dequeue-thread! . 39))
(952 (remove-thread-from-queue! . 39))
(953 (event-type . 39))
(954 (event-type-enumeration . 39))
(955 (event-type-count . 39))
(956 (run . 39))
(957 (find-and-run-next-thread . 39))
(958 (debit-thread-times-and-run! . 39))
(959 (handle-timer-interrupt . 39))
(960 (run-next-thread . 39))
(961 (min . 39))
(962 (switch-to-thread . 39))
(963 (run-thread . 39))
(964 (suspend . 39))
(965 (suspend-to . 39))
(966 (debit-down! . 39))
(967 (exit . 39))
(968 (wait . 39))
(969 (waiting? . 39))
(970 (relinquish-timeslice . 39))
(971 (block . 39))
(972 (maybe-commit-and-block . 39))
(973 (upcall . 39))
(974 (propogate-upcall . 39))
(975 (kill-thread! . 39))
(976 (interrupt-thread . 39))
(977 (get-next-event! . 39))
(978 (event-pending? . 39))
(979 (schedule-event . 39))
(980 (maybe-suspend . 39))
(981 (really-schedule-event . 39))
(982 (schedule-wakeup . 39))
(983 (show-running . 39))
(984 (running? . 39))
(985 (spawn . 39))
(986 (spawn-on-root . 39))
(987 (spawn-on-scheduler . 39))
(988 (make-ready . 39))
(989 (maybe-commit-and-make-ready . 39))
(990 (make-threads-ready . 39))
(991 (schedule-interrupt! . 39))
(992 (cancel-timer-interrupt! . 39))
(993 (interrupt-timer-time . 39))
(994 (real-time . 39))
(995 (with-threads . 39))
(996 (start-multitasking . 39))
(997 (deadlock? . 39))
(998 (terminate? . 39))
(999 (terminate-current-thread . 39))
(1000 (root-scheduler-slot . 39))
(1001 (root-scheduler . 39))
(1002 (max2 . 39))
(1003 (sleep . 39))
(1004 (dozers . 39))
(1005 (insert . 39))
(1006 (wake-some-threads . 39))
(1007 (:condvar . 46))
(1008 (really-make-condvar . 46))
(1009 (condvar? . 46))
(1010 (condvar-id . 46))
(1011 (condvar-value . 46))
(1012 (set-condvar-value! . 46))
(1013 (condvar-has-value? . 46))
(1014 (set-condvar-has-value?! . 46))
(1015 (condvar-queue . 46))
(1016 (make-condvar . 46))
(1017 (maybe-commit-and-wait-for-condvar . 46))
(1018 (maybe-commit-and-set-condvar! . 46))
(1019 (condvar-has-waiters? . 46))
(1020 (channel-maybe-commit-and-do-it . 25))
(1021 (channel-maybe-commit-and-read . 25))
(1022 (channel-maybe-commit-and-write . 25))
(1023 (note-channel-result! . 25))
(1024 (channel-write . 25))
(1025 (channel-maybe-commit-and-close . 25))
(1026 (input-channel? . 25))
(1027 (initialize-channel-i/o! . 25))
(1028 (i/o-completion-handler . 25))
(1029 (waiting-for-i/o? . 25))
(1030 (channel-wait-condvars-slot . 25))
(1031 (channel-condvars . 25))
(1032 (set-channel-condvars! . 25))
(1033 (add-channel-condvar! . 25))
(1034 (wait-for-channel . 25))
(1035 (fetch-channel-condvar! . 25))
(1036 (abort-unwanted-i/o! . 25))
(1037 (:channel-cell . 26))
(1038 (really-make-channel-cell . 26))
(1039 (channel-cell? . 26))
(1040 (channel-cell-sent . 26))
(1041 (set-channel-cell-sent! . 26))
(1042 (channel-cell-in-use? . 26))
(1043 (set-channel-cell-in-use?! . 26))
(1044 (channel-cell-condvar . 26))
(1045 (channel-cell-closer . 26))
(1046 (channel-cell-ref . 26))
(1047 (make-channel-cell . 26))
(1048 (port->channel . 26))
(1049 (port-channel-closer . 26))
(1050 (fill-buffer! . 26))
(1051 (channel-port-ready? . 26))
(1052 (input-channel-handler . 26))
(1053 (input-channel->port . 26))
(1054 (input-channel+closer->port . 26))
(1055 (real-input-channel->port . 26))
(1056 (empty-buffer! . 26))
(1057 (send-some . 26))
(1058 (output-channel-handler . 26))
(1059 (output-channel->port . 26))
(1060 (output-channel+closer->port . 26))
(1061 (real-output-channel->port . 26))
(1062 (maybe-open-file . 26))
(1063 (open-input-file . 26))
(1064 (open-output-file . 26))
(1065 (call-with-input-file . 26))
(1066 (call-with-output-file . 26))
(1067 (with-input-from-file . 26))
(1068 (with-output-to-file . 26))
(1069 (force-channel-output-ports! . 26))
(1070 (one-char-handler . 26))
(1071 (write-block-handler . 26))
(1072 (unbuffered-output-handler . 26))
(1073 (:table . 79))
(1074 (really-make-table . 79))
(1075 (table-set!-procedure . 79))
(1076 (set-table-set!-procedure! . 79))
(1077 (table-ref-procedure . 79))
(1078 (set-table-ref-procedure! . 79))
(1079 (table-data . 79))
(1080 (set-table-data! . 79))
(1081 (table-size . 79))
(1082 (set-table-size! . 79))
(1083 (table? . 79))
(1084 (table-ref . 79))
(1085 (table-set! . 79))
(1086 (linear-table-size-limit . 79))
(1087 (next-table-size . 79))
(1088 (make-table-maker . 79))
(1089 (assoc->table-maker . 79))
(1090 (null-entry . 79))
(1091 (new-entry . 79))
(1092 (entry-value . 79))
(1093 (entry-key . 79))
(1094 (set-entry-value! . 79))
(1095 (delete-entry! . 79))
(1096 (make-assoc . 79))
(1097 (make-linear-table-ref . 79))
(1098 (make-linear-table-set! . 79))
(1099 (make->hash-table . 79))
(1100 (make-hash-table-ref . 79))
(1101 (make-hash-table-set! . 79))
(1102 (expand-hash-table! . 79))
(1103 (table-enter-alist! . 79))
(1104 (table-expand-table! . 79))
(1105 (table-walk . 79))
(1106 (really-table-walk . 79))
(1107 (alist-walk . 79))
(1108 (make-table-immutable! . 79))
(1109 (table->entry-list . 79))
(1110 (default-table-hash-function . 79))
(1111 (eqv?-assoc . 79))
(1112 (default-table-assoc . 79))
(1113 (symbol-hash . 79))
(1114 (make-table . 79))
(1115 (make-string-table . 79))
(1116 (make-symbol-table . 79))
(1117 (make-integer-table . 79))
(1118 (make-population . 48))
(1119 (add-to-population! . 48))
(1120 (weak-memq . 48))
(1121 (population-reduce . 48))
(1122 (population->list . 48))
(1123 (walk-population . 48))
(1124 (:meta-type . 50))
(1125 (really-make-type . 50))
(1126 (type-info . 50))
(1127 (type-more . 50))
(1128 (type-mask . 50))
(1129 (meta-type? . 50))
(1130 (make-type . 50))
(1131 (name->type-table . 50))
(1132 (mask->name-table . 50))
(1133 (name->type . 50))
(1134 (set-type-name! . 50))
(1135 (*mask* . 50))
(1136 (new-type-bit . 50))
(1137 (mask->type . 50))
(1138 (bottom-type . 50))
(1139 (error-type . 50))
(1140 (bottom-type? . 50))
(1141 (new-atomic-type . 50))
(1142 (named-atomic-type . 50))
(1143 (syntax-type . 50))
(1144 (other-static-type . 50))
(1145 (empty-rail-type . 50))
(1146 (rail-type . 50))
(1147 (make-optional-type . 50))
(1148 (make-rest-type . 50))
(1149 (head-type . 50))
(1150 (head-type-really . 50))
(1151 (tail-type . 50))
(1152 (empty-rail-type? . 50))
(1153 (rest-type? . 50))
(1154 (optional-type? . 50))
(1155 (mask/no-values . 50))
(1156 (mask/two-or-more . 50))
(1157 (mask/&rest . 50))
(1158 (value-type . 50))
(1159 (mask/value . 50))
(1160 (value-type? . 50))
(1161 (any-values-type . 50))
(1162 (any-arguments-type . 50))
(1163 (mask/one-or-more . 50))
(1164 (same-type? . 50))
(1165 (subtype? . 50))
(1166 (meet-type . 50))
(1167 (other-type-info . 50))
(1168 (meet-rail . 50))
(1169 (meet-procedure . 50))
(1170 (meet? . 50))
(1171 (meet-procedure? . 50))
(1172 (join-type . 50))
(1173 (join-rail . 50))
(1174 (join-procedure . 50))
(1175 (number-hierarchy . 50))
(1176 (integer-type . 50))
(1177 (rational-type . 50))
(1178 (real-type . 50))
(1179 (complex-type . 50))
(1180 (number-type . 50))
(1181 (exact-type . 50))
(1182 (inexact-type . 50))
(1183 (exact-integer-type . 50))
(1184 (inexact-real-type . 50))
(1185 (boolean-type . 50))
(1186 (pair-type . 50))
(1187 (null-type . 50))
(1188 (record-type . 50))
(1189 (any-procedure-type . 50))
(1190 (other-value-type . 50))
(1191 (mask/other . 50))
(1192 (make-other-type . 50))
(1193 (char-type . 50))
(1194 (unspecific-type . 50))
(1195 (string-type . 50))
(1196 (symbol-type . 50))
(1197 (vector-type . 50))
(1198 (escape-type . 50))
(1199 (structure-type . 50))
(1200 (mask/procedure . 50))
(1201 (procedure-type . 50))
(1202 (make-procedure-type . 50))
(1203 (procedure-type-domain . 50))
(1204 (procedure-type-codomain . 50))
(1205 (restrictive? . 50))
(1206 (sexp->type . 50))
(1207 (sexp->values-type . 50))
(1208 (type->sexp . 50))
(1209 (atomic-type->sexp . 50))
(1210 (rail-type->sexp . 50))
(1211 (disjoin-type . 50))
(1212 (disjoin-rest . 50))
(1213 (mask/number . 50))
(1214 (make-some-values-type . 50))
(1215 (proc . 50))
(1216 (some-values . 50))
(1217 (procedure-type? . 50))
(1218 (fixed-arity-procedure-type? . 50))
(1219 (procedure-type-arity . 50))
(1220 (procedure-type-argument-types . 50))
(1221 (variable-type . 50))
(1222 (variable-type? . 50))
(1223 (variable-value-type . 50))
(1224 (usual-variable-type . 50))
(1225 (undeclared-type . 50))
(1226 (compatible-types? . 50))
(1227 (:interface . 67))
(1228 (really-make-interface . 67))
(1229 (interface-name . 67))
(1230 (set-interface-name! . 67))
(1231 (interface-clients . 67))
(1232 (walk-method . 67))
(1233 (ref-method . 67))
(1234 (interface? . 67))
(1235 (make-interface . 67))
(1236 (interface-ref . 67))
(1237 (interface-member? . 67))
(1238 (for-each-declaration . 67))
(1239 (note-reference-to-interface! . 67))
(1240 (note-interface-name! . 67))
(1241 (make-simple-interface . 67))
(1242 (make-simple-interface-table . 67))
(1243 (make-compound-interface . 67))
(1244 (make-modified-interface . 67))
(1245 (process-commands . 67))
(1246 (okay-command? . 67))
(1247 (proper-list? . 67))
(1248 (process-prefix . 67))
(1249 (process-expose . 67))
(1250 (process-hide . 67))
(1251 (process-alias . 67))
(1252 (process-rename . 67))
(1253 (interface-lookup . 67))
(1254 (make-lookup . 67))
(1255 (prefix-match? . 67))
(1256 (remove-prefix . 67))
(1257 (make-default-walker . 67))
(1258 (cdr-assq . 67))
(1259 (make-alist-walker . 67))
(1260 (symbol-append . 67))
(1261 (binding? . 51))
(1262 (binding-type . 51))
(1263 (binding-place . 51))
(1264 (binding-static . 51))
(1265 (binding-path . 51))
(1266 (set-binding-place! . 51))
(1267 (make-binding . 51))
(1268 (add-path . 51))
(1269 (clobber-binding! . 51))
(1270 (impose-type . 51))
(1271 (forget-integration . 51))
(1272 (same-denotation? . 51))
(1273 (maybe-fix-place! . 51))
(1274 (follow-forwarding-pointers . 51))
(1275 (name? . 52))
(1276 (:generated . 52))
(1277 (make-generated . 52))
(1278 (generated-parent-name . 52))
(1279 (generated-env . 52))
(1280 (generated-token . 52))
(1281 (generated-symbol . 52))
(1282 (generated? . 52))
(1283 (generate-name . 52))
(1284 (generated-uid . 52))
(1285 (*generated-uid* . 52))
(1286 (name->symbol . 52))
(1287 (name-hash . 52))
(1288 (make-name-table . 52))
(1289 (desyntaxify . 52))
(1290 (make-qualified . 52))
(1291 (qualified? . 52))
(1292 (qualified-parent-name . 52))
(1293 (qualified-symbol . 52))
(1294 (qualified-uid . 52))
(1295 (name->qualified . 52))
(1296 (qualify-parent . 52))
(1297 (:transform . 52))
(1298 (really-make-transform . 52))
(1299 (transform-id . 52))
(1300 (transform-source . 52))
(1301 (transform-aux-names . 52))
(1302 (transform-type . 52))
(1303 (transform-env . 52))
(1304 (transform-procedure . 52))
(1305 (transform? . 52))
(1306 (make-transform . 52))
(1307 (maybe-apply-macro-transform . 52))
(1308 (apply-inline-transform . 52))
(1309 (make-keyword-comparator . 52))
(1310 (name->source-name . 52))
(1311 (bind-aliases . 52))
(1312 (make-name-generator . 52))
(1313 (lookup . 52))
(1314 (lookup . 55))
(1315 (bind1 . 55))
(1316 (bind . 55))
(1317 (bindrec . 55))
(1318 (make-compiler-env . 55))
(1319 (funny-name/macro-eval . 55))
(1320 (environment-macro-eval . 55))
(1321 (funny-name/define! . 55))
(1322 (environment-define! . 55))
(1323 (funny-name/package . 55))
(1324 (extract-package-from-environment . 55))
(1325 (funny-name/source-file-name . 55))
(1326 (bind-source-file-name . 55))
(1327 (source-file-name . 55))
(1328 (:thingie . 53))
(1329 (make-thingie . 53))
(1330 (thingie-want-type . 53))
(1331 (thingie-name . 53))
(1332 (thingie-binding . 53))
(1333 (thingie? . 53))
(1334 (:structure . 68))
(1335 (really-make-structure . 68))
(1336 (structure-name . 68))
(1337 (set-structure-name! . 68))
(1338 (structure-clients . 68))
(1339 (structure-package . 68))
(1340 (structure-interface-really . 68))
(1341 (set-structure-interface! . 68))
(1342 (structure-interface-thunk . 68))
(1343 (structure? . 68))
(1344 (structure-interface . 68))
(1345 (initialize-structure! . 68))
(1346 (make-structure . 68))
(1347 (make-modified-structure . 68))
(1348 (note-structure-name! . 68))
(1349 (structure-unstable? . 68))
(1350 (for-each-export . 68))
(1351 (:package . 68))
(1352 (really-make-package . 68))
(1353 (package-cached . 68))
(1354 (package-clients . 68))
(1355 (package-real-undefined-but-assigneds . 68))
(1356 (set-package-undefined-but-assigneds! . 68))
(1357 (package-real-undefineds . 68))
(1358 (set-package-undefineds! . 68))
(1359 (package-accesses-thunk . 68))
(1360 (package-opens-thunk . 68))
(1361 (set-package-opens-thunk! . 68))
(1362 (package->environment . 68))
(1363 (set-package->environment! . 68))
(1364 (package-loaded? . 68))
(1365 (set-package-loaded?! . 68))
(1366 (package-clauses . 68))
(1367 (package-file-name . 68))
(1368 (package-get-location . 68))
(1369 (set-package-get-location! . 68))
(1370 (package-integrate? . 68))
(1371 (set-package-integrate?! . 68))
(1372 (package-unstable? . 68))
(1373 (package-definitions . 68))
(1374 (package-opens-really . 68))
(1375 (set-package-opens! . 68))
(1376 (package-uid . 68))
(1377 (package? . 68))
(1378 (make-package . 68))
(1379 (really-package->environment . 68))
(1380 (lazy-table-accessor . 68))
(1381 (package-undefineds . 68))
(1382 (package-undefined-but-assigneds . 68))
(1383 (new-package-uid . 68))
(1384 (*package-uid* . 68))
(1385 (package-name-table . 68))
(1386 (package-name . 68))
(1387 (note-package-name! . 68))
(1388 (package-opens . 68))
(1389 (initialize-package-if-necessary! . 68))
(1390 (package-accesses . 68))
(1391 (make-simple-package . 68))
(1392 (package-definition . 68))
(1393 (package-define! . 68))
(1394 (package-add-static! . 68))
(1395 (package-refine-type! . 68))
(1396 (package-lookup . 68))
(1397 (really-package-lookup . 68))
(1398 (search-opens . 68))
(1399 (structure-lookup . 68))
(1400 (real-structure-lookup . 68))
(1401 (generic-lookup . 68))
(1402 (initialize-package! . 68))
(1403 (for-each-definition . 68))
(1404 (get-new-location . 68))
(1405 (make-new-location . 68))
(1406 ($get-location . 68))
(1407 (*location-uid* . 68))
(1408 (location-info-table . 68))
(1409 (flush-location-names . 68))
(1410 (link! . 68))
(1411 (really-link! . 68))
(1412 (get-location . 68))
(1413 (location-on-demand . 68))
(1414 (get-undefined . 68))
(1415 (location-for-assignment . 68))
(1416 (package-note-caching! . 68))
(1417 (note-caching! . 68))
(1418 (get-location-for-unassignable . 68))
(1419 (get-location-for-undefined . 68))
(1420 ($note-undefined . 68))
(1421 (cenv->package . 68))
(1422 (location-for-reference . 68))
(1423 (noting-undefined-variables . 68))
(1424 (print-undefined-names . 68))
(1425 (environment-ref . 81))
(1426 (environment-set! . 81))
(1427 (environment-define! . 81))
(1428 (*structure-ref . 81))
(1429 (carefully . 81))
(1430 ($interaction-environment . 81))
(1431 (interaction-environment . 81))
(1432 (set-interaction-environment! . 81))
(1433 (with-interaction-environment . 81))
(1434 (scheme-report-environment . 81))
(1435 (*scheme-report-environment* . 81))
(1436 (*null-environment* . 81))
(1437 (*scheme-report-number* . 81))
(1438 (set-scheme-report-environment! . 81))
(1439 (null-environment . 81))
(1440 (make-reflective-tower . 81))
(1441 (set-reflective-tower-maker! . 81))
(1442 (namestring . 80))
(1443 (directory-component-separator . 80))
(1444 (type-component-separator . 80))
(1445 (namestring-component . 80))
(1446 (file-name-preferred-case . 80))
(1447 (*scheme-file-type* . 80))
(1448 (*load-file-type* . 80))
(1449 (file-name-directory . 80))
(1450 (file-name-nondirectory . 80))
(1451 (file-nondirectory-position . 80))
(1452 (string-posq . 80))
(1453 (*translations* . 80))
(1454 (translations . 80))
(1455 (set-translation! . 80))
(1456 (translate . 80))
(1457 ($note-file-package . 65))
(1458 (read-forms . 65))
(1459 (really-read-forms . 65))
(1460 (:operator . 54))
(1461 (make-operator . 54))
(1462 (operator-name . 54))
(1463 (operator-uid . 54))
(1464 (operator-nargs . 54))
(1465 (operator-type . 54))
(1466 (set-operator-type! . 54))
(1467 (operator? . 54))
(1468 (usual-operator-type . 54))
(1469 (get-operator . 54))
(1470 (*operator-uid* . 54))
(1471 (operators-table . 54))
(1472 (number-of-operators . 54))
(1473 (the-operators . 54))
(1474 (make-operator-table . 54))
(1475 (operator-table-ref . 54))
(1476 (operator-lookup . 54))
(1477 (operator-define! . 54))
(1478 (:node . 54))
(1479 (really-make-node . 54))
(1480 (node-plist . 54))
(1481 (set-node-plist! . 54))
(1482 (node-form . 54))
(1483 (node-operator-id . 54))
(1484 (node? . 54))
(1485 (make-node . 54))
(1486 (node-ref . 54))
(1487 (node-set! . 54))
(1488 (node-operator . 54))
(1489 (node-predicate . 54))
(1490 (make-similar-node . 54))
(1491 (force-node . 54))
(1492 (schemify . 54))
(1493 (schemifiers . 54))
(1494 (schemify-node . 54))
(1495 (schemify-nodes . 54))
(1496 (define-schemifier . 54))
(1497 (schemify-lambda . 54))
(1498 (schemify-formals . 54))
(1499 (schemify-letrec . 54))
(1500 (schemify-sexp . 54))
(1501 (number-of-required-args . 58))
(1502 (n-ary? . 58))
(1503 (normalize-formals . 58))
(1504 (scan-forms . 56))
(1505 (expand-scanned-form . 56))
(1506 (scan-define . 56))
(1507 (expand-define . 56))
(1508 (scan-define-syntax . 56))
(1509 (expand-form . 56))
(1510 (expand-head . 56))
(1511 (destructure-define . 56))
(1512 (make-operator-predicate . 56))
(1513 (define? . 56))
(1514 (begin? . 56))
(1515 (define-syntax? . 56))
(1516 (static-value . 56))
(1517 (expand-body . 56))
(1518 (scan-body-forms . 56))
(1519 (body-lossage . 56))
(1520 (expand . 56))
(1521 (expand-list . 56))
(1522 (expand-literal . 56))
(1523 (expand-call . 56))
(1524 (expand-name . 56))
(1525 (expand-macro-application . 56))
(1526 (expand-operator-form . 56))
(1527 (expanders . 56))
(1528 (define-expander . 56))
(1529 (unspecific-node . 56))
(1530 (expand-structure-ref . 56))
(1531 (expand-lambda . 56))
(1532 (bind-names . 56))
(1533 (names? . 56))
(1534 (expand-letrec . 56))
(1535 (process-syntax . 56))
(1536 (this-long? . 56))
(1537 (at-least-this-long? . 56))
(1538 (specs? . 56))
(1539 (literal? . 56))
(1540 (syntax? . 56))
(1541 (begin-node? . 56))
(1542 (call-node? . 56))
(1543 (name-node? . 56))
(1544 (operator/literal . 56))
(1545 (operator/quote . 56))
(1546 (operator/call . 56))
(1547 (operator/name . 56))
(1548 (operator/unspecific . 56))
(1549 (operator/unassigned . 56))
(1550 (operator/lambda . 56))
(1551 (operator/begin . 56))
(1552 (operator/letrec . 56))
(1553 (operator/define . 56))
(1554 (operator/define-syntax . 56))
(1555 (operator/primitive-procedure . 56))
(1556 (operator/structure-ref . 56))
(1557 (:primop . 62))
(1558 (make-primop . 62))
(1559 (primop-compilator . 62))
(1560 (primop-closed . 62))
(1561 (primop-type . 62))
(1562 (primop-name . 62))
(1563 (primop? . 62))
(1564 (primop-table . 62))
(1565 (walk-primops . 62))
(1566 (define-compiler-primitive . 62))
(1567 (get-primop . 62))
(1568 (:debug-data . 59))
(1569 (make-debug-data . 59))
(1570 (debug-data-source . 59))
(1571 (set-debug-data-source! . 59))
(1572 (debug-data-env-maps . 59))
(1573 (set-debug-data-env-maps! . 59))
(1574 (debug-data-pc-in-parent . 59))
(1575 (debug-data-parent . 59))
(1576 (debug-data-name . 59))
(1577 (debug-data-uid . 59))
(1578 (debug-data? . 59))
(1579 (debug-data-env-shape . 59))
(1580 (new-template-uid . 59))
(1581 (*template-uid* . 59))
(1582 (template-uid . 59))
(1583 (set-template-uid! . 59))
(1584 (debug-flag-names . 59))
(1585 (type/debug-flags . 59))
(1586 (make-debug-flags . 59))
(1587 ($debug-flags . 59))
(1588 (debug-flag-accessor . 59))
(1589 (debug-flag-modifier . 59))
(1590 (keep-source-code? . 59))
(1591 (keep-environment-maps? . 59))
(1592 (keep-procedure-names? . 59))
(1593 (keep-file-names? . 59))
(1594 (tabulate-debug-data? . 59))
(1595 (debug-data-table . 59))
(1596 (with-fresh-compiler-state . 59))
(1597 (saving-and-restoring . 59))
(1598 (debug-data->info . 59))
(1599 (get-debug-data . 59))
(1600 (note-debug-data! . 59))
(1601 (new-debug-data . 59))
(1602 (maximum-stack-use . 60))
(1603 (protocol-skip . 60))
(1604 (stack-delta . 60))
(1605 (define-delta . 60))
(1606 (stack-max . 60))
(1607 (nothing . 60))
(1608 (popper . 60))
(1609 (pusher . 60))
(1610 (continue . 60))
(1611 (continuer . 60))
(1612 (get-offset . 60))
(1613 (flat-env-checker . 60))
(1614 (do-make-cont . 60))
(1615 (stack-function . 60))
(1616 (arg-spec-size . 60))
(1617 (imax . 60))
(1618 (make-segment . 61))
(1619 (segment-size . 61))
(1620 (segment-emitter . 61))
(1621 (segment->template . 61))
(1622 (segment-data->template . 61))
(1623 (check-stack-use . 61))
(1624 (:assembly-state . 61))
(1625 (make-assembly-state . 61))
(1626 (astate-literals . 61))
(1627 (set-astate-literals! . 61))
(1628 (astate-count . 61))
(1629 (set-astate-count! . 61))
(1630 (astate-pc . 61))
(1631 (set-astate-pc! . 61))
(1632 (astate-code-vector . 61))
(1633 (make-astate . 61))
(1634 (emit-byte! . 61))
(1635 (literal->index . 61))
(1636 (literal-position . 61))
(1637 (position . 61))
(1638 (emit-literal! . 61))
(1639 (emit-segment! . 61))
(1640 (empty-segment . 61))
(1641 (instruction . 61))
(1642 (sequentially . 61))
(1643 (sequentially-2 . 61))
(1644 (instruction-with-literal . 61))
(1645 (instruction-with-location . 61))
(1646 (template . 61))
(1647 (make-label . 61))
(1648 (instruction-using-label . 61))
(1649 (computed-goto-label-size . 61))
(1650 (computed-goto-instruction . 61))
(1651 (attach-label . 61))
(1652 (insert-label! . 61))
(1653 (code-vector-set2! . 61))
(1654 (two-byte-limit . 61))
(1655 (high-byte . 61))
(1656 (low-byte . 61))
(1657 ($debug-data . 61))
(1658 (note-source-code . 61))
(1659 (note-environment . 61))
(1660 (emit-with-environment-maps! . 61))
(1661 ($environment-maps . 61))
(1662 (optimizers-table . 70))
(1663 (set-optimizer! . 70))
(1664 (get-optimizer . 70))
(1665 (apply-optimizers . 70))
(1666 (flatten-form . 66))
(1667 (flatten-node . 66))
(1668 (flatteners . 66))
(1669 (define-flattener . 66))
(1670 (flatten-list . 66))
(1671 (no-free-vars . 66))
(1672 (flatten-lambda . 66))
(1673 (convert-lambda-body . 66))
(1674 (add-cells . 66))
(1675 (flatten-letrec . 66))
(1676 (flatten-pure-letrec . 66))
(1677 (flatten-impure-letrec . 66))
(1678 (assigned? . 66))
(1679 (mark-set-variables! . 66))
(1680 (mark-sets . 66))
(1681 (define-set-marker . 66))
(1682 (no-sets . 66))
(1683 (mark-letrec-sets . 66))
(1684 (make-make-cell . 66))
(1685 (make-unassigned-cell . 66))
(1686 (make-cell-ref . 66))
(1687 (make-cell-set! . 66))
(1688 (make-primop-call . 66))
(1689 (operator/flat-lambda . 66))
(1690 (operator/lambda . 66))
(1691 (operator/letrec . 66))
(1692 (operator/pure-letrec . 66))
(1693 (operator/begin . 66))
(1694 (operator/literal . 66))
(1695 (operator/call . 66))
(1696 (operator/unassigned . 66))
(1697 (operator/set! . 66))
(1698 (define-node? . 66))
(1699 (lambda-node? . 66))
(1700 (flat-lambda-node? . 66))
(1701 (define-primop . 66))
(1702 (temp0 . 66))
(1703 (make-cell-primop . 66))
(1704 (temp1 . 66))
(1705 (cell-ref-primop . 66))
(1706 (temp2 . 66))
(1707 (cell-set!-primop . 66))
(1708 (install-new-set! . 66))
(1709 (install-set! . 66))
(1710 (set->list . 66))
(1711 (set-add-element! . 66))
(1712 (set-union! . 66))
(1713 (set-difference! . 66))
(1714 (clean-var-list . 66))
(1715 (clear-var-set! . 66))
(1716 (node-type . 63))
(1717 (reconstruct-type . 63))
(1718 (reconstruct . 63))
(1719 (examine . 63))
(1720 (reconstructors . 63))
(1721 (define-reconstructor . 63))
(1722 (reconstruct-lambda . 63))
(1723 (careful-codomain . 63))
(1724 (reconstruct-name . 63))
(1725 (proc->reconstructor . 63))
(1726 (reconstruct-call . 63))
(1727 (fork-constraints . 63))
(1728 (reconstruct-letrec . 63))
(1729 (node->type . 63))
(1730 (name-node? . 63))
(1731 (lambda-node? . 63))
(1732 (literal-node? . 63))
(1733 (primop-reconstructors . 63))
(1734 (define-primop-reconstructor . 63))
(1735 (reconstruct-apply . 63))
(1736 (constant-type . 63))
(1737 (compile-expression . 64))
(1738 (compile . 64))
(1739 (compilators . 64))
(1740 (define-compilator . 64))
(1741 (compile-constant . 64))
(1742 (compile-call . 64))
(1743 (compile-name-call . 64))
(1744 (compile-redex . 64))
(1745 (compile-unknown-call . 64))
(1746 (maybe-push-continuation . 64))
(1747 (fixup-source . 64))
(1748 (push-arguments . 64))
(1749 (push-all-with-names . 64))
(1750 (empty-segment? . 64))
(1751 (letrec-lambda-code . 64))
(1752 (letrec-body-code . 64))
(1753 (make-cont . 64))
(1754 (cont-kind . 64))
(1755 (cont-source-info . 64))
(1756 (return-cont . 64))
(1757 (return-cont? . 64))
(1758 (fall-through-cont . 64))
(1759 (fall-through-cont? . 64))
(1760 (ignore-values-segment . 64))
(1761 (ignore-values-cont . 64))
(1762 (ignore-values-cont? . 64))
(1763 (accept-values-cont . 64))
(1764 (accept-values-cont? . 64))
(1765 (deliver-value . 64))
(1766 (named-cont . 64))
(1767 (cont-name . 64))
(1768 (name-node-binding . 64))
(1769 (generate-trap . 64))
(1770 (type-check . 64))
(1771 (set-type-check?! . 64))
(1772 (*type-check?* . 64))
(1773 (diagnose-call-error . 64))
(1774 (lambda-node? . 64))
(1775 (flat-lambda-node? . 64))
(1776 (name-node? . 64))
(1777 (literal-node? . 64))
(1778 (operator/lambda . 64))
(1779 (operator/set! . 64))
(1780 (operator/call . 64))
(1781 (operator/begin . 64))
(1782 (compile-lambda . 64))
(1783 (compile-continuation-lambda . 64))
(1784 (really-compile-lambda . 64))
(1785 (compile-lambda-code . 64))
(1786 (name-node->symbol . 64))
(1787 (set-lexical-offsets! . 64))
(1788 (compile-flat-lambda . 64))
(1789 (really-compile-flat-lambda . 64))
(1790 (compile-flat-environment . 64))
(1791 (get-variables-offsets . 64))
(1792 (environment-code . 64))
(1793 (figure-env-data . 64))
(1794 (one-byte-offsetter . 64))
(1795 (two-byte-offsetter . 64))
(1796 (back-env-data . 64))
(1797 (sort-list . 64))
(1798 (direct-compilator . 64))
(1799 (direct-closed-compilator . 64))
(1800 (nargs->domain . 64))
(1801 (get-primop-type . 64))
(1802 (primop-types . 64))
(1803 (define-simple-primitive . 64))
(1804 (simple-compilator . 64))
(1805 (simple-closed-compilator . 64))
(1806 (symbol-append . 64))
(1807 (define-stob-predicate . 64))
(1808 (define-data-struct-primitives . 64))
(1809 (define-vector-primitives . 64))
(1810 (define-more-vector-primitives . 64))
(1811 (compile-call-with-values . 64))
(1812 (compile-call-with-values-producer . 64))
(1813 (thunk-node? . 64))
(1814 (thunk-body . 64))
(1815 (unflatten-form . 64))
(1816 (define-n-ary-compiler-primitive . 64))
(1817 (n-ary-primitive-compilator . 64))
(1818 (call-on-arg-and-id . 64))
(1819 (call-on-args . 64))
(1820 (op/unspecific . 64))
(1821 (op/literal . 64))
(1822 (push-all-but-last . 64))
(1823 (dispatch-protocol-size . 64))
(1824 (make-dispatch-protocol . 64))
(1825 (compile-forms . 64))
(1826 (compile-forms-loop . 64))
(1827 (compile-form . 64))
(1828 (define-node? . 64))
(1829 ($env-key . 64))
(1830 (compile-definition . 64))
(1831 (location-contents-offset . 64))
(1832 (make-startup-procedure . 64))
(1833 (append-templates . 64))
(1834 (an-ignore-values-cont . 64))
(1835 (eval . 82))
(1836 (load-into . 82))
(1837 (eval-from-file . 82))
(1838 (load . 82))
(1839 (really-load-into . 82))
(1840 (compile-and-run . 82))
(1841 (display-condition . 49))
(1842 (really-display-condition . 49))
(1843 (*depth* . 49))
(1844 (*length* . 49))
(1845 (&disclose-condition . 49))
(1846 (disclose-condition . 49))
(1847 (limited-write . 49))
(1848 (command-processor . 86))
(1849 (mini-load . 86))
(1850 (read-string . 86))
(1851 (enum-case . 43))
(1852 (run-threads . 41))
(1853 (run-threads-with-housekeeper . 41))
(1854 (round-robin-event-handler . 41))
(1855 (make-counter . 41))
(1856 (counter-value . 41))
(1857 (increment-counter! . 41))
(1858 (decrement-counter! . 41))
(1859 (root-scheduler . 42))
(1860 (make-root-event-handler . 42))
(1861 (root-handler . 42))
(1862 (cheap-display-condition . 42))
(1863 (abort-token . 42))
(1864 (scheme-exit-now . 42))
(1865 (root-wait . 42))
(1866 (do-some-waiting . 42))
(1867 (one-minute-of-milliseconds . 42))
(1868 (one-day-of-milliseconds . 42))
(1869 (one-year-of-minutes . 42))
(1870 (deadlock-handler . 42))
(1871 (call-when-deadlocked! . 42))
(1872 (spawn-output-forcers . 42))
(1873 (usual-resumer . 47))
(1874 (initialize-rts . 47))
(1875 (start . 87))
(1876 (make-built-in-structures . 87))
(1877 (initialize-interaction-environment! . 87))
(1878 (make-initial-package . 87))
(1879 (make-tower . 87))
(1880 (the-usual-transforms . 57))
(1881 (define-usual-macro . 57))
(1882 (usual-transform . 57))
(1883 (do-spec? . 57))
(1884 (specs? . 57))
(1885 (case-clause? . 57))
(1886 (process-rules . 57))
(1887 (segment-pattern? . 57))
(1888 (segment-template? . 57))
(1889 (segment-depth . 57))
(1890 (segment-tail . 57))
(1891 (indicators-for-zero-or-more . 57))
(1892 (find-free-names-in-syntax-rules . 57))
(1893 (strongly-connected-components . 78))
(1894 (find-next-vertex . 78))
(1895 (:vertex . 78))
(1896 (really-make-vertex . 78))
(1897 (vertex-lowpoint . 78))
(1898 (set-vertex-lowpoint! . 78))
(1899 (vertex-parent . 78))
(1900 (set-vertex-parent! . 78))
(1901 (vertex-index . 78))
(1902 (set-vertex-index! . 78))
(1903 (vertex-stack . 78))
(1904 (set-vertex-stack! . 78))
(1905 (vertex-edges . 78))
(1906 (set-vertex-edges! . 78))
(1907 (vertex-data . 78))
(1908 (vertex? . 78))
(1909 (make-vertex . 78))
(1910 (make-vertices . 78))
(1911 (do-vertex . 78))
(1912 (get-strong . 78))
(1913 (end-vertex . 78))
(1914 (unwind-stack . 78))
(1915 (follow-edge . 78))
(1916 (pop-vertex-edge! . 78))
(1917 (find-usages . 75))
(1918 (maybe-update-known-type . 75))
(1919 (find-node-usages . 75))
(1920 (analyze . 75))
(1921 (analyze-nodes . 75))
(1922 (usage-analyzers . 75))
(1923 (define-usage-analyzer . 75))
(1924 (nothing . 75))
(1925 (add-if-free . 75))
(1926 (analyze-letrec . 75))
(1927 (:usage . 75))
(1928 (really-make-usage . 75))
(1929 (usage-assignment-count . 75))
(1930 (set-assignment! . 75))
(1931 (usage-operator-count . 75))
(1932 (set-operator! . 75))
(1933 (usage-reference-count . 75))
(1934 (set-reference! . 75))
(1935 (usage-name-node . 75))
(1936 (usage? . 75))
(1937 (make-usage . 75))
(1938 (make-package-usage . 75))
(1939 (package-usage? . 75))
(1940 (usage-incrementator . 75))
(1941 (note-reference! . 75))
(1942 (note-operator! . 75))
(1943 (note-assignment! . 75))
(1944 (lambda-node? . 75))
(1945 (quote-node? . 75))
(1946 (literal-node? . 75))
(1947 (call-node? . 75))
(1948 (name-node? . 75))
(1949 (define-node? . 75))
(1950 (sort-forms . 75))
(1951 (stuff-count . 75))
(1952 (maybe-make-aliased . 75))
(1953 (topologically-sort . 75))
(1954 (:form . 75))
(1955 (really-make-form . 75))
(1956 (form-temp . 75))
(1957 (set-form-temp! . 75))
(1958 (form-free . 75))
(1959 (set-form-free! . 75))
(1960 (form-unaliased? . 75))
(1961 (set-form-unaliased?! . 75))
(1962 (form-aliases . 75))
(1963 (set-form-aliases! . 75))
(1964 (form-node . 75))
(1965 (form? . 75))
(1966 (make-form . 75))
(1967 (insert-aliases . 75))
(1968 (make-inline-transform . 77))
(1969 (clean-node . 77))
(1970 (clean-lambda . 77))
(1971 (clean-lookup . 77))
(1972 (unused-name . 77))
(1973 (remove-bindings . 77))
(1974 (inline-transform . 77))
(1975 (make-substitution . 77))
(1976 (reconstitute . 77))
(1977 (reconstitute-name . 77))
(1978 (operator/name . 77))
(1979 (operator/literal . 77))
(1980 (qualified->name . 77))
(1981 (get-qualified-env . 77))
(1982 (quote-node? . 77))
(1983 (call-node? . 77))
(1984 (lambda-node? . 77))
(1985 (name-node? . 77))
(1986 (loophole-node? . 77))
(1987 (operator . 84))
(1988 (primop . 84))
(1989 (simple-interface . 84))
(1990 (package . 84))
(1991 (transform . 84))
(1992 (package-define-static! . 84))
(1993 (:lock . 45))
(1994 (really-make-lock . 45))
(1995 (lock? . 45))
(1996 (lock-uid . 45))
(1997 (lock-queue . 45))
(1998 (lock-owner-uid . 45))
(1999 (set-lock-owner-uid! . 45))
(2000 (next-uid . 45))
(2001 (make-lock . 45))
(2002 (obtain-lock . 45))
(2003 (maybe-obtain-lock . 45))
(2004 (release-lock . 45))
(2005 (:syntax . 73))
(2006 (:values . 73))
(2007 (:arguments . 73))
(2008 (:value . 73))
(2009 (procedure . 73))
(2010 (:boolean . 73))
(2011 (:char . 73))
(2012 (:null . 73))
(2013 (:unspecific . 73))
(2014 (:number . 73))
(2015 (:complex . 73))
(2016 (:real . 73))
(2017 (:rational . 73))
(2018 (:integer . 73))
(2019 (:exact-integer . 73))
(2020 (:pair . 73))
(2021 (:string . 73))
(2022 (:symbol . 73))
(2023 (:vector . 73))
(2024 (:procedure . 73))
(2025 (:input-port . 73))
(2026 (:output-port . 73))
(2027 (:error . 73))
(2028 (:escape . 73))
(2029 (:structure . 73))
(2030 (:type . 73))
(2031 (def . 72))
(2032 (really-def . 72))
(2033 (define-multiple . 72))
(2034 (define-interface . 72))
(2035 (compound-interface . 72))
(2036 (export . 72))
(2037 (define-structure . 72))
(2038 (define-structures . 72))
(2039 (structure . 72))
(2040 (structures . 72))
(2041 (modify . 72))
(2042 (subset . 72))
(2043 (with-prefix . 72))
(2044 (a-package . 72))
(2045 (receive . 72))
(2046 (define-reflective-tower-maker . 72))
(2047 (export-reflective-tower-maker . 72))
(2048 (define-module . 72))
(2049 (make-a-package . 72))
(2050 (loser . 72))
(2051 (interface-of . 72))
(2052 (*verify-later!* . 72))
(2053 (verify-later! . 72))
(2054 (set-verify-later! . 72))
(2055 (note-name! . 72))
(2056 (collect-packages . 69))
(2057 (package-source . 69))
(2058 (read-files . 69))
(2059 (package-optimizer-names . 69))
(2060 (check-structure . 69))
(2061 (compile-package . 71))
(2062 (expand-package . 71))
(2063 (define-usual-transform . 71))
(2064 (define-primitives . 71))
(2065 (make-define-primitive-node . 71))
(2066 (operator/define . 71))
(2067 (operator/primitive-procedure . 71))
(2068 (analyze-forms . 76))
(2069 (analyze-form . 76))
(2070 (inlinable-rhs? . 76))
(2071 (simple-lambda? . 76))
(2072 (operator/name . 76))
(2073 (simple? . 76))
(2074 (simple-list? . 76))
(2075 (analyzers . 76))
(2076 (define-analyzer . 76))
(2077 (static-value . 76))
(2078 (really-simple-call? . 76))
(2079 (primitive-proc? . 76))
(2080 (no-ret . 76))
(2081 (ret . 76))
(2082 (simple-literal? . 76))
(2083 (require . 76))
(2084 (*debug?* . 76))
(2085 (package-lookup-type . 76))
(2086 (lambda-node? . 76))
(2087 (name-node? . 76))
(2088 (loophole-node? . 76))
(2089 (define-node? . 76))
(2090 (literal-node? . 76))
(2091 (ensure-loaded . 83))
-
; Template uid -> name, parent, pc in parent, env maps
(0 scheme-level-0 #f #f ())
(1 atan 0 7 ())
(2 scheme-level-0 #f #f ())
(3 set-location-defined?! 2 7 ())
(4 scheme-level-0 #f #f ())
(5 acos 4 7 ())
(6 scheme-level-0 #f #f ())
(7 vm-extension 6 7 ())
(8 scheme-level-0 #f #f ())
(9 asin 8 7 ())
(10 scheme-level-0 #f #f ())
(11 location-defined? 10 7 ())
(12 scheme-level-0 #f #f ())
(13 time 12 7 ())
(14 scheme-level-0 #f #f ())
(15 template-set! 14 7 ())
(16 scheme-level-0 #f #f ())
(17 set-current-proposal! 16 7 ())
(18 scheme-level-0 #f #f ())
(19 scheme-level-0 #f #f ())
(20 cons 19 7 ())
(21 scheme-level-0 #f #f ())
(22 wait 21 7 ())
(23 scheme-level-0 #f #f ())
(24 trap 23 7 ())
(25 scheme-level-0 #f #f ())
(26 assq 25 7 ())
(27 scheme-level-0 #f #f ())
(28 current-proposal 27 7 ())
(29 scheme-level-0 #f #f ())
(30 make-weak-pointer 29 7 ())
(31 scheme-level-0 #f #f ())
(32 lookup-shared-binding 31 7 ())
(33 scheme-level-0 #f #f ())
(34 push 33 7 ())
(35 scheme-level-0 #f #f ())
(36 provisional-set-contents! 35 7 ())
(37 scheme-level-0 #f #f ())
(38 set-contents! 37 7 ())
(39 scheme-level-0 #f #f ())
(40 read-char 39 7 ())
(41 scheme-level-0 #f #f ())
(42 provisional-contents 41 7 ())
(43 scheme-level-0 #f #f ())
(44 make-cell 43 7 ())
(45 scheme-level-0 #f #f ())
(46 sqrt 45 7 ())
(47 scheme-level-0 #f #f ())
(48 * 47 7 ())
(49 scheme-level-0 #f #f ())
(50 contents 49 7 ())
(51 scheme-level-0 #f #f ())
(52 + 51 7 ())
(53 scheme-level-0 #f #f ())
(54 peek-char 53 7 ())
(55 scheme-level-0 #f #f ())
(56 - 55 7 ())
(57 scheme-level-0 #f #f ())
(58 continuation-set! 57 7 ())
(59 scheme-level-0 #f #f ())
(60 / 59 7 ())
(61 scheme-level-0 #f #f ())
(62 weak-pointer? 61 7 ())
(63 scheme-level-0 #f #f ())
(64 quotient 63 7 ())
(65 scheme-level-0 #f #f ())
(66 close-channel 65 7 ())
(67 scheme-level-0 #f #f ())
(68 channel-abort 67 7 ())
(69 scheme-level-0 #f #f ())
(70 char? 69 7 ())
(71 scheme-level-0 #f #f ())
(72 < 71 7 ())
(73 scheme-level-0 #f #f ())
(74 = 73 7 ())
(75 scheme-level-0 #f #f ())
(76 provisional-set-port-data! 75 7 ())
(77 scheme-level-0 #f #f ())
(78 cell? 77 7 ())
(79 scheme-level-0 #f #f ())
(80 > 79 7 ())
(81 scheme-level-0 #f #f ())
(82 make-location 81 7 ())
(83 scheme-level-0 #f #f ())
(84 imag-part 83 7 ())
(85 scheme-level-0 #f #f ())
(86 set-port-data! 85 7 ())
(87 scheme-level-0 #f #f ())
(88 make-template 87 7 ())
(89 scheme-level-0 #f #f ())
(90 real? 89 7 ())
(91 scheme-level-0 #f #f ())
(92 real-part 91 7 ())
(93 scheme-level-0 #f #f ())
(94 provisional-port-data 93 7 ())
(95 scheme-level-0 #f #f ())
(96 record-length 95 7 ())
(97 scheme-level-0 #f #f ())
(98 port-data 97 7 ())
(99 scheme-level-0 #f #f ())
(100 pair? 99 7 ())
(101 scheme-level-0 #f #f ())
(102 provisional-set-port-lock! 101 7 ())
(103 scheme-level-0 #f #f ())
(104 make-port 103 7 ())
(105 scheme-level-0 #f #f ())
(106 set-port-lock! 105 7 ())
(107 scheme-level-0 #f #f ())
(108 bit-count 107 7 ())
(109 scheme-level-0 #f #f ())
(110 provisional-checked-record-ref 109 7 ())
(111 scheme-level-0 #f #f ())
(112 return-from-exception 111 7 ())
(113 scheme-level-0 #f #f ())
(114 provisional-port-lock 113 7 ())
(115 scheme-level-0 #f #f ())
(116 location? 115 7 ())
(117 scheme-level-0 #f #f ())
(118 checked-record-ref 117 7 ())
(119 scheme-level-0 #f #f ())
(120 channel-maybe-read 119 7 ())
(121 scheme-level-0 #f #f ())
(122 add-finalizer! 121 7 ())
(123 scheme-level-0 #f #f ())
(124 rational? 123 7 ())
(125 scheme-level-0 #f #f ())
(126 template? 125 7 ())
(127 scheme-level-0 #f #f ())
(128 port-lock 127 7 ())
(129 scheme-level-0 #f #f ())
(130 vector-length 129 7 ())
(131 scheme-level-0 #f #f ())
(132 make-continuation 131 7 ())
(133 scheme-level-0 #f #f ())
(134 provisional-shared-binding-ref 133 7 ())
(135 scheme-level-0 #f #f ())
(136 string-length 135 7 ())
(137 scheme-level-0 #f #f ())
(138 shared-binding-ref 137 7 ())
(139 scheme-level-0 #f #f ())
(140 port? 139 7 ())
(141 scheme-level-0 #f #f ())
(142 angle 141 7 ())
(143 scheme-level-0 #f #f ())
(144 false 143 7 ())
(145 scheme-level-0 #f #f ())
(146 remainder 145 7 ())
(147 scheme-level-0 #f #f ())
(148 continuation? 147 7 ())
(149 scheme-level-0 #f #f ())
(150 channel-ready? 149 7 ())
(151 scheme-level-0 #f #f ())
(152 binary-reduce1 151 7 ())
(153 scheme-level-0 #f #f ())
(154 binary-reduce2 153 7 ())
(155 scheme-level-0 #f #f ())
(156 char<? 155 7 ())
(157 scheme-level-0 #f #f ())
(158 char=? 157 7 ())
(159 scheme-level-0 #f #f ())
(160 <= 159 7 ())
(161 scheme-level-0 #f #f ())
(162 magnitude 161 7 ())
(163 scheme-level-0 #f #f ())
(164 >= 163 7 ())
(165 scheme-level-0 #f #f ())
(166 with-continuation 165 7 ())
(167 scheme-level-0 #f #f ())
(168 floor 167 7 ())
(169 scheme-level-0 #f #f ())
(170 provisional-checked-record-set! 169 7 ())
(171 scheme-level-0 #f #f ())
(172 apply 171 7 ())
(173 scheme-level-0 #f #f ())
(174 memory-status 173 7 ())
(175 scheme-level-0 #f #f ())
(176 checked-record-set! 175 7 ())
(177 scheme-level-0 #f #f ())
(178 exact->inexact 177 7 ())
(179 scheme-level-0 #f #f ())
(180 inexact->exact 179 7 ())
(181 scheme-level-0 #f #f ())
(182 error 181 7 ())
(183 scheme-level-0 #f #f ())
(184 extended-number-length 183 7 ())
(185 scheme-level-0 #f #f ())
(186 open-channels-list 185 7 ())
(187 scheme-level-0 #f #f ())
(188 provisional-shared-binding-set! 187 7 ())
(189 scheme-level-0 #f #f ())
(190 channel-id 189 7 ())
(191 scheme-level-0 #f #f ())
(192 shared-binding-set! 191 7 ())
(193 scheme-level-0 #f #f ())
(194 numerator 193 7 ())
(195 scheme-level-0 #f #f ())
(196 eof-object 195 7 ())
(197 scheme-level-0 #f #f ())
(198 byte-vector-length 197 7 ())
(199 scheme-level-0 #f #f ())
(200 record-ref 199 7 ())
(201 scheme-level-0 #f #f ())
(202 make-polar 201 7 ())
(203 scheme-level-0 #f #f ())
(204 write-char 203 7 ())
(205 scheme-level-0 #f #f ())
(206 symbol->string 205 7 ())
(207 scheme-level-0 #f #f ())
(208 exact? 207 7 ())
(209 scheme-level-0 #f #f ())
(210 provisional-vector-ref 209 7 ())
(211 scheme-level-0 #f #f ())
(212 vector-ref 211 7 ())
(213 scheme-level-0 #f #f ())
(214 set-current-thread! 213 7 ())
(215 scheme-level-0 #f #f ())
(216 provisional-set-port-index! 215 7 ())
(217 scheme-level-0 #f #f ())
(218 immutable? 217 7 ())
(219 scheme-level-0 #f #f ())
(220 set-exception-handlers! 219 7 ())
(221 scheme-level-0 #f #f ())
(222 string-ref 221 7 ())
(223 scheme-level-0 #f #f ())
(224 set-port-index! 223 7 ())
(225 scheme-level-0 #f #f ())
(226 provisional-set-port-limit! 225 7 ())
(227 scheme-level-0 #f #f ())
(228 make-shared-binding 227 7 ())
(229 scheme-level-0 #f #f ())
(230 current-thread 229 7 ())
(231 scheme-level-0 #f #f ())
(232 provisional-port-index 231 7 ())
(233 scheme-level-0 #f #f ())
(234 channel-status 233 7 ())
(235 scheme-level-0 #f #f ())
(236 set-port-limit! 235 7 ())
(237 scheme-level-0 #f #f ())
(238 shared-binding-name 237 7 ())
(239 scheme-level-0 #f #f ())
(240 port-index 239 7 ())
(241 scheme-level-0 #f #f ())
(242 make-immutable! 241 7 ())
(243 scheme-level-0 #f #f ())
(244 byte-vector-logging-ref 243 7 ())
(245 scheme-level-0 #f #f ())
(246 set-enabled-interrupts! 245 7 ())
(247 scheme-level-0 #f #f ())
(248 provisional-port-limit 247 7 ())
(249 scheme-level-0 #f #f ())
(250 port-limit 249 7 ())
(251 scheme-level-0 #f #f ())
(252 ascii->char 251 7 ())
(253 scheme-level-0 #f #f ())
(254 char->ascii 253 7 ())
(255 scheme-level-0 #f #f ())
(256 undefine-shared-binding 255 7 ())
(257 scheme-level-0 #f #f ())
(258 attempt-copy-bytes! 257 7 ())
(259 scheme-level-0 #f #f ())
(260 record-set! 259 7 ())
(261 scheme-level-0 #f #f ())
(262 shared-binding? 261 7 ())
(263 scheme-level-0 #f #f ())
(264 eof-object? 263 7 ())
(265 scheme-level-0 #f #f ())
(266 set-interrupt-handlers! 265 7 ())
(267 scheme-level-0 #f #f ())
(268 record 267 7 ())
(269 scheme-level-0 #f #f ())
(270 schedule-interrupt 269 7 ())
(271 scheme-level-0 #f #f ())
(272 channel-maybe-write 271 7 ())
(273 scheme-level-0 #f #f ())
(274 unspecific 273 7 ())
(275 scheme-level-0 #f #f ())
(276 provisional-vector-set! 275 7 ())
(277 scheme-level-0 #f #f ())
(278 extended-number-ref 277 7 ())
(279 scheme-level-0 #f #f ())
(280 vector-set! 279 7 ())
(281 scheme-level-0 #f #f ())
(282 copy-bytes! 281 7 ())
(283 scheme-level-0 #f #f ())
(284 string-set! 283 7 ())
(285 scheme-level-0 #f #f ())
(286 unassigned 285 7 ())
(287 scheme-level-0 #f #f ())
(288 call-external-value 287 7 ())
(289 scheme-level-0 #f #f ())
(290 values 289 7 ())
(291 scheme-level-0 #f #f ())
(292 intern 291 7 ())
(293 scheme-level-0 #f #f ())
(294 vector 293 7 ())
(295 scheme-level-0 #f #f ())
(296 write-image-low 295 7 ())
(297 scheme-level-0 #f #f ())
(298 provisional-byte-vector-ref 297 7 ())
(299 scheme-level-0 #f #f ())
(300 byte-vector-logging-set! 299 7 ())
(301 scheme-level-0 #f #f ())
(302 byte-vector-ref 301 7 ())
(303 scheme-level-0 #f #f ())
(304 make-double 303 7 ())
(305 scheme-level-0 #f #f ())
(306 provisional-set-location-id! 305 7 ())
(307 scheme-level-0 #f #f ())
(308 make-record 307 7 ())
(309 scheme-level-0 #f #f ())
(310 set-location-id! 309 7 ())
(311 scheme-level-0 #f #f ())
(312 provisional-location-id 311 7 ())
(313 scheme-level-0 #f #f ())
(314 location-id 313 7 ())
(315 scheme-level-0 #f #f ())
(316 bitwise-and 315 7 ())
(317 scheme-level-0 #f #f ())
(318 eq? 317 7 ())
(319 scheme-level-0 #f #f ())
(320 double? 319 7 ())
(321 scheme-level-0 #f #f ())
(322 extended-number-set! 321 7 ())
(323 scheme-level-0 #f #f ())
(324 make-vector 323 7 ())
(325 scheme-level-0 #f #f ())
(326 record? 325 7 ())
(327 scheme-level-0 #f #f ())
(328 provisional-set-port-buffer! 327 7 ())
(329 scheme-level-0 #f #f ())
(330 make-string 329 7 ())
(331 scheme-level-0 #f #f ())
(332 set-port-buffer! 331 7 ())
(333 scheme-level-0 #f #f ())
(334 primitive-catch 333 7 ())
(335 scheme-level-0 #f #f ())
(336 string-hash 335 7 ())
(337 scheme-level-0 #f #f ())
(338 provisional-byte-vector-set! 337 7 ())
(339 scheme-level-0 #f #f ())
(340 template-length 339 7 ())
(341 scheme-level-0 #f #f ())
(342 provisional-port-buffer 341 7 ())
(343 scheme-level-0 #f #f ())
(344 number? 343 7 ())
(345 scheme-level-0 #f #f ())
(346 port-buffer 345 7 ())
(347 scheme-level-0 #f #f ())
(348 byte-vector-set! 347 7 ())
(349 scheme-level-0 #f #f ())
(350 bitwise-ior 349 7 ())
(351 scheme-level-0 #f #f ())
(352 provisional-set-car! 351 7 ())
(353 scheme-level-0 #f #f ())
(354 provisional-set-cdr! 353 7 ())
(355 scheme-level-0 #f #f ())
(356 set-car! 355 7 ())
(357 scheme-level-0 #f #f ())
(358 closure-env 357 7 ())
(359 scheme-level-0 #f #f ())
(360 vector? 359 7 ())
(361 scheme-level-0 #f #f ())
(362 bitwise-not 361 7 ())
(363 scheme-level-0 #f #f ())
(364 set-cdr! 363 7 ())
(365 scheme-level-0 #f #f ())
(366 provisional-car 365 7 ())
(367 scheme-level-0 #f #f ())
(368 symbol? 367 7 ())
(369 scheme-level-0 #f #f ())
(370 string? 369 7 ())
(371 scheme-level-0 #f #f ())
(372 provisional-cdr 371 7 ())
(373 scheme-level-0 #f #f ())
(374 car 373 7 ())
(375 scheme-level-0 #f #f ())
(376 bitwise-xor 375 7 ())
(377 scheme-level-0 #f #f ())
(378 cdr 377 7 ())
(379 scheme-level-0 #f #f ())
(380 find-all-records 379 7 ())
(381 scheme-level-0 #f #f ())
(382 continuation-length 381 7 ())
(383 scheme-level-0 #f #f ())
(384 log 383 7 ())
(385 scheme-level-0 #f #f ())
(386 message 385 7 ())
(387 scheme-level-0 #f #f ())
(388 tan 387 7 ())
(389 scheme-level-0 #f #f ())
(390 collect 389 7 ())
(391 scheme-level-0 #f #f ())
(392 cos 391 7 ())
(393 scheme-level-0 #f #f ())
(394 channel-os-index 393 7 ())
(395 scheme-level-0 #f #f ())
(396 provisional-set-port-status! 395 7 ())
(397 scheme-level-0 #f #f ())
(398 make-extended-number 397 7 ())
(399 scheme-level-0 #f #f ())
(400 set-port-status! 399 7 ())
(401 scheme-level-0 #f #f ())
(402 sin 401 7 ())
(403 scheme-level-0 #f #f ())
(404 exp 403 7 ())
(405 scheme-level-0 #f #f ())
(406 provisional-port-status 405 7 ())
(407 scheme-level-0 #f #f ())
(408 pop 407 7 ())
(409 scheme-level-0 #f #f ())
(410 port-status 409 7 ())
(411 scheme-level-0 #f #f ())
(412 return-from-callback 411 7 ())
(413 scheme-level-0 #f #f ())
(414 provisional-set-port-locked?! 413 7 ())
(415 scheme-level-0 #f #f ())
(416 set-port-locked?! 415 7 ())
(417 scheme-level-0 #f #f ())
(418 make-byte-vector 417 7 ())
(419 scheme-level-0 #f #f ())
(420 weak-pointer-ref 419 7 ())
(421 scheme-level-0 #f #f ())
(422 call-with-values 421 7 ())
(423 scheme-level-0 #f #f ())
(424 provisional-port-locked? 423 7 ())
(425 scheme-level-0 #f #f ())
(426 denominator 425 7 ())
(427 scheme-level-0 #f #f ())
(428 port-locked? 427 7 ())
(429 scheme-level-0 #f #f ())
(430 reverse-list->string 429 7 ())
(431 scheme-level-0 #f #f ())
(432 extended-number? 431 7 ())
(433 scheme-level-0 #f #f ())
(434 shared-binding-is-import? 433 7 ())
(435 scheme-level-0 #f #f ())
(436 provisional-cell-ref 435 7 ())
(437 scheme-level-0 #f #f ())
(438 find-all 437 7 ())
(439 scheme-level-0 #f #f ())
(440 cell-ref 439 7 ())
(441 scheme-level-0 #f #f ())
(442 byte-vector? 441 7 ())
(443 scheme-level-0 #f #f ())
(444 string=? 443 7 ())
(445 scheme-level-0 #f #f ())
(446 open-channel 445 7 ())
(447 scheme-level-0 #f #f ())
(448 channel? 447 7 ())
(449 scheme-level-0 #f #f ())
(450 make-rectangular 449 7 ())
(451 scheme-level-0 #f #f ())
(452 set-session-data! 451 7 ())
(453 scheme-level-0 #f #f ())
(454 maybe-commit 453 7 ())
(455 scheme-level-0 #f #f ())
(456 template-ref 455 7 ())
(457 scheme-level-0 #f #f ())
(458 make-closure 457 7 ())
(459 scheme-level-0 #f #f ())
(460 session-data 459 7 ())
(461 scheme-level-0 #f #f ())
(462 integer? 461 7 ())
(463 scheme-level-0 #f #f ())
(464 signal-condition 463 7 ())
(465 scheme-level-0 #f #f ())
(466 provisional-set-port-pending-eof?! 465 7 ())
(467 scheme-level-0 #f #f ())
(468 port-handler 467 7 ())
(469 scheme-level-0 #f #f ())
(470 set-port-pending-eof?! 469 7 ())
(471 scheme-level-0 #f #f ())
(472 arithmetic-shift 471 7 ())
(473 scheme-level-0 #f #f ())
(474 provisional-port-pending-eof? 473 7 ())
(475 scheme-level-0 #f #f ())
(476 provisional-cell-set! 475 7 ())
(477 scheme-level-0 #f #f ())
(478 complex? 477 7 ())
(479 scheme-level-0 #f #f ())
(480 port-pending-eof? 479 7 ())
(481 scheme-level-0 #f #f ())
(482 cell-set! 481 7 ())
(483 scheme-level-0 #f #f ())
(484 binary-comparison-reduce2 483 7 ())
(485 scheme-level-0 #f #f ())
(486 scheme-level-0 #f #f ())
(487 closure? 486 7 ())
(488 scheme-level-0 #f #f ())
(489 continuation-ref 488 7 ())
(490 scheme-level-0 #f #f ())
(491 closure-template 490 7 ())
(492 scheme-level-0 #f #f ())
(493 current-cont 492 7 ())
(494 scheme-level-0 #f #f ())
(495 char->integer 494 10 ())
(496 scheme-level-0 #f #f ())
(497 integer->char 496 10 ())
(498 scheme-level-0 #f #f ())
(499 invoke-closure 498 10 ())
(500 scheme-level-0 #f #f ())
(501 primitive-cwcc 500 10 ())
(502 #f 501 18 ())
(503 scheme-level-0 #f #f ())
(504 make-undefined-location 503 10 ())
(505 scheme-level-0 #f #f ())
(506 location-assigned? 505 10 ())
(507 scheme-level-0 #f #f ())
(508 vector-unassigned? 507 10 ())
(509 scheme-level-0 #f #f ())
(510 string-copy 509 10 ())
(511 scheme-level-0 #f #f ())
(512 string->symbol 511 10 ())
(513 scheme-level-0 #f #f ())
(514 input-port? 513 10 ())
(515 scheme-level-0 #f #f ())
(516 output-port? 515 10 ())
(517 scheme-level-0 #f #f ())
(518 record-type 517 10 ())
(519 scheme-level-0 #f #f ())
(520 make-code-vector 519 10 ())
(521 scheme-level-0 #f #f ())
(522 code-vector? 521 10 ())
(523 scheme-level-0 #f #f ())
(524 code-vector-length 523 10 ())
(525 scheme-level-0 #f #f ())
(526 code-vector-ref 525 10 ())
(527 scheme-level-0 #f #f ())
(528 code-vector-set! 527 10 ())
(529 scheme-level-0 #f #f ())
(530 lookup-imported-binding 529 10 ())
(531 scheme-level-0 #f #f ())
(532 lookup-exported-binding 531 10 ())
(533 scheme-level-0 #f #f ())
(534 define-imported-binding 533 10 ())
(535 scheme-level-0 #f #f ())
(536 define-exported-binding 535 10 ())
(537 scheme-level-0 #f #f ())
(538 undefine-imported-binding 537 10 ())
(539 scheme-level-0 #f #f ())
(540 undefine-exported-binding 539 10 ())
(541 scheme-level-0 #f #f ())
(542 secret-length 541 10 ())
(543 scheme-level-0 #f #f ())
(544 byte-vector 543 10 ())
(545 loop##0 544 47 ())
(546 scheme-level-0 #f #f ())
(547 debug-message 546 10 ())
(548 scheme-level-0 #f #f ())
(549 signal 548 10 ())
(550 scheme-level-0 #f #f ())
(551 vector-prefix->list 550 10 ())
(552 loop##2 551 18 ())
(553 scheme-level-0 #f #f ())
(554 write-image 553 10 ())
(555 scheme-level-0 #f #f ())
(556 make-proposal 555 10 ())
(557 scheme-level-0 #f #f ())
(558 warn 557 10 ())
(559 scheme-level-0 #f #f ())
(560 note 559 10 ())
(561 scheme-level-0 #f #f ())
(562 syntax-error 561 10 ())
(563 scheme-level-0 #f #f ())
(564 call-error 563 10 ())
(565 scheme-level-0 #f #f ())
(566 scheme-level-0 #f #f ())
(567 scheme-level-0 #f #f ())
(568 scheme-level-1 #f #f ())
(569 scheme-level-1 #f #f ())
(570 scheme-level-1 #f #f ())
(571 scheme-level-1 #f #f ())
(572 scheme-level-1 #f #f ())
(573 scheme-level-1 #f #f ())
(574 scheme-level-1 #f #f ())
(575 scheme-level-1 #f #f ())
(576 scheme-level-1 #f #f ())
(577 scheme-level-1 #f #f ())
(578 scheme-level-1 #f #f ())
(579 scheme-level-1 #f #f ())
(580 #f 579 14 ())
(581 scheme-level-1 #f #f ())
(582 #f 581 14 ())
(583 scheme-level-1 #f #f ())
(584 scheme-level-1 #f #f ())
(585 scheme-level-1 #f #f ())
(586 scheme-level-1 #f #f ())
(587 scheme-level-1 #f #f ())
(588 scheme-level-1 #f #f ())
(589 scheme-level-1 #f #f ())
(590 not 589 10 ())
(591 scheme-level-1 #f #f ())
(592 boolean? 591 10 ())
(593 scheme-level-1 #f #f ())
(594 eqv? 593 10 ())
(595 scheme-level-1 #f #f ())
(596 equal? 595 10 ())
(597 loop 596 171 ())
(598 scheme-level-1 #f #f ())
(599 null? 598 10 ())
(600 scheme-level-1 #f #f ())
(601 inexact? 600 10 ())
(602 scheme-level-1 #f #f ())
(603 max-or-min 602 10 ())
(604 loop 603 42 ())
(605 scheme-level-1 #f #f ())
(606 max 605 10 ())
(607 scheme-level-1 #f #f ())
(608 min 607 10 ())
(609 scheme-level-1 #f #f ())
(610 abs 609 10 ())
(611 scheme-level-1 #f #f ())
(612 zero? 611 10 ())
(613 scheme-level-1 #f #f ())
(614 positive? 613 10 ())
(615 scheme-level-1 #f #f ())
(616 negative? 615 10 ())
(617 scheme-level-1 #f #f ())
(618 even? 617 10 ())
(619 scheme-level-1 #f #f ())
(620 odd? 619 10 ())
(621 scheme-level-1 #f #f ())
(622 caar 621 10 ())
(623 scheme-level-1 #f #f ())
(624 cadr 623 10 ())
(625 scheme-level-1 #f #f ())
(626 cdar 625 10 ())
(627 scheme-level-1 #f #f ())
(628 cddr 627 10 ())
(629 scheme-level-1 #f #f ())
(630 caaar 629 10 ())
(631 scheme-level-1 #f #f ())
(632 caadr 631 10 ())
(633 scheme-level-1 #f #f ())
(634 cadar 633 10 ())
(635 scheme-level-1 #f #f ())
(636 caddr 635 10 ())
(637 scheme-level-1 #f #f ())
(638 cdaar 637 10 ())
(639 scheme-level-1 #f #f ())
(640 cdadr 639 10 ())
(641 scheme-level-1 #f #f ())
(642 cddar 641 10 ())
(643 scheme-level-1 #f #f ())
(644 cdddr 643 10 ())
(645 scheme-level-1 #f #f ())
(646 caaaar 645 10 ())
(647 scheme-level-1 #f #f ())
(648 caaadr 647 10 ())
(649 scheme-level-1 #f #f ())
(650 caadar 649 10 ())
(651 scheme-level-1 #f #f ())
(652 caaddr 651 10 ())
(653 scheme-level-1 #f #f ())
(654 cadaar 653 10 ())
(655 scheme-level-1 #f #f ())
(656 cadadr 655 10 ())
(657 scheme-level-1 #f #f ())
(658 caddar 657 10 ())
(659 scheme-level-1 #f #f ())
(660 cadddr 659 10 ())
(661 scheme-level-1 #f #f ())
(662 cdaaar 661 10 ())
(663 scheme-level-1 #f #f ())
(664 cdaadr 663 10 ())
(665 scheme-level-1 #f #f ())
(666 cdadar 665 10 ())
(667 scheme-level-1 #f #f ())
(668 cdaddr 667 10 ())
(669 scheme-level-1 #f #f ())
(670 cddaar 669 10 ())
(671 scheme-level-1 #f #f ())
(672 cddadr 671 10 ())
(673 scheme-level-1 #f #f ())
(674 cdddar 673 10 ())
(675 scheme-level-1 #f #f ())
(676 cddddr 675 10 ())
(677 scheme-level-1 #f #f ())
(678 list 677 10 ())
(679 scheme-level-1 #f #f ())
(680 real-length 679 10 ())
(681 scheme-level-1 #f #f ())
(682 length 681 10 ())
(683 scheme-level-1 #f #f ())
(684 reduce 683 10 ())
(685 scheme-level-1 #f #f ())
(686 append 685 10 ())
(687 recur 686 37 ())
(688 scheme-level-1 #f #f ())
(689 append-reverse 688 10 ())
(690 scheme-level-1 #f #f ())
(691 reverse 690 10 ())
(692 scheme-level-1 #f #f ())
(693 list-tail 692 10 ())
(694 scheme-level-1 #f #f ())
(695 list-ref 694 10 ())
(696 scheme-level-1 #f #f ())
(697 mem 696 10 ())
(698 #f 697 16 ())
(699 loop 698 28 ())
(700 scheme-level-1 #f #f ())
(701 ass 700 10 ())
(702 #f 701 16 ())
(703 loop 702 28 ())
(704 scheme-level-1 #f #f ())
(705 list? 704 10 ())
(706 recur 705 24 ())
(707 scheme-level-1 #f #f ())
(708 char>? 707 10 ())
(709 scheme-level-1 #f #f ())
(710 char>=? 709 10 ())
(711 scheme-level-1 #f #f ())
(712 char<=? 711 10 ())
(713 scheme-level-1 #f #f ())
(714 char-whitespace? 713 10 ())
(715 scheme-level-1 #f #f ())
(716 char-lower-case? 715 10 ())
(717 scheme-level-1 #f #f ())
(718 char-upper-case? 717 10 ())
(719 scheme-level-1 #f #f ())
(720 char-numeric? 719 10 ())
(721 scheme-level-1 #f #f ())
(722 char-alphabetic? 721 10 ())
(723 scheme-level-1 #f #f ())
(724 make-character-map 723 10 ())
(725 loop##10 724 37 ())
(726 scheme-level-1 #f #f ())
(727 char-upcase 726 10 ())
(728 scheme-level-1 #f #f ())
(729 char-downcase 728 10 ())
(730 scheme-level-1 #f #f ())
(731 char-ci-compare 730 10 ())
(732 #f 731 16 ())
(733 scheme-level-1 #f #f ())
(734 list->string 733 10 ())
(735 loop##11 734 45 ())
(736 scheme-level-1 #f #f ())
(737 string 736 10 ())
(738 scheme-level-1 #f #f ())
(739 substring 738 10 ())
(740 loop##12 739 37 ())
(741 scheme-level-1 #f #f ())
(742 string-append 741 10 ())
(743 #f 742 15 ())
(744 loop 742 72 ())
(745 loop##13 744 59 ())
(746 scheme-level-1 #f #f ())
(747 string->list 746 10 ())
(748 loop##14 747 25 ())
(749 scheme-level-1 #f #f ())
(750 unspecific 749 10 ())
(751 scheme-level-1 #f #f ())
(752 string-fill! 751 10 ())
(753 loop##15 752 29 ())
(754 scheme-level-1 #f #f ())
(755 make-string=? 754 10 ())
(756 #f 755 16 ())
(757 loop 756 50 ())
(758 scheme-level-1 #f #f ())
(759 make-string<? 758 10 ())
(760 #f 759 17 ())
(761 loop 760 70 ())
(762 scheme-level-1 #f #f ())
(763 string>? 762 10 ())
(764 scheme-level-1 #f #f ())
(765 string<=? 764 10 ())
(766 scheme-level-1 #f #f ())
(767 string>=? 766 10 ())
(768 scheme-level-1 #f #f ())
(769 string-ci>? 768 10 ())
(770 scheme-level-1 #f #f ())
(771 string-ci<=? 770 10 ())
(772 scheme-level-1 #f #f ())
(773 string-ci>=? 772 10 ())
(774 scheme-level-1 #f #f ())
(775 vector->list 774 10 ())
(776 loop##17 775 18 ())
(777 scheme-level-1 #f #f ())
(778 list->vector 777 10 ())
(779 loop##18 778 44 ())
(780 scheme-level-1 #f #f ())
(781 vector-fill! 780 10 ())
(782 loop##19 781 30 ())
(783 scheme-level-1 #f #f ())
(784 map1 783 10 ())
(785 scheme-level-1 #f #f ())
(786 any 785 10 ())
(787 scheme-level-1 #f #f ())
(788 map2+ 787 10 ())
(789 scheme-level-1 #f #f ())
(790 map 789 10 ())
(791 scheme-level-1 #f #f ())
(792 for-each1 791 10 ())
(793 loop 792 25 ())
(794 scheme-level-1 #f #f ())
(795 for-each2+ 794 10 ())
(796 loop 795 28 ())
(797 scheme-level-1 #f #f ())
(798 for-each 797 10 ())
(799 scheme-level-1 #f #f ())
(800 make-promise 799 10 ())
(801 #f 800 44 ())
(802 scheme-level-1 #f #f ())
(803 force 802 10 ())
(804 scheme-level-1 #f #f ())
(805 filter 804 10 ())
(806 #f 805 16 ())
(807 scheme-level-1 #f #f ())
(808 pos 807 10 ())
(809 #f 808 16 ())
(810 loop 809 32 ())
(811 scheme-level-1 #f #f ())
(812 every 811 10 ())
(813 scheme-level-1 #f #f ())
(814 sublist 813 10 ())
(815 recur 814 61 ())
(816 scheme-level-1 #f #f ())
(817 last 816 10 ())
(818 scheme-level-1 #f #f ())
(819 insert 818 10 ())
(820 scheme-level-1 #f #f ())
(821 fold 820 10 ())
(822 loop##23 821 18 ())
(823 scheme-level-1 #f #f ())
(824 fold->2 823 10 ())
(825 loop 824 31 ())
(826 scheme-level-1 #f #f ())
(827 fold->3 826 10 ())
(828 loop 827 34 ())
(829 scheme-level-1 #f #f ())
(830 modulo 829 10 ())
(831 scheme-level-1 #f #f ())
(832 ceiling 831 10 ())
(833 scheme-level-1 #f #f ())
(834 truncate 833 10 ())
(835 scheme-level-1 #f #f ())
(836 round 835 10 ())
(837 scheme-level-1 #f #f ())
(838 euclid 837 10 ())
(839 scheme-level-1 #f #f ())
(840 gcd 839 10 ())
(841 #f 840 11 ())
(842 scheme-level-1 #f #f ())
(843 lcm 842 10 ())
(844 #f 843 11 ())
(845 scheme-level-1 #f #f ())
(846 raise-to-integer-power 845 10 ())
(847 loop 846 42 ())
(848 scheme-level-1 #f #f ())
(849 expt 848 10 ())
(850 scheme-level-1 #f #f ())
(851 simplest-rational 850 10 ())
(852 simplest-rational-internal 851 14 ())
(853 scheme-level-1 #f #f ())
(854 rationalize 853 10 ())
(855 record-types #f #f ())
(856 #f 855 10 ())
(857 record-types #f #f ())
(858 record-types #f #f ())
(859 record-types #f #f ())
(860 record-types #f #f ())
(861 record-type-name 860 10 ())
(862 record-types #f #f ())
(863 make-default-record-discloser 862 10 ())
(864 #f 863 16 ())
(865 record-types #f #f ())
(866 make-record-type 865 10 ())
(867 record-types #f #f ())
(868 record-type? 867 10 ())
(869 record-types #f #f ())
(870 record-type-resumer 869 10 ())
(871 record-types #f #f ())
(872 set-record-type-resumer! 871 10 ())
(873 record-types #f #f ())
(874 record-type-uid 873 10 ())
(875 record-types #f #f ())
(876 record-type-field-names 875 10 ())
(877 record-types #f #f ())
(878 record-type-number-of-fields 877 10 ())
(879 record-types #f #f ())
(880 record-type-discloser 879 10 ())
(881 record-types #f #f ())
(882 set-record-type-discloser! 881 10 ())
(883 record-types #f #f ())
(884 record-field-index 883 10 ())
(885 loop 884 37 ())
(886 record-types #f #f ())
(887 record-constructor 886 10 ())
(888 #f 887 20 ())
(889 #f 887 69 ())
(890 loop 889 59 ())
(891 record-types #f #f ())
(892 record-accessor 891 10 ())
(893 #f 892 78 ())
(894 record-types #f #f ())
(895 record-modifier 894 10 ())
(896 #f 895 78 ())
(897 record-types #f #f ())
(898 record-predicate 897 10 ())
(899 #f 898 16 ())
(900 record-types #f #f ())
(901 define-record-discloser 900 10 ())
(902 record-types #f #f ())
(903 disclose-record 902 10 ())
(904 record-types #f #f ())
(905 define-record-resumer 904 10 ())
(906 record-types #f #f ())
(907 resume-record 906 10 ())
(908 record-types #f #f ())
(909 initialize-records! 908 10 ())
(910 loop##27 909 25 ())
(911 record-types #f #f ())
(912 record-types #f #f ())
(913 record-types #f #f ())
(914 record-types #f #f ())
(915 define-record-types #f #f ())
(916 methods #f #f ())
(917 &add-method! 916 64 ())
(918 methods #f #f ())
(919 &disclose 918 57 ())
(920 methods #f #f ())
(921 &disclose 920 57 ())
(922 methods #f #f ())
(923 methods #f #f ())
(924 disclose 923 61 ())
(925 methods #f #f ())
(926 &same-type? 925 61 ())
(927 methods #f #f ())
(928 &type-priority 927 57 ())
(929 methods #f #f ())
(930 &type-predicate 929 57 ())
(931 methods #f #f ())
(932 #f 931 14 ())
(933 methods #f #f ())
(934 singleton-value 933 10 ())
(935 methods #f #f ())
(936 singleton 935 10 ())
(937 methods #f #f ())
(938 methods #f #f ())
(939 &same-type? 938 61 ())
(940 methods #f #f ())
(941 &same-type? 940 61 ())
(942 methods #f #f ())
(943 methods #f #f ())
(944 same-type? 943 65 ())
(945 methods #f #f ())
(946 &type-superiors 945 57 ())
(947 methods #f #f ())
(948 &type-superiors 947 57 ())
(949 methods #f #f ())
(950 methods #f #f ())
(951 type-superiors 950 61 ())
(952 methods #f #f ())
(953 &type-priority 952 57 ())
(954 methods #f #f ())
(955 &type-priority 954 57 ())
(956 methods #f #f ())
(957 methods #f #f ())
(958 type-priority 957 61 ())
(959 methods #f #f ())
(960 &type-predicate 959 57 ())
(961 methods #f #f ())
(962 &type-predicate 961 57 ())
(963 methods #f #f ())
(964 methods #f #f ())
(965 type-predicate 964 61 ())
(966 methods #f #f ())
(967 add-method! 966 57 ())
(968 methods #f #f ())
(969 methods #f #f ())
(970 add-method! 969 65 ())
(971 methods #f #f ())
(972 #f 971 14 ())
(973 methods #f #f ())
(974 set-method-table-methods! 973 10 ())
(975 methods #f #f ())
(976 method-table-methods 975 10 ())
(977 methods #f #f ())
(978 method-table-prototype 977 10 ())
(979 methods #f #f ())
(980 make-generic 979 10 ())
(981 methods #f #f ())
(982 method-table-get-perform 981 10 ())
(983 methods #f #f ())
(984 method-table-set-perform! 983 10 ())
(985 methods #f #f ())
(986 method-table-id 985 10 ())
(987 methods #f #f ())
(988 really-make-method-table 987 10 ())
(989 methods #f #f ())
(990 methods #f #f ())
(991 #f 990 14 ())
(992 methods #f #f ())
(993 method-info-types 992 10 ())
(994 methods #f #f ())
(995 method-info-n-ary? 994 10 ())
(996 methods #f #f ())
(997 method-info-proc 996 10 ())
(998 methods #f #f ())
(999 really-make-method-info 998 10 ())
(1000 methods #f #f ())
(1001 methods #f #f ())
(1002 record-type-priority 1001 66 ())
(1003 methods #f #f ())
(1004 methods #f #f ())
(1005 methods #f #f ())
(1006 methods #f #f ())
(1007 methods #f #f ())
(1008 methods #f #f ())
(1009 methods #f #f ())
(1010 methods #f #f ())
(1011 methods #f #f ())
(1012 methods #f #f ())
(1013 methods #f #f ())
(1014 methods #f #f ())
(1015 methods #f #f ())
(1016 #f 1015 30 ())
(1017 methods #f #f ())
(1018 methods #f #f ())
(1019 methods #f #f ())
(1020 methods #f #f ())
(1021 methods #f #f ())
(1022 methods #f #f ())
(1023 #f 1022 30 ())
(1024 methods #f #f ())
(1025 methods #f #f ())
(1026 methods #f #f ())
(1027 methods #f #f ())
(1028 #f 1027 14 ())
(1029 methods #f #f ())
(1030 simple-type-superiors 1029 10 ())
(1031 methods #f #f ())
(1032 simple-type-predicate 1031 10 ())
(1033 methods #f #f ())
(1034 simple-type-priority 1033 10 ())
(1035 methods #f #f ())
(1036 simple-type-id 1035 10 ())
(1037 methods #f #f ())
(1038 really-make-simple-type 1037 10 ())
(1039 methods #f #f ())
(1040 methods #f #f ())
(1041 simple-type? 1040 10 ())
(1042 methods #f #f ())
(1043 %type-priority 1042 10 ())
(1044 methods #f #f ())
(1045 compute-priority 1044 10 ())
(1046 methods #f #f ())
(1047 make-simple-type 1046 10 ())
(1048 methods #f #f ())
(1049 %type-predicate 1048 10 ())
(1050 methods #f #f ())
(1051 %same-type? 1050 10 ())
(1052 methods #f #f ())
(1053 value? 1052 10 ())
(1054 methods #f #f ())
(1055 method-info? 1054 10 ())
(1056 methods #f #f ())
(1057 make-method-info 1056 10 ())
(1058 methods #f #f ())
(1059 empty-method-list 1058 10 ())
(1060 methods #f #f ())
(1061 more-specific-type? 1060 10 ())
(1062 methods #f #f ())
(1063 more-specific? 1062 10 ())
(1064 loop 1063 159 ())
(1065 methods #f #f ())
(1066 every2 1065 10 ())
(1067 methods #f #f ())
(1068 same-applicability? 1067 10 ())
(1069 methods #f #f ())
(1070 insert-method 1069 10 ())
(1071 recur 1070 25 ())
(1072 methods #f #f ())
(1073 method-table? 1072 10 ())
(1074 methods #f #f ())
(1075 last-action 1074 10 ())
(1076 #f 1075 16 ())
(1077 methods #f #f ())
(1078 one-action 1077 10 ())
(1079 #f 1078 18 ())
(1080 #f 1079 35 ())
(1081 methods #f #f ())
(1082 check-for-next 1081 10 ())
(1083 #f 1082 16 ())
(1084 methods #f #f ())
(1085 check-next 1084 10 ())
(1086 #f 1085 17 ())
(1087 methods #f #f ())
(1088 argument-sequence-predicate 1087 10 ())
(1089 recur 1088 35 ())
(1090 methods #f #f ())
(1091 methods->perform 1090 10 ())
(1092 recur 1091 21 ())
(1093 methods #f #f ())
(1094 add-to-method-table! 1093 10 ())
(1095 methods #f #f ())
(1096 set-final-method! 1095 10 ())
(1097 methods #f #f ())
(1098 make-cell-for-generic 1097 10 ())
(1099 #f 1098 28 ())
(1100 #f 1098 43 ())
(1101 #f 1098 58 ())
(1102 methods #f #f ())
(1103 make-method-table 1102 10 ())
(1104 #f 1103 118 ())
(1105 methods #f #f ())
(1106 apply-generic 1105 10 ())
(1107 methods #f #f ())
(1108 compare-to 1107 10 ())
(1109 #f 1108 16 ())
(1110 methods #f #f ())
(1111 proc->discloser 1110 10 ())
(1112 #f 1111 16 ())
(1113 #f 1112 9 ())
(1114 methods #f #f ())
(1115 number-i/o #f #f ())
(1116 #f 1115 52 ())
(1117 #f 1115 73 ())
(1118 loop 1117 55 ())
(1119 #f 1115 95 ())
(1120 number-i/o #f #f ())
(1121 set-exactness 1120 10 ())
(1122 number-i/o #f #f ())
(1123 &really-string->number 1122 65 ())
(1124 number-i/o #f #f ())
(1125 #f 1124 30 ())
(1126 loop 1125 38 ())
(1127 number-i/o #f #f ())
(1128 &really-string->number 1127 65 ())
(1129 number-i/o #f #f ())
(1130 number-i/o #f #f ())
(1131 number-i/o #f #f ())
(1132 string->number 1131 10 ())
(1133 loop 1132 304 ())
(1134 radix-is 1133 71 ())
(1135 exactness-is 1133 94 ())
(1136 loop 1133 354 ())
(1137 number-i/o #f #f ())
(1138 #f 1137 47 ())
(1139 recur 1138 64 ())
(1140 #f 1137 69 ())
(1141 number-i/o #f #f ())
(1142 &number->string 1141 61 ())
(1143 number-i/o #f #f ())
(1144 &number->string 1143 61 ())
(1145 number-i/o #f #f ())
(1146 number->string 1145 10 ())
(1147 number-i/o #f #f ())
(1148 number-i/o #f #f ())
(1149 fluids #f #f ())
(1150 fluids #f #f ())
(1151 set-fluid-top-level-value! 1150 10 ())
(1152 fluids #f #f ())
(1153 fluid-top-level-value 1152 10 ())
(1154 fluids #f #f ())
(1155 make-fluid 1154 10 ())
(1156 fluids #f #f ())
(1157 fluids #f #f ())
(1158 thread-dynamic-env 1157 10 ())
(1159 fluids #f #f ())
(1160 thread-dynamic-point 1159 10 ())
(1161 fluids #f #f ())
(1162 thread-proposal 1161 10 ())
(1163 fluids #f #f ())
(1164 make-thread 1163 10 ())
(1165 fluids #f #f ())
(1166 fluids #f #f ())
(1167 get-dynamic-env 1166 10 ())
(1168 fluids #f #f ())
(1169 set-dynamic-env! 1168 10 ())
(1170 fluids #f #f ())
(1171 get-dynamic-point 1170 10 ())
(1172 fluids #f #f ())
(1173 set-dynamic-point! 1172 10 ())
(1174 fluids #f #f ())
(1175 empty-dynamic-env 1174 10 ())
(1176 fluids #f #f ())
(1177 initialize-dynamic-state! 1176 10 ())
(1178 fluids #f #f ())
(1179 with-dynamic-env 1178 10 ())
(1180 fluids #f #f ())
(1181 fluid 1180 10 ())
(1182 fluids #f #f ())
(1183 set-fluid! 1182 10 ())
(1184 fluids #f #f ())
(1185 let-fluid 1184 10 ())
(1186 fluids #f #f ())
(1187 let-fluids 1186 10 ())
(1188 loop 1187 32 ())
(1189 fluids #f #f ())
(1190 fluid-cell-ref 1189 10 ())
(1191 fluids #f #f ())
(1192 fluid-cell-set! 1191 10 ())
(1193 enumerated #f #f ())
(1194 lookup-enumerand 1193 10 ())
(1195 loop 1194 38 ())
(1196 architecture #f #f ())
(1197 architecture #f #f ())
(1198 architecture #f #f ())
(1199 architecture #f #f ())
(1200 architecture #f #f ())
(1201 architecture #f #f ())
(1202 architecture #f #f ())
(1203 architecture #f #f ())
(1204 architecture #f #f ())
(1205 architecture #f #f ())
(1206 architecture #f #f ())
(1207 architecture #f #f ())
(1208 architecture #f #f ())
(1209 architecture #f #f ())
(1210 architecture #f #f ())
(1211 architecture #f #f ())
(1212 architecture #f #f ())
(1213 architecture #f #f ())
(1214 architecture #f #f ())
(1215 architecture #f #f ())
(1216 architecture #f #f ())
(1217 architecture #f #f ())
(1218 architecture #f #f ())
(1219 architecture #f #f ())
(1220 architecture #f #f ())
(1221 architecture #f #f ())
(1222 next-protocol 1221 10 ())
(1223 architecture #f #f ())
(1224 architecture #f #f ())
(1225 architecture #f #f ())
(1226 architecture #f #f ())
(1227 architecture #f #f ())
(1228 architecture #f #f ())
(1229 architecture #f #f ())
(1230 architecture #f #f ())
(1231 architecture #f #f ())
(1232 architecture #f #f ())
(1233 architecture #f #f ())
(1234 architecture #f #f ())
(1235 architecture #f #f ())
(1236 architecture #f #f ())
(1237 proposals #f #f ())
(1238 proposals #f #f ())
(1239 invalidate-current-proposal! 1238 10 ())
(1240 proposals #f #f ())
(1241 remove-current-proposal! 1240 10 ())
(1242 proposals #f #f ())
(1243 call-ensuring-atomicity! 1242 10 ())
(1244 proposals #f #f ())
(1245 call-ensuring-atomicity 1244 10 ())
(1246 proposals #f #f ())
(1247 call-atomically! 1246 10 ())
(1248 lose 1247 35 ())
(1249 proposals #f #f ())
(1250 call-atomically 1249 10 ())
(1251 loop 1250 30 ())
(1252 session-data #f #f ())
(1253 make-session-data-slot! 1252 10 ())
(1254 session-data #f #f ())
(1255 session-data-ref 1254 10 ())
(1256 session-data #f #f ())
(1257 session-data-set! 1256 10 ())
(1258 session-data #f #f ())
(1259 initialize-session-data! 1258 10 ())
(1260 session-data #f #f ())
(1261 conditions #f #f ())
(1262 conditions #f #f ())
(1263 conditions #f #f ())
(1264 conditions #f #f ())
(1265 conditions #f #f ())
(1266 conditions #f #f ())
(1267 conditions #f #f ())
(1268 conditions #f #f ())
(1269 conditions #f #f ())
(1270 make-exception 1269 10 ())
(1271 conditions #f #f ())
(1272 conditions #f #f ())
(1273 conditions #f #f ())
(1274 conditions #f #f ())
(1275 conditions #f #f ())
(1276 conditions #f #f ())
(1277 conditions #f #f ())
(1278 conditions #f #f ())
(1279 conditions #f #f ())
(1280 conditions #f #f ())
(1281 conditions #f #f ())
(1282 conditions #f #f ())
(1283 conditions #f #f ())
(1284 conditions #f #f ())
(1285 condition? 1284 10 ())
(1286 conditions #f #f ())
(1287 condition-predicate 1286 10 ())
(1288 #f 1287 16 ())
(1289 conditions #f #f ())
(1290 define-condition-type 1289 10 ())
(1291 #f 1290 20 ())
(1292 conditions #f #f ())
(1293 condition-supertypes 1292 10 ())
(1294 conditions #f #f ())
(1295 wind #f #f ())
(1296 point-depth 1295 10 ())
(1297 wind #f #f ())
(1298 point-in 1297 10 ())
(1299 wind #f #f ())
(1300 point-out 1299 10 ())
(1301 wind #f #f ())
(1302 point-dynamic-env 1301 10 ())
(1303 wind #f #f ())
(1304 point-parent 1303 10 ())
(1305 wind #f #f ())
(1306 make-point 1305 10 ())
(1307 wind #f #f ())
(1308 wind #f #f ())
(1309 dynamic-wind 1308 10 ())
(1310 wind #f #f ())
(1311 travel-to-point! 1310 10 ())
(1312 wind #f #f ())
(1313 continuation->procedure 1312 10 ())
(1314 #f 1313 19 ())
(1315 #f 1314 69 ())
(1316 wind #f #f ())
(1317 call-with-current-continuation 1316 10 ())
(1318 #f 1317 16 ())
(1319 templates #f #f ())
(1320 template-code 1319 10 ())
(1321 templates #f #f ())
(1322 template-info 1321 10 ())
(1323 templates #f #f ())
(1324 set-template-code! 1323 10 ())
(1325 templates #f #f ())
(1326 set-template-info! 1325 10 ())
(1327 templates #f #f ())
(1328 more-types #f #f ())
(1329 &disclose 1328 53 ())
(1330 more-types #f #f ())
(1331 more-types #f #f ())
(1332 &disclose 1331 57 ())
(1333 more-types #f #f ())
(1334 more-types #f #f ())
(1335 more-types #f #f ())
(1336 more-types #f #f ())
(1337 more-types #f #f ())
(1338 more-types #f #f ())
(1339 more-types #f #f ())
(1340 more-types #f #f ())
(1341 more-types #f #f ())
(1342 continuations #f #f ())
(1343 &disclose 1342 53 ())
(1344 continuations #f #f ())
(1345 continuations #f #f ())
(1346 continuations #f #f ())
(1347 continuation-cont 1346 10 ())
(1348 continuations #f #f ())
(1349 real-continuation-pc 1348 10 ())
(1350 continuations #f #f ())
(1351 real-continuation-template 1350 10 ())
(1352 continuations #f #f ())
(1353 continuation-env 1352 10 ())
(1354 continuations #f #f ())
(1355 exception-continuation-pc 1354 10 ())
(1356 continuations #f #f ())
(1357 exception-continuation-template 1356 10 ())
(1358 continuations #f #f ())
(1359 exception-continuation-exception 1358 10 ())
(1360 continuations #f #f ())
(1361 exception-continuation? 1360 10 ())
(1362 continuations #f #f ())
(1363 continuation-pc 1362 10 ())
(1364 continuations #f #f ())
(1365 continuation-template 1364 10 ())
(1366 continuations #f #f ())
(1367 continuation-arg 1366 10 ())
(1368 continuations #f #f ())
(1369 continuation-arg-count 1368 10 ())
(1370 continuations #f #f ())
(1371 continuation-parent 1370 10 ())
(1372 loop 1371 122 ())
(1373 continuations #f #f ())
(1374 exceptions #f #f ())
(1375 &disclose 1374 53 ())
(1376 exceptions #f #f ())
(1377 &disclose 1376 57 ())
(1378 exceptions #f #f ())
(1379 report-errors-as-warnings 1378 10 ())
(1380 #f 1379 22 ())
(1381 exceptions #f #f ())
(1382 ignore-errors 1381 10 ())
(1383 #f 1382 16 ())
(1384 #f 1383 16 ())
(1385 exceptions #f #f ())
(1386 continuation-preview 1385 10 ())
(1387 exceptions #f #f ())
(1388 report-utter-lossage 1387 10 ())
(1389 #f 1388 154 ())
(1390 exceptions #f #f ())
(1391 last-resort-condition-handler 1390 10 ())
(1392 #f 1391 39 ())
(1393 #f 1392 39 ())
(1394 exceptions #f #f ())
(1395 initialize-exceptions! 1394 10 ())
(1396 #f 1395 16 ())
(1397 exceptions #f #f ())
(1398 exceptions #f #f ())
(1399 with-handler 1398 10 ())
(1400 exceptions #f #f ())
(1401 really-signal-condition 1400 10 ())
(1402 loop 1401 38 ())
(1403 #f 1402 22 ())
(1404 exceptions #f #f ())
(1405 extend-opcode! 1404 10 ())
(1406 except 1405 16 ())
(1407 #f 1405 54 ())
(1408 exceptions #f #f ())
(1409 #f 1408 14 ())
(1410 exceptions #f #f ())
(1411 exceptions #f #f ())
(1412 signal-exception 1411 10 ())
(1413 exceptions #f #f ())
(1414 define-exception-handler 1413 10 ())
(1415 i/o #f #f ())
(1416 i/o #f #f ())
(1417 i/o #f #f ())
(1418 i/o #f #f ())
(1419 i/o #f #f ())
(1420 i/o #f #f ())
(1421 i/o #f #f ())
(1422 i/o #f #f ())
(1423 #f 1422 14 ())
(1424 #f 1422 26 ())
(1425 #f 1422 34 ())
(1426 #f 1422 42 ())
(1427 #f 1422 50 ())
(1428 i/o #f #f ())
(1429 i/o #f #f ())
(1430 i/o #f #f ())
(1431 i/o #f #f ())
(1432 i/o #f #f ())
(1433 i/o #f #f ())
(1434 i/o #f #f ())
(1435 i/o #f #f ())
(1436 &disclose 1435 57 ())
(1437 i/o #f #f ())
(1438 &disclose 1437 57 ())
(1439 i/o #f #f ())
(1440 port-handler-discloser 1439 10 ())
(1441 i/o #f #f ())
(1442 port-handler-close 1441 10 ())
(1443 i/o #f #f ())
(1444 port-handler-char 1443 10 ())
(1445 i/o #f #f ())
(1446 port-handler-block 1445 10 ())
(1447 i/o #f #f ())
(1448 port-handler-ready? 1447 10 ())
(1449 i/o #f #f ())
(1450 port-handler-force 1449 10 ())
(1451 i/o #f #f ())
(1452 make-port-handler 1451 10 ())
(1453 i/o #f #f ())
(1454 i/o #f #f ())
(1455 port-handler? 1454 10 ())
(1456 i/o #f #f ())
(1457 disclose-port 1456 10 ())
(1458 i/o #f #f ())
(1459 one-arg-proc->handler 1458 10 ())
(1460 #f 1459 17 ())
(1461 i/o #f #f ())
(1462 two-arg-proc->handler 1461 10 ())
(1463 #f 1462 17 ())
(1464 i/o #f #f ())
(1465 initialize-i/o-handlers! 1464 10 ())
(1466 #f 1465 21 ())
(1467 #f 1465 58 ())
(1468 #f 1465 91 ())
(1469 i/o #f #f ())
(1470 open-input-port? 1469 10 ())
(1471 i/o #f #f ())
(1472 current-input-port 1471 10 ())
(1473 i/o #f #f ())
(1474 input-port-option 1473 10 ())
(1475 i/o #f #f ())
(1476 char-ready? 1475 10 ())
(1477 i/o #f #f ())
(1478 real-char-ready? 1477 10 ())
(1479 i/o #f #f ())
(1480 okay-limits? 1479 10 ())
(1481 i/o #f #f ())
(1482 read-block 1481 10 ())
(1483 i/o #f #f ())
(1484 open-output-port? 1483 10 ())
(1485 i/o #f #f ())
(1486 write-block 1485 10 ())
(1487 i/o #f #f ())
(1488 write-string 1487 10 ())
(1489 i/o #f #f ())
(1490 output-port-ready? 1489 10 ())
(1491 i/o #f #f ())
(1492 force-output 1491 10 ())
(1493 i/o #f #f ())
(1494 force-output-if-open 1493 10 ())
(1495 i/o #f #f ())
(1496 close-input-port 1495 10 ())
(1497 i/o #f #f ())
(1498 close-output-port 1497 10 ())
(1499 i/o #f #f ())
(1500 open-port? 1499 10 ())
(1501 i/o #f #f ())
(1502 make-input-port-closed! 1501 10 ())
(1503 i/o #f #f ())
(1504 make-unbuffered-input-port 1503 10 ())
(1505 i/o #f #f ())
(1506 make-output-port-closed! 1505 10 ())
(1507 i/o #f #f ())
(1508 make-unbuffered-output-port 1507 10 ())
(1509 i/o #f #f ())
(1510 make-null-output-port 1509 10 ())
(1511 i/o #f #f ())
(1512 okay-buffer? 1511 10 ())
(1513 i/o #f #f ())
(1514 make-buffered-input-port 1513 10 ())
(1515 i/o #f #f ())
(1516 make-buffered-output-port 1515 10 ())
(1517 i/o #f #f ())
(1518 make-one-char-input 1517 10 ())
(1519 #f 1518 16 ())
(1520 lose 1519 35 ())
(1521 i/o #f #f ())
(1522 get-available-bytes! 1521 10 ())
(1523 i/o #f #f ())
(1524 make-read-block 1523 10 ())
(1525 #f 1524 16 ())
(1526 loop 1525 37 ())
(1527 lose 1526 43 ())
(1528 i/o #f #f ())
(1529 make-char-ready? 1528 10 ())
(1530 #f 1529 17 ())
(1531 lose 1530 35 ())
(1532 i/o #f #f ())
(1533 make-buffered-input-port-handler 1532 10 ())
(1534 #f 1533 20 ())
(1535 #f 1533 35 ())
(1536 lose 1535 34 ())
(1537 i/o #f #f ())
(1538 note-buffer-reuse! 1537 10 ())
(1539 i/o #f #f ())
(1540 buffer-length 1539 10 ())
(1541 i/o #f #f ())
(1542 make-closer 1541 10 ())
(1543 #f 1542 17 ())
(1544 lose 1543 35 ())
(1545 i/o #f #f ())
(1546 make-one-char-output 1545 10 ())
(1547 #f 1546 16 ())
(1548 lose 1547 35 ())
(1549 i/o #f #f ())
(1550 copy-bytes-out! 1549 10 ())
(1551 i/o #f #f ())
(1552 make-write-block 1551 10 ())
(1553 #f 1552 16 ())
(1554 loop 1553 32 ())
(1555 lose 1554 41 ())
(1556 i/o #f #f ())
(1557 make-forcer 1556 10 ())
(1558 #f 1557 16 ())
(1559 lose 1558 35 ())
(1560 i/o #f #f ())
(1561 make-buffered-output-port-handler 1560 10 ())
(1562 #f 1561 20 ())
(1563 i/o #f #f ())
(1564 periodically-force-output! 1563 10 ())
(1565 i/o #f #f ())
(1566 make-forcing-thunk 1565 10 ())
(1567 #f 1566 16 ())
(1568 #f 1567 17 ())
(1569 #f 1567 81 ())
(1570 #f 1569 17 ())
(1571 i/o #f #f ())
(1572 output-port-forcers 1571 10 ())
(1573 loop 1572 47 ())
(1574 i/o #f #f ())
(1575 periodically-flushed-ports 1574 10 ())
(1576 loop 1575 52 ())
(1577 i/o #f #f ())
(1578 current-output-port 1577 10 ())
(1579 i/o #f #f ())
(1580 current-error-port 1579 10 ())
(1581 i/o #f #f ())
(1582 current-noise-port 1581 10 ())
(1583 i/o #f #f ())
(1584 with-current-ports 1583 10 ())
(1585 i/o #f #f ())
(1586 initialize-i/o 1585 10 ())
(1587 i/o #f #f ())
(1588 call-with-current-input-port 1587 10 ())
(1589 i/o #f #f ())
(1590 call-with-current-output-port 1589 10 ())
(1591 i/o #f #f ())
(1592 call-with-current-noise-port 1591 10 ())
(1593 i/o #f #f ())
(1594 silently 1593 10 ())
(1595 i/o #f #f ())
(1596 output-port-option 1595 10 ())
(1597 i/o #f #f ())
(1598 newline 1597 10 ())
(1599 i/o #f #f ())
(1600 i/o #f #f ())
(1601 i/o #f #f ())
(1602 writing #f #f ())
(1603 display 1602 10 ())
(1604 recur 1603 45 ())
(1605 writing #f #f ())
(1606 display-type-name 1605 10 ())
(1607 loop##110 1606 101 ())
(1608 writing #f #f ())
(1609 write-other 1608 10 ())
(1610 #f 1609 88 ())
(1611 writing #f #f ())
(1612 write-vector 1611 10 ())
(1613 loop 1612 91 ())
(1614 writing #f #f ())
(1615 quotation? 1614 10 ())
(1616 writing #f #f ())
(1617 write-list 1616 10 ())
(1618 loop 1617 99 ())
(1619 writing #f #f ())
(1620 write-string-literal 1619 10 ())
(1621 loop##114 1620 37 ())
(1622 writing #f #f ())
(1623 character-name 1622 10 ())
(1624 writing #f #f ())
(1625 write-char-literal 1624 10 ())
(1626 writing #f #f ())
(1627 write-number 1626 10 ())
(1628 writing #f #f ())
(1629 write-boolean 1628 10 ())
(1630 writing #f #f ())
(1631 recurring-write 1630 10 ())
(1632 writing #f #f ())
(1633 write 1632 10 ())
(1634 recur 1633 45 ())
(1635 reading #f #f ())
(1636 loop##116 1635 47 ())
(1637 reading #f #f ())
(1638 reading #f #f ())
(1639 number-sharp-macro 1638 10 ())
(1640 #f 1638 28 ())
(1641 reading #f #f ())
(1642 #f 1641 10 ())
(1643 reading #f #f ())
(1644 #f 1643 10 ())
(1645 reading #f #f ())
(1646 #f 1645 10 ())
(1647 reading #f #f ())
(1648 #f 1647 10 ())
(1649 reading #f #f ())
(1650 #f 1649 16 ())
(1651 reading #f #f ())
(1652 #f 1651 18 ())
(1653 reading #f #f ())
(1654 #f 1653 18 ())
(1655 loop 1654 32 ())
(1656 reading #f #f ())
(1657 #f 1656 18 ())
(1658 reading #f #f ())
(1659 #f 1658 18 ())
(1660 reading #f #f ())
(1661 #f 1660 18 ())
(1662 reading #f #f ())
(1663 #f 1662 18 ())
(1664 reading #f #f ())
(1665 reading #f #f ())
(1666 sub-read-constituent 1665 10 ())
(1667 #f 1665 28 ())
(1668 reading #f #f ())
(1669 sub-read-whitespace 1668 10 ())
(1670 #f 1668 28 ())
(1671 reading #f #f ())
(1672 reading #f #f ())
(1673 #f 1672 14 ())
(1674 reading #f #f ())
(1675 reading #f #f ())
(1676 reading #f #f ())
(1677 reading #f #f ())
(1678 reader-token? 1677 10 ())
(1679 reading #f #f ())
(1680 reading-error 1679 10 ())
(1681 reading #f #f ())
(1682 sub-read 1681 10 ())
(1683 reading #f #f ())
(1684 read 1683 10 ())
(1685 loop 1684 42 ())
(1686 reading #f #f ())
(1687 sub-read-carefully 1686 10 ())
(1688 reading #f #f ())
(1689 make-reader-token 1688 10 ())
(1690 reading #f #f ())
(1691 set-standard-syntax! 1690 10 ())
(1692 reading #f #f ())
(1693 set-standard-read-macro! 1692 10 ())
(1694 reading #f #f ())
(1695 sub-read-list 1694 10 ())
(1696 recur 1695 65 ())
(1697 reading #f #f ())
(1698 gobble-line 1697 10 ())
(1699 loop 1698 22 ())
(1700 reading #f #f ())
(1701 define-sharp-macro 1700 10 ())
(1702 reading #f #f ())
(1703 proper-list? 1702 10 ())
(1704 reading #f #f ())
(1705 preferred-case 1704 10 ())
(1706 reading #f #f ())
(1707 sub-read-token 1706 10 ())
(1708 loop 1707 47 ())
(1709 reading #f #f ())
(1710 parse-token 1709 10 ())
(1711 reading #f #f ())
(1712 reading #f #f ())
(1713 queues #f #f ())
(1714 queues #f #f ())
(1715 queue-uid 1714 10 ())
(1716 queues #f #f ())
(1717 set-queue-head! 1716 10 ())
(1718 queues #f #f ())
(1719 queue-head 1718 10 ())
(1720 queues #f #f ())
(1721 set-queue-tail! 1720 10 ())
(1722 queues #f #f ())
(1723 queue-tail 1722 10 ())
(1724 queues #f #f ())
(1725 really-make-queue 1724 10 ())
(1726 queues #f #f ())
(1727 queues #f #f ())
(1728 queue? 1727 10 ())
(1729 queues #f #f ())
(1730 next-uid 1729 10 ())
(1731 #f 1730 6 ())
(1732 queues #f #f ())
(1733 make-queue 1732 10 ())
(1734 queues #f #f ())
(1735 queue-empty? 1734 10 ())
(1736 queues #f #f ())
(1737 enqueue! 1736 10 ())
(1738 #f 1737 17 ())
(1739 queues #f #f ())
(1740 queue-front 1739 10 ())
(1741 #f 1740 16 ())
(1742 queues #f #f ())
(1743 dequeue! 1742 10 ())
(1744 #f 1743 16 ())
(1745 queues #f #f ())
(1746 empty-queue! 1745 10 ())
(1747 #f 1746 16 ())
(1748 queues #f #f ())
(1749 on-queue? 1748 10 ())
(1750 queues #f #f ())
(1751 delete-from-queue-if! 1750 10 ())
(1752 #f 1751 17 ())
(1753 loop 1752 140 ())
(1754 queues #f #f ())
(1755 delete-from-queue! 1754 10 ())
(1756 #f 1755 19 ())
(1757 queues #f #f ())
(1758 queue->list 1757 10 ())
(1759 #f 1758 16 ())
(1760 #f 1759 6 ())
(1761 queues #f #f ())
(1762 list->queue 1761 10 ())
(1763 loop 1762 62 ())
(1764 queues #f #f ())
(1765 queue-length 1764 10 ())
(1766 #f 1765 16 ())
(1767 interrupts #f #f ())
(1768 #f 1767 14 ())
(1769 interrupts #f #f ())
(1770 interrupts #f #f ())
(1771 interrupts #f #f ())
(1772 interrupts #f #f ())
(1773 enabled-interrupts 1772 10 ())
(1774 interrupts #f #f ())
(1775 post-gc-handler 1774 10 ())
(1776 #f 1775 16 ())
(1777 #f 1776 47 ())
(1778 #f 1776 74 ())
(1779 #f 1778 10 ())
(1780 #f 1778 28 ())
(1781 interrupts #f #f ())
(1782 initialize-interrupts! 1781 10 ())
(1783 #f 1782 17 ())
(1784 loop##138 1783 39 ())
(1785 #f 1784 41 ())
(1786 #f 1783 93 ())
(1787 #f 1786 14 ())
(1788 interrupts #f #f ())
(1789 set-interrupt-handler! 1788 10 ())
(1790 interrupts #f #f ())
(1791 with-interrupts 1790 10 ())
(1792 interrupts #f #f ())
(1793 with-interrupts-inhibited 1792 10 ())
(1794 interrupts #f #f ())
(1795 with-interrupts-allowed 1794 10 ())
(1796 interrupts #f #f ())
(1797 disable-interrupts! 1796 10 ())
(1798 interrupts #f #f ())
(1799 enable-interrupts! 1798 10 ())
(1800 interrupts #f #f ())
(1801 call-after-gc! 1800 10 ())
(1802 interrupts #f #f ())
(1803 call-before-heap-overflow! 1802 10 ())
(1804 interrupts #f #f ())
(1805 interrupts #f #f ())
(1806 threads #f #f ())
(1807 threads #f #f ())
(1808 threads #f #f ())
(1809 threads #f #f ())
(1810 threads #f #f ())
(1811 threads #f #f ())
(1812 threads #f #f ())
(1813 threads #f #f ())
(1814 threads #f #f ())
(1815 #f 1814 14 ())
(1816 threads #f #f ())
(1817 thread-dynamic-env 1816 10 ())
(1818 threads #f #f ())
(1819 set-thread-dynamic-point! 1818 10 ())
(1820 threads #f #f ())
(1821 thread-dynamic-point 1820 10 ())
(1822 threads #f #f ())
(1823 thread-proposal 1822 10 ())
(1824 threads #f #f ())
(1825 set-thread-time! 1824 10 ())
(1826 threads #f #f ())
(1827 thread-time 1826 10 ())
(1828 threads #f #f ())
(1829 set-thread-continuation! 1828 10 ())
(1830 threads #f #f ())
(1831 thread-continuation 1830 10 ())
(1832 threads #f #f ())
(1833 set-thread-arguments! 1832 10 ())
(1834 threads #f #f ())
(1835 thread-arguments 1834 10 ())
(1836 threads #f #f ())
(1837 set-thread-scheduler! 1836 10 ())
(1838 threads #f #f ())
(1839 thread-scheduler 1838 10 ())
(1840 threads #f #f ())
(1841 set-thread-current-task! 1840 10 ())
(1842 threads #f #f ())
(1843 thread-current-task 1842 10 ())
(1844 threads #f #f ())
(1845 set-thread-events! 1844 10 ())
(1846 threads #f #f ())
(1847 thread-events 1846 10 ())
(1848 threads #f #f ())
(1849 set-thread-data! 1848 10 ())
(1850 threads #f #f ())
(1851 thread-data 1850 10 ())
(1852 threads #f #f ())
(1853 set-thread-queue! 1852 10 ())
(1854 threads #f #f ())
(1855 thread-queue 1854 10 ())
(1856 threads #f #f ())
(1857 thread-uid 1856 10 ())
(1858 threads #f #f ())
(1859 thread-name 1858 10 ())
(1860 threads #f #f ())
(1861 really-make-thread 1860 10 ())
(1862 threads #f #f ())
(1863 threads #f #f ())
(1864 thread? 1863 10 ())
(1865 threads #f #f ())
(1866 compose-continuation 1865 10 ())
(1867 #f 1866 17 ())
(1868 #f 1867 42 ())
(1869 #f 1868 20 ())
(1870 #f 1869 19 ())
(1871 threads #f #f ())
(1872 thunk->continuation 1871 10 ())
(1873 threads #f #f ())
(1874 max2 1873 10 ())
(1875 threads #f #f ())
(1876 interrupt-timer-time 1875 10 ())
(1877 threads #f #f ())
(1878 debit-down! 1877 10 ())
(1879 loop 1878 35 ())
(1880 threads #f #f ())
(1881 run-thread 1880 10 ())
(1882 #f 1881 47 ())
(1883 threads #f #f ())
(1884 switch-to-thread 1883 10 ())
(1885 #f 1884 17 ())
(1886 threads #f #f ())
(1887 suspend-to 1886 10 ())
(1888 threads #f #f ())
(1889 suspend 1888 10 ())
(1890 threads #f #f ())
(1891 thread-top-level 1890 10 ())
(1892 thread-start 1891 16 ())
(1893 threads #f #f ())
(1894 make-thread 1893 10 ())
(1895 threads #f #f ())
(1896 all-threads 1895 10 ())
(1897 threads #f #f ())
(1898 thread-uid->thread 1897 10 ())
(1899 loop 1898 37 ())
(1900 threads #f #f ())
(1901 add-event! 1900 10 ())
(1902 threads #f #f ())
(1903 next-event! 1902 10 ())
(1904 threads #f #f ())
(1905 enqueue-thread! 1904 10 ())
(1906 threads #f #f ())
(1907 dequeue-thread! 1906 10 ())
(1908 threads #f #f ())
(1909 remove-thread-from-queue! 1908 10 ())
(1910 threads #f #f ())
(1911 event-pending? 1910 10 ())
(1912 threads #f #f ())
(1913 min 1912 10 ())
(1914 threads #f #f ())
(1915 schedule-interrupt! 1914 10 ())
(1916 threads #f #f ())
(1917 run-next-thread 1916 10 ())
(1918 threads #f #f ())
(1919 debit-thread-times-and-run! 1918 10 ())
(1920 loop 1919 40 ())
(1921 threads #f #f ())
(1922 find-and-run-next-thread 1921 10 ())
(1923 loop 1922 39 ())
(1924 threads #f #f ())
(1925 run 1924 10 ())
(1926 threads #f #f ())
(1927 handle-timer-interrupt 1926 10 ())
(1928 threads #f #f ())
(1929 exit 1928 10 ())
(1930 threads #f #f ())
(1931 wait 1930 10 ())
(1932 threads #f #f ())
(1933 waiting? 1932 10 ())
(1934 threads #f #f ())
(1935 relinquish-timeslice 1934 10 ())
(1936 threads #f #f ())
(1937 block 1936 10 ())
(1938 threads #f #f ())
(1939 maybe-commit-and-block 1938 10 ())
(1940 threads #f #f ())
(1941 running? 1940 10 ())
(1942 loop 1941 24 ())
(1943 threads #f #f ())
(1944 interrupt-thread 1943 10 ())
(1945 threads #f #f ())
(1946 propogate-upcall 1945 10 ())
(1947 #f 1946 68 ())
(1948 threads #f #f ())
(1949 upcall 1948 10 ())
(1950 threads #f #f ())
(1951 kill-thread! 1950 10 ())
(1952 #f 1951 12 ())
(1953 threads #f #f ())
(1954 get-next-event! 1953 10 ())
(1955 threads #f #f ())
(1956 schedule-wakeup 1955 10 ())
(1957 threads #f #f ())
(1958 really-schedule-event 1957 10 ())
(1959 threads #f #f ())
(1960 root-scheduler 1959 10 ())
(1961 threads #f #f ())
(1962 maybe-suspend 1961 10 ())
(1963 loop 1962 24 ())
(1964 threads #f #f ())
(1965 schedule-event 1964 10 ())
(1966 threads #f #f ())
(1967 show-running 1966 10 ())
(1968 loop##189 1967 19 ())
(1969 threads #f #f ())
(1970 spawn-on-scheduler 1969 10 ())
(1971 threads #f #f ())
(1972 spawn 1971 10 ())
(1973 threads #f #f ())
(1974 spawn-on-root 1973 10 ())
(1975 threads #f #f ())
(1976 make-ready 1975 10 ())
(1977 threads #f #f ())
(1978 make-threads-ready 1977 10 ())
(1979 loop 1978 22 ())
(1980 threads #f #f ())
(1981 maybe-commit-and-make-ready 1980 10 ())
(1982 threads #f #f ())
(1983 cancel-timer-interrupt! 1982 10 ())
(1984 threads #f #f ())
(1985 real-time 1984 10 ())
(1986 threads #f #f ())
(1987 start-multitasking 1986 10 ())
(1988 #f 1987 16 ())
(1989 #f 1988 16 ())
(1990 #f 1988 34 ())
(1991 #f 1990 18 ())
(1992 #f 1991 16 ())
(1993 #f 1991 32 ())
(1994 threads #f #f ())
(1995 with-threads 1994 10 ())
(1996 #f 1995 20 ())
(1997 #f 1996 6 ())
(1998 #f 1996 21 ())
(1999 #f 1996 29 ())
(2000 threads #f #f ())
(2001 terminate-current-thread 2000 10 ())
(2002 threads #f #f ())
(2003 insert 2002 10 ())
(2004 threads #f #f ())
(2005 sleep 2004 10 ())
(2006 #f 2005 80 ())
(2007 threads #f #f ())
(2008 wake-some-threads 2007 10 ())
(2009 loop 2008 63 ())
(2010 threads #f #f ())
(2011 threads #f #f ())
(2012 threads #f #f ())
(2013 condvars #f #f ())
(2014 #f 2013 10 ())
(2015 condvars #f #f ())
(2016 condvar-queue 2015 10 ())
(2017 condvars #f #f ())
(2018 set-condvar-has-value?! 2017 10 ())
(2019 condvars #f #f ())
(2020 condvar-has-value? 2019 10 ())
(2021 condvars #f #f ())
(2022 set-condvar-value! 2021 10 ())
(2023 condvars #f #f ())
(2024 condvar-value 2023 10 ())
(2025 condvars #f #f ())
(2026 condvar-id 2025 10 ())
(2027 condvars #f #f ())
(2028 really-make-condvar 2027 10 ())
(2029 condvars #f #f ())
(2030 condvars #f #f ())
(2031 condvar? 2030 10 ())
(2032 condvars #f #f ())
(2033 make-condvar 2032 10 ())
(2034 condvars #f #f ())
(2035 maybe-commit-and-wait-for-condvar 2034 10 ())
(2036 condvars #f #f ())
(2037 maybe-commit-and-set-condvar! 2036 10 ())
(2038 condvars #f #f ())
(2039 condvar-has-waiters? 2038 10 ())
(2040 channel-i/o #f #f ())
(2041 abort-unwanted-i/o! 2040 10 ())
(2042 loop 2041 43 ())
(2043 channel-i/o #f #f ())
(2044 fetch-channel-condvar! 2043 10 ())
(2045 loop 2044 99 ())
(2046 channel-i/o #f #f ())
(2047 channel-i/o #f #f ())
(2048 add-channel-condvar! 2047 10 ())
(2049 channel-i/o #f #f ())
(2050 set-channel-condvars! 2049 10 ())
(2051 channel-i/o #f #f ())
(2052 channel-condvars 2051 10 ())
(2053 channel-i/o #f #f ())
(2054 channel-i/o #f #f ())
(2055 waiting-for-i/o? 2054 10 ())
(2056 channel-i/o #f #f ())
(2057 i/o-completion-handler 2056 10 ())
(2058 channel-i/o #f #f ())
(2059 initialize-channel-i/o! 2058 10 ())
(2060 channel-i/o #f #f ())
(2061 input-channel? 2060 10 ())
(2062 channel-i/o #f #f ())
(2063 channel-maybe-commit-and-close 2062 10 ())
(2064 channel-i/o #f #f ())
(2065 channel-write 2064 10 ())
(2066 lose 2065 103 ())
(2067 channel-i/o #f #f ())
(2068 note-channel-result! 2067 10 ())
(2069 lose 2068 32 ())
(2070 channel-i/o #f #f ())
(2071 channel-i/o #f #f ())
(2072 channel-i/o #f #f ())
(2073 channel-maybe-commit-and-do-it 2072 10 ())
(2074 #f 2073 16 ())
(2075 channel-ports #f #f ())
(2076 #f 2075 14 ())
(2077 #f 2075 22 ())
(2078 #f 2075 38 ())
(2079 #f 2075 46 ())
(2080 channel-ports #f #f ())
(2081 write-block-handler 2080 10 ())
(2082 loop 2081 52 ())
(2083 channel-ports #f #f ())
(2084 one-char-handler 2083 10 ())
(2085 loop 2084 64 ())
(2086 channel-ports #f #f ())
(2087 force-channel-output-ports! 2086 10 ())
(2088 #f 2087 6 ())
(2089 channel-ports #f #f ())
(2090 with-output-to-file 2089 10 ())
(2091 #f 2090 19 ())
(2092 channel-ports #f #f ())
(2093 with-input-from-file 2092 10 ())
(2094 #f 2093 19 ())
(2095 channel-ports #f #f ())
(2096 call-with-output-file 2095 10 ())
(2097 channel-ports #f #f ())
(2098 call-with-input-file 2097 10 ())
(2099 channel-ports #f #f ())
(2100 open-output-file 2099 10 ())
(2101 channel-ports #f #f ())
(2102 open-input-file 2101 10 ())
(2103 channel-ports #f #f ())
(2104 maybe-open-file 2103 10 ())
(2105 channel-ports #f #f ())
(2106 real-output-channel->port 2105 10 ())
(2107 channel-ports #f #f ())
(2108 output-channel+closer->port 2107 10 ())
(2109 channel-ports #f #f ())
(2110 output-channel->port 2109 10 ())
(2111 channel-ports #f #f ())
(2112 #f 2111 14 ())
(2113 channel-ports #f #f ())
(2114 send-some 2113 10 ())
(2115 channel-ports #f #f ())
(2116 empty-buffer! 2115 10 ())
(2117 channel-ports #f #f ())
(2118 real-input-channel->port 2117 10 ())
(2119 channel-ports #f #f ())
(2120 input-channel+closer->port 2119 10 ())
(2121 channel-ports #f #f ())
(2122 input-channel->port 2121 10 ())
(2123 channel-ports #f #f ())
(2124 #f 2123 14 ())
(2125 channel-ports #f #f ())
(2126 channel-port-ready? 2125 10 ())
(2127 channel-ports #f #f ())
(2128 fill-buffer! 2127 10 ())
(2129 channel-ports #f #f ())
(2130 port-channel-closer 2129 10 ())
(2131 channel-ports #f #f ())
(2132 port->channel 2131 10 ())
(2133 channel-ports #f #f ())
(2134 make-channel-cell 2133 10 ())
(2135 channel-ports #f #f ())
(2136 channel-cell-ref 2135 10 ())
(2137 channel-ports #f #f ())
(2138 channel-cell-closer 2137 10 ())
(2139 channel-ports #f #f ())
(2140 channel-cell-condvar 2139 10 ())
(2141 channel-ports #f #f ())
(2142 set-channel-cell-in-use?! 2141 10 ())
(2143 channel-ports #f #f ())
(2144 channel-cell-in-use? 2143 10 ())
(2145 channel-ports #f #f ())
(2146 set-channel-cell-sent! 2145 10 ())
(2147 channel-ports #f #f ())
(2148 channel-cell-sent 2147 10 ())
(2149 channel-ports #f #f ())
(2150 channel-cell? 2149 10 ())
(2151 channel-ports #f #f ())
(2152 really-make-channel-cell 2151 10 ())
(2153 channel-ports #f #f ())
(2154 scheme-level-2 #f #f ())
(2155 features #f #f ())
(2156 tables #f #f ())
(2157 tables #f #f ())
(2158 tables #f #f ())
(2159 tables #f #f ())
(2160 make-table 2159 44 ())
(2161 tables #f #f ())
(2162 tables #f #f ())
(2163 tables #f #f ())
(2164 tables #f #f ())
(2165 tables #f #f ())
(2166 set-table-size! 2165 10 ())
(2167 tables #f #f ())
(2168 table-size 2167 10 ())
(2169 tables #f #f ())
(2170 set-table-data! 2169 10 ())
(2171 tables #f #f ())
(2172 table-data 2171 10 ())
(2173 tables #f #f ())
(2174 set-table-ref-procedure! 2173 10 ())
(2175 tables #f #f ())
(2176 table-ref-procedure 2175 10 ())
(2177 tables #f #f ())
(2178 set-table-set!-procedure! 2177 10 ())
(2179 tables #f #f ())
(2180 table-set!-procedure 2179 10 ())
(2181 tables #f #f ())
(2182 really-make-table 2181 10 ())
(2183 tables #f #f ())
(2184 tables #f #f ())
(2185 table? 2184 10 ())
(2186 tables #f #f ())
(2187 table-ref 2186 10 ())
(2188 tables #f #f ())
(2189 table-set! 2188 10 ())
(2190 tables #f #f ())
(2191 next-table-size 2190 10 ())
(2192 tables #f #f ())
(2193 delete-entry! 2192 10 ())
(2194 loop 2193 47 ())
(2195 tables #f #f ())
(2196 new-entry 2195 10 ())
(2197 tables #f #f ())
(2198 make-linear-table-set! 2197 10 ())
(2199 #f 2198 17 ())
(2200 tables #f #f ())
(2201 table-expand-table! 2200 10 ())
(2202 tables #f #f ())
(2203 table-enter-alist! 2202 10 ())
(2204 loop##239 2203 37 ())
(2205 tables #f #f ())
(2206 make-hash-table-ref 2205 10 ())
(2207 #f 2206 17 ())
(2208 tables #f #f ())
(2209 expand-hash-table! 2208 10 ())
(2210 loop##241 2209 64 ())
(2211 tables #f #f ())
(2212 make-hash-table-set! 2211 10 ())
(2213 #f 2212 17 ())
(2214 tables #f #f ())
(2215 make->hash-table 2214 10 ())
(2216 #f 2215 56 ())
(2217 tables #f #f ())
(2218 make-linear-table-ref 2217 10 ())
(2219 #f 2218 16 ())
(2220 tables #f #f ())
(2221 assoc->table-maker 2220 10 ())
(2222 #f 2221 79 ())
(2223 tables #f #f ())
(2224 make-assoc 2223 10 ())
(2225 #f 2224 30 ())
(2226 loop 2225 28 ())
(2227 tables #f #f ())
(2228 make-table-maker 2227 10 ())
(2229 tables #f #f ())
(2230 alist-walk 2229 10 ())
(2231 loop##243 2230 18 ())
(2232 tables #f #f ())
(2233 really-table-walk 2232 10 ())
(2234 loop##246 2233 74 ())
(2235 tables #f #f ())
(2236 table-walk 2235 10 ())
(2237 #f 2236 16 ())
(2238 tables #f #f ())
(2239 make-table-immutable! 2238 10 ())
(2240 tables #f #f ())
(2241 table->entry-list 2240 10 ())
(2242 #f 2241 37 ())
(2243 tables #f #f ())
(2244 default-table-hash-function 2243 10 ())
(2245 tables #f #f ())
(2246 default-table-assoc 2245 10 ())
(2247 tables #f #f ())
(2248 symbol-hash 2247 10 ())
(2249 tables #f #f ())
(2250 tables #f #f ())
(2251 weak #f #f ())
(2252 walk-population 2251 10 ())
(2253 #f 2252 16 ())
(2254 weak #f #f ())
(2255 population->list 2254 10 ())
(2256 weak #f #f ())
(2257 population-reduce 2256 10 ())
(2258 loop##247 2257 18 ())
(2259 weak #f #f ())
(2260 weak-memq 2259 10 ())
(2261 weak #f #f ())
(2262 add-to-population! 2261 10 ())
(2263 weak #f #f ())
(2264 make-population 2263 10 ())
(2265 meta-types #f #f ())
(2266 meta-types #f #f ())
(2267 meta-types #f #f ())
(2268 meta-types #f #f ())
(2269 meta-types #f #f ())
(2270 meta-types #f #f ())
(2271 meta-types #f #f ())
(2272 meta-types #f #f ())
(2273 meta-types #f #f ())
(2274 meta-types #f #f ())
(2275 meta-types #f #f ())
(2276 meta-types #f #f ())
(2277 meta-types #f #f ())
(2278 meta-types #f #f ())
(2279 meta-types #f #f ())
(2280 meta-types #f #f ())
(2281 meta-types #f #f ())
(2282 meta-types #f #f ())
(2283 meta-types #f #f ())
(2284 meta-types #f #f ())
(2285 meta-types #f #f ())
(2286 meta-types #f #f ())
(2287 meta-types #f #f ())
(2288 meta-types #f #f ())
(2289 meta-types #f #f ())
(2290 meta-types #f #f ())
(2291 meta-types #f #f ())
(2292 meta-types #f #f ())
(2293 meta-types #f #f ())
(2294 meta-types #f #f ())
(2295 loop 2294 31 ())
(2296 meta-types #f #f ())
(2297 meta-types #f #f ())
(2298 meta-types #f #f ())
(2299 meta-types #f #f ())
(2300 meta-types #f #f ())
(2301 meta-types #f #f ())
(2302 meta-types #f #f ())
(2303 meta-types #f #f ())
(2304 meta-types #f #f ())
(2305 meta-types #f #f ())
(2306 meta-types #f #f ())
(2307 meta-types #f #f ())
(2308 meta-types #f #f ())
(2309 meta-types #f #f ())
(2310 meta-types #f #f ())
(2311 meta-types #f #f ())
(2312 meta-types #f #f ())
(2313 meta-types #f #f ())
(2314 meta-types #f #f ())
(2315 meta-types #f #f ())
(2316 #f 2315 14 ())
(2317 meta-types #f #f ())
(2318 type-mask 2317 10 ())
(2319 meta-types #f #f ())
(2320 type-more 2319 10 ())
(2321 meta-types #f #f ())
(2322 type-info 2321 10 ())
(2323 meta-types #f #f ())
(2324 really-make-type 2323 10 ())
(2325 meta-types #f #f ())
(2326 meta-types #f #f ())
(2327 meta-type? 2326 10 ())
(2328 meta-types #f #f ())
(2329 make-type 2328 10 ())
(2330 meta-types #f #f ())
(2331 set-type-name! 2330 10 ())
(2332 meta-types #f #f ())
(2333 make-other-type 2332 10 ())
(2334 meta-types #f #f ())
(2335 name->type 2334 10 ())
(2336 meta-types #f #f ())
(2337 new-type-bit 2336 10 ())
(2338 meta-types #f #f ())
(2339 mask->type 2338 10 ())
(2340 meta-types #f #f ())
(2341 bottom-type? 2340 10 ())
(2342 meta-types #f #f ())
(2343 new-atomic-type 2342 10 ())
(2344 meta-types #f #f ())
(2345 named-atomic-type 2344 10 ())
(2346 meta-types #f #f ())
(2347 empty-rail-type? 2346 10 ())
(2348 meta-types #f #f ())
(2349 rest-type? 2348 10 ())
(2350 meta-types #f #f ())
(2351 same-type? 2350 10 ())
(2352 meta-types #f #f ())
(2353 head-type 2352 10 ())
(2354 meta-types #f #f ())
(2355 optional-type? 2354 10 ())
(2356 meta-types #f #f ())
(2357 rail-type 2356 10 ())
(2358 meta-types #f #f ())
(2359 make-optional-type 2358 10 ())
(2360 meta-types #f #f ())
(2361 make-rest-type 2360 10 ())
(2362 meta-types #f #f ())
(2363 head-type-really 2362 10 ())
(2364 meta-types #f #f ())
(2365 tail-type 2364 10 ())
(2366 meta-types #f #f ())
(2367 value-type? 2366 10 ())
(2368 meta-types #f #f ())
(2369 other-type-info 2368 10 ())
(2370 meta-types #f #f ())
(2371 restrictive? 2370 10 ())
(2372 meta-types #f #f ())
(2373 make-procedure-type 2372 10 ())
(2374 meta-types #f #f ())
(2375 procedure-type-domain 2374 10 ())
(2376 meta-types #f #f ())
(2377 procedure-type-codomain 2376 10 ())
(2378 meta-types #f #f ())
(2379 meet-procedure 2378 10 ())
(2380 meta-types #f #f ())
(2381 meet-rail 2380 10 ())
(2382 meta-types #f #f ())
(2383 meet-type 2382 10 ())
(2384 meta-types #f #f ())
(2385 subtype? 2384 10 ())
(2386 meta-types #f #f ())
(2387 meet-procedure? 2386 10 ())
(2388 meta-types #f #f ())
(2389 meet? 2388 10 ())
(2390 meta-types #f #f ())
(2391 procedure-type? 2390 10 ())
(2392 meta-types #f #f ())
(2393 join-procedure 2392 10 ())
(2394 meta-types #f #f ())
(2395 join-rail 2394 10 ())
(2396 meta-types #f #f ())
(2397 join-type 2396 10 ())
(2398 meta-types #f #f ())
(2399 procedure-type 2398 10 ())
(2400 meta-types #f #f ())
(2401 sexp->values-type 2400 10 ())
(2402 meta-types #f #f ())
(2403 sexp->type 2402 10 ())
(2404 #f 2403 303 ())
(2405 #f 2403 381 ())
(2406 meta-types #f #f ())
(2407 disjoin-rest 2406 10 ())
(2408 meta-types #f #f ())
(2409 disjoin-type 2408 10 ())
(2410 loop##269 2409 293 ())
(2411 meta-types #f #f ())
(2412 atomic-type->sexp 2411 10 ())
(2413 meta-types #f #f ())
(2414 rail-type->sexp 2413 10 ())
(2415 recur 2414 28 ())
(2416 meta-types #f #f ())
(2417 type->sexp 2416 10 ())
(2418 #f 2417 158 ())
(2419 meta-types #f #f ())
(2420 make-some-values-type 2419 10 ())
(2421 meta-types #f #f ())
(2422 fixed-arity-procedure-type? 2421 10 ())
(2423 loop 2422 50 ())
(2424 meta-types #f #f ())
(2425 procedure-type-arity 2424 10 ())
(2426 loop##272 2425 18 ())
(2427 meta-types #f #f ())
(2428 procedure-type-argument-types 2427 10 ())
(2429 recur 2428 37 ())
(2430 meta-types #f #f ())
(2431 variable-type 2430 10 ())
(2432 meta-types #f #f ())
(2433 variable-type? 2432 10 ())
(2434 meta-types #f #f ())
(2435 compatible-types? 2434 10 ())
(2436 meta-types #f #f ())
(2437 meta-types #f #f ())
(2438 meta-types #f #f ())
(2439 interfaces #f #f ())
(2440 #f 2439 10 ())
(2441 interfaces #f #f ())
(2442 ref-method 2441 10 ())
(2443 interfaces #f #f ())
(2444 walk-method 2443 10 ())
(2445 interfaces #f #f ())
(2446 interface-clients 2445 10 ())
(2447 interfaces #f #f ())
(2448 set-interface-name! 2447 10 ())
(2449 interfaces #f #f ())
(2450 interface-name 2449 10 ())
(2451 interfaces #f #f ())
(2452 really-make-interface 2451 10 ())
(2453 interfaces #f #f ())
(2454 interfaces #f #f ())
(2455 interface? 2454 10 ())
(2456 interfaces #f #f ())
(2457 make-interface 2456 10 ())
(2458 interfaces #f #f ())
(2459 interface-ref 2458 10 ())
(2460 interfaces #f #f ())
(2461 interface-member? 2460 10 ())
(2462 interfaces #f #f ())
(2463 for-each-declaration 2462 10 ())
(2464 interfaces #f #f ())
(2465 note-reference-to-interface! 2464 10 ())
(2466 interfaces #f #f ())
(2467 note-interface-name! 2466 10 ())
(2468 interfaces #f #f ())
(2469 make-simple-interface-table 2468 10 ())
(2470 #f 2469 35 ())
(2471 #f 2470 77 ())
(2472 interfaces #f #f ())
(2473 make-simple-interface 2472 10 ())
(2474 #f 2473 34 ())
(2475 #f 2473 49 ())
(2476 #f 2475 16 ())
(2477 interfaces #f #f ())
(2478 make-compound-interface 2477 10 ())
(2479 #f 2478 22 ())
(2480 loop 2479 25 ())
(2481 #f 2478 37 ())
(2482 #f 2481 16 ())
(2483 #f 2478 70 ())
(2484 interfaces #f #f ())
(2485 proper-list? 2484 10 ())
(2486 interfaces #f #f ())
(2487 okay-command? 2486 10 ())
(2488 #f 2487 169 ())
(2489 interfaces #f #f ())
(2490 symbol-append 2489 10 ())
(2491 interfaces #f #f ())
(2492 process-prefix 2491 10 ())
(2493 #f 2492 29 ())
(2494 #f 2492 59 ())
(2495 interfaces #f #f ())
(2496 prefix-match? 2495 10 ())
(2497 loop 2496 38 ())
(2498 interfaces #f #f ())
(2499 remove-prefix 2498 10 ())
(2500 interfaces #f #f ())
(2501 interface-lookup 2500 10 ())
(2502 interfaces #f #f ())
(2503 process-expose 2502 10 ())
(2504 loop 2503 35 ())
(2505 interfaces #f #f ())
(2506 process-hide 2505 10 ())
(2507 interfaces #f #f ())
(2508 process-alias 2507 10 ())
(2509 #f 2508 17 ())
(2510 interfaces #f #f ())
(2511 process-rename 2510 10 ())
(2512 #f 2511 17 ())
(2513 interfaces #f #f ())
(2514 process-commands 2513 10 ())
(2515 loop 2514 49 ())
(2516 #f 2515 30 ())
(2517 interfaces #f #f ())
(2518 make-lookup 2517 10 ())
(2519 #f 2518 19 ())
(2520 interfaces #f #f ())
(2521 cdr-assq 2520 10 ())
(2522 loop 2521 25 ())
(2523 interfaces #f #f ())
(2524 make-default-walker 2523 10 ())
(2525 #f 2524 19 ())
(2526 #f 2525 21 ())
(2527 interfaces #f #f ())
(2528 make-alist-walker 2527 10 ())
(2529 #f 2528 17 ())
(2530 #f 2529 19 ())
(2531 interfaces #f #f ())
(2532 make-modified-interface 2531 10 ())
(2533 bindings #f #f ())
(2534 bindings #f #f ())
(2535 binding-type 2534 10 ())
(2536 bindings #f #f ())
(2537 binding-place 2536 10 ())
(2538 bindings #f #f ())
(2539 binding-static 2538 10 ())
(2540 bindings #f #f ())
(2541 binding-path 2540 10 ())
(2542 bindings #f #f ())
(2543 set-binding-place! 2542 10 ())
(2544 bindings #f #f ())
(2545 make-binding 2544 10 ())
(2546 bindings #f #f ())
(2547 add-path 2546 10 ())
(2548 bindings #f #f ())
(2549 clobber-binding! 2548 10 ())
(2550 bindings #f #f ())
(2551 impose-type 2550 10 ())
(2552 bindings #f #f ())
(2553 forget-integration 2552 10 ())
(2554 bindings #f #f ())
(2555 same-denotation? 2554 10 ())
(2556 bindings #f #f ())
(2557 follow-forwarding-pointers 2556 10 ())
(2558 bindings #f #f ())
(2559 maybe-fix-place! 2558 10 ())
(2560 names #f #f ())
(2561 #f 2560 10 ())
(2562 names #f #f ())
(2563 transform-procedure 2562 10 ())
(2564 names #f #f ())
(2565 transform-env 2564 10 ())
(2566 names #f #f ())
(2567 transform-type 2566 10 ())
(2568 names #f #f ())
(2569 transform-aux-names 2568 10 ())
(2570 names #f #f ())
(2571 transform-source 2570 10 ())
(2572 names #f #f ())
(2573 transform-id 2572 10 ())
(2574 names #f #f ())
(2575 really-make-transform 2574 10 ())
(2576 names #f #f ())
(2577 names #f #f ())
(2578 names #f #f ())
(2579 #f 2578 14 ())
(2580 names #f #f ())
(2581 generated-symbol 2580 10 ())
(2582 names #f #f ())
(2583 generated-token 2582 10 ())
(2584 names #f #f ())
(2585 generated-env 2584 10 ())
(2586 names #f #f ())
(2587 generated-parent-name 2586 10 ())
(2588 names #f #f ())
(2589 make-generated 2588 10 ())
(2590 names #f #f ())
(2591 names #f #f ())
(2592 generated? 2591 10 ())
(2593 names #f #f ())
(2594 name? 2593 10 ())
(2595 names #f #f ())
(2596 generate-name 2595 10 ())
(2597 names #f #f ())
(2598 generated-uid 2597 10 ())
(2599 names #f #f ())
(2600 name->symbol 2599 10 ())
(2601 names #f #f ())
(2602 name-hash 2601 10 ())
(2603 names #f #f ())
(2604 desyntaxify 2603 10 ())
(2605 loop 2604 290 ())
(2606 names #f #f ())
(2607 make-qualified 2606 10 ())
(2608 names #f #f ())
(2609 qualified? 2608 10 ())
(2610 names #f #f ())
(2611 qualified-parent-name 2610 10 ())
(2612 names #f #f ())
(2613 qualified-symbol 2612 10 ())
(2614 names #f #f ())
(2615 qualified-uid 2614 10 ())
(2616 names #f #f ())
(2617 lookup 2616 10 ())
(2618 names #f #f ())
(2619 transform? 2618 10 ())
(2620 names #f #f ())
(2621 qualify-parent 2620 10 ())
(2622 recur 2621 25 ())
(2623 names #f #f ())
(2624 name->qualified 2623 10 ())
(2625 names #f #f ())
(2626 make-transform 2625 10 ())
(2627 names #f #f ())
(2628 name->source-name 2627 10 ())
(2629 names #f #f ())
(2630 make-keyword-comparator 2629 10 ())
(2631 #f 2630 16 ())
(2632 names #f #f ())
(2633 make-name-generator 2632 10 ())
(2634 #f 2633 38 ())
(2635 names #f #f ())
(2636 bind-aliases 2635 10 ())
(2637 #f 2636 53 ())
(2638 names #f #f ())
(2639 maybe-apply-macro-transform 2638 10 ())
(2640 names #f #f ())
(2641 apply-inline-transform 2640 10 ())
(2642 names #f #f ())
(2643 compiler-envs #f #f ())
(2644 compiler-envs #f #f ())
(2645 compiler-envs #f #f ())
(2646 compiler-envs #f #f ())
(2647 compiler-envs #f #f ())
(2648 lookup 2647 10 ())
(2649 compiler-envs #f #f ())
(2650 bind1 2649 10 ())
(2651 #f 2650 18 ())
(2652 compiler-envs #f #f ())
(2653 bind 2652 10 ())
(2654 compiler-envs #f #f ())
(2655 bindrec 2654 10 ())
(2656 #f 2655 40 ())
(2657 compiler-envs #f #f ())
(2658 make-compiler-env 2657 10 ())
(2659 #f 2658 19 ())
(2660 compiler-envs #f #f ())
(2661 environment-macro-eval 2660 10 ())
(2662 compiler-envs #f #f ())
(2663 environment-define! 2662 10 ())
(2664 compiler-envs #f #f ())
(2665 extract-package-from-environment 2664 10 ())
(2666 compiler-envs #f #f ())
(2667 bind-source-file-name 2666 10 ())
(2668 compiler-envs #f #f ())
(2669 source-file-name 2668 10 ())
(2670 thingies #f #f ())
(2671 thingie-binding 2670 10 ())
(2672 thingies #f #f ())
(2673 thingie-name 2672 10 ())
(2674 thingies #f #f ())
(2675 thingie-want-type 2674 10 ())
(2676 thingies #f #f ())
(2677 make-thingie 2676 10 ())
(2678 thingies #f #f ())
(2679 thingies #f #f ())
(2680 thingie? 2679 10 ())
(2681 packages #f #f ())
(2682 #f 2681 14 ())
(2683 packages #f #f ())
(2684 packages #f #f ())
(2685 packages #f #f ())
(2686 packages #f #f ())
(2687 packages #f #f ())
(2688 packages #f #f ())
(2689 packages #f #f ())
(2690 packages #f #f ())
(2691 #f 2690 14 ())
(2692 packages #f #f ())
(2693 package-uid 2692 10 ())
(2694 packages #f #f ())
(2695 set-package-opens! 2694 10 ())
(2696 packages #f #f ())
(2697 package-opens-really 2696 10 ())
(2698 packages #f #f ())
(2699 package-definitions 2698 10 ())
(2700 packages #f #f ())
(2701 package-unstable? 2700 10 ())
(2702 packages #f #f ())
(2703 set-package-integrate?! 2702 10 ())
(2704 packages #f #f ())
(2705 package-integrate? 2704 10 ())
(2706 packages #f #f ())
(2707 set-package-get-location! 2706 10 ())
(2708 packages #f #f ())
(2709 package-get-location 2708 10 ())
(2710 packages #f #f ())
(2711 package-file-name 2710 10 ())
(2712 packages #f #f ())
(2713 package-clauses 2712 10 ())
(2714 packages #f #f ())
(2715 set-package-loaded?! 2714 10 ())
(2716 packages #f #f ())
(2717 package-loaded? 2716 10 ())
(2718 packages #f #f ())
(2719 set-package->environment! 2718 10 ())
(2720 packages #f #f ())
(2721 package->environment 2720 10 ())
(2722 packages #f #f ())
(2723 set-package-opens-thunk! 2722 10 ())
(2724 packages #f #f ())
(2725 package-opens-thunk 2724 10 ())
(2726 packages #f #f ())
(2727 package-accesses-thunk 2726 10 ())
(2728 packages #f #f ())
(2729 set-package-undefineds! 2728 10 ())
(2730 packages #f #f ())
(2731 package-real-undefineds 2730 10 ())
(2732 packages #f #f ())
(2733 set-package-undefined-but-assigneds! 2732 10 ())
(2734 packages #f #f ())
(2735 package-real-undefined-but-assigneds 2734 10 ())
(2736 packages #f #f ())
(2737 package-clients 2736 10 ())
(2738 packages #f #f ())
(2739 package-cached 2738 10 ())
(2740 packages #f #f ())
(2741 really-make-package 2740 10 ())
(2742 packages #f #f ())
(2743 packages #f #f ())
(2744 #f 2743 14 ())
(2745 packages #f #f ())
(2746 structure-interface-thunk 2745 10 ())
(2747 packages #f #f ())
(2748 set-structure-interface! 2747 10 ())
(2749 packages #f #f ())
(2750 structure-interface-really 2749 10 ())
(2751 packages #f #f ())
(2752 structure-package 2751 10 ())
(2753 packages #f #f ())
(2754 structure-clients 2753 10 ())
(2755 packages #f #f ())
(2756 set-structure-name! 2755 10 ())
(2757 packages #f #f ())
(2758 structure-name 2757 10 ())
(2759 packages #f #f ())
(2760 really-make-structure 2759 10 ())
(2761 packages #f #f ())
(2762 packages #f #f ())
(2763 structure? 2762 10 ())
(2764 packages #f #f ())
(2765 initialize-structure! 2764 10 ())
(2766 packages #f #f ())
(2767 structure-interface 2766 10 ())
(2768 packages #f #f ())
(2769 package? 2768 10 ())
(2770 packages #f #f ())
(2771 note-package-name! 2770 10 ())
(2772 packages #f #f ())
(2773 note-structure-name! 2772 10 ())
(2774 packages #f #f ())
(2775 make-structure 2774 10 ())
(2776 #f 2775 100 ())
(2777 packages #f #f ())
(2778 structure-unstable? 2777 10 ())
(2779 packages #f #f ())
(2780 make-modified-structure 2779 10 ())
(2781 #f 2780 34 ())
(2782 packages #f #f ())
(2783 get-new-location 2782 10 ())
(2784 packages #f #f ())
(2785 package-define! 2784 10 ())
(2786 packages #f #f ())
(2787 package-accesses 2786 10 ())
(2788 packages #f #f ())
(2789 initialize-package! 2788 10 ())
(2790 #f 2789 59 ())
(2791 #f 2789 84 ())
(2792 packages #f #f ())
(2793 initialize-package-if-necessary! 2792 10 ())
(2794 packages #f #f ())
(2795 package-definition 2794 10 ())
(2796 packages #f #f ())
(2797 search-opens 2796 10 ())
(2798 loop 2797 26 ())
(2799 packages #f #f ())
(2800 structure-lookup 2799 10 ())
(2801 packages #f #f ())
(2802 package-lookup 2801 10 ())
(2803 packages #f #f ())
(2804 generic-lookup 2803 10 ())
(2805 packages #f #f ())
(2806 really-package-lookup 2805 10 ())
(2807 packages #f #f ())
(2808 real-structure-lookup 2807 10 ())
(2809 packages #f #f ())
(2810 for-each-export 2809 10 ())
(2811 #f 2810 35 ())
(2812 packages #f #f ())
(2813 really-package->environment 2812 10 ())
(2814 #f 2813 16 ())
(2815 #f 2813 31 ())
(2816 packages #f #f ())
(2817 new-package-uid 2816 10 ())
(2818 packages #f #f ())
(2819 make-package 2818 10 ())
(2820 packages #f #f ())
(2821 lazy-table-accessor 2820 10 ())
(2822 #f 2821 17 ())
(2823 packages #f #f ())
(2824 package-name 2823 10 ())
(2825 packages #f #f ())
(2826 package-opens 2825 10 ())
(2827 packages #f #f ())
(2828 make-simple-package 2827 10 ())
(2829 #f 2828 77 ())
(2830 #f 2828 85 ())
(2831 packages #f #f ())
(2832 package-add-static! 2831 10 ())
(2833 packages #f #f ())
(2834 package-refine-type! 2833 10 ())
(2835 packages #f #f ())
(2836 for-each-definition 2835 10 ())
(2837 #f 2836 16 ())
(2838 packages #f #f ())
(2839 make-new-location 2838 10 ())
(2840 packages #f #f ())
(2841 flush-location-names 2840 10 ())
(2842 packages #f #f ())
(2843 print-undefined-names 2842 10 ())
(2844 #f 2843 20 ())
(2845 #f 2843 66 ())
(2846 packages #f #f ())
(2847 noting-undefined-variables 2846 10 ())
(2848 add-name 2847 33 ())
(2849 #f 2847 55 ())
(2850 #f 2847 74 ())
(2851 #f 2850 6 ())
(2852 #f 2850 25 ())
(2853 #f 2852 13 ())
(2854 packages #f #f ())
(2855 cenv->package 2854 10 ())
(2856 packages #f #f ())
(2857 get-location-for-unassignable 2856 10 ())
(2858 #f 2857 120 ())
(2859 #f 2857 135 ())
(2860 packages #f #f ())
(2861 package-note-caching! 2860 10 ())
(2862 loop 2861 94 ())
(2863 packages #f #f ())
(2864 note-caching! 2863 10 ())
(2865 packages #f #f ())
(2866 location-for-reference 2865 10 ())
(2867 loop 2866 38 ())
(2868 packages #f #f ())
(2869 get-location-for-undefined 2868 10 ())
(2870 #f 2869 116 ())
(2871 packages #f #f ())
(2872 get-location 2871 10 ())
(2873 packages #f #f ())
(2874 really-link! 2873 10 ())
(2875 loop##418 2874 19 ())
(2876 packages #f #f ())
(2877 link! 2876 10 ())
(2878 #f 2877 25 ())
(2879 packages #f #f ())
(2880 location-on-demand 2879 10 ())
(2881 #f 2880 16 ())
(2882 packages #f #f ())
(2883 packages #f #f ())
(2884 environments #f #f ())
(2885 set-reflective-tower-maker! 2884 40 ())
(2886 environments #f #f ())
(2887 make-reflective-tower 2886 10 ())
(2888 recur 2887 28 ())
(2889 #f 2888 24 ())
(2890 environments #f #f ())
(2891 null-environment 2890 10 ())
(2892 environments #f #f ())
(2893 set-scheme-report-environment! 2892 10 ())
(2894 environments #f #f ())
(2895 environments #f #f ())
(2896 environments #f #f ())
(2897 environments #f #f ())
(2898 scheme-report-environment 2897 10 ())
(2899 environments #f #f ())
(2900 with-interaction-environment 2899 10 ())
(2901 environments #f #f ())
(2902 set-interaction-environment! 2901 10 ())
(2903 environments #f #f ())
(2904 interaction-environment 2903 10 ())
(2905 environments #f #f ())
(2906 environments #f #f ())
(2907 carefully 2906 10 ())
(2908 environments #f #f ())
(2909 *structure-ref 2908 10 ())
(2910 environments #f #f ())
(2911 environment-define! 2910 10 ())
(2912 environments #f #f ())
(2913 environment-set! 2912 10 ())
(2914 #f 2913 132 ())
(2915 environments #f #f ())
(2916 environment-ref 2915 10 ())
(2917 #f 2916 35 ())
(2918 filenames #f #f ())
(2919 translate 2918 10 ())
(2920 loop 2919 36 ())
(2921 filenames #f #f ())
(2922 set-translation! 2921 10 ())
(2923 filenames #f #f ())
(2924 translations 2923 10 ())
(2925 filenames #f #f ())
(2926 filenames #f #f ())
(2927 string-posq 2926 10 ())
(2928 loop 2927 27 ())
(2929 filenames #f #f ())
(2930 file-nondirectory-position 2929 10 ())
(2931 loop 2930 31 ())
(2932 filenames #f #f ())
(2933 file-name-nondirectory 2932 10 ())
(2934 filenames #f #f ())
(2935 file-name-directory 2934 10 ())
(2936 filenames #f #f ())
(2937 filenames #f #f ())
(2938 filenames #f #f ())
(2939 filenames #f #f ())
(2940 namestring-component 2939 10 ())
(2941 filenames #f #f ())
(2942 filenames #f #f ())
(2943 filenames #f #f ())
(2944 namestring 2943 10 ())
(2945 #f 2944 196 ())
(2946 reading-forms #f #f ())
(2947 really-read-forms 2946 10 ())
(2948 loop 2947 26 ())
(2949 reading-forms #f #f ())
(2950 read-forms 2949 10 ())
(2951 #f 2950 67 ())
(2952 reading-forms #f #f ())
(2953 #f 2952 14 ())
(2954 nodes #f #f ())
(2955 #f 2954 18 ())
(2956 nodes #f #f ())
(2957 #f 2956 22 ())
(2958 nodes #f #f ())
(2959 #f 2958 22 ())
(2960 nodes #f #f ())
(2961 #f 2960 22 ())
(2962 nodes #f #f ())
(2963 nodes #f #f ())
(2964 nodes #f #f ())
(2965 #f 2964 22 ())
(2966 #f 2965 16 ())
(2967 nodes #f #f ())
(2968 #f 2967 22 ())
(2969 nodes #f #f ())
(2970 #f 2969 22 ())
(2971 nodes #f #f ())
(2972 #f 2971 14 ())
(2973 nodes #f #f ())
(2974 #f 2973 14 ())
(2975 nodes #f #f ())
(2976 node-operator-id 2975 10 ())
(2977 nodes #f #f ())
(2978 node-form 2977 10 ())
(2979 nodes #f #f ())
(2980 set-node-plist! 2979 10 ())
(2981 nodes #f #f ())
(2982 node-plist 2981 10 ())
(2983 nodes #f #f ())
(2984 really-make-node 2983 10 ())
(2985 nodes #f #f ())
(2986 nodes #f #f ())
(2987 nodes #f #f ())
(2988 nodes #f #f ())
(2989 nodes #f #f ())
(2990 nodes #f #f ())
(2991 #f 2990 14 ())
(2992 nodes #f #f ())
(2993 set-operator-type! 2992 10 ())
(2994 nodes #f #f ())
(2995 operator-type 2994 10 ())
(2996 nodes #f #f ())
(2997 operator-nargs 2996 10 ())
(2998 nodes #f #f ())
(2999 operator-uid 2998 10 ())
(3000 nodes #f #f ())
(3001 operator-name 3000 10 ())
(3002 nodes #f #f ())
(3003 make-operator 3002 10 ())
(3004 nodes #f #f ())
(3005 nodes #f #f ())
(3006 operator? 3005 10 ())
(3007 nodes #f #f ())
(3008 get-operator 3007 10 ())
(3009 nodes #f #f ())
(3010 make-operator-table 3009 10 ())
(3011 nodes #f #f ())
(3012 operator-lookup 3011 10 ())
(3013 nodes #f #f ())
(3014 operator-define! 3013 10 ())
(3015 nodes #f #f ())
(3016 node? 3015 10 ())
(3017 nodes #f #f ())
(3018 make-node 3017 10 ())
(3019 nodes #f #f ())
(3020 node-ref 3019 10 ())
(3021 nodes #f #f ())
(3022 node-set! 3021 10 ())
(3023 loop 3022 116 ())
(3024 nodes #f #f ())
(3025 node-operator 3024 10 ())
(3026 nodes #f #f ())
(3027 node-predicate 3026 10 ())
(3028 #f 3027 50 ())
(3029 nodes #f #f ())
(3030 make-similar-node 3029 10 ())
(3031 nodes #f #f ())
(3032 force-node 3031 10 ())
(3033 nodes #f #f ())
(3034 schemify-node 3033 10 ())
(3035 nodes #f #f ())
(3036 schemify-sexp 3035 10 ())
(3037 loop 3036 163 ())
(3038 nodes #f #f ())
(3039 schemify 3038 10 ())
(3040 nodes #f #f ())
(3041 schemify-nodes 3040 10 ())
(3042 #f 3041 16 ())
(3043 nodes #f #f ())
(3044 define-schemifier 3043 10 ())
(3045 nodes #f #f ())
(3046 schemify-formals 3045 10 ())
(3047 nodes #f #f ())
(3048 schemify-lambda 3047 10 ())
(3049 nodes #f #f ())
(3050 schemify-letrec 3049 10 ())
(3051 #f 3050 24 ())
(3052 nodes #f #f ())
(3053 nodes #f #f ())
(3054 var-utilities #f #f ())
(3055 normalize-formals 3054 10 ())
(3056 var-utilities #f #f ())
(3057 n-ary? 3056 10 ())
(3058 var-utilities #f #f ())
(3059 number-of-required-args 3058 10 ())
(3060 loop##445 3059 14 ())
(3061 syntactic #f #f ())
(3062 syntactic #f #f ())
(3063 syntactic #f #f ())
(3064 syntactic #f #f ())
(3065 syntactic #f #f ())
(3066 syntactic #f #f ())
(3067 syntactic #f #f ())
(3068 syntactic #f #f ())
(3069 syntactic #f #f ())
(3070 syntactic #f #f ())
(3071 syntactic #f #f ())
(3072 syntactic #f #f ())
(3073 syntactic #f #f ())
(3074 syntactic #f #f ())
(3075 syntactic #f #f ())
(3076 syntactic #f #f ())
(3077 syntactic #f #f ())
(3078 #f 3077 22 ())
(3079 #f 3078 127 ())
(3080 syntactic #f #f ())
(3081 #f 3080 22 ())
(3082 #f 3081 108 ())
(3083 #f 3082 16 ())
(3084 syntactic #f #f ())
(3085 #f 3084 22 ())
(3086 #f 3085 112 ())
(3087 syntactic #f #f ())
(3088 #f 3087 22 ())
(3089 syntactic #f #f ())
(3090 #f 3089 22 ())
(3091 #f 3090 82 ())
(3092 syntactic #f #f ())
(3093 #f 3092 22 ())
(3094 syntactic #f #f ())
(3095 #f 3094 22 ())
(3096 syntactic #f #f ())
(3097 #f 3096 22 ())
(3098 syntactic #f #f ())
(3099 #f 3098 22 ())
(3100 syntactic #f #f ())
(3101 #f 3100 22 ())
(3102 syntactic #f #f ())
(3103 #f 3102 22 ())
(3104 syntactic #f #f ())
(3105 #f 3104 22 ())
(3106 syntactic #f #f ())
(3107 #f 3106 22 ())
(3108 syntactic #f #f ())
(3109 #f 3108 14 ())
(3110 syntactic #f #f ())
(3111 syntactic #f #f ())
(3112 syntactic #f #f ())
(3113 syntactic #f #f ())
(3114 at-least-this-long? 3113 10 ())
(3115 syntactic #f #f ())
(3116 names? 3115 10 ())
(3117 syntactic #f #f ())
(3118 destructure-define 3117 10 ())
(3119 syntactic #f #f ())
(3120 scan-define 3119 10 ())
(3121 syntactic #f #f ())
(3122 this-long? 3121 10 ())
(3123 syntactic #f #f ())
(3124 process-syntax 3123 10 ())
(3125 syntactic #f #f ())
(3126 scan-define-syntax 3125 10 ())
(3127 syntactic #f #f ())
(3128 expand-name 3127 10 ())
(3129 syntactic #f #f ())
(3130 expand-operator-form 3129 10 ())
(3131 syntactic #f #f ())
(3132 literal? 3131 10 ())
(3133 syntactic #f #f ())
(3134 expand-literal 3133 10 ())
(3135 syntactic #f #f ())
(3136 expand-list 3135 10 ())
(3137 #f 3136 16 ())
(3138 syntactic #f #f ())
(3139 expand-call 3138 10 ())
(3140 syntactic #f #f ())
(3141 expand 3140 10 ())
(3142 syntactic #f #f ())
(3143 expand-macro-application 3142 10 ())
(3144 syntactic #f #f ())
(3145 expand-structure-ref 3144 10 ())
(3146 lose 3145 41 ())
(3147 syntactic #f #f ())
(3148 expand-head 3147 10 ())
(3149 syntactic #f #f ())
(3150 scan-forms 3149 10 ())
(3151 loop 3150 29 ())
(3152 syntactic #f #f ())
(3153 expand-define 3152 10 ())
(3154 syntactic #f #f ())
(3155 expand-scanned-form 3154 10 ())
(3156 syntactic #f #f ())
(3157 expand-form 3156 10 ())
(3158 loop 3157 41 ())
(3159 syntactic #f #f ())
(3160 static-value 3159 10 ())
(3161 syntactic #f #f ())
(3162 make-operator-predicate 3161 10 ())
(3163 #f 3162 38 ())
(3164 syntactic #f #f ())
(3165 body-lossage 3164 10 ())
(3166 syntactic #f #f ())
(3167 scan-body-forms 3166 10 ())
(3168 syntactic #f #f ())
(3169 expand-letrec 3168 10 ())
(3170 #f 3169 20 ())
(3171 syntactic #f #f ())
(3172 expand-body 3171 10 ())
(3173 syntactic #f #f ())
(3174 define-expander 3173 10 ())
(3175 syntactic #f #f ())
(3176 unspecific-node 3175 10 ())
(3177 syntactic #f #f ())
(3178 bind-names 3177 10 ())
(3179 loop 3178 33 ())
(3180 syntactic #f #f ())
(3181 expand-lambda 3180 10 ())
(3182 syntactic #f #f ())
(3183 specs? 3182 10 ())
(3184 syntactic #f #f ())
(3185 syntax? 3184 10 ())
(3186 primops #f #f ())
(3187 primops #f #f ())
(3188 #f 3187 14 ())
(3189 primops #f #f ())
(3190 primop-name 3189 10 ())
(3191 primops #f #f ())
(3192 primop-type 3191 10 ())
(3193 primops #f #f ())
(3194 primop-closed 3193 10 ())
(3195 primops #f #f ())
(3196 primop-compilator 3195 10 ())
(3197 primops #f #f ())
(3198 make-primop 3197 10 ())
(3199 primops #f #f ())
(3200 primops #f #f ())
(3201 primop? 3200 10 ())
(3202 primops #f #f ())
(3203 walk-primops 3202 10 ())
(3204 #f 3203 16 ())
(3205 primops #f #f ())
(3206 define-compiler-primitive 3205 10 ())
(3207 primops #f #f ())
(3208 get-primop 3207 10 ())
(3209 debug-data #f #f ())
(3210 debug-data #f #f ())
(3211 debug-data #f #f ())
(3212 debug-data #f #f ())
(3213 debug-data #f #f ())
(3214 debug-data #f #f ())
(3215 debug-data #f #f ())
(3216 debug-data #f #f ())
(3217 debug-data #f #f ())
(3218 debug-data #f #f ())
(3219 #f 3218 14 ())
(3220 debug-data #f #f ())
(3221 debug-data-uid 3220 10 ())
(3222 debug-data #f #f ())
(3223 debug-data-name 3222 10 ())
(3224 debug-data #f #f ())
(3225 debug-data-parent 3224 10 ())
(3226 debug-data #f #f ())
(3227 debug-data-pc-in-parent 3226 10 ())
(3228 debug-data #f #f ())
(3229 set-debug-data-env-maps! 3228 10 ())
(3230 debug-data #f #f ())
(3231 debug-data-env-maps 3230 10 ())
(3232 debug-data #f #f ())
(3233 set-debug-data-source! 3232 10 ())
(3234 debug-data #f #f ())
(3235 debug-data-source 3234 10 ())
(3236 debug-data #f #f ())
(3237 make-debug-data 3236 10 ())
(3238 debug-data #f #f ())
(3239 debug-data #f #f ())
(3240 debug-data? 3239 10 ())
(3241 debug-data #f #f ())
(3242 get-debug-data 3241 10 ())
(3243 debug-data #f #f ())
(3244 debug-data-env-shape 3243 10 ())
(3245 loop 3244 102 ())
(3246 debug-data #f #f ())
(3247 new-template-uid 3246 10 ())
(3248 debug-data #f #f ())
(3249 template-uid 3248 10 ())
(3250 debug-data #f #f ())
(3251 set-template-uid! 3250 10 ())
(3252 debug-data #f #f ())
(3253 debug-flag-accessor 3252 10 ())
(3254 #f 3253 38 ())
(3255 debug-data #f #f ())
(3256 debug-flag-modifier 3255 10 ())
(3257 #f 3256 38 ())
(3258 debug-data #f #f ())
(3259 saving-and-restoring 3258 10 ())
(3260 swap 3259 28 ())
(3261 debug-data #f #f ())
(3262 with-fresh-compiler-state 3261 10 ())
(3263 #f 3262 59 ())
(3264 #f 3263 6 ())
(3265 #f 3263 14 ())
(3266 debug-data #f #f ())
(3267 note-debug-data! 3266 10 ())
(3268 debug-data #f #f ())
(3269 debug-data->info 3268 10 ())
(3270 debug-data #f #f ())
(3271 new-debug-data 3270 10 ())
(3272 debug-data #f #f ())
(3273 debug-data #f #f ())
(3274 stack-check #f #f ())
(3275 loop##486 3274 11 ())
(3276 stack-check #f #f ())
(3277 #f 3276 14 ())
(3278 loop 3277 62 ())
(3279 stack-check #f #f ())
(3280 #f 3279 14 ())
(3281 stack-check #f #f ())
(3282 #f 3281 14 ())
(3283 stack-check #f #f ())
(3284 stack-check #f #f ())
(3285 stack-check #f #f ())
(3286 #f 3285 14 ())
(3287 stack-check #f #f ())
(3288 stack-check #f #f ())
(3289 stack-check #f #f ())
(3290 #f 3289 14 ())
(3291 stack-check #f #f ())
(3292 #f 3291 14 ())
(3293 stack-check #f #f ())
(3294 #f 3293 14 ())
(3295 stack-check #f #f ())
(3296 #f 3295 14 ())
(3297 stack-check #f #f ())
(3298 stack-check #f #f ())
(3299 stack-check #f #f ())
(3300 stack-check #f #f ())
(3301 stack-check #f #f ())
(3302 stack-check #f #f ())
(3303 stack-check #f #f ())
(3304 stack-check #f #f ())
(3305 stack-check #f #f ())
(3306 stack-check #f #f ())
(3307 stack-check #f #f ())
(3308 stack-check #f #f ())
(3309 stack-check #f #f ())
(3310 stack-check #f #f ())
(3311 stack-max 3310 10 ())
(3312 stack-check #f #f ())
(3313 protocol-skip 3312 10 ())
(3314 stack-check #f #f ())
(3315 maximum-stack-use 3314 10 ())
(3316 loop##489 3315 81 ())
(3317 stack-check #f #f ())
(3318 nothing 3317 10 ())
(3319 #f 3318 16 ())
(3320 stack-check #f #f ())
(3321 popper 3320 10 ())
(3322 #f 3321 17 ())
(3323 stack-check #f #f ())
(3324 imax 3323 10 ())
(3325 stack-check #f #f ())
(3326 pusher 3325 10 ())
(3327 #f 3326 17 ())
(3328 stack-check #f #f ())
(3329 continue 3328 10 ())
(3330 stack-check #f #f ())
(3331 continuer 3330 10 ())
(3332 #f 3331 16 ())
(3333 stack-check #f #f ())
(3334 get-offset 3333 10 ())
(3335 stack-check #f #f ())
(3336 flat-env-checker 3335 10 ())
(3337 #f 3336 17 ())
(3338 loop 3337 96 ())
(3339 stack-check #f #f ())
(3340 do-make-cont 3339 10 ())
(3341 #f 3340 16 ())
(3342 stack-check #f #f ())
(3343 arg-spec-size 3342 10 ())
(3344 stack-check #f #f ())
(3345 stack-function 3344 10 ())
(3346 loop 3345 25 ())
(3347 segments #f #f ())
(3348 segments #f #f ())
(3349 segments #f #f ())
(3350 segments #f #f ())
(3351 #f 3350 18 ())
(3352 segments #f #f ())
(3353 astate-code-vector 3352 10 ())
(3354 segments #f #f ())
(3355 set-astate-pc! 3354 10 ())
(3356 segments #f #f ())
(3357 astate-pc 3356 10 ())
(3358 segments #f #f ())
(3359 set-astate-count! 3358 10 ())
(3360 segments #f #f ())
(3361 astate-count 3360 10 ())
(3362 segments #f #f ())
(3363 set-astate-literals! 3362 10 ())
(3364 segments #f #f ())
(3365 astate-literals 3364 10 ())
(3366 segments #f #f ())
(3367 make-assembly-state 3366 10 ())
(3368 segments #f #f ())
(3369 segments #f #f ())
(3370 segments #f #f ())
(3371 segments #f #f ())
(3372 segments #f #f ())
(3373 high-byte 3372 10 ())
(3374 segments #f #f ())
(3375 emit-byte! 3374 10 ())
(3376 segments #f #f ())
(3377 low-byte 3376 10 ())
(3378 segments #f #f ())
(3379 position 3378 10 ())
(3380 loop 3379 30 ())
(3381 segments #f #f ())
(3382 literal-position 3381 10 ())
(3383 #f 3382 26 ())
(3384 segments #f #f ())
(3385 literal->index 3384 10 ())
(3386 segments #f #f ())
(3387 emit-literal! 3386 10 ())
(3388 segments #f #f ())
(3389 code-vector-set2! 3388 10 ())
(3390 segments #f #f ())
(3391 check-stack-use 3390 10 ())
(3392 loop##508 3391 92 ())
(3393 segments #f #f ())
(3394 emit-segment! 3393 10 ())
(3395 segments #f #f ())
(3396 emit-with-environment-maps! 3395 10 ())
(3397 #f 3396 38 ())
(3398 segments #f #f ())
(3399 make-astate 3398 10 ())
(3400 segments #f #f ())
(3401 template 3400 10 ())
(3402 #f 3401 21 ())
(3403 segments #f #f ())
(3404 segment-data->template 3403 10 ())
(3405 loop##509 3404 79 ())
(3406 segments #f #f ())
(3407 segment->template 3406 10 ())
(3408 #f 3407 151 ())
(3409 segments #f #f ())
(3410 instruction 3409 10 ())
(3411 #f 3410 43 ())
(3412 #f 3411 33 ())
(3413 segments #f #f ())
(3414 sequentially-2 3413 10 ())
(3415 #f 3414 74 ())
(3416 segments #f #f ())
(3417 sequentially 3416 10 ())
(3418 loop 3417 100 ())
(3419 #f 3417 123 ())
(3420 loop 3419 25 ())
(3421 segments #f #f ())
(3422 instruction-with-literal 3421 10 ())
(3423 #f 3422 44 ())
(3424 #f 3423 178 ())
(3425 segments #f #f ())
(3426 instruction-with-location 3425 10 ())
(3427 #f 3426 23 ())
(3428 segments #f #f ())
(3429 make-label 3428 10 ())
(3430 segments #f #f ())
(3431 insert-label! 3430 10 ())
(3432 segments #f #f ())
(3433 instruction-using-label 3432 10 ())
(3434 #f 3433 66 ())
(3435 segments #f #f ())
(3436 computed-goto-instruction 3435 10 ())
(3437 #f 3436 90 ())
(3438 loop##511 3437 85 ())
(3439 segments #f #f ())
(3440 attach-label 3439 10 ())
(3441 #f 3440 32 ())
(3442 #f 3441 50 ())
(3443 segments #f #f ())
(3444 note-source-code 3443 10 ())
(3445 #f 3444 32 ())
(3446 segments #f #f ())
(3447 note-environment 3446 10 ())
(3448 #f 3447 46 ())
(3449 segments #f #f ())
(3450 optimizer #f #f ())
(3451 apply-optimizers 3450 10 ())
(3452 #f 3451 16 ())
(3453 optimizer #f #f ())
(3454 get-optimizer 3453 10 ())
(3455 #f 3454 16 ())
(3456 #f 3455 13 ())
(3457 #f 3456 61 ())
(3458 optimizer #f #f ())
(3459 set-optimizer! 3458 10 ())
(3460 optimizer #f #f ())
(3461 flat-environments #f #f ())
(3462 clear-var-set! 3461 10 ())
(3463 flat-environments #f #f ())
(3464 clean-var-list 3463 10 ())
(3465 flat-environments #f #f ())
(3466 set-difference! 3465 10 ())
(3467 flat-environments #f #f ())
(3468 set-union! 3467 10 ())
(3469 #f 3468 16 ())
(3470 flat-environments #f #f ())
(3471 set-add-element! 3470 10 ())
(3472 flat-environments #f #f ())
(3473 flat-environments #f #f ())
(3474 install-set! 3473 10 ())
(3475 #f 3474 16 ())
(3476 flat-environments #f #f ())
(3477 install-new-set! 3476 10 ())
(3478 flat-environments #f #f ())
(3479 cell-set!-primop 3478 10 ())
(3480 flat-environments #f #f ())
(3481 flat-environments #f #f ())
(3482 cell-ref-primop 3481 10 ())
(3483 flat-environments #f #f ())
(3484 flat-environments #f #f ())
(3485 make-cell-primop 3484 10 ())
(3486 flat-environments #f #f ())
(3487 flat-environments #f #f ())
(3488 flat-environments #f #f ())
(3489 flat-environments #f #f ())
(3490 flat-environments #f #f ())
(3491 flat-environments #f #f ())
(3492 flat-environments #f #f ())
(3493 flat-environments #f #f ())
(3494 flat-environments #f #f ())
(3495 flat-environments #f #f ())
(3496 flat-environments #f #f ())
(3497 flat-environments #f #f ())
(3498 flat-environments #f #f ())
(3499 flat-environments #f #f ())
(3500 make-primop-call 3499 10 ())
(3501 flat-environments #f #f ())
(3502 make-cell-set! 3501 10 ())
(3503 flat-environments #f #f ())
(3504 make-cell-ref 3503 10 ())
(3505 flat-environments #f #f ())
(3506 make-unassigned-cell 3505 10 ())
(3507 flat-environments #f #f ())
(3508 make-make-cell 3507 10 ())
(3509 flat-environments #f #f ())
(3510 mark-letrec-sets 3509 10 ())
(3511 #f 3510 29 ())
(3512 flat-environments #f #f ())
(3513 #f 3512 14 ())
(3514 flat-environments #f #f ())
(3515 #f 3514 14 ())
(3516 flat-environments #f #f ())
(3517 #f 3516 14 ())
(3518 flat-environments #f #f ())
(3519 #f 3518 14 ())
(3520 flat-environments #f #f ())
(3521 #f 3520 14 ())
(3522 flat-environments #f #f ())
(3523 #f 3522 14 ())
(3524 flat-environments #f #f ())
(3525 #f 3524 14 ())
(3526 flat-environments #f #f ())
(3527 flat-environments #f #f ())
(3528 flat-environments #f #f ())
(3529 flat-environments #f #f ())
(3530 flat-environments #f #f ())
(3531 flat-environments #f #f ())
(3532 no-sets 3531 10 ())
(3533 flat-environments #f #f ())
(3534 define-set-marker 3533 10 ())
(3535 flat-environments #f #f ())
(3536 #f 3535 14 ())
(3537 flat-environments #f #f ())
(3538 mark-set-variables! 3537 10 ())
(3539 flat-environments #f #f ())
(3540 assigned? 3539 10 ())
(3541 flat-environments #f #f ())
(3542 #f 3541 14 ())
(3543 #f 3542 20 ())
(3544 flat-environments #f #f ())
(3545 flatten-impure-letrec 3544 10 ())
(3546 #f 3545 13 ())
(3547 #f 3545 198 ())
(3548 flat-environments #f #f ())
(3549 flatten-pure-letrec 3548 10 ())
(3550 flat-environments #f #f ())
(3551 flatten-letrec 3550 10 ())
(3552 #f 3551 117 ())
(3553 flat-environments #f #f ())
(3554 #f 3553 14 ())
(3555 flat-environments #f #f ())
(3556 #f 3555 14 ())
(3557 flat-environments #f #f ())
(3558 #f 3557 14 ())
(3559 flat-environments #f #f ())
(3560 #f 3559 14 ())
(3561 flat-environments #f #f ())
(3562 #f 3561 14 ())
(3563 flat-environments #f #f ())
(3564 #f 3563 14 ())
(3565 flat-environments #f #f ())
(3566 add-cells 3565 10 ())
(3567 loop##517 3566 18 ())
(3568 flat-environments #f #f ())
(3569 convert-lambda-body 3568 10 ())
(3570 flat-environments #f #f ())
(3571 flatten-lambda 3570 10 ())
(3572 flat-environments #f #f ())
(3573 #f 3572 14 ())
(3574 flat-environments #f #f ())
(3575 #f 3574 14 ())
(3576 flat-environments #f #f ())
(3577 flat-environments #f #f ())
(3578 flat-environments #f #f ())
(3579 flat-environments #f #f ())
(3580 no-free-vars 3579 10 ())
(3581 flat-environments #f #f ())
(3582 flatten-list 3581 10 ())
(3583 #f 3582 16 ())
(3584 flat-environments #f #f ())
(3585 define-flattener 3584 10 ())
(3586 flat-environments #f #f ())
(3587 #f 3586 14 ())
(3588 flat-environments #f #f ())
(3589 flatten-node 3588 10 ())
(3590 flat-environments #f #f ())
(3591 flatten-form 3590 10 ())
(3592 flat-environments #f #f ())
(3593 #f 3592 14 ())
(3594 #f 3593 9 ())
(3595 reconstruction #f #f ())
(3596 constant-type 3595 10 ())
(3597 reconstruction #f #f ())
(3598 reconstruction #f #f ())
(3599 reconstruction #f #f ())
(3600 reconstruct-apply 3599 10 ())
(3601 #f 3600 68 ())
(3602 reconstruction #f #f ())
(3603 #f 3602 14 ())
(3604 reconstruction #f #f ())
(3605 #f 3604 14 ())
(3606 #f 3605 20 ())
(3607 reconstruction #f #f ())
(3608 #f 3607 18 ())
(3609 reconstruction #f #f ())
(3610 define-primop-reconstructor 3609 10 ())
(3611 reconstruction #f #f ())
(3612 reconstruction #f #f ())
(3613 reconstruction #f #f ())
(3614 reconstruction #f #f ())
(3615 reconstruction #f #f ())
(3616 #f 3615 18 ())
(3617 reconstruction #f #f ())
(3618 #f 3617 18 ())
(3619 reconstruction #f #f ())
(3620 node->type 3619 10 ())
(3621 reconstruction #f #f ())
(3622 #f 3621 18 ())
(3623 reconstruction #f #f ())
(3624 reconstruct-letrec 3623 10 ())
(3625 #f 3624 45 ())
(3626 reconstruction #f #f ())
(3627 #f 3626 18 ())
(3628 reconstruction #f #f ())
(3629 #f 3628 18 ())
(3630 reconstruction #f #f ())
(3631 #f 3630 18 ())
(3632 reconstruction #f #f ())
(3633 #f 3632 18 ())
(3634 loop##518 3633 19 ())
(3635 reconstruction #f #f ())
(3636 reconstruction #f #f ())
(3637 fork-constraints 3636 10 ())
(3638 #f 3637 16 ())
(3639 reconstruction #f #f ())
(3640 #f 3639 18 ())
(3641 #f 3640 163 ())
(3642 reconstruction #f #f ())
(3643 #f 3642 16 ())
(3644 reconstruction #f #f ())
(3645 #f 3644 16 ())
(3646 reconstruction #f #f ())
(3647 #f 3646 18 ())
(3648 reconstruction #f #f ())
(3649 #f 3648 18 ())
(3650 reconstruction #f #f ())
(3651 reconstruct-call 3650 10 ())
(3652 lose 3651 133 ())
(3653 #f 3652 13 ())
(3654 loop 3651 213 ())
(3655 reconstruction #f #f ())
(3656 proc->reconstructor 3655 10 ())
(3657 reconstruction #f #f ())
(3658 #f 3657 18 ())
(3659 reconstruction #f #f ())
(3660 reconstruct-name 3659 10 ())
(3661 reconstruction #f #f ())
(3662 #f 3661 18 ())
(3663 reconstruction #f #f ())
(3664 careful-codomain 3663 10 ())
(3665 reconstruction #f #f ())
(3666 reconstruct-lambda 3665 10 ())
(3667 #f 3666 73 ())
(3668 reconstruction #f #f ())
(3669 #f 3668 18 ())
(3670 reconstruction #f #f ())
(3671 #f 3670 18 ())
(3672 reconstruction #f #f ())
(3673 define-reconstructor 3672 10 ())
(3674 reconstruction #f #f ())
(3675 #f 3674 14 ())
(3676 reconstruction #f #f ())
(3677 examine 3676 10 ())
(3678 reconstruction #f #f ())
(3679 reconstruct 3678 10 ())
(3680 reconstruction #f #f ())
(3681 reconstruct-type 3680 10 ())
(3682 reconstruction #f #f ())
(3683 node-type 3682 10 ())
(3684 compiler #f #f ())
(3685 compiler #f #f ())
(3686 loop 3685 62 ())
(3687 compiler #f #f ())
(3688 compiler #f #f ())
(3689 compiler #f #f ())
(3690 compiler #f #f ())
(3691 define-one-or-two 3690 10 ())
(3692 #f 3691 23 ())
(3693 #f 3691 39 ())
(3694 compiler #f #f ())
(3695 define-one-or-two 3694 10 ())
(3696 #f 3695 92 ())
(3697 #f 3695 108 ())
(3698 compiler #f #f ())
(3699 compiler #f #f ())
(3700 compiler #f #f ())
(3701 define=< 3700 10 ())
(3702 #f 3701 91 ())
(3703 #f 3701 106 ())
(3704 compiler #f #f ())
(3705 define+* 3704 10 ())
(3706 #f 3705 58 ())
(3707 #f 3705 74 ())
(3708 compiler #f #f ())
(3709 define-char-io 3708 10 ())
(3710 #f 3709 22 ())
(3711 #f 3709 37 ())
(3712 compiler #f #f ())
(3713 define-char-io 3712 10 ())
(3714 #f 3713 22 ())
(3715 #f 3713 37 ())
(3716 compiler #f #f ())
(3717 n-ary-constructor 3716 10 ())
(3718 #f 3717 26 ())
(3719 #f 3717 41 ())
(3720 compiler #f #f ())
(3721 #f 3720 24 ())
(3722 compiler #f #f ())
(3723 #f 3722 56 ())
(3724 #f 3723 131 ())
(3725 #f 3722 71 ())
(3726 compiler #f #f ())
(3727 #f 3726 20 ())
(3728 #f 3726 28 ())
(3729 compiler #f #f ())
(3730 #f 3729 82 ())
(3731 #f 3729 98 ())
(3732 compiler #f #f ())
(3733 #f 3732 80 ())
(3734 #f 3732 88 ())
(3735 compiler #f #f ())
(3736 #f 3735 64 ())
(3737 #f 3735 72 ())
(3738 compiler #f #f ())
(3739 compiler #f #f ())
(3740 compiler #f #f ())
(3741 compiler #f #f ())
(3742 compiler #f #f ())
(3743 compiler #f #f ())
(3744 compiler #f #f ())
(3745 compiler #f #f ())
(3746 #f 3745 10 ())
(3747 compiler #f #f ())
(3748 #f 3747 10 ())
(3749 compiler #f #f ())
(3750 compiler #f #f ())
(3751 compiler #f #f ())
(3752 compiler #f #f ())
(3753 compiler #f #f ())
(3754 loop##526 3753 15 ())
(3755 compiler #f #f ())
(3756 compiler #f #f ())
(3757 #f 3756 22 ())
(3758 compiler #f #f ())
(3759 #f 3758 22 ())
(3760 compiler #f #f ())
(3761 #f 3760 22 ())
(3762 compiler #f #f ())
(3763 compiler #f #f ())
(3764 compiler #f #f ())
(3765 compiler #f #f ())
(3766 compiler #f #f ())
(3767 compiler #f #f ())
(3768 compiler #f #f ())
(3769 compiler #f #f ())
(3770 compiler #f #f ())
(3771 #f 3770 22 ())
(3772 compiler #f #f ())
(3773 compiler #f #f ())
(3774 compiler #f #f ())
(3775 compiler #f #f ())
(3776 #f 3775 22 ())
(3777 compiler #f #f ())
(3778 #f 3777 22 ())
(3779 #f 3778 72 ())
(3780 #f 3778 165 ())
(3781 compiler #f #f ())
(3782 compiler #f #f ())
(3783 #f 3782 22 ())
(3784 loop 3783 104 ())
(3785 compiler #f #f ())
(3786 #f 3785 22 ())
(3787 compiler #f #f ())
(3788 #f 3787 22 ())
(3789 compiler #f #f ())
(3790 #f 3789 22 ())
(3791 compiler #f #f ())
(3792 #f 3791 22 ())
(3793 compiler #f #f ())
(3794 #f 3793 46 ())
(3795 compiler #f #f ())
(3796 #f 3795 46 ())
(3797 compiler #f #f ())
(3798 #f 3797 22 ())
(3799 compiler #f #f ())
(3800 #f 3799 14 ())
(3801 compiler #f #f ())
(3802 diagnose-call-error 3801 10 ())
(3803 #f 3802 189 ())
(3804 compiler #f #f ())
(3805 type-check 3804 10 ())
(3806 #f 3805 133 ())
(3807 compiler #f #f ())
(3808 compile 3807 10 ())
(3809 compiler #f #f ())
(3810 compile-expression 3809 10 ())
(3811 compiler #f #f ())
(3812 define-compilator 3811 10 ())
(3813 compiler #f #f ())
(3814 ignore-values-cont? 3813 10 ())
(3815 compiler #f #f ())
(3816 return-cont? 3815 10 ())
(3817 compiler #f #f ())
(3818 deliver-value 3817 10 ())
(3819 compiler #f #f ())
(3820 compile-constant 3819 10 ())
(3821 compiler #f #f ())
(3822 fixup-source 3821 10 ())
(3823 compiler #f #f ())
(3824 accept-values-cont? 3823 10 ())
(3825 compiler #f #f ())
(3826 maybe-push-continuation 3825 10 ())
(3827 compiler #f #f ())
(3828 make-cont 3827 10 ())
(3829 compiler #f #f ())
(3830 fall-through-cont 3829 10 ())
(3831 compiler #f #f ())
(3832 push-arguments 3831 10 ())
(3833 recur 3832 46 ())
(3834 compiler #f #f ())
(3835 compile-unknown-call 3834 10 ())
(3836 compiler #f #f ())
(3837 name-node-binding 3836 10 ())
(3838 compiler #f #f ())
(3839 compile-name-call 3838 10 ())
(3840 compiler #f #f ())
(3841 generate-trap 3840 10 ())
(3842 compiler #f #f ())
(3843 named-cont 3842 10 ())
(3844 compiler #f #f ())
(3845 push-all-with-names 3844 10 ())
(3846 compiler #f #f ())
(3847 set-lexical-offsets! 3846 10 ())
(3848 loop 3847 29 ())
(3849 compiler #f #f ())
(3850 name-node->symbol 3849 10 ())
(3851 compiler #f #f ())
(3852 return-cont 3851 10 ())
(3853 compiler #f #f ())
(3854 compile-lambda-code 3853 10 ())
(3855 compiler #f #f ())
(3856 cont-name 3855 10 ())
(3857 compiler #f #f ())
(3858 compile-redex 3857 10 ())
(3859 compiler #f #f ())
(3860 compile-call 3859 10 ())
(3861 compiler #f #f ())
(3862 empty-segment? 3861 10 ())
(3863 compiler #f #f ())
(3864 really-compile-lambda 3863 10 ())
(3865 compiler #f #f ())
(3866 compile-lambda 3865 10 ())
(3867 compiler #f #f ())
(3868 really-compile-flat-lambda 3867 10 ())
(3869 #f 3868 192 ())
(3870 compiler #f #f ())
(3871 letrec-lambda-code 3870 10 ())
(3872 #f 3871 32 ())
(3873 #f 3871 83 ())
(3874 compiler #f #f ())
(3875 letrec-body-code 3874 10 ())
(3876 compiler #f #f ())
(3877 fall-through-cont? 3876 10 ())
(3878 compiler #f #f ())
(3879 ignore-values-cont 3878 10 ())
(3880 compiler #f #f ())
(3881 accept-values-cont 3880 10 ())
(3882 compiler #f #f ())
(3883 set-type-check?! 3882 10 ())
(3884 compiler #f #f ())
(3885 compile-continuation-lambda 3884 10 ())
(3886 compiler #f #f ())
(3887 two-byte-offsetter 3886 10 ())
(3888 compiler #f #f ())
(3889 back-env-data 3888 10 ())
(3890 loop 3889 29 ())
(3891 compiler #f #f ())
(3892 figure-env-data 3891 10 ())
(3893 level-loop 3892 33 ())
(3894 loop 3893 77 ())
(3895 compiler #f #f ())
(3896 one-byte-offsetter 3895 10 ())
(3897 compiler #f #f ())
(3898 environment-code 3897 10 ())
(3899 #f 3898 89 ())
(3900 compiler #f #f ())
(3901 sort-list 3900 10 ())
(3902 insert 3901 18 ())
(3903 sort 3901 40 ())
(3904 compiler #f #f ())
(3905 get-variables-offsets 3904 10 ())
(3906 loop 3905 29 ())
(3907 compiler #f #f ())
(3908 compile-flat-environment 3907 10 ())
(3909 #f 3908 31 ())
(3910 compiler #f #f ())
(3911 compile-flat-lambda 3910 10 ())
(3912 compiler #f #f ())
(3913 push-all-but-last 3912 10 ())
(3914 recur 3913 33 ())
(3915 compiler #f #f ())
(3916 direct-compilator 3915 10 ())
(3917 #f 3916 16 ())
(3918 compiler #f #f ())
(3919 direct-closed-compilator 3918 10 ())
(3920 #f 3919 16 ())
(3921 compiler #f #f ())
(3922 nargs->domain 3921 10 ())
(3923 loop##532 3922 14 ())
(3924 compiler #f #f ())
(3925 get-primop-type 3924 10 ())
(3926 #f 3925 20 ())
(3927 compiler #f #f ())
(3928 simple-compilator 3927 10 ())
(3929 #f 3928 16 ())
(3930 compiler #f #f ())
(3931 simple-closed-compilator 3930 10 ())
(3932 #f 3931 17 ())
(3933 compiler #f #f ())
(3934 define-simple-primitive 3933 10 ())
(3935 compiler #f #f ())
(3936 symbol-append 3935 10 ())
(3937 compiler #f #f ())
(3938 define-stob-predicate 3937 10 ())
(3939 compiler #f #f ())
(3940 define-data-struct-primitives 3939 10 ())
(3941 def-prim 3940 11 ())
(3942 loop##535 3940 222 ())
(3943 compiler #f #f ())
(3944 define-vector-primitives 3943 10 ())
(3945 def-prim 3944 38 ())
(3946 compiler #f #f ())
(3947 unflatten-form 3946 10 ())
(3948 compiler #f #f ())
(3949 thunk-node? 3948 10 ())
(3950 compiler #f #f ())
(3951 thunk-body 3950 10 ())
(3952 compiler #f #f ())
(3953 compile-call-with-values-producer 3952 10 ())
(3954 compiler #f #f ())
(3955 compile-call-with-values 3954 10 ())
(3956 compiler #f #f ())
(3957 n-ary-primitive-compilator 3956 10 ())
(3958 #f 3957 17 ())
(3959 compiler #f #f ())
(3960 define-n-ary-compiler-primitive 3959 10 ())
(3961 compiler #f #f ())
(3962 call-on-arg-and-id 3961 10 ())
(3963 compiler #f #f ())
(3964 call-on-args 3963 10 ())
(3965 do-arg 3964 18 ())
(3966 loop 3964 77 ())
(3967 compiler #f #f ())
(3968 make-dispatch-protocol 3967 10 ())
(3969 compiler #f #f ())
(3970 compile-definition 3969 10 ())
(3971 compiler #f #f ())
(3972 compile-form 3971 10 ())
(3973 #f 3972 28 ())
(3974 compiler #f #f ())
(3975 compile-forms-loop 3974 10 ())
(3976 compiler #f #f ())
(3977 compile-forms 3976 10 ())
(3978 compiler #f #f ())
(3979 append-templates 3978 10 ())
(3980 #f 3979 43 ())
(3981 compiler #f #f ())
(3982 make-startup-procedure 3981 10 ())
(3983 compiler #f #f ())
(3984 evaluation #f #f ())
(3985 compile-and-run 3984 10 ())
(3986 #f 3985 75 ())
(3987 #f 3986 19 ())
(3988 evaluation #f #f ())
(3989 really-load-into 3988 10 ())
(3990 evaluation #f #f ())
(3991 load 3990 10 ())
(3992 evaluation #f #f ())
(3993 eval-from-file 3992 10 ())
(3994 evaluation #f #f ())
(3995 load-into 3994 10 ())
(3996 evaluation #f #f ())
(3997 eval 3996 10 ())
(3998 scheme #f #f ())
(3999 display-conditions #f #f ())
(4000 limited-write 3999 10 ())
(4001 recur 4000 31 ())
(4002 #f 4001 167 ())
(4003 #f 4002 53 ())
(4004 display-conditions #f #f ())
(4005 &disclose-condition 4004 57 ())
(4006 display-conditions #f #f ())
(4007 display-conditions #f #f ())
(4008 display-conditions #f #f ())
(4009 display-conditions #f #f ())
(4010 display-conditions #f #f ())
(4011 really-display-condition 4010 10 ())
(4012 #f 4011 264 ())
(4013 display-conditions #f #f ())
(4014 display-condition 4013 33 ())
(4015 #f 4014 24 ())
(4016 mini-command #f #f ())
(4017 read-string 4016 10 ())
(4018 loop 4017 31 ())
(4019 mini-command #f #f ())
(4020 mini-load 4019 10 ())
(4021 mini-command #f #f ())
(4022 command-processor 4021 10 ())
(4023 loop 4022 95 ())
(4024 #f 4023 23 ())
(4025 #f 4024 21 ())
(4026 #f 4025 74 ())
(4027 #f 4024 42 ())
(4028 #f 4027 81 ())
(4029 #f 4027 217 ())
(4030 #f 4027 303 ())
(4031 enum-case #f #f ())
(4032 scheduler #f #f ())
(4033 decrement-counter! 4032 10 ())
(4034 scheduler #f #f ())
(4035 increment-counter! 4034 10 ())
(4036 scheduler #f #f ())
(4037 scheduler #f #f ())
(4038 make-counter 4037 10 ())
(4039 scheduler #f #f ())
(4040 round-robin-event-handler 4039 10 ())
(4041 thread-event-handler 4040 24 ())
(4042 asynchronous-event-handler 4040 26 ())
(4043 next-thread 4040 28 ())
(4044 scheduler #f #f ())
(4045 run-threads-with-housekeeper 4044 10 ())
(4046 loop 4045 65 ())
(4047 scheduler #f #f ())
(4048 run-threads 4047 10 ())
(4049 loop 4048 60 ())
(4050 root-scheduler #f #f ())
(4051 spawn-output-forcers 4050 10 ())
(4052 root-scheduler #f #f ())
(4053 call-when-deadlocked! 4052 10 ())
(4054 root-scheduler #f #f ())
(4055 root-scheduler #f #f ())
(4056 root-scheduler #f #f ())
(4057 root-scheduler #f #f ())
(4058 root-scheduler #f #f ())
(4059 do-some-waiting 4058 10 ())
(4060 root-scheduler #f #f ())
(4061 root-wait 4060 10 ())
(4062 root-scheduler #f #f ())
(4063 scheme-exit-now 4062 10 ())
(4064 root-scheduler #f #f ())
(4065 root-scheduler #f #f ())
(4066 cheap-display-condition 4065 10 ())
(4067 #f 4066 182 ())
(4068 root-scheduler #f #f ())
(4069 root-handler 4068 10 ())
(4070 root-scheduler #f #f ())
(4071 make-root-event-handler 4070 10 ())
(4072 #f 4071 127 ())
(4073 #f 4071 142 ())
(4074 root-scheduler #f #f ())
(4075 root-scheduler 4074 10 ())
(4076 #f 4075 38 ())
(4077 #f 4076 36 ())
(4078 #f 4076 58 ())
(4079 usual-resumer #f #f ())
(4080 usual-resumer #f #f ())
(4081 initialize-rts 4080 10 ())
(4082 #f 4081 41 ())
(4083 #f 4082 20 ())
(4084 #f 4083 62 ())
(4085 #f 4084 13 ())
(4086 usual-resumer #f #f ())
(4087 usual-resumer 4086 10 ())
(4088 #f 4087 16 ())
(4089 #f 4088 29 ())
(4090 initial-system #f #f ())
(4091 make-tower 4090 10 ())
(4092 initial-system #f #f ())
(4093 make-initial-package 4092 10 ())
(4094 #f 4093 27 ())
(4095 initial-system #f #f ())
(4096 initialize-interaction-environment! 4095 10 ())
(4097 initial-system #f #f ())
(4098 make-built-in-structures 4097 10 ())
(4099 #f 4098 50 ())
(4100 #f 4098 84 ())
(4101 initial-system #f #f ())
(4102 start 4101 10 ())
(4103 #f 4102 16 ())
(4104 #f 4103 19 ())
(4105 #f 4104 84 ())
(4106 usual-macros #f #f ())
(4107 find-free-names-in-syntax-rules 4106 10 ())
(4108 meta-variables 4107 18 ())
(4109 free-names 4107 20 ())
(4110 loop##556 4107 36 ())
(4111 usual-macros #f #f ())
(4112 usual-macros #f #f ())
(4113 segment-tail 4112 10 ())
(4114 loop 4113 24 ())
(4115 usual-macros #f #f ())
(4116 segment-depth 4115 10 ())
(4117 usual-macros #f #f ())
(4118 segment-template? 4117 10 ())
(4119 usual-macros #f #f ())
(4120 segment-pattern? 4119 10 ())
(4121 usual-macros #f #f ())
(4122 process-rules 4121 10 ())
(4123 #f 4122 643 ())
(4124 #f 4122 670 ())
(4125 #f 4124 122 ())
(4126 #f 4122 706 ())
(4127 #f 4122 727 ())
(4128 #f 4122 756 ())
(4129 #f 4128 126 ())
(4130 #f 4122 786 ())
(4131 loop##560 4130 333 ())
(4132 #f 4122 810 ())
(4133 #f 4122 831 ())
(4134 usual-macros #f #f ())
(4135 #f 4134 14 ())
(4136 usual-macros #f #f ())
(4137 #f 4136 14 ())
(4138 #f 4137 235 ())
(4139 #f 4137 256 ())
(4140 #f 4137 282 ())
(4141 #f 4137 306 ())
(4142 #f 4141 33 ())
(4143 #f 4142 33 ())
(4144 #f 4137 329 ())
(4145 #f 4144 39 ())
(4146 #f 4137 350 ())
(4147 usual-macros #f #f ())
(4148 case-clause? 4147 10 ())
(4149 usual-macros #f #f ())
(4150 #f 4149 14 ())
(4151 #f 4150 41 ())
(4152 #f 4150 256 ())
(4153 usual-macros #f #f ())
(4154 #f 4153 14 ())
(4155 usual-macros #f #f ())
(4156 specs? 4155 10 ())
(4157 usual-macros #f #f ())
(4158 #f 4157 14 ())
(4159 usual-macros #f #f ())
(4160 #f 4159 14 ())
(4161 usual-macros #f #f ())
(4162 do-spec? 4161 10 ())
(4163 usual-macros #f #f ())
(4164 #f 4163 14 ())
(4165 #f 4164 247 ())
(4166 usual-macros #f #f ())
(4167 #f 4166 14 ())
(4168 recur 4167 98 ())
(4169 usual-macros #f #f ())
(4170 #f 4169 14 ())
(4171 usual-macros #f #f ())
(4172 usual-transform 4171 10 ())
(4173 usual-macros #f #f ())
(4174 define-usual-macro 4173 10 ())
(4175 usual-macros #f #f ())
(4176 strong #f #f ())
(4177 pop-vertex-edge! 4176 10 ())
(4178 strong #f #f ())
(4179 follow-edge 4178 10 ())
(4180 strong #f #f ())
(4181 unwind-stack 4180 10 ())
(4182 loop 4181 30 ())
(4183 strong #f #f ())
(4184 end-vertex 4183 10 ())
(4185 strong #f #f ())
(4186 get-strong 4185 10 ())
(4187 strong #f #f ())
(4188 do-vertex 4187 10 ())
(4189 strong #f #f ())
(4190 make-vertices 4189 10 ())
(4191 maybe-slot 4190 16 ())
(4192 #f 4190 38 ())
(4193 #f 4190 71 ())
(4194 strong #f #f ())
(4195 make-vertex 4194 10 ())
(4196 strong #f #f ())
(4197 vertex? 4196 10 ())
(4198 strong #f #f ())
(4199 vertex-data 4198 10 ())
(4200 strong #f #f ())
(4201 set-vertex-edges! 4200 10 ())
(4202 strong #f #f ())
(4203 vertex-edges 4202 10 ())
(4204 strong #f #f ())
(4205 set-vertex-stack! 4204 10 ())
(4206 strong #f #f ())
(4207 vertex-stack 4206 10 ())
(4208 strong #f #f ())
(4209 set-vertex-index! 4208 10 ())
(4210 strong #f #f ())
(4211 vertex-index 4210 10 ())
(4212 strong #f #f ())
(4213 set-vertex-parent! 4212 10 ())
(4214 strong #f #f ())
(4215 vertex-parent 4214 10 ())
(4216 strong #f #f ())
(4217 set-vertex-lowpoint! 4216 10 ())
(4218 strong #f #f ())
(4219 vertex-lowpoint 4218 10 ())
(4220 strong #f #f ())
(4221 really-make-vertex 4220 10 ())
(4222 strong #f #f ())
(4223 strong #f #f ())
(4224 find-next-vertex 4223 10 ())
(4225 loop##583 4224 18 ())
(4226 strong #f #f ())
(4227 strongly-connected-components 4226 10 ())
(4228 loop 4227 62 ())
(4229 #f 4228 51 ())
(4230 usages #f #f ())
(4231 insert-aliases 4230 10 ())
(4232 loop 4231 25 ())
(4233 usages #f #f ())
(4234 make-form 4233 10 ())
(4235 usages #f #f ())
(4236 #f 4235 14 ())
(4237 usages #f #f ())
(4238 form? 4237 10 ())
(4239 usages #f #f ())
(4240 form-node 4239 10 ())
(4241 usages #f #f ())
(4242 set-form-aliases! 4241 10 ())
(4243 usages #f #f ())
(4244 form-aliases 4243 10 ())
(4245 usages #f #f ())
(4246 set-form-unaliased?! 4245 10 ())
(4247 usages #f #f ())
(4248 form-unaliased? 4247 10 ())
(4249 usages #f #f ())
(4250 set-form-free! 4249 10 ())
(4251 usages #f #f ())
(4252 form-free 4251 10 ())
(4253 usages #f #f ())
(4254 set-form-temp! 4253 10 ())
(4255 usages #f #f ())
(4256 form-temp 4255 10 ())
(4257 usages #f #f ())
(4258 really-make-form 4257 10 ())
(4259 usages #f #f ())
(4260 usages #f #f ())
(4261 topologically-sort 4260 10 ())
(4262 #f 4261 23 ())
(4263 #f 4262 9 ())
(4264 #f 4262 28 ())
(4265 usages #f #f ())
(4266 maybe-make-aliased 4265 10 ())
(4267 usages #f #f ())
(4268 stuff-count 4267 10 ())
(4269 #f 4268 13 ())
(4270 usages #f #f ())
(4271 sort-forms 4270 10 ())
(4272 #f 4271 95 ())
(4273 #f 4271 140 ())
(4274 usages #f #f ())
(4275 usages #f #f ())
(4276 usages #f #f ())
(4277 usages #f #f ())
(4278 usages #f #f ())
(4279 usages #f #f ())
(4280 usages #f #f ())
(4281 usages #f #f ())
(4282 usages #f #f ())
(4283 usages #f #f ())
(4284 usage-incrementator 4283 10 ())
(4285 #f 4284 17 ())
(4286 usages #f #f ())
(4287 package-usage? 4286 10 ())
(4288 usages #f #f ())
(4289 make-package-usage 4288 10 ())
(4290 usages #f #f ())
(4291 make-usage 4290 10 ())
(4292 usages #f #f ())
(4293 usage? 4292 10 ())
(4294 usages #f #f ())
(4295 usage-name-node 4294 10 ())
(4296 usages #f #f ())
(4297 set-reference! 4296 10 ())
(4298 usages #f #f ())
(4299 usage-reference-count 4298 10 ())
(4300 usages #f #f ())
(4301 set-operator! 4300 10 ())
(4302 usages #f #f ())
(4303 usage-operator-count 4302 10 ())
(4304 usages #f #f ())
(4305 set-assignment! 4304 10 ())
(4306 usages #f #f ())
(4307 usage-assignment-count 4306 10 ())
(4308 usages #f #f ())
(4309 really-make-usage 4308 10 ())
(4310 usages #f #f ())
(4311 usages #f #f ())
(4312 #f 4311 18 ())
(4313 usages #f #f ())
(4314 #f 4313 18 ())
(4315 usages #f #f ())
(4316 #f 4315 18 ())
(4317 usages #f #f ())
(4318 #f 4317 18 ())
(4319 usages #f #f ())
(4320 #f 4319 18 ())
(4321 usages #f #f ())
(4322 #f 4321 18 ())
(4323 usages #f #f ())
(4324 analyze-letrec 4323 10 ())
(4325 #f 4324 13 ())
(4326 usages #f #f ())
(4327 #f 4326 18 ())
(4328 usages #f #f ())
(4329 #f 4328 18 ())
(4330 usages #f #f ())
(4331 #f 4330 18 ())
(4332 #f 4331 41 ())
(4333 usages #f #f ())
(4334 #f 4333 16 ())
(4335 usages #f #f ())
(4336 add-if-free 4335 10 ())
(4337 usages #f #f ())
(4338 #f 4337 16 ())
(4339 usages #f #f ())
(4340 usages #f #f ())
(4341 usages #f #f ())
(4342 usages #f #f ())
(4343 usages #f #f ())
(4344 usages #f #f ())
(4345 nothing 4344 10 ())
(4346 usages #f #f ())
(4347 define-usage-analyzer 4346 10 ())
(4348 usages #f #f ())
(4349 #f 4348 14 ())
(4350 usages #f #f ())
(4351 analyze-nodes 4350 10 ())
(4352 #f 4351 16 ())
(4353 usages #f #f ())
(4354 analyze 4353 10 ())
(4355 usages #f #f ())
(4356 find-node-usages 4355 10 ())
(4357 #f 4356 42 ())
(4358 #f 4356 61 ())
(4359 usages #f #f ())
(4360 maybe-update-known-type 4359 10 ())
(4361 usages #f #f ())
(4362 find-usages 4361 10 ())
(4363 #f 4362 35 ())
(4364 #f 4362 64 ())
(4365 #f 4364 34 ())
(4366 #f 4362 93 ())
(4367 inline #f #f ())
(4368 inline #f #f ())
(4369 inline #f #f ())
(4370 inline #f #f ())
(4371 inline #f #f ())
(4372 inline #f #f ())
(4373 get-qualified-env 4372 10 ())
(4374 inline #f #f ())
(4375 qualified->name 4374 10 ())
(4376 recur 4375 25 ())
(4377 inline #f #f ())
(4378 inline #f #f ())
(4379 inline #f #f ())
(4380 reconstitute-name 4379 10 ())
(4381 inline #f #f ())
(4382 reconstitute 4381 10 ())
(4383 label 4382 26 ())
(4384 inline #f #f ())
(4385 make-substitution 4384 10 ())
(4386 #f 4385 44 ())
(4387 inline #f #f ())
(4388 inline-transform 4387 10 ())
(4389 #f 4388 69 ())
(4390 #f 4388 89 ())
(4391 inline #f #f ())
(4392 remove-bindings 4391 10 ())
(4393 label 4392 25 ())
(4394 inline #f #f ())
(4395 unused-name 4394 10 ())
(4396 loop##607 4395 59 ())
(4397 #f 4396 20 ())
(4398 inline #f #f ())
(4399 clean-lookup 4398 10 ())
(4400 inline #f #f ())
(4401 clean-lambda 4400 10 ())
(4402 #f 4401 41 ())
(4403 recur 4401 102 ())
(4404 inline #f #f ())
(4405 clean-node 4404 10 ())
(4406 #f 4405 147 ())
(4407 #f 4405 331 ())
(4408 inline #f #f ())
(4409 make-inline-transform 4408 10 ())
(4410 #f 4409 54 ())
(4411 #f 4409 100 ())
(4412 loop##608 4411 14 ())
(4413 for-reification #f #f ())
(4414 package-define-static! 4413 10 ())
(4415 for-reification #f #f ())
(4416 transform 4415 10 ())
(4417 for-reification #f #f ())
(4418 package 4417 10 ())
(4419 loop##610 4418 89 ())
(4420 for-reification #f #f ())
(4421 simple-interface 4420 10 ())
(4422 #f 4421 15 ())
(4423 for-reification #f #f ())
(4424 primop 4423 10 ())
(4425 for-reification #f #f ())
(4426 operator 4425 10 ())
(4427 locks #f #f ())
(4428 locks #f #f ())
(4429 set-lock-owner-uid! 4428 10 ())
(4430 locks #f #f ())
(4431 lock-owner-uid 4430 10 ())
(4432 locks #f #f ())
(4433 lock-queue 4432 10 ())
(4434 locks #f #f ())
(4435 lock-uid 4434 10 ())
(4436 locks #f #f ())
(4437 really-make-lock 4436 10 ())
(4438 locks #f #f ())
(4439 locks #f #f ())
(4440 lock? 4439 10 ())
(4441 locks #f #f ())
(4442 next-uid 4441 10 ())
(4443 #f 4442 6 ())
(4444 locks #f #f ())
(4445 make-lock 4444 10 ())
(4446 locks #f #f ())
(4447 obtain-lock 4446 10 ())
(4448 lose 4447 31 ())
(4449 locks #f #f ())
(4450 maybe-obtain-lock 4449 10 ())
(4451 lose 4450 31 ())
(4452 locks #f #f ())
(4453 release-lock 4452 10 ())
(4454 lose 4453 31 ())
(4455 types #f #f ())
(4456 types #f #f ())
(4457 types #f #f ())
(4458 types #f #f ())
(4459 types #f #f ())
(4460 types #f #f ())
(4461 types #f #f ())
(4462 types #f #f ())
(4463 types #f #f ())
(4464 types #f #f ())
(4465 types #f #f ())
(4466 types #f #f ())
(4467 types #f #f ())
(4468 types #f #f ())
(4469 types #f #f ())
(4470 types #f #f ())
(4471 types #f #f ())
(4472 types #f #f ())
(4473 types #f #f ())
(4474 types #f #f ())
(4475 types #f #f ())
(4476 types #f #f ())
(4477 procedure 4476 10 ())
(4478 types #f #f ())
(4479 types #f #f ())
(4480 types #f #f ())
(4481 types #f #f ())
(4482 defpackage #f #f ())
(4483 note-name! 4482 10 ())
(4484 defpackage #f #f ())
(4485 set-verify-later! 4484 10 ())
(4486 defpackage #f #f ())
(4487 verify-later! 4486 10 ())
(4488 defpackage #f #f ())
(4489 *verify-later!* 4488 10 ())
(4490 defpackage #f #f ())
(4491 defpackage #f #f ())
(4492 loser 4491 10 ())
(4493 defpackage #f #f ())
(4494 make-a-package 4493 10 ())
(4495 scan-package #f #f ())
(4496 check-structure 4495 10 ())
(4497 #f 4496 40 ())
(4498 scan-package #f #f ())
(4499 package-optimizer-names 4498 10 ())
(4500 #f 4499 40 ())
(4501 #f 4499 89 ())
(4502 scan-package #f #f ())
(4503 read-files 4502 10 ())
(4504 #f 4503 44 ())
(4505 scan-package #f #f ())
(4506 package-source 4505 10 ())
(4507 #f 4506 65 ())
(4508 scan-package #f #f ())
(4509 collect-packages 4508 10 ())
(4510 recur 4509 68 ())
(4511 #f 4510 184 ())
(4512 compile-packages #f #f ())
(4513 compile-packages #f #f ())
(4514 compile-packages #f #f ())
(4515 make-define-primitive-node 4514 10 ())
(4516 compile-packages #f #f ())
(4517 define-primitives 4516 10 ())
(4518 #f 4517 37 ())
(4519 #f 4517 70 ())
(4520 compile-packages #f #f ())
(4521 define-usual-transform 4520 10 ())
(4522 compile-packages #f #f ())
(4523 expand-package 4522 10 ())
(4524 #f 4523 53 ())
(4525 #f 4523 82 ())
(4526 #f 4523 143 ())
(4527 #f 4526 25 ())
(4528 #f 4527 23 ())
(4529 compile-packages #f #f ())
(4530 compile-package 4529 10 ())
(4531 module-system #f #f ())
(4532 analysis #f #f ())
(4533 analysis #f #f ())
(4534 analysis #f #f ())
(4535 analysis #f #f ())
(4536 analysis #f #f ())
(4537 analysis #f #f ())
(4538 package-lookup-type 4537 10 ())
(4539 analysis #f #f ())
(4540 analysis #f #f ())
(4541 require 4540 10 ())
(4542 analysis #f #f ())
(4543 simple-literal? 4542 10 ())
(4544 analysis #f #f ())
(4545 analysis #f #f ())
(4546 analysis #f #f ())
(4547 primitive-proc? 4546 10 ())
(4548 analysis #f #f ())
(4549 really-simple-call? 4548 10 ())
(4550 analysis #f #f ())
(4551 static-value 4550 10 ())
(4552 analysis #f #f ())
(4553 #f 4552 14 ())
(4554 analysis #f #f ())
(4555 #f 4554 14 ())
(4556 loop 4555 28 ())
(4557 analysis #f #f ())
(4558 #f 4557 14 ())
(4559 analysis #f #f ())
(4560 #f 4559 14 ())
(4561 analysis #f #f ())
(4562 #f 4561 14 ())
(4563 analysis #f #f ())
(4564 #f 4563 14 ())
(4565 analysis #f #f ())
(4566 #f 4565 14 ())
(4567 analysis #f #f ())
(4568 #f 4567 14 ())
(4569 analysis #f #f ())
(4570 #f 4569 14 ())
(4571 analysis #f #f ())
(4572 #f 4571 14 ())
(4573 analysis #f #f ())
(4574 #f 4573 14 ())
(4575 analysis #f #f ())
(4576 #f 4575 14 ())
(4577 analysis #f #f ())
(4578 #f 4577 14 ())
(4579 analysis #f #f ())
(4580 define-analyzer 4579 10 ())
(4581 analysis #f #f ())
(4582 #f 4581 14 ())
(4583 analysis #f #f ())
(4584 simple-list? 4583 10 ())
(4585 analysis #f #f ())
(4586 simple? 4585 10 ())
(4587 analysis #f #f ())
(4588 analysis #f #f ())
(4589 simple-lambda? 4588 10 ())
(4590 #f 4589 133 ())
(4591 analysis #f #f ())
(4592 inlinable-rhs? 4591 10 ())
(4593 analysis #f #f ())
(4594 analyze-form 4593 10 ())
(4595 analysis #f #f ())
(4596 analyze-forms 4595 10 ())
(4597 #f 4596 40 ())
(4598 analysis #f #f ())
(4599 #f 4598 14 ())
(4600 ensures-loaded #f #f ())
(4601 ensure-loaded 4600 10 ())
(4602 #f 4601 64 ())
(4603 #f 4602 70 ())
(4604 #f 4601 79 ())
(4605 #f #f #f ())
(4606 #f 4605 6 ())
(4607 get-location 4606 6 ())
(4608 #f 4606 15307 ())
(4609 #f 4606 15369 ())
(4610 #f 4606 15513 ())
(4611 #f 4606 15660 ())
(4612 #f 4606 15763 ())
(4613 conc 4612 42 ())
(4614 #f 4613 19 ())
(4615 #f 4606 17368 ())
(4616 loop 4615 120 ())
(4617 #f 4615 208 ())
(4618 #f 4615 244 ())
(4619 #f 4615 448 ())
(4620 #f 4615 517 ())
(4621 #f 4606 17836 ())
(4622 mem? 4621 212 ())
(4623 every? 4621 214 ())
(4624 #f 4621 234 ())
(4625 #f 4621 313 ())
(4626 #f 4606 18075 ())
(4627 mem? 4626 84 ())
(4628 loop##639 4626 105 ())
(4629 #f 4606 18137 ())
(4630 #f 4606 18199 ())
(4631 #f 4606 18390 ())
(4632 #f 4606 24430 ())
(4633 #f 4606 34442 ())
(4634 #f 4633 494 ())
(4635 #f 4606 35178 ())
(4636 #f 4606 35505 ())
(4637 #f 4606 35652 ())
(4638 #f 4606 35887 ())
(4639 #f 4606 35990 ())
(4640 loop 4639 172 ())
(4641 #f 4639 307 ())
(4642 #f 4639 349 ())
(4643 #f 4639 559 ())
(4644 #f 4639 866 ())
(4645 #f 4606 36225 ())
(4646 #f 4606 36827 ())
(4647 #f 4606 36889 ())
(4648 #f 4606 36951 ())
(4649 #f 4606 38188 ())
(4650 loop 4649 108 ())
(4651 #f 4606 38394 ())
(4652 loop 4651 108 ())
(4653 #f 4606 38559 ())
(4654 loop 4653 108 ())
(4655 #f 4606 38683 ())
(4656 loop 4655 108 ())
(4657 #f 4606 38807 ())
(4658 loop 4657 108 ())
(4659 #f 4606 38931 ())
(4660 loop 4659 108 ())
(4661 #f 4606 39055 ())
(4662 loop 4661 108 ())
(4663 #f 4606 39179 ())
(4664 loop 4663 108 ())
(4665 #f 4606 39303 ())
(4666 loop 4665 108 ())
(4667 #f 4606 42151 ())
(4668 #f 4606 42350 ())
(4669 #f 4606 42412 ())
(4670 #f 4606 42474 ())
(4671 #f 4606 42659 ())
(4672 #f 4606 42933 ())
(4673 #f 4606 47291 ())
(4674 loop 4673 108 ())
(4675 #f 4606 48683 ())
(4676 #f 4606 48882 ())
(4677 #f 4606 49125 ())
(4678 #f 4606 49187 ())
(4679 #f 4606 49249 ())
(4680 #f 4679 164 ())
(4681 #f 4606 49311 ())
(4682 #f 4681 355 ())
(4683 #f 4681 449 ())
(4684 #f 4606 49724 ())
(4685 #f 4606 49786 ())
(4686 #f 4685 198 ())
(4687 parse-package-clauses 4606 49857 ())
(4688 loop 4687 94 ())
(4689 #f 4606 49870 ())
(4690 #f 4689 214 ())
(4691 #f 4606 50191 ())
(4692 #f 4606 50294 ())
(4693 #f 4606 50356 ())
(4694 loop 4693 42 ())
(4695 #f 4606 50500 ())
(4696 #f 4606 50603 ())
(4697 #f 4606 50706 ())
(4698 #f 4606 50809 ())
(4699 loop 4698 54 ())
(4700 #f 4698 96 ())
(4701 #f 4698 125 ())
(4702 #f 4606 50912 ())
(4703 #f 4606 52158 ())
(4704 #f 4606 52328 ())
(4705 #f #f #f ())
-
