; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 record-types)
(17 export-the-record-type)
(18 define-record-types)
(19 methods)
(20 number-i/o)
(21 fluids)
(22 wind)
(23 session-data)
(24 i/o)
(25 channel-i/o)
(26 channel-ports)
(27 conditions)
(28 writing)
(29 reading)
(30 scheme-level-2)
(31 features)
(32 templates)
(33 continuations)
(34 more-types)
(35 enumerated)
(36 architecture)
(37 vm-data)
(38 exceptions)
(39 interrupts)
(40 threads)
(41 proposals)
(42 scheduler)
(43 root-scheduler)
(44 enum-case)
(45 queues)
(46 condvars)
(47 usual-resumer)
(48 weak)
(49 display-conditions)
(50 meta-types)
(51 bindings)
(52 names)
(53 thingies)
(54 nodes)
(55 compiler-envs)
(56 syntactic)
(57 usual-macros)
(58 var-utilities)
(59 debug-data)
(60 segments)
(61 primops)
(62 reconstruction)
(63 compiler)
(64 frames)
(65 reading-forms)
(66 flat-environments)
(67 interfaces)
(68 packages)
(69 scan-package)
(70 optimizer)
(71 compile-packages)
(72 defpackage)
(73 types)
(74 module-system)
(75 usages)
(76 analysis)
(77 inline)
(78 strong)
(79 tables)
(80 filenames)
(81 environments)
(82 evaluation)
(83 ensures-loaded)
(84 for-reification)
(85 scheme)
(86 mini-command)
(87 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (flat-lambda . 14))
(14 (primitive-procedure . 14))
(15 (define . 14))
(16 (if . 14))
(17 (pure-letrec . 14))
(18 (letrec-syntax . 14))
(19 (%file-name% . 14))
(20 (let-syntax . 14))
(21 (structure-ref . 14))
(22 (loophole . 14))
(23 (letrec . 14))
(24 (lap . 14))
(25 (set! . 14))
(26 (call . 14))
(27 (atan . 14))
(28 (set-location-defined?! . 14))
(29 (acos . 14))
(30 (vm-extension . 14))
(31 (asin . 14))
(32 (location-defined? . 14))
(33 (time . 14))
(34 (template-set! . 14))
(35 (set-current-proposal! . 14))
(36 (cons . 14))
(37 (wait . 14))
(38 (trap . 14))
(39 (assq . 14))
(40 (current-proposal . 14))
(41 (make-weak-pointer . 14))
(42 (lookup-shared-binding . 14))
(43 (push . 14))
(44 (provisional-set-contents! . 14))
(45 (set-contents! . 14))
(46 (read-char . 14))
(47 (provisional-contents . 14))
(48 (make-cell . 14))
(49 (sqrt . 14))
(50 (* . 14))
(51 (contents . 14))
(52 (+ . 14))
(53 (peek-char . 14))
(54 (- . 14))
(55 (continuation-set! . 14))
(56 (/ . 14))
(57 (weak-pointer? . 14))
(58 (atan1 . 14))
(59 (atan2 . 14))
(60 (quotient . 14))
(61 (close-channel . 14))
(62 (channel-abort . 14))
(63 (char? . 14))
(64 (< . 14))
(65 (= . 14))
(66 (provisional-set-port-data! . 14))
(67 (cell? . 14))
(68 (> . 14))
(69 (make-location . 14))
(70 (imag-part . 14))
(71 (set-port-data! . 14))
(72 (make-template . 14))
(73 (real? . 14))
(74 (real-part . 14))
(75 (provisional-port-data . 14))
(76 (record-length . 14))
(77 (port-data . 14))
(78 (pair? . 14))
(79 (provisional-set-port-lock! . 14))
(80 (make-port . 14))
(81 (set-port-lock! . 14))
(82 (bit-count . 14))
(83 (provisional-checked-record-ref . 14))
(84 (return-from-exception . 14))
(85 (provisional-port-lock . 14))
(86 (location? . 14))
(87 (checked-record-ref . 14))
(88 (channel-maybe-read . 14))
(89 (add-finalizer! . 14))
(90 (rational? . 14))
(91 (template? . 14))
(92 (port-lock . 14))
(93 (vector-length . 14))
(94 (make-continuation . 14))
(95 (provisional-shared-binding-ref . 14))
(96 (string-length . 14))
(97 (shared-binding-ref . 14))
(98 (port? . 14))
(99 (angle . 14))
(100 (false . 14))
(101 (remainder . 14))
(102 (continuation? . 14))
(103 (channel-ready? . 14))
(104 (binary-reduce1 . 14))
(105 (binary-reduce2 . 14))
(106 (char<? . 14))
(107 (char=? . 14))
(108 (<= . 14))
(109 (magnitude . 14))
(110 (>= . 14))
(111 (with-continuation . 14))
(112 (floor . 14))
(113 (provisional-checked-record-set! . 14))
(114 (apply . 14))
(115 (memory-status . 14))
(116 (checked-record-set! . 14))
(117 (inexact->exact . 14))
(118 (exact->inexact . 14))
(119 (error . 14))
(120 (extended-number-length . 14))
(121 (open-channels-list . 14))
(122 (provisional-shared-binding-set! . 14))
(123 (channel-id . 14))
(124 (shared-binding-set! . 14))
(125 (numerator . 14))
(126 (eof-object . 14))
(127 (byte-vector-length . 14))
(128 (record-ref . 14))
(129 (make-polar . 14))
(130 (write-char . 14))
(131 (symbol->string . 14))
(132 (exact? . 14))
(133 (push-false . 14))
(134 (provisional-vector-ref . 14))
(135 (vector-ref . 14))
(136 (set-current-thread! . 14))
(137 (provisional-set-port-index! . 14))
(138 (immutable? . 14))
(139 (set-exception-handlers! . 14))
(140 (string-ref . 14))
(141 (set-port-index! . 14))
(142 (provisional-set-port-limit! . 14))
(143 (make-shared-binding . 14))
(144 (current-thread . 14))
(145 (provisional-port-index . 14))
(146 (channel-status . 14))
(147 (set-port-limit! . 14))
(148 (shared-binding-name . 14))
(149 (port-index . 14))
(150 (make-immutable! . 14))
(151 (byte-vector-logging-ref . 14))
(152 (set-enabled-interrupts! . 14))
(153 (provisional-port-limit . 14))
(154 (port-limit . 14))
(155 (ascii->char . 14))
(156 (char->ascii . 14))
(157 (undefine-shared-binding . 14))
(158 (attempt-copy-bytes! . 14))
(159 (record-set! . 14))
(160 (shared-binding? . 14))
(161 (eof-object? . 14))
(162 (set-interrupt-handlers! . 14))
(163 (record . 14))
(164 (schedule-interrupt . 14))
(165 (channel-maybe-write . 14))
(166 (provisional-vector-set! . 14))
(167 (extended-number-ref . 14))
(168 (vector-set! . 14))
(169 (copy-bytes! . 14))
(170 (string-set! . 14))
(171 (call-external-value . 14))
(172 (values . 14))
(173 (intern . 14))
(174 (vector . 14))
(175 (write-image-low . 14))
(176 (provisional-byte-vector-ref . 14))
(177 (byte-vector-logging-set! . 14))
(178 (byte-vector-ref . 14))
(179 (make-double . 14))
(180 (provisional-set-location-id! . 14))
(181 (make-record . 14))
(182 (set-location-id! . 14))
(183 (provisional-location-id . 14))
(184 (location-id . 14))
(185 (bitwise-and . 14))
(186 (eq? . 14))
(187 (double? . 14))
(188 (extended-number-set! . 14))
(189 (make-vector . 14))
(190 (record? . 14))
(191 (provisional-set-port-buffer! . 14))
(192 (make-string . 14))
(193 (set-port-buffer! . 14))
(194 (primitive-catch . 14))
(195 (string-hash . 14))
(196 (provisional-byte-vector-set! . 14))
(197 (template-length . 14))
(198 (provisional-port-buffer . 14))
(199 (number? . 14))
(200 (port-buffer . 14))
(201 (byte-vector-set! . 14))
(202 (bitwise-ior . 14))
(203 (provisional-set-car! . 14))
(204 (provisional-set-cdr! . 14))
(205 (set-car! . 14))
(206 (closure-env . 14))
(207 (vector? . 14))
(208 (bitwise-not . 14))
(209 (set-cdr! . 14))
(210 (provisional-car . 14))
(211 (symbol? . 14))
(212 (string? . 14))
(213 (provisional-cdr . 14))
(214 (car . 14))
(215 (bitwise-xor . 14))
(216 (cdr . 14))
(217 (find-all-records . 14))
(218 (continuation-length . 14))
(219 (log . 14))
(220 (message . 14))
(221 (tan . 14))
(222 (collect . 14))
(223 (cos . 14))
(224 (channel-os-index . 14))
(225 (provisional-set-port-status! . 14))
(226 (make-extended-number . 14))
(227 (set-port-status! . 14))
(228 (sin . 14))
(229 (exp . 14))
(230 (provisional-port-status . 14))
(231 (pop . 14))
(232 (port-status . 14))
(233 (return-from-callback . 14))
(234 (make-byte-vector . 14))
(235 (weak-pointer-ref . 14))
(236 (call-with-values . 14))
(237 (denominator . 14))
(238 (reverse-list->string . 14))
(239 (extended-number? . 14))
(240 (shared-binding-is-import? . 14))
(241 (provisional-cell-ref . 14))
(242 (find-all . 14))
(243 (cell-ref . 14))
(244 (byte-vector? . 14))
(245 (string=? . 14))
(246 (open-channel . 14))
(247 (channel? . 14))
(248 (unassigned-check . 14))
(249 (make-rectangular . 14))
(250 (set-session-data! . 14))
(251 (maybe-commit . 14))
(252 (template-ref . 14))
(253 (make-closure . 14))
(254 (session-data . 14))
(255 (integer? . 14))
(256 (signal-condition . 14))
(257 (provisional-set-port-pending-eof?! . 14))
(258 (port-handler . 14))
(259 (set-port-pending-eof?! . 14))
(260 (arithmetic-shift . 14))
(261 (provisional-port-pending-eof? . 14))
(262 (provisional-cell-set! . 14))
(263 (complex? . 14))
(264 (port-pending-eof? . 14))
(265 (cell-set! . 14))
(266 (binary-comparison-reduce2 . 14))
(267 (closure? . 14))
(268 (continuation-ref . 14))
(269 (closure-template . 14))
(270 (current-cont . 14))
(271 (char->integer . 14))
(272 (integer->char . 14))
(273 (ascii-limit . 14))
(274 (ascii-whitespaces . 14))
(275 (procedure? . 14))
(276 (invoke-closure . 14))
(277 (primitive-cwcc . 14))
(278 (make-undefined-location . 14))
(279 (location-assigned? . 14))
(280 (cell-unassigned? . 14))
(281 (vector-unassigned? . 14))
(282 (string-copy . 14))
(283 (string->symbol . 14))
(284 (input-port? . 14))
(285 (output-port? . 14))
(286 (record-type . 14))
(287 (make-code-vector . 14))
(288 (code-vector? . 14))
(289 (code-vector-length . 14))
(290 (code-vector-ref . 14))
(291 (code-vector-set! . 14))
(292 (lookup-imported-binding . 14))
(293 (lookup-exported-binding . 14))
(294 (define-imported-binding . 14))
(295 (define-exported-binding . 14))
(296 (undefine-imported-binding . 14))
(297 (undefine-exported-binding . 14))
(298 (byte-vector . 14))
(299 (secret-length . 14))
(300 (debug-message . 14))
(301 (write-image . 14))
(302 (vector-prefix->list . 14))
(303 (empty-log . 14))
(304 (make-proposal . 14))
(305 (make-condition . 14))
(306 (signal . 14))
(307 (warn . 14))
(308 (note . 14))
(309 (syntax-error . 14))
(310 (call-error . 14))
(311 (case . 15))
(312 (quasiquote . 15))
(313 (syntax-rules . 15))
(314 (not . 15))
(315 (boolean? . 15))
(316 (eqv? . 15))
(317 (equal? . 15))
(318 (max . 15))
(319 (min . 15))
(320 (max-or-min . 15))
(321 (abs . 15))
(322 (zero? . 15))
(323 (positive? . 15))
(324 (negative? . 15))
(325 (even? . 15))
(326 (odd? . 15))
(327 (caar . 15))
(328 (cadr . 15))
(329 (cdar . 15))
(330 (cddr . 15))
(331 (caaar . 15))
(332 (caadr . 15))
(333 (cadar . 15))
(334 (caddr . 15))
(335 (cdaar . 15))
(336 (cdadr . 15))
(337 (cddar . 15))
(338 (cdddr . 15))
(339 (caaaar . 15))
(340 (caaadr . 15))
(341 (caadar . 15))
(342 (caaddr . 15))
(343 (cadaar . 15))
(344 (cadadr . 15))
(345 (caddar . 15))
(346 (cadddr . 15))
(347 (cdaaar . 15))
(348 (cdaadr . 15))
(349 (cdadar . 15))
(350 (cdaddr . 15))
(351 (cddaar . 15))
(352 (cddadr . 15))
(353 (cdddar . 15))
(354 (cddddr . 15))
(355 (null? . 15))
(356 (list . 15))
(357 (length . 15))
(358 (real-length . 15))
(359 (append . 15))
(360 (reverse . 15))
(361 (append-reverse . 15))
(362 (list-tail . 15))
(363 (list-ref . 15))
(364 (mem . 15))
(365 (memq . 15))
(366 (memv . 15))
(367 (member . 15))
(368 (ass . 15))
(369 (assv . 15))
(370 (assoc . 15))
(371 (list? . 15))
(372 (char>? . 15))
(373 (char>=? . 15))
(374 (char<=? . 15))
(375 (char-whitespace? . 15))
(376 (char-lower-case? . 15))
(377 (char-upper-case? . 15))
(378 (char-numeric? . 15))
(379 (char-alphabetic? . 15))
(380 (char-case-delta . 15))
(381 (make-character-map . 15))
(382 (upcase-map . 15))
(383 (char-upcase . 15))
(384 (downcase-map . 15))
(385 (char-downcase . 15))
(386 (char-ci-compare . 15))
(387 (char-ci=? . 15))
(388 (char-ci<? . 15))
(389 (char-ci<=? . 15))
(390 (char-ci>? . 15))
(391 (char-ci>=? . 15))
(392 (string . 15))
(393 (substring . 15))
(394 (string-append . 15))
(395 (string->list . 15))
(396 (list->string . 15))
(397 (string-fill! . 15))
(398 (make-string=? . 15))
(399 (string-ci=? . 15))
(400 (make-string<? . 15))
(401 (string<? . 15))
(402 (string-ci<? . 15))
(403 (string>? . 15))
(404 (string<=? . 15))
(405 (string>=? . 15))
(406 (string-ci>? . 15))
(407 (string-ci<=? . 15))
(408 (string-ci>=? . 15))
(409 (vector->list . 15))
(410 (list->vector . 15))
(411 (vector-fill! . 15))
(412 (map . 15))
(413 (map1 . 15))
(414 (map2+ . 15))
(415 (for-each . 15))
(416 (for-each1 . 15))
(417 (for-each2+ . 15))
(418 (delay . 15))
(419 (make-promise . 15))
(420 (force . 15))
(421 (unspecific . 15))
(422 (reduce . 15))
(423 (filter . 15))
(424 (pos . 15))
(425 (posq . 15))
(426 (posv . 15))
(427 (position . 15))
(428 (any . 15))
(429 (every . 15))
(430 (sublist . 15))
(431 (last . 15))
(432 (insert . 15))
(433 (fold . 15))
(434 (fold->2 . 15))
(435 (fold->3 . 15))
(436 (mvlet . 15))
(437 (mvlet-helper . 15))
(438 (copy-vars . 15))
(439 (mvlet* . 15))
(440 (inexact? . 15))
(441 (modulo . 15))
(442 (ceiling . 15))
(443 (truncate . 15))
(444 (round . 15))
(445 (gcd . 15))
(446 (euclid . 15))
(447 (lcm . 15))
(448 (expt . 15))
(449 (raise-to-integer-power . 15))
(450 (rationalize . 15))
(451 (simplest-rational . 15))
(452 (*record-type-uid* . 16))
(453 (*record-type* . 16))
(454 (make-record-type . 16))
(455 (record-type? . 16))
(456 (record-type-resumer . 16))
(457 (set-record-type-resumer! . 16))
(458 (record-type-uid . 16))
(459 (record-type-name . 16))
(460 (record-type-field-names . 16))
(461 (record-type-number-of-fields . 16))
(462 (record-type-discloser . 16))
(463 (set-record-type-discloser! . 16))
(464 (record-type-fields . 16))
(465 (record-field-index . 16))
(466 (record-constructor . 16))
(467 (record-accessor . 16))
(468 (record-modifier . 16))
(469 (record-predicate . 16))
(470 (define-record-discloser . 16))
(471 (make-default-record-discloser . 16))
(472 (disclose-record . 16))
(473 (define-record-resumer . 16))
(474 (default-record-resumer . 16))
(475 (initialize-records! . 16))
(476 (resume-record . 16))
(477 (:record-type . 16))
(478 (define-record-type . 18))
(479 (define-synchronized-record-type . 18))
(480 (define-constructor . 18))
(481 (define-accessors . 18))
(482 (define-accessor . 18))
(483 (ref-proc . 18))
(484 (set-proc . 18))
(485 (:simple-type . 19))
(486 (really-make-simple-type . 19))
(487 (simple-type-id . 19))
(488 (simple-type-priority . 19))
(489 (simple-type-predicate . 19))
(490 (simple-type-superiors . 19))
(491 (simple-type? . 19))
(492 (make-simple-type . 19))
(493 (compute-priority . 19))
(494 (*increment* . 19))
(495 (%type-priority . 19))
(496 (%type-predicate . 19))
(497 (%same-type? . 19))
(498 (define-simple-type . 19))
(499 (:syntax . 19))
(500 (:values . 19))
(501 (value? . 19))
(502 (:value . 19))
(503 (:zero . 19))
(504 (:number . 19))
(505 (:complex . 19))
(506 (:real . 19))
(507 (:rational . 19))
(508 (:integer . 19))
(509 (:exact-integer . 19))
(510 (:boolean . 19))
(511 (:symbol . 19))
(512 (:char . 19))
(513 (:null . 19))
(514 (:pair . 19))
(515 (:vector . 19))
(516 (:string . 19))
(517 (:procedure . 19))
(518 (:input-port . 19))
(519 (:output-port . 19))
(520 (:eof-object . 19))
(521 (:record . 19))
(522 (record-type-priority . 19))
(523 (:method-info . 19))
(524 (really-make-method-info . 19))
(525 (method-info-proc . 19))
(526 (method-info-n-ary? . 19))
(527 (method-info-types . 19))
(528 (method-info? . 19))
(529 (make-method-info . 19))
(530 (empty-method-list . 19))
(531 (insert-method . 19))
(532 (same-applicability? . 19))
(533 (every2 . 19))
(534 (more-specific? . 19))
(535 (more-specific-type? . 19))
(536 (:method-table . 19))
(537 (really-make-method-table . 19))
(538 (method-table-id . 19))
(539 (method-table-set-perform! . 19))
(540 (method-table-get-perform . 19))
(541 (make-generic . 19))
(542 (method-table-prototype . 19))
(543 (method-table-methods . 19))
(544 (set-method-table-methods! . 19))
(545 (method-table? . 19))
(546 (make-method-table . 19))
(547 (make-cell-for-generic . 19))
(548 (add-to-method-table! . 19))
(549 (set-final-method! . 19))
(550 (apply-generic . 19))
(551 (define-generic . 19))
(552 (methods->perform . 19))
(553 (last-action . 19))
(554 (one-action . 19))
(555 (argument-sequence-predicate . 19))
(556 (check-for-next . 19))
(557 (check-next . 19))
(558 (method-info . 19))
(559 (method-internal . 19))
(560 (with-next-method . 19))
(561 (define-method . 19))
(562 (&add-method! . 19))
(563 (add-method! . 19))
(564 (&type-predicate . 19))
(565 (type-predicate . 19))
(566 (&type-priority . 19))
(567 (type-priority . 19))
(568 (&type-superiors . 19))
(569 (type-superiors . 19))
(570 (&same-type? . 19))
(571 (same-type? . 19))
(572 (:singleton . 19))
(573 (singleton . 19))
(574 (singleton-value . 19))
(575 (compare-to . 19))
(576 (&disclose . 19))
(577 (disclose . 19))
(578 (proc->discloser . 19))
(579 (&number->string . 20))
(580 (real-number->string . 20))
(581 (number->string . 20))
(582 (integer->string . 20))
(583 (string->number . 20))
(584 (&really-string->number . 20))
(585 (really-string->number . 20))
(586 (:integer-string . 20))
(587 (set-exactness . 20))
(588 (string->integer . 20))
(589 (:thread . 21))
(590 (make-thread . 21))
(591 (thread-proposal . 21))
(592 (thread-dynamic-point . 21))
(593 (thread-dynamic-env . 21))
(594 (get-dynamic-env . 21))
(595 (set-dynamic-env! . 21))
(596 (get-dynamic-point . 21))
(597 (set-dynamic-point! . 21))
(598 (initialize-dynamic-state! . 21))
(599 (with-dynamic-env . 21))
(600 (empty-dynamic-env . 21))
(601 (:fluid . 21))
(602 (make-fluid . 21))
(603 (fluid-top-level-value . 21))
(604 (set-fluid-top-level-value! . 21))
(605 (fluid . 21))
(606 (set-fluid! . 21))
(607 (let-fluid . 21))
(608 (let-fluids . 21))
(609 (fluid-cell-ref . 21))
(610 (fluid-cell-set! . 21))
(611 (define-enumeration . 35))
(612 (components . 35))
(613 (enum . 35))
(614 (enumerand->name . 35))
(615 (name->enumerand . 35))
(616 (lookup-enumerand . 35))
(617 (architecture-version . 36))
(618 (bits-used-per-byte . 36))
(619 (byte-limit . 36))
(620 (two-byte-limit . 36))
(621 (define-instruction-set . 36))
(622 (op . 36))
(623 (op-enumeration . 36))
(624 (op-count . 36))
(625 (opcode-arg-specs . 36))
(626 (interrupt . 36))
(627 (interrupt-enumeration . 36))
(628 (interrupt-count . 36))
(629 (exception . 36))
(630 (exception-enumeration . 36))
(631 (exception-count . 36))
(632 (current-port-marker . 36))
(633 (current-port-marker-enumeration . 36))
(634 (current-port-marker-count . 36))
(635 (maximum-stack-args . 36))
(636 (*last-protocol* . 36))
(637 (next-protocol . 36))
(638 (two-byte-nargs-protocol . 36))
(639 (two-byte-nargs+list-protocol . 36))
(640 (ignore-values-protocol . 36))
(641 (big-stack-protocol . 36))
(642 (args+nargs-protocol . 36))
(643 (nary-dispatch-protocol . 36))
(644 (call-with-values-protocol . 36))
(645 (bottom-of-stack-protocol . 36))
(646 (native-protocol-mask . 36))
(647 (maximum-external-call-args . 36))
(648 (default-stack-space . 36))
(649 (continuation-stack-size . 36))
(650 (available-stack-space . 36))
(651 (continuation-cells . 36))
(652 (continuation-pc-index . 36))
(653 (continuation-code-index . 36))
(654 (continuation-cont-index . 36))
(655 (exception-continuation-cells . 36))
(656 (exception-cont-size-index . 36))
(657 (exception-cont-pc-index . 36))
(658 (exception-cont-code-index . 36))
(659 (exception-cont-exception-index . 36))
(660 (exception-cont-instruction-size-index . 36))
(661 (time-option . 36))
(662 (time-option-enumeration . 36))
(663 (time-option-count . 36))
(664 (memory-status-option . 36))
(665 (memory-status-option-enumeration . 36))
(666 (memory-status-option-count . 36))
(667 (channel-status-option . 36))
(668 (channel-status-option-enumeration . 36))
(669 (channel-status-option-count . 36))
(670 (port-status-options . 36))
(671 (port-status-options-enumeration . 36))
(672 (port-status-options-count . 36))
(673 (stob . 36))
(674 (stob-enumeration . 36))
(675 (stob-count . 36))
(676 (least-b-vector-type . 36))
(677 (stob-data . 36))
(678 (call-atomically . 41))
(679 (call-atomically! . 41))
(680 (call-ensuring-atomicity . 41))
(681 (call-ensuring-atomicity! . 41))
(682 (atomically . 41))
(683 (atomically! . 41))
(684 (ensure-atomicity . 41))
(685 (ensure-atomicity! . 41))
(686 (with-new-proposal . 41))
(687 (remove-current-proposal! . 41))
(688 (invalidate-current-proposal! . 41))
(689 (j-random-pair . 41))
(690 (*session-data-initializers* . 23))
(691 (make-session-data-slot! . 23))
(692 (session-data-ref . 23))
(693 (session-data-set! . 23))
(694 (initialize-session-data! . 23))
(695 (*condition-types* . 27))
(696 (condition-supertypes . 27))
(697 (define-condition-type . 27))
(698 (condition-predicate . 27))
(699 (condition? . 27))
(700 (condition-type . 27))
(701 (condition-stuff . 27))
(702 (error? . 27))
(703 (call-error? . 27))
(704 (read-error? . 27))
(705 (exception? . 27))
(706 (exception-opcode . 27))
(707 (exception-reason . 27))
(708 (exception-arguments . 27))
(709 (make-exception . 27))
(710 (warning? . 27))
(711 (syntax-error? . 27))
(712 (note? . 27))
(713 (interrupt? . 27))
(714 (dynamic-wind . 22))
(715 (call-with-current-continuation . 22))
(716 (continuation->procedure . 22))
(717 (:point . 22))
(718 (make-point . 22))
(719 (point-parent . 22))
(720 (point-dynamic-env . 22))
(721 (point-out . 22))
(722 (point-in . 22))
(723 (point-depth . 22))
(724 (travel-to-point! . 22))
(725 (template-overhead . 32))
(726 (template-code . 32))
(727 (template-info . 32))
(728 (template-package-id . 32))
(729 (set-template-code! . 32))
(730 (set-template-info! . 32))
(731 (set-template-package-id! . 32))
(732 (:closure . 34))
(733 (:code-vector . 34))
(734 (:location . 34))
(735 (:cell . 34))
(736 (:template . 34))
(737 (:channel . 34))
(738 (:port . 34))
(739 (:double . 34))
(740 (:weak-pointer . 34))
(741 (:shared-binding . 34))
(742 (make-ref . 33))
(743 (continuation-cont . 33))
(744 (real-continuation-code . 33))
(745 (real-continuation-pc . 33))
(746 (exception-cont-pc . 33))
(747 (exception-cont-code . 33))
(748 (exception-continuation-exception . 33))
(749 (exception-continuation? . 33))
(750 (call-with-values-continuation? . 33))
(751 (continuation-pc . 33))
(752 (continuation-code . 33))
(753 (continuation-template . 33))
(754 (continuation-arg . 33))
(755 (continuation-arg-count . 33))
(756 (:continuation . 33))
(757 (define-exception-handler . 38))
(758 (signal-exception . 38))
(759 (exception-handlers . 38))
(760 (extend-opcode! . 38))
(761 (really-signal-condition . 38))
(762 (with-handler . 38))
(763 ($condition-handlers . 38))
(764 (initialize-exceptions! . 38))
(765 (last-resort-condition-handler . 38))
(766 (report-utter-lossage . 38))
(767 (continuation-preview . 38))
(768 (ignore-errors . 38))
(769 (report-errors-as-warnings . 38))
(770 (:port-handler . 24))
(771 (make-port-handler . 24))
(772 (port-handler-force . 24))
(773 (port-handler-ready? . 24))
(774 (port-handler-block . 24))
(775 (port-handler-char . 24))
(776 (port-handler-close . 24))
(777 (port-handler-discloser . 24))
(778 (port-handler? . 24))
(779 (disclose-port . 24))
(780 (initialize-i/o-handlers! . 24))
(781 (one-arg-proc->handler . 24))
(782 (two-arg-proc->handler . 24))
(783 (real-char-ready? . 24))
(784 (read-block . 24))
(785 (write-block . 24))
(786 (write-string . 24))
(787 (output-port-ready? . 24))
(788 (force-output . 24))
(789 (force-output-if-open . 24))
(790 (close-input-port . 24))
(791 (close-output-port . 24))
(792 (okay-limits? . 24))
(793 (open-port? . 24))
(794 (open-port-mask . 24))
(795 (input-port-mask . 24))
(796 (open-input-port-mask . 24))
(797 (open-input-port-status . 24))
(798 (open-input-port? . 24))
(799 (make-input-port-closed! . 24))
(800 (make-unbuffered-input-port . 24))
(801 (output-port-mask . 24))
(802 (open-output-port-mask . 24))
(803 (open-output-port-status . 24))
(804 (open-output-port? . 24))
(805 (make-output-port-closed! . 24))
(806 (make-unbuffered-output-port . 24))
(807 (null-output-port-handler . 24))
(808 (null-output-buffer . 24))
(809 (make-null-output-port . 24))
(810 (make-buffered-input-port . 24))
(811 (make-buffered-output-port . 24))
(812 (okay-buffer? . 24))
(813 (make-buffered-input-port-handler . 24))
(814 (note-buffer-reuse! . 24))
(815 (check-buffer-timestamp! . 24))
(816 (port-flushed? . 24))
(817 (set-port-flushed?! . 24))
(818 (make-one-char-input . 24))
(819 (make-char-ready? . 24))
(820 (make-read-block . 24))
(821 (get-available-bytes! . 24))
(822 (buffer-length . 24))
(823 (make-buffered-output-port-handler . 24))
(824 (make-closer . 24))
(825 (make-one-char-output . 24))
(826 (make-write-block . 24))
(827 (copy-bytes-out! . 24))
(828 (make-forcer . 24))
(829 (default-buffer-size . 24))
(830 (flush-these-ports . 24))
(831 (periodically-force-output! . 24))
(832 (output-port-forcers . 24))
(833 (periodically-flushed-ports . 24))
(834 (make-forcing-thunk . 24))
(835 ($current-input-port . 24))
(836 ($current-output-port . 24))
(837 ($current-error-port . 24))
(838 ($current-noise-port . 24))
(839 (current-input-port . 24))
(840 (current-output-port . 24))
(841 (current-error-port . 24))
(842 (current-noise-port . 24))
(843 (initialize-i/o . 24))
(844 (with-current-ports . 24))
(845 (call-with-current-input-port . 24))
(846 (call-with-current-output-port . 24))
(847 (call-with-current-noise-port . 24))
(848 (silently . 24))
(849 (newline . 24))
(850 (char-ready? . 24))
(851 (output-port-option . 24))
(852 (input-port-option . 24))
(853 (write . 28))
(854 (recurring-write . 28))
(855 (write-boolean . 28))
(856 (write-number . 28))
(857 (write-char-literal . 28))
(858 (character-name . 28))
(859 (write-string-literal . 28))
(860 (write-list . 28))
(861 (quotation? . 28))
(862 (write-vector . 28))
(863 (write-other . 28))
(864 (display-type-name . 28))
(865 (display . 28))
(866 (read . 29))
(867 (sub-read-carefully . 29))
(868 (reader-token-marker . 29))
(869 (make-reader-token . 29))
(870 (reader-token? . 29))
(871 (close-paren . 29))
(872 (dot . 29))
(873 (sub-read . 29))
(874 (read-dispatch-vector . 29))
(875 (read-terminating?-vector . 29))
(876 (set-standard-syntax! . 29))
(877 (set-standard-read-macro! . 29))
(878 (sub-read-list . 29))
(879 (gobble-line . 29))
(880 (*sharp-macros* . 29))
(881 (define-sharp-macro . 29))
(882 (proper-list? . 29))
(883 (sub-read-token . 29))
(884 (parse-token . 29))
(885 (strange-symbol-names . 29))
(886 (p-c-v . 29))
(887 (preferred-case . 29))
(888 (reading-error . 29))
(889 (:queue . 45))
(890 (really-make-queue . 45))
(891 (queue? . 45))
(892 (queue-tail . 45))
(893 (set-queue-tail! . 45))
(894 (real-queue-head . 45))
(895 (set-queue-head! . 45))
(896 (queue-uid . 45))
(897 (next-uid . 45))
(898 (make-queue . 45))
(899 (queue-empty? . 45))
(900 (enqueue! . 45))
(901 (queue-head . 45))
(902 (dequeue! . 45))
(903 (maybe-dequeue! . 45))
(904 (empty-queue! . 45))
(905 (on-queue? . 45))
(906 (delete-from-queue! . 45))
(907 (delete-from-queue-if! . 45))
(908 (queue->list . 45))
(909 (list->queue . 45))
(910 (queue-length . 45))
(911 (initialize-interrupts! . 39))
(912 (interrupt-handlers . 39))
(913 (set-interrupt-handler! . 39))
(914 (no-interrupts . 39))
(915 (all-interrupts . 39))
(916 (with-interrupts-inhibited . 39))
(917 (with-interrupts-allowed . 39))
(918 (disable-interrupts! . 39))
(919 (enable-interrupts! . 39))
(920 (with-interrupts . 39))
(921 (enabled-interrupts . 39))
(922 (*post-gc-procedures* . 39))
(923 (call-after-gc! . 39))
(924 (post-gc-handler . 39))
(925 (required-post-gc-space . 39))
(926 (space-shortage-handler . 39))
(927 (call-before-heap-overflow! . 39))
(928 (:thread . 40))
(929 (really-make-thread . 40))
(930 (thread-name . 40))
(931 (thread-uid . 40))
(932 (thread-cell . 40))
(933 (set-thread-cell! . 40))
(934 (thread-data . 40))
(935 (set-thread-data! . 40))
(936 (thread-events . 40))
(937 (set-thread-events! . 40))
(938 (thread-current-task . 40))
(939 (set-thread-current-task! . 40))
(940 (thread-scheduler . 40))
(941 (set-thread-scheduler! . 40))
(942 (thread-arguments . 40))
(943 (set-thread-arguments! . 40))
(944 (thread-continuation . 40))
(945 (set-thread-continuation! . 40))
(946 (thread-time . 40))
(947 (set-thread-time! . 40))
(948 (thread-proposal . 40))
(949 (thread-dynamic-point . 40))
(950 (set-thread-dynamic-point! . 40))
(951 (thread-dynamic-env . 40))
(952 (thread? . 40))
(953 (*thread-uid* . 40))
(954 (make-thread . 40))
(955 (thread-top-level . 40))
(956 (thread-uid->thread . 40))
(957 (all-threads . 40))
(958 (add-event! . 40))
(959 (next-event! . 40))
(960 (thunk->continuation . 40))
(961 (compose-continuation . 40))
(962 (maybe-dequeue-thread! . 40))
(963 (thread-queue-empty? . 40))
(964 (event-type . 40))
(965 (event-type-enumeration . 40))
(966 (event-type-count . 40))
(967 (run . 40))
(968 (find-and-run-next-thread . 40))
(969 (debit-thread-times-and-run! . 40))
(970 (handle-timer-interrupt . 40))
(971 (run-next-thread . 40))
(972 (min . 40))
(973 (switch-to-thread . 40))
(974 (run-thread . 40))
(975 (suspend . 40))
(976 (suspend-to . 40))
(977 (debit-down! . 40))
(978 (exit . 40))
(979 (wait . 40))
(980 (waiting? . 40))
(981 (relinquish-timeslice . 40))
(982 (block . 40))
(983 (maybe-commit-and-block . 40))
(984 (maybe-commit-and-block-on-queue . 40))
(985 (upcall . 40))
(986 (propogate-upcall . 40))
(987 (kill-thread! . 40))
(988 (terminate-thread! . 40))
(989 (interrupt-thread . 40))
(990 (get-next-event! . 40))
(991 (event-pending? . 40))
(992 (schedule-event . 40))
(993 (maybe-suspend . 40))
(994 (really-schedule-event . 40))
(995 (schedule-wakeup . 40))
(996 (show-running . 40))
(997 (running? . 40))
(998 (spawn . 40))
(999 (spawn-on-root . 40))
(1000 (spawn-on-scheduler . 40))
(1001 (make-ready . 40))
(1002 (clear-thread-cell! . 40))
(1003 (maybe-commit-and-make-ready . 40))
(1004 (make-threads-ready . 40))
(1005 (schedule-interrupt! . 40))
(1006 (cancel-timer-interrupt! . 40))
(1007 (interrupt-timer-time . 40))
(1008 (real-time . 40))
(1009 (with-threads . 40))
(1010 (start-multitasking . 40))
(1011 (deadlock? . 40))
(1012 (terminate? . 40))
(1013 (terminate-current-thread . 40))
(1014 (root-scheduler-slot . 40))
(1015 (root-scheduler . 40))
(1016 (max2 . 40))
(1017 (sleep . 40))
(1018 (coerce-to-nonnegative-integer . 40))
(1019 (dozers . 40))
(1020 (insert . 40))
(1021 (wake-some-threads . 40))
(1022 (:condvar . 46))
(1023 (really-make-condvar . 46))
(1024 (condvar? . 46))
(1025 (condvar-id . 46))
(1026 (condvar-value . 46))
(1027 (set-condvar-value! . 46))
(1028 (condvar-has-value? . 46))
(1029 (set-condvar-has-value?! . 46))
(1030 (condvar-queue . 46))
(1031 (make-condvar . 46))
(1032 (maybe-commit-and-wait-for-condvar . 46))
(1033 (maybe-commit-and-set-condvar! . 46))
(1034 (condvar-has-waiters? . 46))
(1035 (channel-maybe-commit-and-do-it . 25))
(1036 (channel-maybe-commit-and-read . 25))
(1037 (channel-maybe-commit-and-write . 25))
(1038 (note-channel-result! . 25))
(1039 (channel-write . 25))
(1040 (channel-maybe-commit-and-close . 25))
(1041 (input-channel? . 25))
(1042 (initialize-channel-i/o! . 25))
(1043 (i/o-completion-handler . 25))
(1044 (waiting-for-i/o? . 25))
(1045 (channel-wait-condvars-slot . 25))
(1046 (channel-condvars . 25))
(1047 (set-channel-condvars! . 25))
(1048 (add-channel-condvar! . 25))
(1049 (wait-for-channel . 25))
(1050 (fetch-channel-condvar! . 25))
(1051 (abort-unwanted-i/o! . 25))
(1052 (:channel-cell . 26))
(1053 (really-make-channel-cell . 26))
(1054 (channel-cell? . 26))
(1055 (channel-cell-sent . 26))
(1056 (set-channel-cell-sent! . 26))
(1057 (channel-cell-in-use? . 26))
(1058 (set-channel-cell-in-use?! . 26))
(1059 (channel-cell-condvar . 26))
(1060 (channel-cell-closer . 26))
(1061 (channel-cell-ref . 26))
(1062 (make-channel-cell . 26))
(1063 (port->channel . 26))
(1064 (port-channel-closer . 26))
(1065 (fill-buffer! . 26))
(1066 (channel-port-ready? . 26))
(1067 (input-channel-handler . 26))
(1068 (input-channel->port . 26))
(1069 (input-channel+closer->port . 26))
(1070 (real-input-channel->port . 26))
(1071 (empty-buffer! . 26))
(1072 (send-some . 26))
(1073 (output-channel-handler . 26))
(1074 (output-channel->port . 26))
(1075 (output-channel+closer->port . 26))
(1076 (real-output-channel->port . 26))
(1077 (maybe-open-file . 26))
(1078 (open-input-file . 26))
(1079 (open-output-file . 26))
(1080 (call-with-input-file . 26))
(1081 (call-with-output-file . 26))
(1082 (with-input-from-file . 26))
(1083 (with-output-to-file . 26))
(1084 (force-channel-output-ports! . 26))
(1085 (one-char-handler . 26))
(1086 (write-block-handler . 26))
(1087 (unbuffered-output-handler . 26))
(1088 (:table . 79))
(1089 (really-make-table . 79))
(1090 (table-set!-procedure . 79))
(1091 (set-table-set!-procedure! . 79))
(1092 (table-ref-procedure . 79))
(1093 (set-table-ref-procedure! . 79))
(1094 (table-data . 79))
(1095 (set-table-data! . 79))
(1096 (table-size . 79))
(1097 (set-table-size! . 79))
(1098 (table? . 79))
(1099 (table-ref . 79))
(1100 (table-set! . 79))
(1101 (linear-table-size-limit . 79))
(1102 (next-table-size . 79))
(1103 (make-table-maker . 79))
(1104 (assoc->table-maker . 79))
(1105 (null-entry . 79))
(1106 (new-entry . 79))
(1107 (entry-value . 79))
(1108 (entry-key . 79))
(1109 (set-entry-value! . 79))
(1110 (delete-entry! . 79))
(1111 (make-assoc . 79))
(1112 (make-linear-table-ref . 79))
(1113 (make-linear-table-set! . 79))
(1114 (make->hash-table . 79))
(1115 (make-hash-table-ref . 79))
(1116 (make-hash-table-set! . 79))
(1117 (expand-hash-table! . 79))
(1118 (table-enter-alist! . 79))
(1119 (table-expand-table! . 79))
(1120 (table-walk . 79))
(1121 (really-table-walk . 79))
(1122 (alist-walk . 79))
(1123 (make-table-immutable! . 79))
(1124 (table->entry-list . 79))
(1125 (default-table-hash-function . 79))
(1126 (eqv?-assoc . 79))
(1127 (default-table-assoc . 79))
(1128 (symbol-hash . 79))
(1129 (make-table . 79))
(1130 (make-string-table . 79))
(1131 (make-symbol-table . 79))
(1132 (make-integer-table . 79))
(1133 (make-population . 48))
(1134 (add-to-population! . 48))
(1135 (weak-memq . 48))
(1136 (population-reduce . 48))
(1137 (population->list . 48))
(1138 (walk-population . 48))
(1139 (:meta-type . 50))
(1140 (really-make-type . 50))
(1141 (type-info . 50))
(1142 (type-more . 50))
(1143 (type-mask . 50))
(1144 (meta-type? . 50))
(1145 (make-type . 50))
(1146 (name->type-table . 50))
(1147 (mask->name-table . 50))
(1148 (name->type . 50))
(1149 (set-type-name! . 50))
(1150 (*mask* . 50))
(1151 (new-type-bit . 50))
(1152 (mask->type . 50))
(1153 (bottom-type . 50))
(1154 (error-type . 50))
(1155 (bottom-type? . 50))
(1156 (new-atomic-type . 50))
(1157 (named-atomic-type . 50))
(1158 (syntax-type . 50))
(1159 (other-static-type . 50))
(1160 (empty-rail-type . 50))
(1161 (rail-type . 50))
(1162 (make-optional-type . 50))
(1163 (make-rest-type . 50))
(1164 (head-type . 50))
(1165 (head-type-really . 50))
(1166 (tail-type . 50))
(1167 (empty-rail-type? . 50))
(1168 (rest-type? . 50))
(1169 (optional-type? . 50))
(1170 (mask/no-values . 50))
(1171 (mask/two-or-more . 50))
(1172 (mask/&rest . 50))
(1173 (value-type . 50))
(1174 (mask/value . 50))
(1175 (value-type? . 50))
(1176 (any-values-type . 50))
(1177 (any-arguments-type . 50))
(1178 (mask/one-or-more . 50))
(1179 (same-type? . 50))
(1180 (subtype? . 50))
(1181 (meet-type . 50))
(1182 (other-type-info . 50))
(1183 (meet-rail . 50))
(1184 (meet-procedure . 50))
(1185 (meet? . 50))
(1186 (meet-procedure? . 50))
(1187 (join-type . 50))
(1188 (join-rail . 50))
(1189 (join-procedure . 50))
(1190 (number-hierarchy . 50))
(1191 (integer-type . 50))
(1192 (rational-type . 50))
(1193 (real-type . 50))
(1194 (complex-type . 50))
(1195 (number-type . 50))
(1196 (exact-type . 50))
(1197 (inexact-type . 50))
(1198 (exact-integer-type . 50))
(1199 (inexact-real-type . 50))
(1200 (boolean-type . 50))
(1201 (pair-type . 50))
(1202 (null-type . 50))
(1203 (record-type . 50))
(1204 (any-procedure-type . 50))
(1205 (other-value-type . 50))
(1206 (mask/other . 50))
(1207 (make-other-type . 50))
(1208 (char-type . 50))
(1209 (unspecific-type . 50))
(1210 (string-type . 50))
(1211 (symbol-type . 50))
(1212 (vector-type . 50))
(1213 (escape-type . 50))
(1214 (structure-type . 50))
(1215 (mask/procedure . 50))
(1216 (procedure-type . 50))
(1217 (make-procedure-type . 50))
(1218 (procedure-type-domain . 50))
(1219 (procedure-type-codomain . 50))
(1220 (restrictive? . 50))
(1221 (sexp->type . 50))
(1222 (sexp->values-type . 50))
(1223 (type->sexp . 50))
(1224 (atomic-type->sexp . 50))
(1225 (rail-type->sexp . 50))
(1226 (disjoin-type . 50))
(1227 (disjoin-rest . 50))
(1228 (mask/number . 50))
(1229 (make-some-values-type . 50))
(1230 (proc . 50))
(1231 (some-values . 50))
(1232 (procedure-type? . 50))
(1233 (fixed-arity-procedure-type? . 50))
(1234 (procedure-type-arity . 50))
(1235 (procedure-type-argument-types . 50))
(1236 (variable-type . 50))
(1237 (variable-type? . 50))
(1238 (variable-value-type . 50))
(1239 (usual-variable-type . 50))
(1240 (undeclared-type . 50))
(1241 (compatible-types? . 50))
(1242 (:interface . 67))
(1243 (really-make-interface . 67))
(1244 (interface-name . 67))
(1245 (set-interface-name! . 67))
(1246 (interface-clients . 67))
(1247 (walk-method . 67))
(1248 (ref-method . 67))
(1249 (interface? . 67))
(1250 (make-interface . 67))
(1251 (interface-ref . 67))
(1252 (interface-member? . 67))
(1253 (for-each-declaration . 67))
(1254 (note-reference-to-interface! . 67))
(1255 (note-interface-name! . 67))
(1256 (make-simple-interface . 67))
(1257 (make-simple-interface-table . 67))
(1258 (make-compound-interface . 67))
(1259 (make-modified-interface . 67))
(1260 (process-commands . 67))
(1261 (okay-command? . 67))
(1262 (proper-list? . 67))
(1263 (process-prefix . 67))
(1264 (process-expose . 67))
(1265 (process-hide . 67))
(1266 (process-alias . 67))
(1267 (process-rename . 67))
(1268 (interface-lookup . 67))
(1269 (make-lookup . 67))
(1270 (prefix-match? . 67))
(1271 (remove-prefix . 67))
(1272 (make-default-walker . 67))
(1273 (cdr-assq . 67))
(1274 (make-alist-walker . 67))
(1275 (symbol-append . 67))
(1276 (binding? . 51))
(1277 (binding-type . 51))
(1278 (binding-place . 51))
(1279 (binding-static . 51))
(1280 (binding-path . 51))
(1281 (set-binding-place! . 51))
(1282 (make-binding . 51))
(1283 (add-path . 51))
(1284 (clobber-binding! . 51))
(1285 (impose-type . 51))
(1286 (forget-integration . 51))
(1287 (same-denotation? . 51))
(1288 (maybe-fix-place! . 51))
(1289 (follow-forwarding-pointers . 51))
(1290 (name? . 52))
(1291 (:generated . 52))
(1292 (make-generated . 52))
(1293 (generated-parent-name . 52))
(1294 (generated-env . 52))
(1295 (generated-token . 52))
(1296 (generated-name . 52))
(1297 (generated? . 52))
(1298 (generate-name . 52))
(1299 (generated-uid . 52))
(1300 (*generated-uid* . 52))
(1301 (name->symbol . 52))
(1302 (name-hash . 52))
(1303 (make-name-table . 52))
(1304 (desyntaxify . 52))
(1305 (make-qualified . 52))
(1306 (qualified? . 52))
(1307 (qualified-parent-name . 52))
(1308 (qualified-symbol . 52))
(1309 (qualified-uid . 52))
(1310 (name->qualified . 52))
(1311 (qualify-parent . 52))
(1312 (:transform . 52))
(1313 (really-make-transform . 52))
(1314 (transform-id . 52))
(1315 (transform-source . 52))
(1316 (transform-aux-names . 52))
(1317 (transform-type . 52))
(1318 (transform-env . 52))
(1319 (transform-procedure . 52))
(1320 (transform? . 52))
(1321 (make-transform . 52))
(1322 (maybe-apply-macro-transform . 52))
(1323 (apply-inline-transform . 52))
(1324 (make-keyword-comparator . 52))
(1325 (name->source-name . 52))
(1326 (bind-aliases . 52))
(1327 (make-name-generator . 52))
(1328 (lookup . 52))
(1329 (lookup . 55))
(1330 (bind1 . 55))
(1331 (bind . 55))
(1332 (bindrec . 55))
(1333 (make-compiler-env . 55))
(1334 (funny-name/macro-eval . 55))
(1335 (environment-macro-eval . 55))
(1336 (funny-name/define! . 55))
(1337 (environment-define! . 55))
(1338 (funny-name/package . 55))
(1339 (extract-package-from-environment . 55))
(1340 (funny-name/source-file-name . 55))
(1341 (bind-source-file-name . 55))
(1342 (source-file-name . 55))
(1343 (:thingie . 53))
(1344 (make-thingie . 53))
(1345 (thingie-want-type . 53))
(1346 (thingie-name . 53))
(1347 (thingie-binding . 53))
(1348 (thingie? . 53))
(1349 (:structure . 68))
(1350 (really-make-structure . 68))
(1351 (structure-name . 68))
(1352 (set-structure-name! . 68))
(1353 (structure-clients . 68))
(1354 (structure-package . 68))
(1355 (structure-interface-really . 68))
(1356 (set-structure-interface! . 68))
(1357 (structure-interface-thunk . 68))
(1358 (structure? . 68))
(1359 (structure-interface . 68))
(1360 (initialize-structure! . 68))
(1361 (make-structure . 68))
(1362 (make-modified-structure . 68))
(1363 (note-structure-name! . 68))
(1364 (structure-unstable? . 68))
(1365 (for-each-export . 68))
(1366 (:package . 68))
(1367 (really-make-package . 68))
(1368 (package-cached . 68))
(1369 (package-clients . 68))
(1370 (package-real-undefined-but-assigneds . 68))
(1371 (set-package-undefined-but-assigneds! . 68))
(1372 (package-real-undefineds . 68))
(1373 (set-package-undefineds! . 68))
(1374 (package-accesses-thunk . 68))
(1375 (package-opens-thunk . 68))
(1376 (set-package-opens-thunk! . 68))
(1377 (package->environment . 68))
(1378 (set-package->environment! . 68))
(1379 (package-loaded? . 68))
(1380 (set-package-loaded?! . 68))
(1381 (package-clauses . 68))
(1382 (package-file-name . 68))
(1383 (package-get-location . 68))
(1384 (set-package-get-location! . 68))
(1385 (package-integrate? . 68))
(1386 (set-package-integrate?! . 68))
(1387 (package-unstable? . 68))
(1388 (package-definitions . 68))
(1389 (package-opens-really . 68))
(1390 (set-package-opens! . 68))
(1391 (package-uid . 68))
(1392 (package? . 68))
(1393 (make-package . 68))
(1394 (really-package->environment . 68))
(1395 (lazy-table-accessor . 68))
(1396 (package-undefineds . 68))
(1397 (package-undefined-but-assigneds . 68))
(1398 (new-package-uid . 68))
(1399 (*package-uid* . 68))
(1400 (package-name-table . 68))
(1401 (package-name . 68))
(1402 (note-package-name! . 68))
(1403 (package-opens . 68))
(1404 (initialize-package-if-necessary! . 68))
(1405 (package-accesses . 68))
(1406 (make-simple-package . 68))
(1407 (package-definition . 68))
(1408 (package-define! . 68))
(1409 (package-add-static! . 68))
(1410 (package-refine-type! . 68))
(1411 (package-lookup . 68))
(1412 (really-package-lookup . 68))
(1413 (search-opens . 68))
(1414 (structure-lookup . 68))
(1415 (real-structure-lookup . 68))
(1416 (generic-lookup . 68))
(1417 (initialize-package! . 68))
(1418 (for-each-definition . 68))
(1419 (get-new-location . 68))
(1420 (make-new-location . 68))
(1421 ($get-location . 68))
(1422 (*location-uid* . 68))
(1423 (location-info-table . 68))
(1424 (flush-location-names . 68))
(1425 (link! . 68))
(1426 (really-link! . 68))
(1427 (get-location . 68))
(1428 (location-on-demand . 68))
(1429 (get-undefined . 68))
(1430 (location-for-assignment . 68))
(1431 (package-note-caching! . 68))
(1432 (note-caching! . 68))
(1433 (get-location-for-unassignable . 68))
(1434 (get-location-for-undefined . 68))
(1435 ($note-undefined . 68))
(1436 (cenv->package . 68))
(1437 (location-for-reference . 68))
(1438 (noting-undefined-variables . 68))
(1439 (print-undefined-names . 68))
(1440 (environment-ref . 81))
(1441 (environment-set! . 81))
(1442 (environment-define! . 81))
(1443 (*structure-ref . 81))
(1444 (carefully . 81))
(1445 ($interaction-environment . 81))
(1446 (interaction-environment . 81))
(1447 (set-interaction-environment! . 81))
(1448 (with-interaction-environment . 81))
(1449 (scheme-report-environment . 81))
(1450 (*scheme-report-environment* . 81))
(1451 (*null-environment* . 81))
(1452 (*scheme-report-number* . 81))
(1453 (set-scheme-report-environment! . 81))
(1454 (null-environment . 81))
(1455 (make-reflective-tower . 81))
(1456 (set-reflective-tower-maker! . 81))
(1457 (namestring . 80))
(1458 (directory-component-separator . 80))
(1459 (type-component-separator . 80))
(1460 (namestring-component . 80))
(1461 (file-name-preferred-case . 80))
(1462 (*scheme-file-type* . 80))
(1463 (*load-file-type* . 80))
(1464 (file-name-directory . 80))
(1465 (file-name-nondirectory . 80))
(1466 (file-nondirectory-position . 80))
(1467 (string-posq . 80))
(1468 (*translations* . 80))
(1469 (translations . 80))
(1470 (set-translation! . 80))
(1471 (translate . 80))
(1472 ($note-file-package . 65))
(1473 (read-forms . 65))
(1474 (really-read-forms . 65))
(1475 (:operator . 54))
(1476 (make-operator . 54))
(1477 (operator-name . 54))
(1478 (operator-uid . 54))
(1479 (operator-nargs . 54))
(1480 (operator-type . 54))
(1481 (set-operator-type! . 54))
(1482 (operator? . 54))
(1483 (usual-operator-type . 54))
(1484 (get-operator . 54))
(1485 (*operator-uid* . 54))
(1486 (operators-table . 54))
(1487 (number-of-operators . 54))
(1488 (the-operators . 54))
(1489 (make-operator-table . 54))
(1490 (operator-table-ref . 54))
(1491 (operator-lookup . 54))
(1492 (operator-define! . 54))
(1493 (:node . 54))
(1494 (really-make-node . 54))
(1495 (node-plist . 54))
(1496 (set-node-plist! . 54))
(1497 (node-form . 54))
(1498 (node-operator-id . 54))
(1499 (node? . 54))
(1500 (make-node . 54))
(1501 (node-ref . 54))
(1502 (node-set! . 54))
(1503 (node-operator . 54))
(1504 (node-predicate . 54))
(1505 (make-similar-node . 54))
(1506 (force-node . 54))
(1507 (schemify . 54))
(1508 (schemifiers . 54))
(1509 (schemify-node . 54))
(1510 (schemify-nodes . 54))
(1511 (define-schemifier . 54))
(1512 (schemify-lambda . 54))
(1513 (schemify-formals . 54))
(1514 (schemify-letrec . 54))
(1515 (schemify-sexp . 54))
(1516 (number-of-required-args . 58))
(1517 (n-ary? . 58))
(1518 (normalize-formals . 58))
(1519 (scan-forms . 56))
(1520 (expand-scanned-form . 56))
(1521 (scan-define . 56))
(1522 (expand-define . 56))
(1523 (scan-define-syntax . 56))
(1524 (expand-form . 56))
(1525 (expand-head . 56))
(1526 (destructure-define . 56))
(1527 (make-operator-predicate . 56))
(1528 (define? . 56))
(1529 (begin? . 56))
(1530 (define-syntax? . 56))
(1531 (static-value . 56))
(1532 (expand-body . 56))
(1533 (scan-body-forms . 56))
(1534 (body-lossage . 56))
(1535 (expand . 56))
(1536 (expand-list . 56))
(1537 (expand-literal . 56))
(1538 (expand-call . 56))
(1539 (expand-name . 56))
(1540 (expand-macro-application . 56))
(1541 (expand-operator-form . 56))
(1542 (expanders . 56))
(1543 (define-expander . 56))
(1544 (unspecific-node . 56))
(1545 (expand-structure-ref . 56))
(1546 (expand-lambda . 56))
(1547 (bind-names . 56))
(1548 (names? . 56))
(1549 (expand-letrec . 56))
(1550 (process-syntax . 56))
(1551 (this-long? . 56))
(1552 (at-least-this-long? . 56))
(1553 (specs? . 56))
(1554 (literal? . 56))
(1555 (syntax? . 56))
(1556 (begin-node? . 56))
(1557 (call-node? . 56))
(1558 (name-node? . 56))
(1559 (operator/literal . 56))
(1560 (operator/quote . 56))
(1561 (operator/call . 56))
(1562 (operator/name . 56))
(1563 (operator/unspecific . 56))
(1564 (operator/unassigned . 56))
(1565 (operator/lambda . 56))
(1566 (operator/begin . 56))
(1567 (operator/letrec . 56))
(1568 (operator/define . 56))
(1569 (operator/define-syntax . 56))
(1570 (operator/primitive-procedure . 56))
(1571 (operator/structure-ref . 56))
(1572 (:primop . 61))
(1573 (make-primop . 61))
(1574 (primop-compilator . 61))
(1575 (primop-closed . 61))
(1576 (primop-type . 61))
(1577 (primop-name . 61))
(1578 (primop? . 61))
(1579 (primop-table . 61))
(1580 (walk-primops . 61))
(1581 (define-compiler-primitive . 61))
(1582 (get-primop . 61))
(1583 (:debug-data . 59))
(1584 (make-debug-data . 59))
(1585 (debug-data-source . 59))
(1586 (set-debug-data-source! . 59))
(1587 (debug-data-env-maps . 59))
(1588 (set-debug-data-env-maps! . 59))
(1589 (debug-data-parent . 59))
(1590 (debug-data-name . 59))
(1591 (debug-data-uid . 59))
(1592 (debug-data? . 59))
(1593 (debug-data-env-shape . 59))
(1594 (new-template-uid . 59))
(1595 (*template-uid* . 59))
(1596 (template-uid . 59))
(1597 (set-template-uid! . 59))
(1598 (debug-flag-names . 59))
(1599 (type/debug-flags . 59))
(1600 (make-debug-flags . 59))
(1601 ($debug-flags . 59))
(1602 (debug-flag-accessor . 59))
(1603 (debug-flag-modifier . 59))
(1604 (keep-source-code? . 59))
(1605 (keep-environment-maps? . 59))
(1606 (keep-procedure-names? . 59))
(1607 (keep-file-names? . 59))
(1608 (tabulate-debug-data? . 59))
(1609 (debug-data-table . 59))
(1610 (with-fresh-compiler-state . 59))
(1611 (saving-and-restoring . 59))
(1612 (debug-data->info . 59))
(1613 (get-debug-data . 59))
(1614 (note-debug-data! . 59))
(1615 (new-debug-data . 59))
(1616 (:frame . 64))
(1617 (really-make-frame . 64))
(1618 (frame-debug-data . 64))
(1619 (frame-count . 64))
(1620 (set-frame-count! . 64))
(1621 (frame-literals . 64))
(1622 (set-frame-literals! . 64))
(1623 (frame-size . 64))
(1624 (set-frame-size! . 64))
(1625 (frame-template-index . 64))
(1626 (frame-env-index . 64))
(1627 (frame? . 64))
(1628 (make-frame . 64))
(1629 (adjust-procedure-name . 64))
(1630 (index->offset . 64))
(1631 (template-offset . 64))
(1632 (environment-offset . 64))
(1633 (depth-check! . 64))
(1634 (binding->index . 64))
(1635 (literal->index . 64))
(1636 (literal-position . 64))
(1637 (position . 64))
(1638 (make-segment . 60))
(1639 (segment-size . 60))
(1640 (segment-emitter . 60))
(1641 (segment->template . 60))
(1642 (segment-data->template . 60))
(1643 ($package-key . 60))
(1644 (with-package-key . 60))
(1645 (check-stack-use . 60))
(1646 (add-big-stack-protocol! . 60))
(1647 (:assembly-state . 60))
(1648 (make-assembly-state . 60))
(1649 (astate-env-maps . 60))
(1650 (set-astate-env-maps! . 60))
(1651 (astate-pc . 60))
(1652 (set-astate-pc! . 60))
(1653 (astate-code-vector . 60))
(1654 (make-astate . 60))
(1655 (emit-byte! . 60))
(1656 (emit-segment! . 60))
(1657 (empty-segment . 60))
(1658 (instruction . 60))
(1659 (sequentially . 60))
(1660 (sequentially-2 . 60))
(1661 (continuation-data-size . 60))
(1662 (continuation-data . 60))
(1663 (make-label . 60))
(1664 (label-reference . 60))
(1665 (instruction-using-label . 60))
(1666 (optional-label-reference . 60))
(1667 (using-optional-label . 60))
(1668 (bytes->segment . 60))
(1669 (computed-goto-label-size . 60))
(1670 (computed-goto-instruction . 60))
(1671 (attach-label . 60))
(1672 (insert-label! . 60))
(1673 (code-vector-set2! . 60))
(1674 (high-byte . 60))
(1675 (low-byte . 60))
(1676 (note-source-code . 60))
(1677 (note-environment . 60))
(1678 (optimizers-table . 70))
(1679 (set-optimizer! . 70))
(1680 (get-optimizer . 70))
(1681 (apply-optimizers . 70))
(1682 (flatten-form . 66))
(1683 (flatten-node . 66))
(1684 (flatteners . 66))
(1685 (define-flattener . 66))
(1686 (flatten-list . 66))
(1687 (no-free-vars . 66))
(1688 (flatten-lambda . 66))
(1689 (convert-lambda-body . 66))
(1690 (add-cells . 66))
(1691 (flatten-letrec . 66))
(1692 (flatten-pure-letrec . 66))
(1693 (flatten-impure-letrec . 66))
(1694 (assigned? . 66))
(1695 (mark-set-variables! . 66))
(1696 (mark-sets . 66))
(1697 (define-set-marker . 66))
(1698 (no-sets . 66))
(1699 (mark-letrec-sets . 66))
(1700 (make-make-cell . 66))
(1701 (make-unassigned-cell . 66))
(1702 (make-cell-ref . 66))
(1703 (really-make-cell-ref . 66))
(1704 (make-cell-set! . 66))
(1705 (make-primop-call . 66))
(1706 (operator/flat-lambda . 66))
(1707 (operator/lambda . 66))
(1708 (operator/letrec . 66))
(1709 (operator/pure-letrec . 66))
(1710 (operator/begin . 66))
(1711 (operator/literal . 66))
(1712 (operator/call . 66))
(1713 (operator/unassigned . 66))
(1714 (operator/set! . 66))
(1715 (define-node? . 66))
(1716 (lambda-node? . 66))
(1717 (flat-lambda-node? . 66))
(1718 (define-primop . 66))
(1719 (temp0 . 66))
(1720 (make-cell-primop . 66))
(1721 (temp1 . 66))
(1722 (cell-ref-primop . 66))
(1723 (temp2 . 66))
(1724 (cell-set!-primop . 66))
(1725 (temp3 . 66))
(1726 (unassigned-check-primop . 66))
(1727 (install-new-set! . 66))
(1728 (install-set! . 66))
(1729 (set->list . 66))
(1730 (set-add-element! . 66))
(1731 (set-union! . 66))
(1732 (set-difference! . 66))
(1733 (clean-var-list . 66))
(1734 (clear-var-set! . 66))
(1735 (node-type . 62))
(1736 (reconstruct-type . 62))
(1737 (reconstruct . 62))
(1738 (examine . 62))
(1739 (reconstructors . 62))
(1740 (define-reconstructor . 62))
(1741 (reconstruct-lambda . 62))
(1742 (careful-codomain . 62))
(1743 (reconstruct-name . 62))
(1744 (proc->reconstructor . 62))
(1745 (reconstruct-call . 62))
(1746 (fork-constraints . 62))
(1747 (reconstruct-letrec . 62))
(1748 (node->type . 62))
(1749 (name-node? . 62))
(1750 (lambda-node? . 62))
(1751 (literal-node? . 62))
(1752 (primop-reconstructors . 62))
(1753 (define-primop-reconstructor . 62))
(1754 (reconstruct-apply . 62))
(1755 (constant-type . 62))
(1756 (compile-expression . 63))
(1757 (compile . 63))
(1758 (compilators . 63))
(1759 (define-compilator . 63))
(1760 (compile-constant . 63))
(1761 (small-integer? . 63))
(1762 (integer-literal-instruction . 63))
(1763 (compile-local-name . 63))
(1764 (index->offset . 63))
(1765 (maybe-compile-with-push . 63))
(1766 (constant-with-push . 63))
(1767 (lexical-ref-with-push . 63))
(1768 (push+stack-ref-instruction . 63))
(1769 (push+stack-indirect-instruction . 63))
(1770 (compile-call . 63))
(1771 (compile-name-call . 63))
(1772 (compile-unknown-call . 63))
(1773 (compile-redex . 63))
(1774 (compile-inline-body . 63))
(1775 (letrec-template-maker . 63))
(1776 (maybe-push-continuation . 63))
(1777 (push-continuation . 63))
(1778 (push-continuation-no-protocol . 63))
(1779 (really-push-continuation . 63))
(1780 (fixup-source . 63))
(1781 (push-arguments . 63))
(1782 (push-all-but-last . 63))
(1783 (push-all-with-names . 63))
(1784 (push-argument . 63))
(1785 (really-push-arguments . 63))
(1786 (compile-argument . 63))
(1787 (pre-push . 63))
(1788 (push-instruction . 63))
(1789 (call-instruction . 63))
(1790 (stack-ref-instruction . 63))
(1791 (stack-set!-instruction . 63))
(1792 (stack-indirect-instruction . 63))
(1793 (make-cont . 63))
(1794 (cont-kind . 63))
(1795 (cont-source-info . 63))
(1796 (return-cont . 63))
(1797 (return-cont? . 63))
(1798 (fall-through-cont . 63))
(1799 (plain-fall-through-cont . 63))
(1800 (fall-through-cont? . 63))
(1801 (ignore-values-segment . 63))
(1802 (ignore-values-cont . 63))
(1803 (ignore-values-cont? . 63))
(1804 (accept-values-cont . 63))
(1805 (accept-values-cont? . 63))
(1806 (deliver-value . 63))
(1807 (named-cont . 63))
(1808 (cont-name . 63))
(1809 (name-node-binding . 63))
(1810 (generate-trap . 63))
(1811 (type-check . 63))
(1812 (set-type-check?! . 63))
(1813 (*type-check?* . 63))
(1814 (diagnose-call-error . 63))
(1815 (lambda-node? . 63))
(1816 (flat-lambda-node? . 63))
(1817 (name-node? . 63))
(1818 (literal-node? . 63))
(1819 (quote-node? . 63))
(1820 (operator/lambda . 63))
(1821 (operator/set! . 63))
(1822 (operator/call . 63))
(1823 (operator/begin . 63))
(1824 (receive . 63))
(1825 (compile-flat-lambda . 63))
(1826 (really-compile-flat-lambda . 63))
(1827 (compile-lambda . 63))
(1828 (set-lexical-offsets! . 63))
(1829 (lambda-protocol . 63))
(1830 (compile-lambda-code . 63))
(1831 (set-frame-locations! . 63))
(1832 (name-node->symbol . 63))
(1833 (compile-environment . 63))
(1834 (compile-recursive-environment . 63))
(1835 (finish-flat-env . 63))
(1836 (one-byte->two-byte . 63))
(1837 (flat-environment-code . 63))
(1838 (get-variables-locations . 63))
(1839 (add-variable . 63))
(1840 (figure-env-data . 63))
(1841 (primop-closed-template . 63))
(1842 (direct-compilator . 63))
(1843 (direct-closed-compilator . 63))
(1844 (nargs->domain . 63))
(1845 (get-primop-type . 63))
(1846 (primop-types . 63))
(1847 (define-simple-primitive . 63))
(1848 (simple-compilator . 63))
(1849 (simple-closed-compilator . 63))
(1850 (symbol-append . 63))
(1851 (define-stob-predicate . 63))
(1852 (define-data-struct-primitives . 63))
(1853 (define-vector-primitives . 63))
(1854 (define-more-vector-primitives . 63))
(1855 (thunk-node? . 63))
(1856 (thunk-body . 63))
(1857 (unflatten-form . 63))
(1858 (define-n-ary-compiler-primitive . 63))
(1859 (n-ary-primitive-compilator . 63))
(1860 (evaluate-arguments-for-effect . 63))
(1861 (call-on-arg-and-id . 63))
(1862 (call-on-args . 63))
(1863 (push-and-compile . 63))
(1864 (op/unspecific . 63))
(1865 (op/literal . 63))
(1866 (dispatch-protocol-size . 63))
(1867 (make-dispatch-protocol . 63))
(1868 (empty-segment? . 63))
(1869 (compile-forms . 63))
(1870 (compile-forms-loop . 63))
(1871 (compile-form . 63))
(1872 (call-template-inst . 63))
(1873 (template-call . 63))
(1874 (define-node? . 63))
(1875 (compile-definition . 63))
(1876 (location-contents-offset . 63))
(1877 (make-startup-procedure . 63))
(1878 (append-templates . 63))
(1879 (an-ignore-values-cont . 63))
(1880 (eval . 82))
(1881 (load-into . 82))
(1882 (eval-from-file . 82))
(1883 (load . 82))
(1884 (really-load-into . 82))
(1885 (compile-and-run . 82))
(1886 (display-condition . 49))
(1887 (really-display-condition . 49))
(1888 (*depth* . 49))
(1889 (*length* . 49))
(1890 (&disclose-condition . 49))
(1891 (disclose-condition . 49))
(1892 (limited-write . 49))
(1893 (command-processor . 86))
(1894 (mini-load . 86))
(1895 (read-string . 86))
(1896 (enum-case . 44))
(1897 (run-threads . 42))
(1898 (run-threads-with-housekeeper . 42))
(1899 (round-robin-event-handler . 42))
(1900 (make-counter . 42))
(1901 (counter-value . 42))
(1902 (increment-counter! . 42))
(1903 (decrement-counter! . 42))
(1904 (root-scheduler . 43))
(1905 (make-root-event-handler . 43))
(1906 (root-handler . 43))
(1907 (cheap-display-condition . 43))
(1908 (abort-token . 43))
(1909 (scheme-exit-now . 43))
(1910 (root-wait . 43))
(1911 (do-some-waiting . 43))
(1912 (one-minute-of-milliseconds . 43))
(1913 (one-day-of-milliseconds . 43))
(1914 (one-year-of-minutes . 43))
(1915 (deadlock-handler . 43))
(1916 (call-when-deadlocked! . 43))
(1917 (spawn-output-forcers . 43))
(1918 (usual-resumer . 47))
(1919 (initialize-rts . 47))
(1920 (start . 87))
(1921 (make-built-in-structures . 87))
(1922 (initialize-interaction-environment! . 87))
(1923 (make-initial-package . 87))
(1924 (make-tower . 87))
(1925 (the-usual-transforms . 57))
(1926 (define-usual-macro . 57))
(1927 (usual-transform . 57))
(1928 (do-spec? . 57))
(1929 (specs? . 57))
(1930 (case-clause? . 57))
(1931 (process-rules . 57))
(1932 (segment-pattern? . 57))
(1933 (segment-template? . 57))
(1934 (segment-depth . 57))
(1935 (segment-tail . 57))
(1936 (indicators-for-zero-or-more . 57))
(1937 (find-free-names-in-syntax-rules . 57))
(1938 (strongly-connected-components . 78))
(1939 (find-next-vertex . 78))
(1940 (:vertex . 78))
(1941 (really-make-vertex . 78))
(1942 (vertex-lowpoint . 78))
(1943 (set-vertex-lowpoint! . 78))
(1944 (vertex-parent . 78))
(1945 (set-vertex-parent! . 78))
(1946 (vertex-index . 78))
(1947 (set-vertex-index! . 78))
(1948 (vertex-stack . 78))
(1949 (set-vertex-stack! . 78))
(1950 (vertex-edges . 78))
(1951 (set-vertex-edges! . 78))
(1952 (vertex-data . 78))
(1953 (vertex? . 78))
(1954 (make-vertex . 78))
(1955 (make-vertices . 78))
(1956 (do-vertex . 78))
(1957 (get-strong . 78))
(1958 (end-vertex . 78))
(1959 (unwind-stack . 78))
(1960 (follow-edge . 78))
(1961 (pop-vertex-edge! . 78))
(1962 (find-usages . 75))
(1963 (maybe-update-known-type . 75))
(1964 (find-node-usages . 75))
(1965 (analyze . 75))
(1966 (analyze-nodes . 75))
(1967 (usage-analyzers . 75))
(1968 (define-usage-analyzer . 75))
(1969 (nothing . 75))
(1970 (add-if-free . 75))
(1971 (analyze-letrec . 75))
(1972 (:usage . 75))
(1973 (really-make-usage . 75))
(1974 (usage-assignment-count . 75))
(1975 (set-assignment! . 75))
(1976 (usage-operator-count . 75))
(1977 (set-operator! . 75))
(1978 (usage-reference-count . 75))
(1979 (set-reference! . 75))
(1980 (usage-name-node . 75))
(1981 (usage? . 75))
(1982 (make-usage . 75))
(1983 (make-package-usage . 75))
(1984 (package-usage? . 75))
(1985 (usage-incrementator . 75))
(1986 (note-reference! . 75))
(1987 (note-operator! . 75))
(1988 (note-assignment! . 75))
(1989 (lambda-node? . 75))
(1990 (quote-node? . 75))
(1991 (literal-node? . 75))
(1992 (call-node? . 75))
(1993 (name-node? . 75))
(1994 (define-node? . 75))
(1995 (sort-forms . 75))
(1996 (stuff-count . 75))
(1997 (maybe-make-aliased . 75))
(1998 (topologically-sort . 75))
(1999 (:form . 75))
(2000 (really-make-form . 75))
(2001 (form-temp . 75))
(2002 (set-form-temp! . 75))
(2003 (form-free . 75))
(2004 (set-form-free! . 75))
(2005 (form-unaliased? . 75))
(2006 (set-form-unaliased?! . 75))
(2007 (form-aliases . 75))
(2008 (set-form-aliases! . 75))
(2009 (form-node . 75))
(2010 (form? . 75))
(2011 (make-form . 75))
(2012 (insert-aliases . 75))
(2013 (make-inline-transform . 77))
(2014 (clean-node . 77))
(2015 (clean-lambda . 77))
(2016 (clean-lookup . 77))
(2017 (unused-name . 77))
(2018 (remove-bindings . 77))
(2019 (inline-transform . 77))
(2020 (make-substitution . 77))
(2021 (reconstitute . 77))
(2022 (reconstitute-name . 77))
(2023 (operator/name . 77))
(2024 (operator/literal . 77))
(2025 (qualified->name . 77))
(2026 (get-qualified-env . 77))
(2027 (quote-node? . 77))
(2028 (call-node? . 77))
(2029 (lambda-node? . 77))
(2030 (name-node? . 77))
(2031 (loophole-node? . 77))
(2032 (operator . 84))
(2033 (primop . 84))
(2034 (simple-interface . 84))
(2035 (package . 84))
(2036 (transform . 84))
(2037 (package-define-static! . 84))
(2038 (arithmetic-shift-right . 37))
(2039 (shift-left . 37))
(2040 (adjoin-bits . 37))
(2041 (low-bits . 37))
(2042 (high-bits . 37))
(2043 (unsigned-high-bits . 37))
(2044 (assert . 37))
(2045 (useful-bits-per-word . 37))
(2046 (bits-per-byte . 37))
(2047 (bytes-per-cell . 37))
(2048 (bits-per-cell . 37))
(2049 (bytes->cells . 37))
(2050 (cells->bytes . 37))
(2051 (unused-field-width . 37))
(2052 (addressing-units-per-cell . 37))
(2053 (cells->a-units . 37))
(2054 (a-units->cells . 37))
(2055 (bytes->a-units . 37))
(2056 (tag-field-width . 37))
(2057 (data-field-width . 37))
(2058 (make-descriptor . 37))
(2059 (descriptor-tag . 37))
(2060 (descriptor-data . 37))
(2061 (unsigned-descriptor-data . 37))
(2062 (set-descriptor-tag . 37))
(2063 (vm-eq? . 37))
(2064 (tag . 37))
(2065 (tag-enumeration . 37))
(2066 (tag-count . 37))
(2067 (fixnum? . 37))
(2068 (immediate? . 37))
(2069 (header? . 37))
(2070 (stob? . 37))
(2071 (bits-per-fixnum . 37))
(2072 (least-fixnum-value . 37))
(2073 (greatest-fixnum-value . 37))
(2074 (too-big-for-fixnum? . 37))
(2075 (too-small-for-fixnum? . 37))
(2076 (enter-fixnum . 37))
(2077 (extract-fixnum . 37))
(2078 (descriptor->fixnum . 37))
(2079 (fixnum->stob . 37))
(2080 (fixnum= . 37))
(2081 (fixnum< . 37))
(2082 (fixnum> . 37))
(2083 (fixnum<= . 37))
(2084 (fixnum>= . 37))
(2085 (fixnum-bitwise-not . 37))
(2086 (fixnum-bitwise-and . 37))
(2087 (fixnum-bitwise-ior . 37))
(2088 (fixnum-bitwise-xor . 37))
(2089 (immediate-type-field-width . 37))
(2090 (make-immediate . 37))
(2091 (immediate-type . 37))
(2092 (immediate-info . 37))
(2093 (tag&immediate-type . 37))
(2094 (make-tag&immediate-type . 37))
(2095 (imm . 37))
(2096 (imm-enumeration . 37))
(2097 (imm-count . 37))
(2098 (immediate-predicate . 37))
(2099 (vm-char? . 37))
(2100 (undefined? . 37))
(2101 (true . 37))
(2102 (false . 37))
(2103 (eof-object . 37))
(2104 (null . 37))
(2105 (unspecific-value . 37))
(2106 (quiescent . 37))
(2107 (unbound-marker . 37))
(2108 (unassigned-marker . 37))
(2109 (unreleased-value . 37))
(2110 (false? . 37))
(2111 (enter-boolean . 37))
(2112 (extract-boolean . 37))
(2113 (vm-boolean? . 37))
(2114 (enter-char . 37))
(2115 (extract-char . 37))
(2116 (vm-char=? . 37))
(2117 (vm-char<? . 37))
(2118 (header-type-field-width . 37))
(2119 (header-size-field-width . 37))
(2120 (max-stob-contents-size-in-cells . 37))
(2121 (make-header . 37))
(2122 (header-immutable-bit-mask . 37))
(2123 (make-header-immutable . 37))
(2124 (header-type . 37))
(2125 (immutable-header? . 37))
(2126 (header-length-in-bytes . 37))
(2127 (header-length-in-cells . 37))
(2128 (header-length-in-a-units . 37))
(2129 (d-vector-header? . 37))
(2130 (b-vector-header? . 37))
(2131 (add-stob-tag . 37))
(2132 (remove-stob-tag . 37))
(2133 (:syntax . 73))
(2134 (:values . 73))
(2135 (:arguments . 73))
(2136 (:value . 73))
(2137 (procedure . 73))
(2138 (:boolean . 73))
(2139 (:char . 73))
(2140 (:null . 73))
(2141 (:unspecific . 73))
(2142 (:number . 73))
(2143 (:complex . 73))
(2144 (:real . 73))
(2145 (:rational . 73))
(2146 (:integer . 73))
(2147 (:exact-integer . 73))
(2148 (:pair . 73))
(2149 (:string . 73))
(2150 (:symbol . 73))
(2151 (:vector . 73))
(2152 (:procedure . 73))
(2153 (:input-port . 73))
(2154 (:output-port . 73))
(2155 (:error . 73))
(2156 (:escape . 73))
(2157 (:structure . 73))
(2158 (:type . 73))
(2159 (def . 72))
(2160 (really-def . 72))
(2161 (define-multiple . 72))
(2162 (define-interface . 72))
(2163 (compound-interface . 72))
(2164 (export . 72))
(2165 (define-structure . 72))
(2166 (define-structures . 72))
(2167 (structure . 72))
(2168 (structures . 72))
(2169 (modify . 72))
(2170 (subset . 72))
(2171 (with-prefix . 72))
(2172 (a-package . 72))
(2173 (receive . 72))
(2174 (define-reflective-tower-maker . 72))
(2175 (export-reflective-tower-maker . 72))
(2176 (define-module . 72))
(2177 (make-a-package . 72))
(2178 (loser . 72))
(2179 (interface-of . 72))
(2180 (*verify-later!* . 72))
(2181 (verify-later! . 72))
(2182 (set-verify-later! . 72))
(2183 (note-name! . 72))
(2184 (collect-packages . 69))
(2185 (package-source . 69))
(2186 (read-files . 69))
(2187 (package-optimizer-names . 69))
(2188 (check-structure . 69))
(2189 (compile-package . 71))
(2190 (expand-package . 71))
(2191 (define-usual-transform . 71))
(2192 (define-primitives . 71))
(2193 (make-define-primitive-node . 71))
(2194 (operator/define . 71))
(2195 (operator/primitive-procedure . 71))
(2196 (analyze-forms . 76))
(2197 (analyze-form . 76))
(2198 (inlinable-rhs? . 76))
(2199 (simple-lambda? . 76))
(2200 (operator/name . 76))
(2201 (simple? . 76))
(2202 (simple-list? . 76))
(2203 (analyzers . 76))
(2204 (define-analyzer . 76))
(2205 (static-value . 76))
(2206 (really-simple-call? . 76))
(2207 (primitive-proc? . 76))
(2208 (no-ret . 76))
(2209 (ret . 76))
(2210 (simple-literal? . 76))
(2211 (require . 76))
(2212 (*debug?* . 76))
(2213 (package-lookup-type . 76))
(2214 (lambda-node? . 76))
(2215 (name-node? . 76))
(2216 (loophole-node? . 76))
(2217 (define-node? . 76))
(2218 (literal-node? . 76))
(2219 (ensure-loaded . 83))
-
; Template uid -> name, parent, env maps
(0 scheme-level-0 #f ())
(1 atan #f ())
(2 scheme-level-0 #f ())
(3 set-location-defined?! #f ())
(4 scheme-level-0 #f ())
(5 acos #f ())
(6 scheme-level-0 #f ())
(7 vm-extension #f ())
(8 scheme-level-0 #f ())
(9 asin #f ())
(10 scheme-level-0 #f ())
(11 location-defined? #f ())
(12 scheme-level-0 #f ())
(13 time #f ())
(14 scheme-level-0 #f ())
(15 template-set! #f ())
(16 scheme-level-0 #f ())
(17 set-current-proposal! #f ())
(18 scheme-level-0 #f ())
(19 scheme-level-0 #f ())
(20 cons #f ())
(21 scheme-level-0 #f ())
(22 wait #f ())
(23 scheme-level-0 #f ())
(24 trap #f ())
(25 scheme-level-0 #f ())
(26 assq #f ())
(27 scheme-level-0 #f ())
(28 current-proposal #f ())
(29 scheme-level-0 #f ())
(30 make-weak-pointer #f ())
(31 scheme-level-0 #f ())
(32 lookup-shared-binding #f ())
(33 scheme-level-0 #f ())
(34 push #f ())
(35 scheme-level-0 #f ())
(36 provisional-set-contents! #f ())
(37 scheme-level-0 #f ())
(38 set-contents! #f ())
(39 scheme-level-0 #f ())
(40 read-char #f ())
(41 scheme-level-0 #f ())
(42 provisional-contents #f ())
(43 scheme-level-0 #f ())
(44 make-cell #f ())
(45 scheme-level-0 #f ())
(46 sqrt #f ())
(47 scheme-level-0 #f ())
(48 * #f ())
(49 scheme-level-0 #f ())
(50 contents #f ())
(51 scheme-level-0 #f ())
(52 + #f ())
(53 scheme-level-0 #f ())
(54 peek-char #f ())
(55 scheme-level-0 #f ())
(56 - #f ())
(57 scheme-level-0 #f ())
(58 continuation-set! #f ())
(59 scheme-level-0 #f ())
(60 / #f ())
(61 scheme-level-0 #f ())
(62 weak-pointer? #f ())
(63 scheme-level-0 #f ())
(64 atan1 #f ())
(65 scheme-level-0 #f ())
(66 atan2 #f ())
(67 scheme-level-0 #f ())
(68 quotient #f ())
(69 scheme-level-0 #f ())
(70 close-channel #f ())
(71 scheme-level-0 #f ())
(72 channel-abort #f ())
(73 scheme-level-0 #f ())
(74 char? #f ())
(75 scheme-level-0 #f ())
(76 < #f ())
(77 scheme-level-0 #f ())
(78 = #f ())
(79 scheme-level-0 #f ())
(80 provisional-set-port-data! #f ())
(81 scheme-level-0 #f ())
(82 cell? #f ())
(83 scheme-level-0 #f ())
(84 > #f ())
(85 scheme-level-0 #f ())
(86 make-location #f ())
(87 scheme-level-0 #f ())
(88 imag-part #f ())
(89 scheme-level-0 #f ())
(90 set-port-data! #f ())
(91 scheme-level-0 #f ())
(92 make-template #f ())
(93 scheme-level-0 #f ())
(94 real? #f ())
(95 scheme-level-0 #f ())
(96 real-part #f ())
(97 scheme-level-0 #f ())
(98 provisional-port-data #f ())
(99 scheme-level-0 #f ())
(100 record-length #f ())
(101 scheme-level-0 #f ())
(102 port-data #f ())
(103 scheme-level-0 #f ())
(104 pair? #f ())
(105 scheme-level-0 #f ())
(106 provisional-set-port-lock! #f ())
(107 scheme-level-0 #f ())
(108 make-port #f ())
(109 scheme-level-0 #f ())
(110 set-port-lock! #f ())
(111 scheme-level-0 #f ())
(112 bit-count #f ())
(113 scheme-level-0 #f ())
(114 provisional-checked-record-ref #f ())
(115 scheme-level-0 #f ())
(116 return-from-exception #f ())
(117 scheme-level-0 #f ())
(118 provisional-port-lock #f ())
(119 scheme-level-0 #f ())
(120 location? #f ())
(121 scheme-level-0 #f ())
(122 checked-record-ref #f ())
(123 scheme-level-0 #f ())
(124 channel-maybe-read #f ())
(125 scheme-level-0 #f ())
(126 add-finalizer! #f ())
(127 scheme-level-0 #f ())
(128 rational? #f ())
(129 scheme-level-0 #f ())
(130 template? #f ())
(131 scheme-level-0 #f ())
(132 port-lock #f ())
(133 scheme-level-0 #f ())
(134 vector-length #f ())
(135 scheme-level-0 #f ())
(136 make-continuation #f ())
(137 scheme-level-0 #f ())
(138 provisional-shared-binding-ref #f ())
(139 scheme-level-0 #f ())
(140 string-length #f ())
(141 scheme-level-0 #f ())
(142 shared-binding-ref #f ())
(143 scheme-level-0 #f ())
(144 port? #f ())
(145 scheme-level-0 #f ())
(146 angle #f ())
(147 scheme-level-0 #f ())
(148 false #f ())
(149 scheme-level-0 #f ())
(150 remainder #f ())
(151 scheme-level-0 #f ())
(152 continuation? #f ())
(153 scheme-level-0 #f ())
(154 channel-ready? #f ())
(155 scheme-level-0 #f ())
(156 binary-reduce1 #f ())
(157 scheme-level-0 #f ())
(158 binary-reduce2 #f ())
(159 scheme-level-0 #f ())
(160 char<? #f ())
(161 scheme-level-0 #f ())
(162 char=? #f ())
(163 scheme-level-0 #f ())
(164 <= #f ())
(165 scheme-level-0 #f ())
(166 magnitude #f ())
(167 scheme-level-0 #f ())
(168 >= #f ())
(169 scheme-level-0 #f ())
(170 with-continuation #f ())
(171 scheme-level-0 #f ())
(172 floor #f ())
(173 scheme-level-0 #f ())
(174 provisional-checked-record-set! #f ())
(175 scheme-level-0 #f ())
(176 apply #f ())
(177 scheme-level-0 #f ())
(178 memory-status #f ())
(179 scheme-level-0 #f ())
(180 checked-record-set! #f ())
(181 scheme-level-0 #f ())
(182 inexact->exact #f ())
(183 scheme-level-0 #f ())
(184 exact->inexact #f ())
(185 scheme-level-0 #f ())
(186 error #f ())
(187 scheme-level-0 #f ())
(188 extended-number-length #f ())
(189 scheme-level-0 #f ())
(190 open-channels-list #f ())
(191 scheme-level-0 #f ())
(192 provisional-shared-binding-set! #f ())
(193 scheme-level-0 #f ())
(194 channel-id #f ())
(195 scheme-level-0 #f ())
(196 shared-binding-set! #f ())
(197 scheme-level-0 #f ())
(198 numerator #f ())
(199 scheme-level-0 #f ())
(200 eof-object #f ())
(201 scheme-level-0 #f ())
(202 byte-vector-length #f ())
(203 scheme-level-0 #f ())
(204 record-ref #f ())
(205 scheme-level-0 #f ())
(206 make-polar #f ())
(207 scheme-level-0 #f ())
(208 write-char #f ())
(209 scheme-level-0 #f ())
(210 symbol->string #f ())
(211 scheme-level-0 #f ())
(212 exact? #f ())
(213 scheme-level-0 #f ())
(214 push-false #f ())
(215 scheme-level-0 #f ())
(216 provisional-vector-ref #f ())
(217 scheme-level-0 #f ())
(218 vector-ref #f ())
(219 scheme-level-0 #f ())
(220 set-current-thread! #f ())
(221 scheme-level-0 #f ())
(222 provisional-set-port-index! #f ())
(223 scheme-level-0 #f ())
(224 immutable? #f ())
(225 scheme-level-0 #f ())
(226 set-exception-handlers! #f ())
(227 scheme-level-0 #f ())
(228 string-ref #f ())
(229 scheme-level-0 #f ())
(230 set-port-index! #f ())
(231 scheme-level-0 #f ())
(232 provisional-set-port-limit! #f ())
(233 scheme-level-0 #f ())
(234 make-shared-binding #f ())
(235 scheme-level-0 #f ())
(236 current-thread #f ())
(237 scheme-level-0 #f ())
(238 provisional-port-index #f ())
(239 scheme-level-0 #f ())
(240 channel-status #f ())
(241 scheme-level-0 #f ())
(242 set-port-limit! #f ())
(243 scheme-level-0 #f ())
(244 shared-binding-name #f ())
(245 scheme-level-0 #f ())
(246 port-index #f ())
(247 scheme-level-0 #f ())
(248 make-immutable! #f ())
(249 scheme-level-0 #f ())
(250 byte-vector-logging-ref #f ())
(251 scheme-level-0 #f ())
(252 set-enabled-interrupts! #f ())
(253 scheme-level-0 #f ())
(254 provisional-port-limit #f ())
(255 scheme-level-0 #f ())
(256 port-limit #f ())
(257 scheme-level-0 #f ())
(258 ascii->char #f ())
(259 scheme-level-0 #f ())
(260 char->ascii #f ())
(261 scheme-level-0 #f ())
(262 undefine-shared-binding #f ())
(263 scheme-level-0 #f ())
(264 attempt-copy-bytes! #f ())
(265 scheme-level-0 #f ())
(266 record-set! #f ())
(267 scheme-level-0 #f ())
(268 shared-binding? #f ())
(269 scheme-level-0 #f ())
(270 eof-object? #f ())
(271 scheme-level-0 #f ())
(272 set-interrupt-handlers! #f ())
(273 scheme-level-0 #f ())
(274 record #f ())
(275 scheme-level-0 #f ())
(276 schedule-interrupt #f ())
(277 scheme-level-0 #f ())
(278 channel-maybe-write #f ())
(279 scheme-level-0 #f ())
(280 unspecific #f ())
(281 scheme-level-0 #f ())
(282 provisional-vector-set! #f ())
(283 scheme-level-0 #f ())
(284 extended-number-ref #f ())
(285 scheme-level-0 #f ())
(286 vector-set! #f ())
(287 scheme-level-0 #f ())
(288 copy-bytes! #f ())
(289 scheme-level-0 #f ())
(290 string-set! #f ())
(291 scheme-level-0 #f ())
(292 unassigned #f ())
(293 scheme-level-0 #f ())
(294 call-external-value #f ())
(295 scheme-level-0 #f ())
(296 values #f ())
(297 scheme-level-0 #f ())
(298 intern #f ())
(299 scheme-level-0 #f ())
(300 vector #f ())
(301 scheme-level-0 #f ())
(302 write-image-low #f ())
(303 scheme-level-0 #f ())
(304 provisional-byte-vector-ref #f ())
(305 scheme-level-0 #f ())
(306 byte-vector-logging-set! #f ())
(307 scheme-level-0 #f ())
(308 byte-vector-ref #f ())
(309 scheme-level-0 #f ())
(310 make-double #f ())
(311 scheme-level-0 #f ())
(312 provisional-set-location-id! #f ())
(313 scheme-level-0 #f ())
(314 make-record #f ())
(315 scheme-level-0 #f ())
(316 set-location-id! #f ())
(317 scheme-level-0 #f ())
(318 provisional-location-id #f ())
(319 scheme-level-0 #f ())
(320 location-id #f ())
(321 scheme-level-0 #f ())
(322 bitwise-and #f ())
(323 scheme-level-0 #f ())
(324 eq? #f ())
(325 scheme-level-0 #f ())
(326 double? #f ())
(327 scheme-level-0 #f ())
(328 extended-number-set! #f ())
(329 scheme-level-0 #f ())
(330 make-vector #f ())
(331 scheme-level-0 #f ())
(332 record? #f ())
(333 scheme-level-0 #f ())
(334 provisional-set-port-buffer! #f ())
(335 scheme-level-0 #f ())
(336 make-string #f ())
(337 scheme-level-0 #f ())
(338 set-port-buffer! #f ())
(339 scheme-level-0 #f ())
(340 primitive-catch #f ())
(341 scheme-level-0 #f ())
(342 string-hash #f ())
(343 scheme-level-0 #f ())
(344 provisional-byte-vector-set! #f ())
(345 scheme-level-0 #f ())
(346 template-length #f ())
(347 scheme-level-0 #f ())
(348 provisional-port-buffer #f ())
(349 scheme-level-0 #f ())
(350 number? #f ())
(351 scheme-level-0 #f ())
(352 port-buffer #f ())
(353 scheme-level-0 #f ())
(354 byte-vector-set! #f ())
(355 scheme-level-0 #f ())
(356 bitwise-ior #f ())
(357 scheme-level-0 #f ())
(358 provisional-set-car! #f ())
(359 scheme-level-0 #f ())
(360 provisional-set-cdr! #f ())
(361 scheme-level-0 #f ())
(362 set-car! #f ())
(363 scheme-level-0 #f ())
(364 closure-env #f ())
(365 scheme-level-0 #f ())
(366 vector? #f ())
(367 scheme-level-0 #f ())
(368 bitwise-not #f ())
(369 scheme-level-0 #f ())
(370 set-cdr! #f ())
(371 scheme-level-0 #f ())
(372 provisional-car #f ())
(373 scheme-level-0 #f ())
(374 symbol? #f ())
(375 scheme-level-0 #f ())
(376 string? #f ())
(377 scheme-level-0 #f ())
(378 provisional-cdr #f ())
(379 scheme-level-0 #f ())
(380 car #f ())
(381 scheme-level-0 #f ())
(382 bitwise-xor #f ())
(383 scheme-level-0 #f ())
(384 cdr #f ())
(385 scheme-level-0 #f ())
(386 find-all-records #f ())
(387 scheme-level-0 #f ())
(388 continuation-length #f ())
(389 scheme-level-0 #f ())
(390 log #f ())
(391 scheme-level-0 #f ())
(392 message #f ())
(393 scheme-level-0 #f ())
(394 tan #f ())
(395 scheme-level-0 #f ())
(396 collect #f ())
(397 scheme-level-0 #f ())
(398 cos #f ())
(399 scheme-level-0 #f ())
(400 channel-os-index #f ())
(401 scheme-level-0 #f ())
(402 provisional-set-port-status! #f ())
(403 scheme-level-0 #f ())
(404 make-extended-number #f ())
(405 scheme-level-0 #f ())
(406 set-port-status! #f ())
(407 scheme-level-0 #f ())
(408 sin #f ())
(409 scheme-level-0 #f ())
(410 exp #f ())
(411 scheme-level-0 #f ())
(412 provisional-port-status #f ())
(413 scheme-level-0 #f ())
(414 pop #f ())
(415 scheme-level-0 #f ())
(416 port-status #f ())
(417 scheme-level-0 #f ())
(418 return-from-callback #f ())
(419 scheme-level-0 #f ())
(420 make-byte-vector #f ())
(421 scheme-level-0 #f ())
(422 weak-pointer-ref #f ())
(423 scheme-level-0 #f ())
(424 call-with-values #f ())
(425 scheme-level-0 #f ())
(426 denominator #f ())
(427 scheme-level-0 #f ())
(428 reverse-list->string #f ())
(429 scheme-level-0 #f ())
(430 extended-number? #f ())
(431 scheme-level-0 #f ())
(432 shared-binding-is-import? #f ())
(433 scheme-level-0 #f ())
(434 provisional-cell-ref #f ())
(435 scheme-level-0 #f ())
(436 find-all #f ())
(437 scheme-level-0 #f ())
(438 cell-ref #f ())
(439 scheme-level-0 #f ())
(440 byte-vector? #f ())
(441 scheme-level-0 #f ())
(442 string=? #f ())
(443 scheme-level-0 #f ())
(444 open-channel #f ())
(445 scheme-level-0 #f ())
(446 channel? #f ())
(447 scheme-level-0 #f ())
(448 unassigned-check #f ())
(449 scheme-level-0 #f ())
(450 make-rectangular #f ())
(451 scheme-level-0 #f ())
(452 set-session-data! #f ())
(453 scheme-level-0 #f ())
(454 maybe-commit #f ())
(455 scheme-level-0 #f ())
(456 template-ref #f ())
(457 scheme-level-0 #f ())
(458 make-closure #f ())
(459 scheme-level-0 #f ())
(460 session-data #f ())
(461 scheme-level-0 #f ())
(462 integer? #f ())
(463 scheme-level-0 #f ())
(464 signal-condition #f ())
(465 scheme-level-0 #f ())
(466 provisional-set-port-pending-eof?! #f ())
(467 scheme-level-0 #f ())
(468 port-handler #f ())
(469 scheme-level-0 #f ())
(470 set-port-pending-eof?! #f ())
(471 scheme-level-0 #f ())
(472 arithmetic-shift #f ())
(473 scheme-level-0 #f ())
(474 provisional-port-pending-eof? #f ())
(475 scheme-level-0 #f ())
(476 provisional-cell-set! #f ())
(477 scheme-level-0 #f ())
(478 complex? #f ())
(479 scheme-level-0 #f ())
(480 port-pending-eof? #f ())
(481 scheme-level-0 #f ())
(482 cell-set! #f ())
(483 scheme-level-0 #f ())
(484 binary-comparison-reduce2 #f ())
(485 scheme-level-0 #f ())
(486 scheme-level-0 #f ())
(487 closure? #f ())
(488 scheme-level-0 #f ())
(489 continuation-ref #f ())
(490 scheme-level-0 #f ())
(491 closure-template #f ())
(492 scheme-level-0 #f ())
(493 current-cont #f ())
(494 scheme-level-0 #f ())
(495 char->integer 494 ())
(496 scheme-level-0 #f ())
(497 integer->char 496 ())
(498 scheme-level-0 #f ())
(499 invoke-closure 498 ())
(500 scheme-level-0 #f ())
(501 primitive-cwcc 500 ())
(502 #f 501 ())
(503 scheme-level-0 #f ())
(504 make-undefined-location 503 ())
(505 scheme-level-0 #f ())
(506 location-assigned? 505 ())
(507 scheme-level-0 #f ())
(508 cell-unassigned? 507 ())
(509 scheme-level-0 #f ())
(510 vector-unassigned? 509 ())
(511 scheme-level-0 #f ())
(512 string-copy 511 ())
(513 scheme-level-0 #f ())
(514 string->symbol 513 ())
(515 scheme-level-0 #f ())
(516 input-port? 515 ())
(517 scheme-level-0 #f ())
(518 output-port? 517 ())
(519 scheme-level-0 #f ())
(520 record-type 519 ())
(521 scheme-level-0 #f ())
(522 make-code-vector 521 ())
(523 scheme-level-0 #f ())
(524 code-vector? 523 ())
(525 scheme-level-0 #f ())
(526 code-vector-length 525 ())
(527 scheme-level-0 #f ())
(528 code-vector-ref 527 ())
(529 scheme-level-0 #f ())
(530 code-vector-set! 529 ())
(531 scheme-level-0 #f ())
(532 lookup-imported-binding 531 ())
(533 scheme-level-0 #f ())
(534 lookup-exported-binding 533 ())
(535 scheme-level-0 #f ())
(536 define-imported-binding 535 ())
(537 scheme-level-0 #f ())
(538 define-exported-binding 537 ())
(539 scheme-level-0 #f ())
(540 undefine-imported-binding 539 ())
(541 scheme-level-0 #f ())
(542 undefine-exported-binding 541 ())
(543 scheme-level-0 #f ())
(544 secret-length 543 ())
(545 scheme-level-0 #f ())
(546 byte-vector 545 ())
(547 loop##0 546 ())
(548 scheme-level-0 #f ())
(549 debug-message 548 ())
(550 scheme-level-0 #f ())
(551 signal 550 ())
(552 scheme-level-0 #f ())
(553 vector-prefix->list 552 ())
(554 loop##1 553 ())
(555 scheme-level-0 #f ())
(556 write-image 555 ())
(557 scheme-level-0 #f ())
(558 make-proposal 557 ())
(559 scheme-level-0 #f ())
(560 warn 559 ())
(561 scheme-level-0 #f ())
(562 note 561 ())
(563 scheme-level-0 #f ())
(564 syntax-error 563 ())
(565 scheme-level-0 #f ())
(566 call-error 565 ())
(567 scheme-level-0 #f ())
(568 scheme-level-0 #f ())
(569 scheme-level-0 #f ())
(570 scheme-level-1 #f ())
(571 scheme-level-1 #f ())
(572 scheme-level-1 #f ())
(573 scheme-level-1 #f ())
(574 scheme-level-1 #f ())
(575 scheme-level-1 #f ())
(576 scheme-level-1 #f ())
(577 scheme-level-1 #f ())
(578 scheme-level-1 #f ())
(579 scheme-level-1 #f ())
(580 scheme-level-1 #f ())
(581 scheme-level-1 #f ())
(582 #f 581 ())
(583 scheme-level-1 #f ())
(584 #f 583 ())
(585 scheme-level-1 #f ())
(586 scheme-level-1 #f ())
(587 scheme-level-1 #f ())
(588 scheme-level-1 #f ())
(589 scheme-level-1 #f ())
(590 scheme-level-1 #f ())
(591 scheme-level-1 #f ())
(592 not 591 ())
(593 scheme-level-1 #f ())
(594 boolean? 593 ())
(595 scheme-level-1 #f ())
(596 eqv? 595 ())
(597 scheme-level-1 #f ())
(598 equal? 597 ())
(599 loop 598 ())
(600 scheme-level-1 #f ())
(601 null? 600 ())
(602 scheme-level-1 #f ())
(603 inexact? 602 ())
(604 scheme-level-1 #f ())
(605 max-or-min 604 ())
(606 loop 605 ())
(607 scheme-level-1 #f ())
(608 max 607 ())
(609 scheme-level-1 #f ())
(610 min 609 ())
(611 scheme-level-1 #f ())
(612 abs 611 ())
(613 scheme-level-1 #f ())
(614 zero? 613 ())
(615 scheme-level-1 #f ())
(616 positive? 615 ())
(617 scheme-level-1 #f ())
(618 negative? 617 ())
(619 scheme-level-1 #f ())
(620 even? 619 ())
(621 scheme-level-1 #f ())
(622 odd? 621 ())
(623 scheme-level-1 #f ())
(624 caar 623 ())
(625 scheme-level-1 #f ())
(626 cadr 625 ())
(627 scheme-level-1 #f ())
(628 cdar 627 ())
(629 scheme-level-1 #f ())
(630 cddr 629 ())
(631 scheme-level-1 #f ())
(632 caaar 631 ())
(633 scheme-level-1 #f ())
(634 caadr 633 ())
(635 scheme-level-1 #f ())
(636 cadar 635 ())
(637 scheme-level-1 #f ())
(638 caddr 637 ())
(639 scheme-level-1 #f ())
(640 cdaar 639 ())
(641 scheme-level-1 #f ())
(642 cdadr 641 ())
(643 scheme-level-1 #f ())
(644 cddar 643 ())
(645 scheme-level-1 #f ())
(646 cdddr 645 ())
(647 scheme-level-1 #f ())
(648 caaaar 647 ())
(649 scheme-level-1 #f ())
(650 caaadr 649 ())
(651 scheme-level-1 #f ())
(652 caadar 651 ())
(653 scheme-level-1 #f ())
(654 caaddr 653 ())
(655 scheme-level-1 #f ())
(656 cadaar 655 ())
(657 scheme-level-1 #f ())
(658 cadadr 657 ())
(659 scheme-level-1 #f ())
(660 caddar 659 ())
(661 scheme-level-1 #f ())
(662 cadddr 661 ())
(663 scheme-level-1 #f ())
(664 cdaaar 663 ())
(665 scheme-level-1 #f ())
(666 cdaadr 665 ())
(667 scheme-level-1 #f ())
(668 cdadar 667 ())
(669 scheme-level-1 #f ())
(670 cdaddr 669 ())
(671 scheme-level-1 #f ())
(672 cddaar 671 ())
(673 scheme-level-1 #f ())
(674 cddadr 673 ())
(675 scheme-level-1 #f ())
(676 cdddar 675 ())
(677 scheme-level-1 #f ())
(678 cddddr 677 ())
(679 scheme-level-1 #f ())
(680 list 679 ())
(681 scheme-level-1 #f ())
(682 real-length 681 ())
(683 scheme-level-1 #f ())
(684 length 683 ())
(685 scheme-level-1 #f ())
(686 reduce 685 ())
(687 scheme-level-1 #f ())
(688 append 687 ())
(689 recur 688 ())
(690 scheme-level-1 #f ())
(691 append-reverse 690 ())
(692 scheme-level-1 #f ())
(693 reverse 692 ())
(694 scheme-level-1 #f ())
(695 list-tail 694 ())
(696 scheme-level-1 #f ())
(697 list-ref 696 ())
(698 scheme-level-1 #f ())
(699 mem 698 ())
(700 #f 699 ())
(701 loop 700 ())
(702 scheme-level-1 #f ())
(703 ass 702 ())
(704 #f 703 ())
(705 loop 704 ())
(706 scheme-level-1 #f ())
(707 list? 706 ())
(708 recur 707 ())
(709 scheme-level-1 #f ())
(710 char>? 709 ())
(711 scheme-level-1 #f ())
(712 char>=? 711 ())
(713 scheme-level-1 #f ())
(714 char<=? 713 ())
(715 scheme-level-1 #f ())
(716 char-whitespace? 715 ())
(717 scheme-level-1 #f ())
(718 char-lower-case? 717 ())
(719 scheme-level-1 #f ())
(720 char-upper-case? 719 ())
(721 scheme-level-1 #f ())
(722 char-numeric? 721 ())
(723 scheme-level-1 #f ())
(724 char-alphabetic? 723 ())
(725 scheme-level-1 #f ())
(726 make-character-map 725 ())
(727 loop##9 726 ())
(728 scheme-level-1 #f ())
(729 char-upcase 728 ())
(730 scheme-level-1 #f ())
(731 char-downcase 730 ())
(732 scheme-level-1 #f ())
(733 char-ci-compare 732 ())
(734 #f 733 ())
(735 scheme-level-1 #f ())
(736 list->string 735 ())
(737 loop##11 736 ())
(738 scheme-level-1 #f ())
(739 string 738 ())
(740 scheme-level-1 #f ())
(741 substring 740 ())
(742 loop##12 741 ())
(743 scheme-level-1 #f ())
(744 string-append 743 ())
(745 #f 744 ())
(746 loop 744 ())
(747 loop##13 746 ())
(748 scheme-level-1 #f ())
(749 string->list 748 ())
(750 loop##14 749 ())
(751 scheme-level-1 #f ())
(752 unspecific 751 ())
(753 scheme-level-1 #f ())
(754 string-fill! 753 ())
(755 loop##15 754 ())
(756 scheme-level-1 #f ())
(757 make-string=? 756 ())
(758 #f 757 ())
(759 loop 758 ())
(760 scheme-level-1 #f ())
(761 make-string<? 760 ())
(762 #f 761 ())
(763 loop 762 ())
(764 scheme-level-1 #f ())
(765 string>? 764 ())
(766 scheme-level-1 #f ())
(767 string<=? 766 ())
(768 scheme-level-1 #f ())
(769 string>=? 768 ())
(770 scheme-level-1 #f ())
(771 string-ci>? 770 ())
(772 scheme-level-1 #f ())
(773 string-ci<=? 772 ())
(774 scheme-level-1 #f ())
(775 string-ci>=? 774 ())
(776 scheme-level-1 #f ())
(777 vector->list 776 ())
(778 loop##17 777 ())
(779 scheme-level-1 #f ())
(780 list->vector 779 ())
(781 loop##18 780 ())
(782 scheme-level-1 #f ())
(783 vector-fill! 782 ())
(784 loop##19 783 ())
(785 scheme-level-1 #f ())
(786 map1 785 ())
(787 scheme-level-1 #f ())
(788 any 787 ())
(789 scheme-level-1 #f ())
(790 map2+ 789 ())
(791 scheme-level-1 #f ())
(792 map 791 ())
(793 scheme-level-1 #f ())
(794 for-each1 793 ())
(795 loop 794 ())
(796 scheme-level-1 #f ())
(797 for-each2+ 796 ())
(798 loop 797 ())
(799 scheme-level-1 #f ())
(800 for-each 799 ())
(801 scheme-level-1 #f ())
(802 make-promise 801 ())
(803 #f 802 ())
(804 scheme-level-1 #f ())
(805 force 804 ())
(806 scheme-level-1 #f ())
(807 filter 806 ())
(808 #f 807 ())
(809 scheme-level-1 #f ())
(810 pos 809 ())
(811 #f 810 ())
(812 loop 811 ())
(813 scheme-level-1 #f ())
(814 every 813 ())
(815 scheme-level-1 #f ())
(816 sublist 815 ())
(817 recur 816 ())
(818 scheme-level-1 #f ())
(819 last 818 ())
(820 scheme-level-1 #f ())
(821 insert 820 ())
(822 scheme-level-1 #f ())
(823 fold 822 ())
(824 loop##23 823 ())
(825 scheme-level-1 #f ())
(826 fold->2 825 ())
(827 loop 826 ())
(828 #f 827 ())
(829 #f 827 ())
(830 scheme-level-1 #f ())
(831 fold->3 830 ())
(832 loop 831 ())
(833 #f 832 ())
(834 #f 832 ())
(835 scheme-level-1 #f ())
(836 modulo 835 ())
(837 scheme-level-1 #f ())
(838 ceiling 837 ())
(839 scheme-level-1 #f ())
(840 truncate 839 ())
(841 scheme-level-1 #f ())
(842 round 841 ())
(843 scheme-level-1 #f ())
(844 euclid 843 ())
(845 scheme-level-1 #f ())
(846 gcd 845 ())
(847 #f 846 ())
(848 scheme-level-1 #f ())
(849 lcm 848 ())
(850 #f 849 ())
(851 scheme-level-1 #f ())
(852 raise-to-integer-power 851 ())
(853 loop 852 ())
(854 scheme-level-1 #f ())
(855 expt 854 ())
(856 scheme-level-1 #f ())
(857 simplest-rational 856 ())
(858 simplest-rational-internal 857 ())
(859 scheme-level-1 #f ())
(860 rationalize 859 ())
(861 record-types #f ())
(862 #f 861 ())
(863 record-types #f ())
(864 record-types #f ())
(865 record-types #f ())
(866 record-types #f ())
(867 record-type-name 866 ())
(868 record-types #f ())
(869 make-default-record-discloser 868 ())
(870 #f 869 ())
(871 record-types #f ())
(872 make-record-type 871 ())
(873 record-types #f ())
(874 record-type? 873 ())
(875 record-types #f ())
(876 record-type-resumer 875 ())
(877 record-types #f ())
(878 set-record-type-resumer! 877 ())
(879 record-types #f ())
(880 record-type-uid 879 ())
(881 record-types #f ())
(882 record-type-field-names 881 ())
(883 record-types #f ())
(884 record-type-number-of-fields 883 ())
(885 record-types #f ())
(886 record-type-discloser 885 ())
(887 record-types #f ())
(888 set-record-type-discloser! 887 ())
(889 record-types #f ())
(890 record-field-index 889 ())
(891 loop 890 ())
(892 record-types #f ())
(893 record-constructor 892 ())
(894 #f 893 ())
(895 #f 893 ())
(896 loop 895 ())
(897 record-types #f ())
(898 record-accessor 897 ())
(899 #f 898 ())
(900 record-types #f ())
(901 record-modifier 900 ())
(902 #f 901 ())
(903 record-types #f ())
(904 record-predicate 903 ())
(905 #f 904 ())
(906 record-types #f ())
(907 define-record-discloser 906 ())
(908 record-types #f ())
(909 disclose-record 908 ())
(910 record-types #f ())
(911 define-record-resumer 910 ())
(912 record-types #f ())
(913 resume-record 912 ())
(914 record-types #f ())
(915 initialize-records! 914 ())
(916 loop##26 915 ())
(917 record-types #f ())
(918 record-types #f ())
(919 record-types #f ())
(920 record-types #f ())
(921 define-record-types #f ())
(922 methods #f ())
(923 &add-method! 922 ())
(924 methods #f ())
(925 &disclose 924 ())
(926 methods #f ())
(927 &disclose 926 ())
(928 methods #f ())
(929 methods #f ())
(930 disclose 929 ())
(931 methods #f ())
(932 &same-type? 931 ())
(933 methods #f ())
(934 &type-priority 933 ())
(935 methods #f ())
(936 &type-predicate 935 ())
(937 methods #f ())
(938 #f 937 ())
(939 methods #f ())
(940 singleton-value 939 ())
(941 methods #f ())
(942 singleton 941 ())
(943 methods #f ())
(944 methods #f ())
(945 &same-type? 944 ())
(946 methods #f ())
(947 &same-type? 946 ())
(948 methods #f ())
(949 methods #f ())
(950 same-type? 949 ())
(951 methods #f ())
(952 &type-superiors 951 ())
(953 methods #f ())
(954 &type-superiors 953 ())
(955 methods #f ())
(956 methods #f ())
(957 type-superiors 956 ())
(958 methods #f ())
(959 &type-priority 958 ())
(960 methods #f ())
(961 &type-priority 960 ())
(962 methods #f ())
(963 methods #f ())
(964 type-priority 963 ())
(965 methods #f ())
(966 &type-predicate 965 ())
(967 methods #f ())
(968 &type-predicate 967 ())
(969 methods #f ())
(970 methods #f ())
(971 type-predicate 970 ())
(972 methods #f ())
(973 add-method! 972 ())
(974 methods #f ())
(975 methods #f ())
(976 add-method! 975 ())
(977 methods #f ())
(978 #f 977 ())
(979 methods #f ())
(980 set-method-table-methods! 979 ())
(981 methods #f ())
(982 method-table-methods 981 ())
(983 methods #f ())
(984 method-table-prototype 983 ())
(985 methods #f ())
(986 make-generic 985 ())
(987 methods #f ())
(988 method-table-get-perform 987 ())
(989 methods #f ())
(990 method-table-set-perform! 989 ())
(991 methods #f ())
(992 method-table-id 991 ())
(993 methods #f ())
(994 really-make-method-table 993 ())
(995 methods #f ())
(996 methods #f ())
(997 #f 996 ())
(998 methods #f ())
(999 method-info-types 998 ())
(1000 methods #f ())
(1001 method-info-n-ary? 1000 ())
(1002 methods #f ())
(1003 method-info-proc 1002 ())
(1004 methods #f ())
(1005 really-make-method-info 1004 ())
(1006 methods #f ())
(1007 methods #f ())
(1008 record-type-priority 1007 ())
(1009 methods #f ())
(1010 methods #f ())
(1011 methods #f ())
(1012 methods #f ())
(1013 methods #f ())
(1014 methods #f ())
(1015 methods #f ())
(1016 methods #f ())
(1017 methods #f ())
(1018 methods #f ())
(1019 methods #f ())
(1020 methods #f ())
(1021 methods #f ())
(1022 #f 1021 ())
(1023 methods #f ())
(1024 methods #f ())
(1025 methods #f ())
(1026 methods #f ())
(1027 methods #f ())
(1028 methods #f ())
(1029 #f 1028 ())
(1030 methods #f ())
(1031 methods #f ())
(1032 methods #f ())
(1033 methods #f ())
(1034 #f 1033 ())
(1035 methods #f ())
(1036 simple-type-superiors 1035 ())
(1037 methods #f ())
(1038 simple-type-predicate 1037 ())
(1039 methods #f ())
(1040 simple-type-priority 1039 ())
(1041 methods #f ())
(1042 simple-type-id 1041 ())
(1043 methods #f ())
(1044 really-make-simple-type 1043 ())
(1045 methods #f ())
(1046 methods #f ())
(1047 simple-type? 1046 ())
(1048 methods #f ())
(1049 %type-priority 1048 ())
(1050 methods #f ())
(1051 compute-priority 1050 ())
(1052 methods #f ())
(1053 make-simple-type 1052 ())
(1054 methods #f ())
(1055 %type-predicate 1054 ())
(1056 methods #f ())
(1057 %same-type? 1056 ())
(1058 methods #f ())
(1059 value? 1058 ())
(1060 methods #f ())
(1061 method-info? 1060 ())
(1062 methods #f ())
(1063 make-method-info 1062 ())
(1064 methods #f ())
(1065 empty-method-list 1064 ())
(1066 methods #f ())
(1067 more-specific-type? 1066 ())
(1068 methods #f ())
(1069 more-specific? 1068 ())
(1070 loop 1069 ())
(1071 methods #f ())
(1072 every2 1071 ())
(1073 methods #f ())
(1074 same-applicability? 1073 ())
(1075 methods #f ())
(1076 insert-method 1075 ())
(1077 recur 1076 ())
(1078 methods #f ())
(1079 method-table? 1078 ())
(1080 methods #f ())
(1081 last-action 1080 ())
(1082 #f 1081 ())
(1083 methods #f ())
(1084 one-action 1083 ())
(1085 #f 1084 ())
(1086 #f 1085 ())
(1087 methods #f ())
(1088 check-for-next 1087 ())
(1089 #f 1088 ())
(1090 methods #f ())
(1091 check-next 1090 ())
(1092 #f 1091 ())
(1093 methods #f ())
(1094 argument-sequence-predicate 1093 ())
(1095 recur 1094 ())
(1096 methods #f ())
(1097 methods->perform 1096 ())
(1098 recur 1097 ())
(1099 methods #f ())
(1100 add-to-method-table! 1099 ())
(1101 methods #f ())
(1102 set-final-method! 1101 ())
(1103 methods #f ())
(1104 make-cell-for-generic 1103 ())
(1105 #f 1104 ())
(1106 #f 1104 ())
(1107 #f 1104 ())
(1108 methods #f ())
(1109 make-method-table 1108 ())
(1110 #f 1109 ())
(1111 #f 1109 ())
(1112 methods #f ())
(1113 apply-generic 1112 ())
(1114 methods #f ())
(1115 compare-to 1114 ())
(1116 #f 1115 ())
(1117 methods #f ())
(1118 proc->discloser 1117 ())
(1119 #f 1118 ())
(1120 #f 1119 ())
(1121 methods #f ())
(1122 number-i/o #f ())
(1123 string->integer 1122 ())
(1124 do-it 1122 ())
(1125 loop 1124 ())
(1126 digit->integer 1122 ())
(1127 number-i/o #f ())
(1128 set-exactness 1127 ())
(1129 number-i/o #f ())
(1130 &really-string->number 1129 ())
(1131 number-i/o #f ())
(1132 #f 1131 ())
(1133 loop 1132 ())
(1134 number-i/o #f ())
(1135 &really-string->number 1134 ())
(1136 number-i/o #f ())
(1137 number-i/o #f ())
(1138 number-i/o #f ())
(1139 string->number 1138 ())
(1140 loop 1139 ())
(1141 radix-is 1140 ())
(1142 radix-is 1140 ())
(1143 loop 1140 ())
(1144 number-i/o #f ())
(1145 integer->string 1144 ())
(1146 recur 1145 ())
(1147 integer->digit 1144 ())
(1148 number-i/o #f ())
(1149 &number->string 1148 ())
(1150 number-i/o #f ())
(1151 &number->string 1150 ())
(1152 number-i/o #f ())
(1153 number->string 1152 ())
(1154 number-i/o #f ())
(1155 number-i/o #f ())
(1156 fluids #f ())
(1157 fluids #f ())
(1158 set-fluid-top-level-value! 1157 ())
(1159 fluids #f ())
(1160 fluid-top-level-value 1159 ())
(1161 fluids #f ())
(1162 make-fluid 1161 ())
(1163 fluids #f ())
(1164 fluids #f ())
(1165 thread-dynamic-env 1164 ())
(1166 fluids #f ())
(1167 thread-dynamic-point 1166 ())
(1168 fluids #f ())
(1169 thread-proposal 1168 ())
(1170 fluids #f ())
(1171 make-thread 1170 ())
(1172 fluids #f ())
(1173 fluids #f ())
(1174 get-dynamic-env 1173 ())
(1175 fluids #f ())
(1176 set-dynamic-env! 1175 ())
(1177 fluids #f ())
(1178 get-dynamic-point 1177 ())
(1179 fluids #f ())
(1180 set-dynamic-point! 1179 ())
(1181 fluids #f ())
(1182 empty-dynamic-env 1181 ())
(1183 fluids #f ())
(1184 initialize-dynamic-state! 1183 ())
(1185 fluids #f ())
(1186 with-dynamic-env 1185 ())
(1187 #f 1186 ())
(1188 fluids #f ())
(1189 fluid 1188 ())
(1190 fluids #f ())
(1191 set-fluid! 1190 ())
(1192 fluids #f ())
(1193 let-fluid 1192 ())
(1194 fluids #f ())
(1195 let-fluids 1194 ())
(1196 loop 1195 ())
(1197 fluids #f ())
(1198 fluid-cell-ref 1197 ())
(1199 fluids #f ())
(1200 fluid-cell-set! 1199 ())
(1201 enumerated #f ())
(1202 lookup-enumerand 1201 ())
(1203 loop 1202 ())
(1204 architecture #f ())
(1205 architecture #f ())
(1206 architecture #f ())
(1207 architecture #f ())
(1208 architecture #f ())
(1209 architecture #f ())
(1210 architecture #f ())
(1211 architecture #f ())
(1212 architecture #f ())
(1213 architecture #f ())
(1214 architecture #f ())
(1215 architecture #f ())
(1216 architecture #f ())
(1217 architecture #f ())
(1218 architecture #f ())
(1219 architecture #f ())
(1220 architecture #f ())
(1221 architecture #f ())
(1222 architecture #f ())
(1223 architecture #f ())
(1224 architecture #f ())
(1225 architecture #f ())
(1226 architecture #f ())
(1227 architecture #f ())
(1228 architecture #f ())
(1229 architecture #f ())
(1230 architecture #f ())
(1231 architecture #f ())
(1232 architecture #f ())
(1233 architecture #f ())
(1234 architecture #f ())
(1235 architecture #f ())
(1236 architecture #f ())
(1237 architecture #f ())
(1238 architecture #f ())
(1239 architecture #f ())
(1240 next-protocol 1239 ())
(1241 architecture #f ())
(1242 architecture #f ())
(1243 architecture #f ())
(1244 architecture #f ())
(1245 architecture #f ())
(1246 architecture #f ())
(1247 architecture #f ())
(1248 architecture #f ())
(1249 architecture #f ())
(1250 architecture #f ())
(1251 architecture #f ())
(1252 architecture #f ())
(1253 architecture #f ())
(1254 architecture #f ())
(1255 architecture #f ())
(1256 proposals #f ())
(1257 proposals #f ())
(1258 invalidate-current-proposal! 1257 ())
(1259 proposals #f ())
(1260 remove-current-proposal! 1259 ())
(1261 proposals #f ())
(1262 call-ensuring-atomicity! 1261 ())
(1263 proposals #f ())
(1264 call-ensuring-atomicity 1263 ())
(1265 proposals #f ())
(1266 call-atomically! 1265 ())
(1267 #f 1266 ())
(1268 #f 1266 ())
(1269 lose 1268 ())
(1270 proposals #f ())
(1271 call-atomically 1270 ())
(1272 loop 1271 ())
(1273 #f 1272 ())
(1274 session-data #f ())
(1275 make-session-data-slot! 1274 ())
(1276 session-data #f ())
(1277 session-data-ref 1276 ())
(1278 session-data #f ())
(1279 session-data-set! 1278 ())
(1280 session-data #f ())
(1281 initialize-session-data! 1280 ())
(1282 session-data #f ())
(1283 conditions #f ())
(1284 conditions #f ())
(1285 conditions #f ())
(1286 conditions #f ())
(1287 conditions #f ())
(1288 conditions #f ())
(1289 conditions #f ())
(1290 conditions #f ())
(1291 conditions #f ())
(1292 make-exception 1291 ())
(1293 conditions #f ())
(1294 conditions #f ())
(1295 conditions #f ())
(1296 conditions #f ())
(1297 conditions #f ())
(1298 conditions #f ())
(1299 conditions #f ())
(1300 conditions #f ())
(1301 conditions #f ())
(1302 conditions #f ())
(1303 conditions #f ())
(1304 conditions #f ())
(1305 conditions #f ())
(1306 conditions #f ())
(1307 condition? 1306 ())
(1308 conditions #f ())
(1309 condition-predicate 1308 ())
(1310 #f 1309 ())
(1311 conditions #f ())
(1312 define-condition-type 1311 ())
(1313 #f 1312 ())
(1314 conditions #f ())
(1315 condition-supertypes 1314 ())
(1316 conditions #f ())
(1317 wind #f ())
(1318 point-depth 1317 ())
(1319 wind #f ())
(1320 point-in 1319 ())
(1321 wind #f ())
(1322 point-out 1321 ())
(1323 wind #f ())
(1324 point-dynamic-env 1323 ())
(1325 wind #f ())
(1326 point-parent 1325 ())
(1327 wind #f ())
(1328 make-point 1327 ())
(1329 wind #f ())
(1330 wind #f ())
(1331 dynamic-wind 1330 ())
(1332 wind #f ())
(1333 travel-to-point! 1332 ())
(1334 wind #f ())
(1335 continuation->procedure 1334 ())
(1336 #f 1335 ())
(1337 #f 1336 ())
(1338 wind #f ())
(1339 call-with-current-continuation 1338 ())
(1340 #f 1339 ())
(1341 templates #f ())
(1342 template-code 1341 ())
(1343 templates #f ())
(1344 template-info 1343 ())
(1345 templates #f ())
(1346 template-package-id 1345 ())
(1347 templates #f ())
(1348 set-template-code! 1347 ())
(1349 templates #f ())
(1350 set-template-info! 1349 ())
(1351 templates #f ())
(1352 set-template-package-id! 1351 ())
(1353 templates #f ())
(1354 more-types #f ())
(1355 &disclose 1354 ())
(1356 more-types #f ())
(1357 more-types #f ())
(1358 &disclose 1357 ())
(1359 more-types #f ())
(1360 more-types #f ())
(1361 more-types #f ())
(1362 more-types #f ())
(1363 more-types #f ())
(1364 more-types #f ())
(1365 more-types #f ())
(1366 more-types #f ())
(1367 more-types #f ())
(1368 continuations #f ())
(1369 &disclose 1368 ())
(1370 continuations #f ())
(1371 continuations #f ())
(1372 continuations #f ())
(1373 continuations #f ())
(1374 continuations #f ())
(1375 continuations #f ())
(1376 continuations #f ())
(1377 continuations #f ())
(1378 make-ref 1377 ())
(1379 #f 1378 ())
(1380 continuations #f ())
(1381 exception-continuation? 1380 ())
(1382 continuations #f ())
(1383 call-with-values-continuation? 1382 ())
(1384 continuations #f ())
(1385 continuation-pc 1384 ())
(1386 continuations #f ())
(1387 continuation-code 1386 ())
(1388 continuations #f ())
(1389 continuation-arg 1388 ())
(1390 continuations #f ())
(1391 continuation-template 1390 ())
(1392 loop 1391 ())
(1393 continuations #f ())
(1394 continuation-arg-count 1393 ())
(1395 exceptions #f ())
(1396 &disclose 1395 ())
(1397 exceptions #f ())
(1398 &disclose 1397 ())
(1399 exceptions #f ())
(1400 report-errors-as-warnings 1399 ())
(1401 #f 1400 ())
(1402 exceptions #f ())
(1403 ignore-errors 1402 ())
(1404 #f 1403 ())
(1405 #f 1404 ())
(1406 exceptions #f ())
(1407 continuation-preview 1406 ())
(1408 exceptions #f ())
(1409 report-utter-lossage 1408 ())
(1410 #f 1409 ())
(1411 exceptions #f ())
(1412 last-resort-condition-handler 1411 ())
(1413 #f 1412 ())
(1414 #f 1413 ())
(1415 exceptions #f ())
(1416 initialize-exceptions! 1415 ())
(1417 #f 1416 ())
(1418 exceptions #f ())
(1419 exceptions #f ())
(1420 with-handler 1419 ())
(1421 exceptions #f ())
(1422 really-signal-condition 1421 ())
(1423 loop 1422 ())
(1424 #f 1423 ())
(1425 exceptions #f ())
(1426 extend-opcode! 1425 ())
(1427 except 1426 ())
(1428 #f 1426 ())
(1429 exceptions #f ())
(1430 #f 1429 ())
(1431 exceptions #f ())
(1432 #f 1431 ())
(1433 exceptions #f ())
(1434 exceptions #f ())
(1435 signal-exception 1434 ())
(1436 exceptions #f ())
(1437 define-exception-handler 1436 ())
(1438 i/o #f ())
(1439 i/o #f ())
(1440 i/o #f ())
(1441 i/o #f ())
(1442 i/o #f ())
(1443 i/o #f ())
(1444 i/o #f ())
(1445 i/o #f ())
(1446 #f 1445 ())
(1447 #f 1445 ())
(1448 #f 1445 ())
(1449 #f 1445 ())
(1450 #f 1445 ())
(1451 i/o #f ())
(1452 i/o #f ())
(1453 i/o #f ())
(1454 i/o #f ())
(1455 i/o #f ())
(1456 i/o #f ())
(1457 i/o #f ())
(1458 i/o #f ())
(1459 &disclose 1458 ())
(1460 i/o #f ())
(1461 &disclose 1460 ())
(1462 i/o #f ())
(1463 port-handler-discloser 1462 ())
(1464 i/o #f ())
(1465 port-handler-close 1464 ())
(1466 i/o #f ())
(1467 port-handler-char 1466 ())
(1468 i/o #f ())
(1469 port-handler-block 1468 ())
(1470 i/o #f ())
(1471 port-handler-ready? 1470 ())
(1472 i/o #f ())
(1473 port-handler-force 1472 ())
(1474 i/o #f ())
(1475 make-port-handler 1474 ())
(1476 i/o #f ())
(1477 i/o #f ())
(1478 port-handler? 1477 ())
(1479 i/o #f ())
(1480 disclose-port 1479 ())
(1481 i/o #f ())
(1482 one-arg-proc->handler 1481 ())
(1483 #f 1482 ())
(1484 i/o #f ())
(1485 two-arg-proc->handler 1484 ())
(1486 #f 1485 ())
(1487 i/o #f ())
(1488 initialize-i/o-handlers! 1487 ())
(1489 #f 1488 ())
(1490 #f 1488 ())
(1491 #f 1488 ())
(1492 i/o #f ())
(1493 open-input-port? 1492 ())
(1494 i/o #f ())
(1495 current-input-port 1494 ())
(1496 i/o #f ())
(1497 input-port-option 1496 ())
(1498 i/o #f ())
(1499 char-ready? 1498 ())
(1500 i/o #f ())
(1501 real-char-ready? 1500 ())
(1502 i/o #f ())
(1503 okay-limits? 1502 ())
(1504 i/o #f ())
(1505 read-block 1504 ())
(1506 i/o #f ())
(1507 open-output-port? 1506 ())
(1508 i/o #f ())
(1509 write-block 1508 ())
(1510 i/o #f ())
(1511 write-string 1510 ())
(1512 i/o #f ())
(1513 output-port-ready? 1512 ())
(1514 i/o #f ())
(1515 force-output 1514 ())
(1516 i/o #f ())
(1517 force-output-if-open 1516 ())
(1518 i/o #f ())
(1519 close-input-port 1518 ())
(1520 i/o #f ())
(1521 close-output-port 1520 ())
(1522 i/o #f ())
(1523 open-port? 1522 ())
(1524 i/o #f ())
(1525 make-input-port-closed! 1524 ())
(1526 i/o #f ())
(1527 make-unbuffered-input-port 1526 ())
(1528 i/o #f ())
(1529 make-output-port-closed! 1528 ())
(1530 i/o #f ())
(1531 make-unbuffered-output-port 1530 ())
(1532 i/o #f ())
(1533 make-null-output-port 1532 ())
(1534 i/o #f ())
(1535 okay-buffer? 1534 ())
(1536 i/o #f ())
(1537 make-buffered-input-port 1536 ())
(1538 i/o #f ())
(1539 make-buffered-output-port 1538 ())
(1540 i/o #f ())
(1541 make-one-char-input 1540 ())
(1542 #f 1541 ())
(1543 #f 1542 ())
(1544 #f 1542 ())
(1545 lose 1544 ())
(1546 i/o #f ())
(1547 get-available-bytes! 1546 ())
(1548 i/o #f ())
(1549 make-read-block 1548 ())
(1550 #f 1549 ())
(1551 loop 1550 ())
(1552 #f 1551 ())
(1553 #f 1551 ())
(1554 lose 1553 ())
(1555 i/o #f ())
(1556 make-char-ready? 1555 ())
(1557 #f 1556 ())
(1558 #f 1557 ())
(1559 #f 1557 ())
(1560 lose 1559 ())
(1561 #f 1560 ())
(1562 #f 1560 ())
(1563 i/o #f ())
(1564 make-buffered-input-port-handler 1563 ())
(1565 #f 1564 ())
(1566 #f 1564 ())
(1567 #f 1566 ())
(1568 #f 1566 ())
(1569 lose 1568 ())
(1570 i/o #f ())
(1571 note-buffer-reuse! 1570 ())
(1572 i/o #f ())
(1573 buffer-length 1572 ())
(1574 i/o #f ())
(1575 make-closer 1574 ())
(1576 #f 1575 ())
(1577 #f 1576 ())
(1578 #f 1576 ())
(1579 lose 1578 ())
(1580 i/o #f ())
(1581 make-one-char-output 1580 ())
(1582 #f 1581 ())
(1583 #f 1582 ())
(1584 #f 1582 ())
(1585 lose 1584 ())
(1586 i/o #f ())
(1587 copy-bytes-out! 1586 ())
(1588 i/o #f ())
(1589 make-write-block 1588 ())
(1590 #f 1589 ())
(1591 loop 1590 ())
(1592 #f 1591 ())
(1593 #f 1591 ())
(1594 lose 1593 ())
(1595 i/o #f ())
(1596 make-forcer 1595 ())
(1597 #f 1596 ())
(1598 #f 1597 ())
(1599 #f 1597 ())
(1600 lose 1599 ())
(1601 i/o #f ())
(1602 make-buffered-output-port-handler 1601 ())
(1603 #f 1602 ())
(1604 i/o #f ())
(1605 periodically-force-output! 1604 ())
(1606 i/o #f ())
(1607 make-forcing-thunk 1606 ())
(1608 #f 1607 ())
(1609 #f 1608 ())
(1610 #f 1608 ())
(1611 #f 1610 ())
(1612 i/o #f ())
(1613 output-port-forcers 1612 ())
(1614 loop 1613 ())
(1615 i/o #f ())
(1616 periodically-flushed-ports 1615 ())
(1617 loop 1616 ())
(1618 i/o #f ())
(1619 current-output-port 1618 ())
(1620 i/o #f ())
(1621 current-error-port 1620 ())
(1622 i/o #f ())
(1623 current-noise-port 1622 ())
(1624 i/o #f ())
(1625 with-current-ports 1624 ())
(1626 i/o #f ())
(1627 initialize-i/o 1626 ())
(1628 i/o #f ())
(1629 call-with-current-input-port 1628 ())
(1630 i/o #f ())
(1631 call-with-current-output-port 1630 ())
(1632 i/o #f ())
(1633 call-with-current-noise-port 1632 ())
(1634 i/o #f ())
(1635 silently 1634 ())
(1636 i/o #f ())
(1637 output-port-option 1636 ())
(1638 i/o #f ())
(1639 newline 1638 ())
(1640 i/o #f ())
(1641 i/o #f ())
(1642 i/o #f ())
(1643 writing #f ())
(1644 display 1643 ())
(1645 recur 1644 ())
(1646 writing #f ())
(1647 display-type-name 1646 ())
(1648 loop##108 1647 ())
(1649 writing #f ())
(1650 write-other 1649 ())
(1651 #f 1650 ())
(1652 writing #f ())
(1653 write-vector 1652 ())
(1654 loop 1653 ())
(1655 writing #f ())
(1656 quotation? 1655 ())
(1657 writing #f ())
(1658 write-list 1657 ())
(1659 loop 1658 ())
(1660 writing #f ())
(1661 write-string-literal 1660 ())
(1662 loop##112 1661 ())
(1663 writing #f ())
(1664 character-name 1663 ())
(1665 writing #f ())
(1666 write-char-literal 1665 ())
(1667 writing #f ())
(1668 write-number 1667 ())
(1669 writing #f ())
(1670 write-boolean 1669 ())
(1671 writing #f ())
(1672 recurring-write 1671 ())
(1673 writing #f ())
(1674 write 1673 ())
(1675 recur 1674 ())
(1676 reading #f ())
(1677 loop##114 1676 ())
(1678 reading #f ())
(1679 reading #f ())
(1680 number-sharp-macro 1679 ())
(1681 #f 1679 ())
(1682 reading #f ())
(1683 #f 1682 ())
(1684 reading #f ())
(1685 #f 1684 ())
(1686 reading #f ())
(1687 #f 1686 ())
(1688 reading #f ())
(1689 #f 1688 ())
(1690 reading #f ())
(1691 #f 1690 ())
(1692 reading #f ())
(1693 #f 1692 ())
(1694 reading #f ())
(1695 #f 1694 ())
(1696 loop 1695 ())
(1697 reading #f ())
(1698 #f 1697 ())
(1699 reading #f ())
(1700 #f 1699 ())
(1701 reading #f ())
(1702 #f 1701 ())
(1703 reading #f ())
(1704 #f 1703 ())
(1705 reading #f ())
(1706 reading #f ())
(1707 sub-read-constituent 1706 ())
(1708 #f 1706 ())
(1709 reading #f ())
(1710 sub-read-whitespace 1709 ())
(1711 #f 1709 ())
(1712 reading #f ())
(1713 reading #f ())
(1714 #f 1713 ())
(1715 reading #f ())
(1716 reading #f ())
(1717 reading #f ())
(1718 reading #f ())
(1719 reader-token? 1718 ())
(1720 reading #f ())
(1721 reading-error 1720 ())
(1722 reading #f ())
(1723 sub-read 1722 ())
(1724 reading #f ())
(1725 read 1724 ())
(1726 loop 1725 ())
(1727 reading #f ())
(1728 sub-read-carefully 1727 ())
(1729 reading #f ())
(1730 make-reader-token 1729 ())
(1731 reading #f ())
(1732 set-standard-syntax! 1731 ())
(1733 reading #f ())
(1734 set-standard-read-macro! 1733 ())
(1735 reading #f ())
(1736 sub-read-list 1735 ())
(1737 recur 1736 ())
(1738 reading #f ())
(1739 gobble-line 1738 ())
(1740 loop 1739 ())
(1741 reading #f ())
(1742 define-sharp-macro 1741 ())
(1743 reading #f ())
(1744 proper-list? 1743 ())
(1745 reading #f ())
(1746 preferred-case 1745 ())
(1747 reading #f ())
(1748 sub-read-token 1747 ())
(1749 loop 1748 ())
(1750 reading #f ())
(1751 parse-token 1750 ())
(1752 reading #f ())
(1753 reading #f ())
(1754 queues #f ())
(1755 queues #f ())
(1756 queue-uid 1755 ())
(1757 queues #f ())
(1758 set-queue-head! 1757 ())
(1759 queues #f ())
(1760 real-queue-head 1759 ())
(1761 queues #f ())
(1762 set-queue-tail! 1761 ())
(1763 queues #f ())
(1764 queue-tail 1763 ())
(1765 queues #f ())
(1766 really-make-queue 1765 ())
(1767 queues #f ())
(1768 queues #f ())
(1769 queue? 1768 ())
(1770 queues #f ())
(1771 next-uid 1770 ())
(1772 #f 1771 ())
(1773 queues #f ())
(1774 make-queue 1773 ())
(1775 queues #f ())
(1776 queue-empty? 1775 ())
(1777 queues #f ())
(1778 enqueue! 1777 ())
(1779 #f 1778 ())
(1780 queues #f ())
(1781 queue-head 1780 ())
(1782 #f 1781 ())
(1783 queues #f ())
(1784 dequeue! 1783 ())
(1785 #f 1784 ())
(1786 queues #f ())
(1787 maybe-dequeue! 1786 ())
(1788 #f 1787 ())
(1789 queues #f ())
(1790 empty-queue! 1789 ())
(1791 #f 1790 ())
(1792 queues #f ())
(1793 on-queue? 1792 ())
(1794 #f 1793 ())
(1795 queues #f ())
(1796 delete-from-queue-if! 1795 ())
(1797 #f 1796 ())
(1798 loop 1797 ())
(1799 queues #f ())
(1800 delete-from-queue! 1799 ())
(1801 #f 1800 ())
(1802 queues #f ())
(1803 queue->list 1802 ())
(1804 #f 1803 ())
(1805 #f 1804 ())
(1806 queues #f ())
(1807 list->queue 1806 ())
(1808 loop 1807 ())
(1809 queues #f ())
(1810 queue-length 1809 ())
(1811 #f 1810 ())
(1812 interrupts #f ())
(1813 #f 1812 ())
(1814 interrupts #f ())
(1815 interrupts #f ())
(1816 interrupts #f ())
(1817 interrupts #f ())
(1818 enabled-interrupts 1817 ())
(1819 interrupts #f ())
(1820 post-gc-handler 1819 ())
(1821 #f 1820 ())
(1822 #f 1821 ())
(1823 #f 1821 ())
(1824 #f 1823 ())
(1825 #f 1823 ())
(1826 interrupts #f ())
(1827 initialize-interrupts! 1826 ())
(1828 #f 1827 ())
(1829 loop##136 1828 ())
(1830 #f 1829 ())
(1831 #f 1828 ())
(1832 #f 1831 ())
(1833 interrupts #f ())
(1834 set-interrupt-handler! 1833 ())
(1835 interrupts #f ())
(1836 with-interrupts 1835 ())
(1837 #f 1836 ())
(1838 interrupts #f ())
(1839 with-interrupts-inhibited 1838 ())
(1840 interrupts #f ())
(1841 with-interrupts-allowed 1840 ())
(1842 interrupts #f ())
(1843 disable-interrupts! 1842 ())
(1844 interrupts #f ())
(1845 enable-interrupts! 1844 ())
(1846 interrupts #f ())
(1847 call-after-gc! 1846 ())
(1848 interrupts #f ())
(1849 call-before-heap-overflow! 1848 ())
(1850 interrupts #f ())
(1851 interrupts #f ())
(1852 threads #f ())
(1853 threads #f ())
(1854 threads #f ())
(1855 threads #f ())
(1856 threads #f ())
(1857 threads #f ())
(1858 threads #f ())
(1859 #f 1858 ())
(1860 threads #f ())
(1861 thread-dynamic-env 1860 ())
(1862 threads #f ())
(1863 set-thread-dynamic-point! 1862 ())
(1864 threads #f ())
(1865 thread-dynamic-point 1864 ())
(1866 threads #f ())
(1867 thread-proposal 1866 ())
(1868 threads #f ())
(1869 set-thread-time! 1868 ())
(1870 threads #f ())
(1871 thread-time 1870 ())
(1872 threads #f ())
(1873 set-thread-continuation! 1872 ())
(1874 threads #f ())
(1875 thread-continuation 1874 ())
(1876 threads #f ())
(1877 set-thread-arguments! 1876 ())
(1878 threads #f ())
(1879 thread-arguments 1878 ())
(1880 threads #f ())
(1881 set-thread-scheduler! 1880 ())
(1882 threads #f ())
(1883 thread-scheduler 1882 ())
(1884 threads #f ())
(1885 set-thread-current-task! 1884 ())
(1886 threads #f ())
(1887 thread-current-task 1886 ())
(1888 threads #f ())
(1889 set-thread-events! 1888 ())
(1890 threads #f ())
(1891 thread-events 1890 ())
(1892 threads #f ())
(1893 set-thread-data! 1892 ())
(1894 threads #f ())
(1895 thread-data 1894 ())
(1896 threads #f ())
(1897 set-thread-cell! 1896 ())
(1898 threads #f ())
(1899 thread-cell 1898 ())
(1900 threads #f ())
(1901 thread-uid 1900 ())
(1902 threads #f ())
(1903 thread-name 1902 ())
(1904 threads #f ())
(1905 really-make-thread 1904 ())
(1906 threads #f ())
(1907 threads #f ())
(1908 thread? 1907 ())
(1909 threads #f ())
(1910 compose-continuation 1909 ())
(1911 #f 1910 ())
(1912 #f 1911 ())
(1913 #f 1912 ())
(1914 #f 1913 ())
(1915 #f 1914 ())
(1916 threads #f ())
(1917 thunk->continuation 1916 ())
(1918 threads #f ())
(1919 max2 1918 ())
(1920 threads #f ())
(1921 interrupt-timer-time 1920 ())
(1922 threads #f ())
(1923 debit-down! 1922 ())
(1924 loop 1923 ())
(1925 threads #f ())
(1926 run-thread 1925 ())
(1927 #f 1926 ())
(1928 threads #f ())
(1929 switch-to-thread 1928 ())
(1930 #f 1929 ())
(1931 threads #f ())
(1932 suspend-to 1931 ())
(1933 threads #f ())
(1934 suspend 1933 ())
(1935 threads #f ())
(1936 thread-top-level 1935 ())
(1937 thread-start 1936 ())
(1938 #f 1937 ())
(1939 threads #f ())
(1940 make-thread 1939 ())
(1941 threads #f ())
(1942 all-threads 1941 ())
(1943 threads #f ())
(1944 thread-uid->thread 1943 ())
(1945 loop 1944 ())
(1946 threads #f ())
(1947 add-event! 1946 ())
(1948 threads #f ())
(1949 next-event! 1948 ())
(1950 threads #f ())
(1951 maybe-dequeue-thread! 1950 ())
(1952 loop 1951 ())
(1953 threads #f ())
(1954 thread-queue-empty? 1953 ())
(1955 #f 1954 ())
(1956 loop 1955 ())
(1957 threads #f ())
(1958 event-pending? 1957 ())
(1959 threads #f ())
(1960 min 1959 ())
(1961 threads #f ())
(1962 schedule-interrupt! 1961 ())
(1963 threads #f ())
(1964 run-next-thread 1963 ())
(1965 threads #f ())
(1966 debit-thread-times-and-run! 1965 ())
(1967 loop 1966 ())
(1968 threads #f ())
(1969 find-and-run-next-thread 1968 ())
(1970 loop 1969 ())
(1971 threads #f ())
(1972 run 1971 ())
(1973 threads #f ())
(1974 handle-timer-interrupt 1973 ())
(1975 threads #f ())
(1976 exit 1975 ())
(1977 threads #f ())
(1978 wait 1977 ())
(1979 threads #f ())
(1980 waiting? 1979 ())
(1981 threads #f ())
(1982 relinquish-timeslice 1981 ())
(1983 threads #f ())
(1984 block 1983 ())
(1985 threads #f ())
(1986 maybe-commit-and-block 1985 ())
(1987 threads #f ())
(1988 maybe-commit-and-block-on-queue 1987 ())
(1989 threads #f ())
(1990 running? 1989 ())
(1991 loop 1990 ())
(1992 threads #f ())
(1993 interrupt-thread 1992 ())
(1994 threads #f ())
(1995 propogate-upcall 1994 ())
(1996 #f 1995 ())
(1997 threads #f ())
(1998 upcall 1997 ())
(1999 threads #f ())
(2000 kill-thread! 1999 ())
(2001 #f 2000 ())
(2002 threads #f ())
(2003 clear-thread-cell! 2002 ())
(2004 threads #f ())
(2005 terminate-current-thread 2004 ())
(2006 threads #f ())
(2007 terminate-thread! 2006 ())
(2008 threads #f ())
(2009 get-next-event! 2008 ())
(2010 threads #f ())
(2011 schedule-wakeup 2010 ())
(2012 threads #f ())
(2013 really-schedule-event 2012 ())
(2014 threads #f ())
(2015 root-scheduler 2014 ())
(2016 threads #f ())
(2017 maybe-suspend 2016 ())
(2018 loop 2017 ())
(2019 threads #f ())
(2020 schedule-event 2019 ())
(2021 threads #f ())
(2022 show-running 2021 ())
(2023 loop##189 2022 ())
(2024 threads #f ())
(2025 spawn-on-scheduler 2024 ())
(2026 threads #f ())
(2027 spawn 2026 ())
(2028 threads #f ())
(2029 spawn-on-root 2028 ())
(2030 threads #f ())
(2031 make-ready 2030 ())
(2032 threads #f ())
(2033 make-threads-ready 2032 ())
(2034 loop 2033 ())
(2035 threads #f ())
(2036 maybe-commit-and-make-ready 2035 ())
(2037 threads #f ())
(2038 cancel-timer-interrupt! 2037 ())
(2039 threads #f ())
(2040 real-time 2039 ())
(2041 threads #f ())
(2042 start-multitasking 2041 ())
(2043 #f 2042 ())
(2044 #f 2043 ())
(2045 #f 2043 ())
(2046 #f 2045 ())
(2047 #f 2046 ())
(2048 #f 2046 ())
(2049 threads #f ())
(2050 with-threads 2049 ())
(2051 #f 2050 ())
(2052 #f 2051 ())
(2053 #f 2051 ())
(2054 #f 2051 ())
(2055 threads #f ())
(2056 insert 2055 ())
(2057 threads #f ())
(2058 coerce-to-nonnegative-integer 2057 ())
(2059 threads #f ())
(2060 sleep 2059 ())
(2061 #f 2060 ())
(2062 threads #f ())
(2063 wake-some-threads 2062 ())
(2064 loop 2063 ())
(2065 threads #f ())
(2066 threads #f ())
(2067 threads #f ())
(2068 condvars #f ())
(2069 #f 2068 ())
(2070 condvars #f ())
(2071 condvar-queue 2070 ())
(2072 condvars #f ())
(2073 set-condvar-has-value?! 2072 ())
(2074 condvars #f ())
(2075 condvar-has-value? 2074 ())
(2076 condvars #f ())
(2077 set-condvar-value! 2076 ())
(2078 condvars #f ())
(2079 condvar-value 2078 ())
(2080 condvars #f ())
(2081 condvar-id 2080 ())
(2082 condvars #f ())
(2083 really-make-condvar 2082 ())
(2084 condvars #f ())
(2085 condvars #f ())
(2086 condvar? 2085 ())
(2087 condvars #f ())
(2088 make-condvar 2087 ())
(2089 condvars #f ())
(2090 maybe-commit-and-wait-for-condvar 2089 ())
(2091 condvars #f ())
(2092 maybe-commit-and-set-condvar! 2091 ())
(2093 condvars #f ())
(2094 condvar-has-waiters? 2093 ())
(2095 channel-i/o #f ())
(2096 abort-unwanted-i/o! 2095 ())
(2097 loop 2096 ())
(2098 channel-i/o #f ())
(2099 fetch-channel-condvar! 2098 ())
(2100 loop 2099 ())
(2101 channel-i/o #f ())
(2102 channel-i/o #f ())
(2103 add-channel-condvar! 2102 ())
(2104 channel-i/o #f ())
(2105 set-channel-condvars! 2104 ())
(2106 channel-i/o #f ())
(2107 channel-condvars 2106 ())
(2108 channel-i/o #f ())
(2109 channel-i/o #f ())
(2110 waiting-for-i/o? 2109 ())
(2111 channel-i/o #f ())
(2112 i/o-completion-handler 2111 ())
(2113 channel-i/o #f ())
(2114 initialize-channel-i/o! 2113 ())
(2115 channel-i/o #f ())
(2116 input-channel? 2115 ())
(2117 channel-i/o #f ())
(2118 channel-maybe-commit-and-close 2117 ())
(2119 channel-i/o #f ())
(2120 channel-write 2119 ())
(2121 #f 2120 ())
(2122 #f 2120 ())
(2123 lose 2122 ())
(2124 channel-i/o #f ())
(2125 note-channel-result! 2124 ())
(2126 #f 2125 ())
(2127 #f 2125 ())
(2128 lose 2127 ())
(2129 channel-i/o #f ())
(2130 channel-i/o #f ())
(2131 channel-i/o #f ())
(2132 channel-maybe-commit-and-do-it 2131 ())
(2133 #f 2132 ())
(2134 channel-ports #f ())
(2135 #f 2134 ())
(2136 #f 2134 ())
(2137 #f 2134 ())
(2138 #f 2134 ())
(2139 channel-ports #f ())
(2140 write-block-handler 2139 ())
(2141 loop 2140 ())
(2142 channel-ports #f ())
(2143 one-char-handler 2142 ())
(2144 loop 2143 ())
(2145 channel-ports #f ())
(2146 force-channel-output-ports! 2145 ())
(2147 #f 2146 ())
(2148 channel-ports #f ())
(2149 with-output-to-file 2148 ())
(2150 #f 2149 ())
(2151 channel-ports #f ())
(2152 with-input-from-file 2151 ())
(2153 #f 2152 ())
(2154 channel-ports #f ())
(2155 call-with-output-file 2154 ())
(2156 #f 2155 ())
(2157 channel-ports #f ())
(2158 call-with-input-file 2157 ())
(2159 #f 2158 ())
(2160 channel-ports #f ())
(2161 open-output-file 2160 ())
(2162 channel-ports #f ())
(2163 open-input-file 2162 ())
(2164 channel-ports #f ())
(2165 maybe-open-file 2164 ())
(2166 channel-ports #f ())
(2167 real-output-channel->port 2166 ())
(2168 channel-ports #f ())
(2169 output-channel+closer->port 2168 ())
(2170 channel-ports #f ())
(2171 output-channel->port 2170 ())
(2172 channel-ports #f ())
(2173 #f 2172 ())
(2174 channel-ports #f ())
(2175 send-some 2174 ())
(2176 channel-ports #f ())
(2177 empty-buffer! 2176 ())
(2178 channel-ports #f ())
(2179 real-input-channel->port 2178 ())
(2180 channel-ports #f ())
(2181 input-channel+closer->port 2180 ())
(2182 channel-ports #f ())
(2183 input-channel->port 2182 ())
(2184 channel-ports #f ())
(2185 #f 2184 ())
(2186 channel-ports #f ())
(2187 channel-port-ready? 2186 ())
(2188 channel-ports #f ())
(2189 fill-buffer! 2188 ())
(2190 channel-ports #f ())
(2191 port-channel-closer 2190 ())
(2192 channel-ports #f ())
(2193 port->channel 2192 ())
(2194 channel-ports #f ())
(2195 make-channel-cell 2194 ())
(2196 channel-ports #f ())
(2197 channel-cell-ref 2196 ())
(2198 channel-ports #f ())
(2199 channel-cell-closer 2198 ())
(2200 channel-ports #f ())
(2201 channel-cell-condvar 2200 ())
(2202 channel-ports #f ())
(2203 set-channel-cell-in-use?! 2202 ())
(2204 channel-ports #f ())
(2205 channel-cell-in-use? 2204 ())
(2206 channel-ports #f ())
(2207 set-channel-cell-sent! 2206 ())
(2208 channel-ports #f ())
(2209 channel-cell-sent 2208 ())
(2210 channel-ports #f ())
(2211 channel-cell? 2210 ())
(2212 channel-ports #f ())
(2213 really-make-channel-cell 2212 ())
(2214 channel-ports #f ())
(2215 scheme-level-2 #f ())
(2216 features #f ())
(2217 tables #f ())
(2218 tables #f ())
(2219 tables #f ())
(2220 tables #f ())
(2221 make-table 2220 ())
(2222 tables #f ())
(2223 tables #f ())
(2224 set-table-size! 2223 ())
(2225 tables #f ())
(2226 table-size 2225 ())
(2227 tables #f ())
(2228 set-table-data! 2227 ())
(2229 tables #f ())
(2230 table-data 2229 ())
(2231 tables #f ())
(2232 set-table-ref-procedure! 2231 ())
(2233 tables #f ())
(2234 table-ref-procedure 2233 ())
(2235 tables #f ())
(2236 set-table-set!-procedure! 2235 ())
(2237 tables #f ())
(2238 table-set!-procedure 2237 ())
(2239 tables #f ())
(2240 really-make-table 2239 ())
(2241 tables #f ())
(2242 tables #f ())
(2243 table? 2242 ())
(2244 tables #f ())
(2245 table-ref 2244 ())
(2246 tables #f ())
(2247 table-set! 2246 ())
(2248 tables #f ())
(2249 next-table-size 2248 ())
(2250 tables #f ())
(2251 set-entry-value! 2250 ())
(2252 tables #f ())
(2253 delete-entry! 2252 ())
(2254 loop 2253 ())
(2255 tables #f ())
(2256 new-entry 2255 ())
(2257 tables #f ())
(2258 make-linear-table-set! 2257 ())
(2259 #f 2258 ())
(2260 tables #f ())
(2261 table-expand-table! 2260 ())
(2262 tables #f ())
(2263 table-enter-alist! 2262 ())
(2264 loop##238 2263 ())
(2265 tables #f ())
(2266 entry-value 2265 ())
(2267 tables #f ())
(2268 make-hash-table-ref 2267 ())
(2269 #f 2268 ())
(2270 tables #f ())
(2271 expand-hash-table! 2270 ())
(2272 loop##240 2271 ())
(2273 tables #f ())
(2274 make-hash-table-set! 2273 ())
(2275 #f 2274 ())
(2276 tables #f ())
(2277 make->hash-table 2276 ())
(2278 #f 2277 ())
(2279 tables #f ())
(2280 make-linear-table-ref 2279 ())
(2281 #f 2280 ())
(2282 tables #f ())
(2283 assoc->table-maker 2282 ())
(2284 #f 2283 ())
(2285 tables #f ())
(2286 make-assoc 2285 ())
(2287 #f 2286 ())
(2288 loop 2287 ())
(2289 tables #f ())
(2290 make-table-maker 2289 ())
(2291 tables #f ())
(2292 entry-key 2291 ())
(2293 tables #f ())
(2294 alist-walk 2293 ())
(2295 loop##242 2294 ())
(2296 tables #f ())
(2297 really-table-walk 2296 ())
(2298 loop##245 2297 ())
(2299 tables #f ())
(2300 table-walk 2299 ())
(2301 #f 2300 ())
(2302 tables #f ())
(2303 make-table-immutable! 2302 ())
(2304 tables #f ())
(2305 table->entry-list 2304 ())
(2306 #f 2305 ())
(2307 tables #f ())
(2308 default-table-hash-function 2307 ())
(2309 tables #f ())
(2310 default-table-assoc 2309 ())
(2311 tables #f ())
(2312 symbol-hash 2311 ())
(2313 tables #f ())
(2314 tables #f ())
(2315 weak #f ())
(2316 walk-population 2315 ())
(2317 #f 2316 ())
(2318 weak #f ())
(2319 population->list 2318 ())
(2320 weak #f ())
(2321 population-reduce 2320 ())
(2322 loop##247 2321 ())
(2323 weak #f ())
(2324 weak-memq 2323 ())
(2325 weak #f ())
(2326 add-to-population! 2325 ())
(2327 weak #f ())
(2328 make-population 2327 ())
(2329 meta-types #f ())
(2330 meta-types #f ())
(2331 meta-types #f ())
(2332 meta-types #f ())
(2333 meta-types #f ())
(2334 meta-types #f ())
(2335 meta-types #f ())
(2336 meta-types #f ())
(2337 meta-types #f ())
(2338 meta-types #f ())
(2339 meta-types #f ())
(2340 meta-types #f ())
(2341 meta-types #f ())
(2342 meta-types #f ())
(2343 meta-types #f ())
(2344 meta-types #f ())
(2345 meta-types #f ())
(2346 meta-types #f ())
(2347 meta-types #f ())
(2348 meta-types #f ())
(2349 meta-types #f ())
(2350 meta-types #f ())
(2351 meta-types #f ())
(2352 meta-types #f ())
(2353 meta-types #f ())
(2354 meta-types #f ())
(2355 meta-types #f ())
(2356 meta-types #f ())
(2357 meta-types #f ())
(2358 meta-types #f ())
(2359 loop 2358 ())
(2360 meta-types #f ())
(2361 meta-types #f ())
(2362 meta-types #f ())
(2363 meta-types #f ())
(2364 meta-types #f ())
(2365 meta-types #f ())
(2366 meta-types #f ())
(2367 meta-types #f ())
(2368 meta-types #f ())
(2369 meta-types #f ())
(2370 meta-types #f ())
(2371 meta-types #f ())
(2372 meta-types #f ())
(2373 meta-types #f ())
(2374 meta-types #f ())
(2375 meta-types #f ())
(2376 meta-types #f ())
(2377 meta-types #f ())
(2378 meta-types #f ())
(2379 meta-types #f ())
(2380 #f 2379 ())
(2381 meta-types #f ())
(2382 type-mask 2381 ())
(2383 meta-types #f ())
(2384 type-more 2383 ())
(2385 meta-types #f ())
(2386 type-info 2385 ())
(2387 meta-types #f ())
(2388 really-make-type 2387 ())
(2389 meta-types #f ())
(2390 meta-types #f ())
(2391 meta-type? 2390 ())
(2392 meta-types #f ())
(2393 make-type 2392 ())
(2394 meta-types #f ())
(2395 set-type-name! 2394 ())
(2396 meta-types #f ())
(2397 make-other-type 2396 ())
(2398 meta-types #f ())
(2399 name->type 2398 ())
(2400 meta-types #f ())
(2401 new-type-bit 2400 ())
(2402 meta-types #f ())
(2403 mask->type 2402 ())
(2404 meta-types #f ())
(2405 bottom-type? 2404 ())
(2406 meta-types #f ())
(2407 new-atomic-type 2406 ())
(2408 meta-types #f ())
(2409 named-atomic-type 2408 ())
(2410 meta-types #f ())
(2411 empty-rail-type? 2410 ())
(2412 meta-types #f ())
(2413 rest-type? 2412 ())
(2414 meta-types #f ())
(2415 same-type? 2414 ())
(2416 meta-types #f ())
(2417 head-type 2416 ())
(2418 meta-types #f ())
(2419 optional-type? 2418 ())
(2420 meta-types #f ())
(2421 rail-type 2420 ())
(2422 meta-types #f ())
(2423 make-optional-type 2422 ())
(2424 meta-types #f ())
(2425 make-rest-type 2424 ())
(2426 meta-types #f ())
(2427 head-type-really 2426 ())
(2428 meta-types #f ())
(2429 tail-type 2428 ())
(2430 meta-types #f ())
(2431 value-type? 2430 ())
(2432 meta-types #f ())
(2433 other-type-info 2432 ())
(2434 meta-types #f ())
(2435 restrictive? 2434 ())
(2436 meta-types #f ())
(2437 make-procedure-type 2436 ())
(2438 meta-types #f ())
(2439 procedure-type-domain 2438 ())
(2440 meta-types #f ())
(2441 procedure-type-codomain 2440 ())
(2442 meta-types #f ())
(2443 meet-procedure 2442 ())
(2444 meta-types #f ())
(2445 meet-rail 2444 ())
(2446 meta-types #f ())
(2447 meet-type 2446 ())
(2448 meta-types #f ())
(2449 subtype? 2448 ())
(2450 meta-types #f ())
(2451 meet-procedure? 2450 ())
(2452 meta-types #f ())
(2453 meet? 2452 ())
(2454 meta-types #f ())
(2455 procedure-type? 2454 ())
(2456 meta-types #f ())
(2457 join-procedure 2456 ())
(2458 meta-types #f ())
(2459 join-rail 2458 ())
(2460 meta-types #f ())
(2461 join-type 2460 ())
(2462 meta-types #f ())
(2463 procedure-type 2462 ())
(2464 meta-types #f ())
(2465 sexp->values-type 2464 ())
(2466 meta-types #f ())
(2467 sexp->type 2466 ())
(2468 #f 2467 ())
(2469 #f 2467 ())
(2470 meta-types #f ())
(2471 disjoin-rest 2470 ())
(2472 meta-types #f ())
(2473 disjoin-type 2472 ())
(2474 loop##269 2473 ())
(2475 meta-types #f ())
(2476 atomic-type->sexp 2475 ())
(2477 meta-types #f ())
(2478 rail-type->sexp 2477 ())
(2479 recur 2478 ())
(2480 meta-types #f ())
(2481 type->sexp 2480 ())
(2482 #f 2481 ())
(2483 meta-types #f ())
(2484 make-some-values-type 2483 ())
(2485 meta-types #f ())
(2486 fixed-arity-procedure-type? 2485 ())
(2487 loop 2486 ())
(2488 meta-types #f ())
(2489 procedure-type-arity 2488 ())
(2490 loop##272 2489 ())
(2491 meta-types #f ())
(2492 procedure-type-argument-types 2491 ())
(2493 recur 2492 ())
(2494 meta-types #f ())
(2495 variable-type 2494 ())
(2496 meta-types #f ())
(2497 variable-type? 2496 ())
(2498 meta-types #f ())
(2499 compatible-types? 2498 ())
(2500 meta-types #f ())
(2501 meta-types #f ())
(2502 meta-types #f ())
(2503 interfaces #f ())
(2504 #f 2503 ())
(2505 interfaces #f ())
(2506 ref-method 2505 ())
(2507 interfaces #f ())
(2508 walk-method 2507 ())
(2509 interfaces #f ())
(2510 interface-clients 2509 ())
(2511 interfaces #f ())
(2512 set-interface-name! 2511 ())
(2513 interfaces #f ())
(2514 interface-name 2513 ())
(2515 interfaces #f ())
(2516 really-make-interface 2515 ())
(2517 interfaces #f ())
(2518 interfaces #f ())
(2519 interface? 2518 ())
(2520 interfaces #f ())
(2521 make-interface 2520 ())
(2522 interfaces #f ())
(2523 interface-ref 2522 ())
(2524 interfaces #f ())
(2525 interface-member? 2524 ())
(2526 #f 2525 ())
(2527 #f 2525 ())
(2528 interfaces #f ())
(2529 for-each-declaration 2528 ())
(2530 interfaces #f ())
(2531 note-reference-to-interface! 2530 ())
(2532 interfaces #f ())
(2533 note-interface-name! 2532 ())
(2534 interfaces #f ())
(2535 make-simple-interface-table 2534 ())
(2536 #f 2535 ())
(2537 #f 2536 ())
(2538 interfaces #f ())
(2539 make-simple-interface 2538 ())
(2540 #f 2539 ())
(2541 #f 2539 ())
(2542 #f 2541 ())
(2543 interfaces #f ())
(2544 make-compound-interface 2543 ())
(2545 #f 2544 ())
(2546 loop 2545 ())
(2547 #f 2546 ())
(2548 #f 2546 ())
(2549 #f 2544 ())
(2550 #f 2549 ())
(2551 #f 2544 ())
(2552 interfaces #f ())
(2553 proper-list? 2552 ())
(2554 interfaces #f ())
(2555 okay-command? 2554 ())
(2556 #f 2555 ())
(2557 interfaces #f ())
(2558 symbol-append 2557 ())
(2559 interfaces #f ())
(2560 process-prefix 2559 ())
(2561 #f 2560 ())
(2562 #f 2560 ())
(2563 interfaces #f ())
(2564 prefix-match? 2563 ())
(2565 loop 2564 ())
(2566 interfaces #f ())
(2567 remove-prefix 2566 ())
(2568 interfaces #f ())
(2569 interface-lookup 2568 ())
(2570 interfaces #f ())
(2571 process-expose 2570 ())
(2572 loop 2571 ())
(2573 interfaces #f ())
(2574 process-hide 2573 ())
(2575 interfaces #f ())
(2576 process-alias 2575 ())
(2577 #f 2576 ())
(2578 interfaces #f ())
(2579 process-rename 2578 ())
(2580 #f 2579 ())
(2581 interfaces #f ())
(2582 process-commands 2581 ())
(2583 loop 2582 ())
(2584 #f 2583 ())
(2585 #f 2583 ())
(2586 #f 2583 ())
(2587 interfaces #f ())
(2588 make-lookup 2587 ())
(2589 #f 2588 ())
(2590 interfaces #f ())
(2591 cdr-assq 2590 ())
(2592 loop 2591 ())
(2593 interfaces #f ())
(2594 make-default-walker 2593 ())
(2595 #f 2594 ())
(2596 #f 2595 ())
(2597 interfaces #f ())
(2598 make-alist-walker 2597 ())
(2599 #f 2598 ())
(2600 #f 2599 ())
(2601 #f 2600 ())
(2602 #f 2600 ())
(2603 interfaces #f ())
(2604 make-modified-interface 2603 ())
(2605 #f 2604 ())
(2606 #f 2604 ())
(2607 bindings #f ())
(2608 bindings #f ())
(2609 binding-type 2608 ())
(2610 bindings #f ())
(2611 binding-place 2610 ())
(2612 bindings #f ())
(2613 binding-static 2612 ())
(2614 bindings #f ())
(2615 binding-path 2614 ())
(2616 bindings #f ())
(2617 set-binding-place! 2616 ())
(2618 bindings #f ())
(2619 make-binding 2618 ())
(2620 bindings #f ())
(2621 add-path 2620 ())
(2622 bindings #f ())
(2623 clobber-binding! 2622 ())
(2624 bindings #f ())
(2625 impose-type 2624 ())
(2626 bindings #f ())
(2627 forget-integration 2626 ())
(2628 bindings #f ())
(2629 same-denotation? 2628 ())
(2630 bindings #f ())
(2631 follow-forwarding-pointers 2630 ())
(2632 bindings #f ())
(2633 maybe-fix-place! 2632 ())
(2634 names #f ())
(2635 #f 2634 ())
(2636 names #f ())
(2637 transform-procedure 2636 ())
(2638 names #f ())
(2639 transform-env 2638 ())
(2640 names #f ())
(2641 transform-type 2640 ())
(2642 names #f ())
(2643 transform-aux-names 2642 ())
(2644 names #f ())
(2645 transform-source 2644 ())
(2646 names #f ())
(2647 transform-id 2646 ())
(2648 names #f ())
(2649 really-make-transform 2648 ())
(2650 names #f ())
(2651 names #f ())
(2652 names #f ())
(2653 #f 2652 ())
(2654 names #f ())
(2655 generated-name 2654 ())
(2656 names #f ())
(2657 generated-token 2656 ())
(2658 names #f ())
(2659 generated-env 2658 ())
(2660 names #f ())
(2661 generated-parent-name 2660 ())
(2662 names #f ())
(2663 make-generated 2662 ())
(2664 names #f ())
(2665 names #f ())
(2666 generated? 2665 ())
(2667 names #f ())
(2668 name? 2667 ())
(2669 names #f ())
(2670 generate-name 2669 ())
(2671 names #f ())
(2672 generated-uid 2671 ())
(2673 names #f ())
(2674 name->symbol 2673 ())
(2675 names #f ())
(2676 name-hash 2675 ())
(2677 names #f ())
(2678 desyntaxify 2677 ())
(2679 loop 2678 ())
(2680 names #f ())
(2681 make-qualified 2680 ())
(2682 names #f ())
(2683 qualified? 2682 ())
(2684 names #f ())
(2685 qualified-parent-name 2684 ())
(2686 names #f ())
(2687 qualified-symbol 2686 ())
(2688 names #f ())
(2689 qualified-uid 2688 ())
(2690 names #f ())
(2691 lookup 2690 ())
(2692 names #f ())
(2693 transform? 2692 ())
(2694 names #f ())
(2695 qualify-parent 2694 ())
(2696 recur 2695 ())
(2697 names #f ())
(2698 name->qualified 2697 ())
(2699 names #f ())
(2700 make-transform 2699 ())
(2701 names #f ())
(2702 name->source-name 2701 ())
(2703 names #f ())
(2704 make-keyword-comparator 2703 ())
(2705 #f 2704 ())
(2706 names #f ())
(2707 make-name-generator 2706 ())
(2708 #f 2707 ())
(2709 names #f ())
(2710 bind-aliases 2709 ())
(2711 #f 2710 ())
(2712 names #f ())
(2713 maybe-apply-macro-transform 2712 ())
(2714 names #f ())
(2715 apply-inline-transform 2714 ())
(2716 names #f ())
(2717 compiler-envs #f ())
(2718 compiler-envs #f ())
(2719 compiler-envs #f ())
(2720 compiler-envs #f ())
(2721 compiler-envs #f ())
(2722 lookup 2721 ())
(2723 compiler-envs #f ())
(2724 bind1 2723 ())
(2725 #f 2724 ())
(2726 compiler-envs #f ())
(2727 bind 2726 ())
(2728 compiler-envs #f ())
(2729 bindrec 2728 ())
(2730 #f 2729 ())
(2731 compiler-envs #f ())
(2732 make-compiler-env 2731 ())
(2733 #f 2732 ())
(2734 compiler-envs #f ())
(2735 environment-macro-eval 2734 ())
(2736 compiler-envs #f ())
(2737 environment-define! 2736 ())
(2738 compiler-envs #f ())
(2739 extract-package-from-environment 2738 ())
(2740 compiler-envs #f ())
(2741 bind-source-file-name 2740 ())
(2742 compiler-envs #f ())
(2743 source-file-name 2742 ())
(2744 thingies #f ())
(2745 thingie-binding 2744 ())
(2746 thingies #f ())
(2747 thingie-name 2746 ())
(2748 thingies #f ())
(2749 thingie-want-type 2748 ())
(2750 thingies #f ())
(2751 make-thingie 2750 ())
(2752 thingies #f ())
(2753 thingies #f ())
(2754 thingie? 2753 ())
(2755 packages #f ())
(2756 #f 2755 ())
(2757 packages #f ())
(2758 packages #f ())
(2759 packages #f ())
(2760 packages #f ())
(2761 packages #f ())
(2762 packages #f ())
(2763 packages #f ())
(2764 packages #f ())
(2765 #f 2764 ())
(2766 packages #f ())
(2767 package-uid 2766 ())
(2768 packages #f ())
(2769 set-package-opens! 2768 ())
(2770 packages #f ())
(2771 package-opens-really 2770 ())
(2772 packages #f ())
(2773 package-definitions 2772 ())
(2774 packages #f ())
(2775 package-unstable? 2774 ())
(2776 packages #f ())
(2777 set-package-integrate?! 2776 ())
(2778 packages #f ())
(2779 package-integrate? 2778 ())
(2780 packages #f ())
(2781 set-package-get-location! 2780 ())
(2782 packages #f ())
(2783 package-get-location 2782 ())
(2784 packages #f ())
(2785 package-file-name 2784 ())
(2786 packages #f ())
(2787 package-clauses 2786 ())
(2788 packages #f ())
(2789 set-package-loaded?! 2788 ())
(2790 packages #f ())
(2791 package-loaded? 2790 ())
(2792 packages #f ())
(2793 set-package->environment! 2792 ())
(2794 packages #f ())
(2795 package->environment 2794 ())
(2796 packages #f ())
(2797 set-package-opens-thunk! 2796 ())
(2798 packages #f ())
(2799 package-opens-thunk 2798 ())
(2800 packages #f ())
(2801 package-accesses-thunk 2800 ())
(2802 packages #f ())
(2803 set-package-undefineds! 2802 ())
(2804 packages #f ())
(2805 package-real-undefineds 2804 ())
(2806 packages #f ())
(2807 set-package-undefined-but-assigneds! 2806 ())
(2808 packages #f ())
(2809 package-real-undefined-but-assigneds 2808 ())
(2810 packages #f ())
(2811 package-clients 2810 ())
(2812 packages #f ())
(2813 package-cached 2812 ())
(2814 packages #f ())
(2815 really-make-package 2814 ())
(2816 packages #f ())
(2817 packages #f ())
(2818 #f 2817 ())
(2819 packages #f ())
(2820 structure-interface-thunk 2819 ())
(2821 packages #f ())
(2822 set-structure-interface! 2821 ())
(2823 packages #f ())
(2824 structure-interface-really 2823 ())
(2825 packages #f ())
(2826 structure-package 2825 ())
(2827 packages #f ())
(2828 structure-clients 2827 ())
(2829 packages #f ())
(2830 set-structure-name! 2829 ())
(2831 packages #f ())
(2832 structure-name 2831 ())
(2833 packages #f ())
(2834 really-make-structure 2833 ())
(2835 packages #f ())
(2836 packages #f ())
(2837 structure? 2836 ())
(2838 packages #f ())
(2839 initialize-structure! 2838 ())
(2840 packages #f ())
(2841 structure-interface 2840 ())
(2842 packages #f ())
(2843 package? 2842 ())
(2844 packages #f ())
(2845 note-package-name! 2844 ())
(2846 packages #f ())
(2847 note-structure-name! 2846 ())
(2848 packages #f ())
(2849 make-structure 2848 ())
(2850 #f 2849 ())
(2851 packages #f ())
(2852 structure-unstable? 2851 ())
(2853 packages #f ())
(2854 make-modified-structure 2853 ())
(2855 #f 2854 ())
(2856 packages #f ())
(2857 get-new-location 2856 ())
(2858 packages #f ())
(2859 package-define! 2858 ())
(2860 packages #f ())
(2861 package-accesses 2860 ())
(2862 packages #f ())
(2863 initialize-package! 2862 ())
(2864 #f 2863 ())
(2865 #f 2863 ())
(2866 packages #f ())
(2867 initialize-package-if-necessary! 2866 ())
(2868 packages #f ())
(2869 package-definition 2868 ())
(2870 packages #f ())
(2871 search-opens 2870 ())
(2872 loop 2871 ())
(2873 packages #f ())
(2874 structure-lookup 2873 ())
(2875 #f 2874 ())
(2876 #f 2874 ())
(2877 packages #f ())
(2878 package-lookup 2877 ())
(2879 packages #f ())
(2880 generic-lookup 2879 ())
(2881 packages #f ())
(2882 really-package-lookup 2881 ())
(2883 packages #f ())
(2884 real-structure-lookup 2883 ())
(2885 packages #f ())
(2886 for-each-export 2885 ())
(2887 #f 2886 ())
(2888 packages #f ())
(2889 really-package->environment 2888 ())
(2890 #f 2889 ())
(2891 #f 2889 ())
(2892 packages #f ())
(2893 new-package-uid 2892 ())
(2894 packages #f ())
(2895 make-package 2894 ())
(2896 packages #f ())
(2897 lazy-table-accessor 2896 ())
(2898 #f 2897 ())
(2899 packages #f ())
(2900 package-name 2899 ())
(2901 packages #f ())
(2902 package-opens 2901 ())
(2903 packages #f ())
(2904 make-simple-package 2903 ())
(2905 #f 2904 ())
(2906 #f 2904 ())
(2907 packages #f ())
(2908 package-add-static! 2907 ())
(2909 packages #f ())
(2910 package-refine-type! 2909 ())
(2911 packages #f ())
(2912 for-each-definition 2911 ())
(2913 #f 2912 ())
(2914 packages #f ())
(2915 make-new-location 2914 ())
(2916 packages #f ())
(2917 flush-location-names 2916 ())
(2918 packages #f ())
(2919 print-undefined-names 2918 ())
(2920 #f 2919 ())
(2921 #f 2919 ())
(2922 packages #f ())
(2923 noting-undefined-variables 2922 ())
(2924 add-name 2923 ())
(2925 #f 2923 ())
(2926 #f 2923 ())
(2927 #f 2926 ())
(2928 #f 2926 ())
(2929 #f 2928 ())
(2930 packages #f ())
(2931 cenv->package 2930 ())
(2932 packages #f ())
(2933 get-location-for-unassignable 2932 ())
(2934 #f 2933 ())
(2935 #f 2933 ())
(2936 packages #f ())
(2937 package-note-caching! 2936 ())
(2938 loop 2937 ())
(2939 packages #f ())
(2940 note-caching! 2939 ())
(2941 packages #f ())
(2942 location-for-reference 2941 ())
(2943 loop 2942 ())
(2944 packages #f ())
(2945 get-location-for-undefined 2944 ())
(2946 #f 2945 ())
(2947 packages #f ())
(2948 get-location 2947 ())
(2949 packages #f ())
(2950 really-link! 2949 ())
(2951 loop##417 2950 ())
(2952 packages #f ())
(2953 link! 2952 ())
(2954 #f 2953 ())
(2955 packages #f ())
(2956 location-on-demand 2955 ())
(2957 #f 2956 ())
(2958 packages #f ())
(2959 packages #f ())
(2960 environments #f ())
(2961 set-reflective-tower-maker! 2960 ())
(2962 environments #f ())
(2963 make-reflective-tower 2962 ())
(2964 recur 2963 ())
(2965 #f 2964 ())
(2966 environments #f ())
(2967 null-environment 2966 ())
(2968 environments #f ())
(2969 set-scheme-report-environment! 2968 ())
(2970 environments #f ())
(2971 environments #f ())
(2972 environments #f ())
(2973 environments #f ())
(2974 scheme-report-environment 2973 ())
(2975 environments #f ())
(2976 with-interaction-environment 2975 ())
(2977 environments #f ())
(2978 set-interaction-environment! 2977 ())
(2979 environments #f ())
(2980 interaction-environment 2979 ())
(2981 environments #f ())
(2982 environments #f ())
(2983 carefully 2982 ())
(2984 environments #f ())
(2985 *structure-ref 2984 ())
(2986 environments #f ())
(2987 environment-define! 2986 ())
(2988 environments #f ())
(2989 environment-set! 2988 ())
(2990 #f 2989 ())
(2991 environments #f ())
(2992 environment-ref 2991 ())
(2993 #f 2992 ())
(2994 filenames #f ())
(2995 translate 2994 ())
(2996 loop 2995 ())
(2997 filenames #f ())
(2998 set-translation! 2997 ())
(2999 filenames #f ())
(3000 translations 2999 ())
(3001 filenames #f ())
(3002 filenames #f ())
(3003 string-posq 3002 ())
(3004 loop 3003 ())
(3005 filenames #f ())
(3006 file-nondirectory-position 3005 ())
(3007 loop 3006 ())
(3008 filenames #f ())
(3009 file-name-nondirectory 3008 ())
(3010 filenames #f ())
(3011 file-name-directory 3010 ())
(3012 filenames #f ())
(3013 filenames #f ())
(3014 filenames #f ())
(3015 filenames #f ())
(3016 namestring-component 3015 ())
(3017 filenames #f ())
(3018 filenames #f ())
(3019 filenames #f ())
(3020 namestring 3019 ())
(3021 #f 3020 ())
(3022 reading-forms #f ())
(3023 really-read-forms 3022 ())
(3024 loop 3023 ())
(3025 reading-forms #f ())
(3026 read-forms 3025 ())
(3027 #f 3026 ())
(3028 reading-forms #f ())
(3029 #f 3028 ())
(3030 nodes #f ())
(3031 #f 3030 ())
(3032 nodes #f ())
(3033 #f 3032 ())
(3034 nodes #f ())
(3035 #f 3034 ())
(3036 nodes #f ())
(3037 #f 3036 ())
(3038 nodes #f ())
(3039 nodes #f ())
(3040 nodes #f ())
(3041 #f 3040 ())
(3042 #f 3041 ())
(3043 nodes #f ())
(3044 #f 3043 ())
(3045 nodes #f ())
(3046 #f 3045 ())
(3047 nodes #f ())
(3048 #f 3047 ())
(3049 nodes #f ())
(3050 #f 3049 ())
(3051 nodes #f ())
(3052 node-operator-id 3051 ())
(3053 nodes #f ())
(3054 node-form 3053 ())
(3055 nodes #f ())
(3056 set-node-plist! 3055 ())
(3057 nodes #f ())
(3058 node-plist 3057 ())
(3059 nodes #f ())
(3060 really-make-node 3059 ())
(3061 nodes #f ())
(3062 nodes #f ())
(3063 nodes #f ())
(3064 nodes #f ())
(3065 nodes #f ())
(3066 nodes #f ())
(3067 #f 3066 ())
(3068 nodes #f ())
(3069 set-operator-type! 3068 ())
(3070 nodes #f ())
(3071 operator-type 3070 ())
(3072 nodes #f ())
(3073 operator-nargs 3072 ())
(3074 nodes #f ())
(3075 operator-uid 3074 ())
(3076 nodes #f ())
(3077 operator-name 3076 ())
(3078 nodes #f ())
(3079 make-operator 3078 ())
(3080 nodes #f ())
(3081 nodes #f ())
(3082 operator? 3081 ())
(3083 nodes #f ())
(3084 get-operator 3083 ())
(3085 nodes #f ())
(3086 make-operator-table 3085 ())
(3087 nodes #f ())
(3088 operator-lookup 3087 ())
(3089 nodes #f ())
(3090 operator-define! 3089 ())
(3091 nodes #f ())
(3092 node? 3091 ())
(3093 nodes #f ())
(3094 make-node 3093 ())
(3095 nodes #f ())
(3096 node-ref 3095 ())
(3097 nodes #f ())
(3098 node-set! 3097 ())
(3099 loop 3098 ())
(3100 nodes #f ())
(3101 node-operator 3100 ())
(3102 nodes #f ())
(3103 node-predicate 3102 ())
(3104 #f 3103 ())
(3105 nodes #f ())
(3106 make-similar-node 3105 ())
(3107 nodes #f ())
(3108 force-node 3107 ())
(3109 nodes #f ())
(3110 schemify-node 3109 ())
(3111 nodes #f ())
(3112 schemify-sexp 3111 ())
(3113 loop 3112 ())
(3114 nodes #f ())
(3115 schemify 3114 ())
(3116 nodes #f ())
(3117 schemify-nodes 3116 ())
(3118 #f 3117 ())
(3119 nodes #f ())
(3120 define-schemifier 3119 ())
(3121 nodes #f ())
(3122 schemify-formals 3121 ())
(3123 nodes #f ())
(3124 schemify-lambda 3123 ())
(3125 nodes #f ())
(3126 schemify-letrec 3125 ())
(3127 #f 3126 ())
(3128 nodes #f ())
(3129 nodes #f ())
(3130 var-utilities #f ())
(3131 normalize-formals 3130 ())
(3132 var-utilities #f ())
(3133 n-ary? 3132 ())
(3134 var-utilities #f ())
(3135 number-of-required-args 3134 ())
(3136 loop##445 3135 ())
(3137 syntactic #f ())
(3138 syntactic #f ())
(3139 syntactic #f ())
(3140 syntactic #f ())
(3141 syntactic #f ())
(3142 syntactic #f ())
(3143 syntactic #f ())
(3144 syntactic #f ())
(3145 syntactic #f ())
(3146 syntactic #f ())
(3147 syntactic #f ())
(3148 syntactic #f ())
(3149 syntactic #f ())
(3150 syntactic #f ())
(3151 syntactic #f ())
(3152 syntactic #f ())
(3153 syntactic #f ())
(3154 #f 3153 ())
(3155 #f 3154 ())
(3156 syntactic #f ())
(3157 #f 3156 ())
(3158 #f 3157 ())
(3159 #f 3158 ())
(3160 syntactic #f ())
(3161 #f 3160 ())
(3162 #f 3161 ())
(3163 syntactic #f ())
(3164 #f 3163 ())
(3165 syntactic #f ())
(3166 #f 3165 ())
(3167 #f 3166 ())
(3168 syntactic #f ())
(3169 #f 3168 ())
(3170 syntactic #f ())
(3171 #f 3170 ())
(3172 syntactic #f ())
(3173 #f 3172 ())
(3174 syntactic #f ())
(3175 #f 3174 ())
(3176 syntactic #f ())
(3177 #f 3176 ())
(3178 syntactic #f ())
(3179 #f 3178 ())
(3180 syntactic #f ())
(3181 #f 3180 ())
(3182 syntactic #f ())
(3183 #f 3182 ())
(3184 syntactic #f ())
(3185 #f 3184 ())
(3186 syntactic #f ())
(3187 syntactic #f ())
(3188 syntactic #f ())
(3189 syntactic #f ())
(3190 at-least-this-long? 3189 ())
(3191 syntactic #f ())
(3192 names? 3191 ())
(3193 syntactic #f ())
(3194 destructure-define 3193 ())
(3195 syntactic #f ())
(3196 scan-define 3195 ())
(3197 syntactic #f ())
(3198 this-long? 3197 ())
(3199 syntactic #f ())
(3200 process-syntax 3199 ())
(3201 syntactic #f ())
(3202 scan-define-syntax 3201 ())
(3203 syntactic #f ())
(3204 expand-name 3203 ())
(3205 syntactic #f ())
(3206 expand-operator-form 3205 ())
(3207 syntactic #f ())
(3208 literal? 3207 ())
(3209 syntactic #f ())
(3210 expand-literal 3209 ())
(3211 syntactic #f ())
(3212 expand-list 3211 ())
(3213 #f 3212 ())
(3214 syntactic #f ())
(3215 expand-call 3214 ())
(3216 syntactic #f ())
(3217 expand 3216 ())
(3218 syntactic #f ())
(3219 expand-macro-application 3218 ())
(3220 #f 3219 ())
(3221 #f 3219 ())
(3222 syntactic #f ())
(3223 expand-structure-ref 3222 ())
(3224 struct-node 3223 ())
(3225 syntactic #f ())
(3226 expand-head 3225 ())
(3227 syntactic #f ())
(3228 scan-forms 3227 ())
(3229 loop 3228 ())
(3230 syntactic #f ())
(3231 expand-define 3230 ())
(3232 syntactic #f ())
(3233 expand-scanned-form 3232 ())
(3234 syntactic #f ())
(3235 expand-form 3234 ())
(3236 loop 3235 ())
(3237 syntactic #f ())
(3238 static-value 3237 ())
(3239 syntactic #f ())
(3240 make-operator-predicate 3239 ())
(3241 #f 3240 ())
(3242 syntactic #f ())
(3243 body-lossage 3242 ())
(3244 syntactic #f ())
(3245 scan-body-forms 3244 ())
(3246 #f 3245 ())
(3247 #f 3245 ())
(3248 syntactic #f ())
(3249 expand-letrec 3248 ())
(3250 #f 3249 ())
(3251 syntactic #f ())
(3252 expand-body 3251 ())
(3253 #f 3252 ())
(3254 #f 3253 ())
(3255 #f 3253 ())
(3256 #f 3252 ())
(3257 syntactic #f ())
(3258 define-expander 3257 ())
(3259 syntactic #f ())
(3260 unspecific-node 3259 ())
(3261 syntactic #f ())
(3262 bind-names 3261 ())
(3263 loop 3262 ())
(3264 syntactic #f ())
(3265 expand-lambda 3264 ())
(3266 #f 3265 ())
(3267 #f 3265 ())
(3268 syntactic #f ())
(3269 specs? 3268 ())
(3270 syntactic #f ())
(3271 syntax? 3270 ())
(3272 primops #f ())
(3273 primops #f ())
(3274 #f 3273 ())
(3275 primops #f ())
(3276 primop-name 3275 ())
(3277 primops #f ())
(3278 primop-type 3277 ())
(3279 primops #f ())
(3280 primop-closed 3279 ())
(3281 primops #f ())
(3282 primop-compilator 3281 ())
(3283 primops #f ())
(3284 make-primop 3283 ())
(3285 primops #f ())
(3286 primops #f ())
(3287 primop? 3286 ())
(3288 primops #f ())
(3289 walk-primops 3288 ())
(3290 #f 3289 ())
(3291 primops #f ())
(3292 define-compiler-primitive 3291 ())
(3293 primops #f ())
(3294 get-primop 3293 ())
(3295 debug-data #f ())
(3296 debug-data #f ())
(3297 debug-data #f ())
(3298 debug-data #f ())
(3299 debug-data #f ())
(3300 debug-data #f ())
(3301 debug-data #f ())
(3302 debug-data #f ())
(3303 debug-data #f ())
(3304 debug-data #f ())
(3305 #f 3304 ())
(3306 debug-data #f ())
(3307 debug-data-uid 3306 ())
(3308 debug-data #f ())
(3309 debug-data-name 3308 ())
(3310 debug-data #f ())
(3311 debug-data-parent 3310 ())
(3312 debug-data #f ())
(3313 set-debug-data-env-maps! 3312 ())
(3314 debug-data #f ())
(3315 debug-data-env-maps 3314 ())
(3316 debug-data #f ())
(3317 set-debug-data-source! 3316 ())
(3318 debug-data #f ())
(3319 debug-data-source 3318 ())
(3320 debug-data #f ())
(3321 make-debug-data 3320 ())
(3322 debug-data #f ())
(3323 debug-data #f ())
(3324 debug-data? 3323 ())
(3325 debug-data #f ())
(3326 debug-data-env-shape 3325 ())
(3327 loop 3326 ())
(3328 debug-data #f ())
(3329 new-template-uid 3328 ())
(3330 debug-data #f ())
(3331 template-uid 3330 ())
(3332 debug-data #f ())
(3333 set-template-uid! 3332 ())
(3334 debug-data #f ())
(3335 debug-flag-accessor 3334 ())
(3336 #f 3335 ())
(3337 debug-data #f ())
(3338 debug-flag-modifier 3337 ())
(3339 #f 3338 ())
(3340 debug-data #f ())
(3341 saving-and-restoring 3340 ())
(3342 swap 3341 ())
(3343 debug-data #f ())
(3344 with-fresh-compiler-state 3343 ())
(3345 #f 3344 ())
(3346 #f 3345 ())
(3347 #f 3345 ())
(3348 debug-data #f ())
(3349 note-debug-data! 3348 ())
(3350 debug-data #f ())
(3351 debug-data->info 3350 ())
(3352 debug-data #f ())
(3353 get-debug-data 3352 ())
(3354 debug-data #f ())
(3355 new-debug-data 3354 ())
(3356 debug-data #f ())
(3357 debug-data #f ())
(3358 frames #f ())
(3359 frame-env-index 3358 ())
(3360 frames #f ())
(3361 frame-template-index 3360 ())
(3362 frames #f ())
(3363 set-frame-size! 3362 ())
(3364 frames #f ())
(3365 frame-size 3364 ())
(3366 frames #f ())
(3367 set-frame-literals! 3366 ())
(3368 frames #f ())
(3369 frame-literals 3368 ())
(3370 frames #f ())
(3371 set-frame-count! 3370 ())
(3372 frames #f ())
(3373 frame-count 3372 ())
(3374 frames #f ())
(3375 frame-debug-data 3374 ())
(3376 frames #f ())
(3377 really-make-frame 3376 ())
(3378 frames #f ())
(3379 frames #f ())
(3380 frame? 3379 ())
(3381 frames #f ())
(3382 adjust-procedure-name 3381 ())
(3383 frames #f ())
(3384 make-frame 3383 ())
(3385 finish 3384 ())
(3386 frames #f ())
(3387 index->offset 3386 ())
(3388 frames #f ())
(3389 template-offset 3388 ())
(3390 frames #f ())
(3391 environment-offset 3390 ())
(3392 frames #f ())
(3393 depth-check! 3392 ())
(3394 frames #f ())
(3395 position 3394 ())
(3396 loop 3395 ())
(3397 frames #f ())
(3398 literal-position 3397 ())
(3399 #f 3398 ())
(3400 frames #f ())
(3401 literal->index 3400 ())
(3402 frames #f ())
(3403 binding->index 3402 ())
(3404 segments #f ())
(3405 #f 3404 ())
(3406 segments #f ())
(3407 astate-code-vector 3406 ())
(3408 segments #f ())
(3409 set-astate-pc! 3408 ())
(3410 segments #f ())
(3411 astate-pc 3410 ())
(3412 segments #f ())
(3413 set-astate-env-maps! 3412 ())
(3414 segments #f ())
(3415 astate-env-maps 3414 ())
(3416 segments #f ())
(3417 make-assembly-state 3416 ())
(3418 segments #f ())
(3419 segments #f ())
(3420 segments #f ())
(3421 segments #f ())
(3422 segments #f ())
(3423 segments #f ())
(3424 emit-segment! 3423 ())
(3425 segments #f ())
(3426 high-byte 3425 ())
(3427 segments #f ())
(3428 low-byte 3427 ())
(3429 segments #f ())
(3430 add-big-stack-protocol! 3429 ())
(3431 segments #f ())
(3432 segment-data->template 3431 ())
(3433 loop##514 3432 ())
(3434 segments #f ())
(3435 make-astate 3434 ())
(3436 segments #f ())
(3437 check-stack-use 3436 ())
(3438 segments #f ())
(3439 segment->template 3438 ())
(3440 segments #f ())
(3441 with-package-key 3440 ())
(3442 segments #f ())
(3443 emit-byte! 3442 ())
(3444 segments #f ())
(3445 instruction 3444 ())
(3446 #f 3445 ())
(3447 #f 3446 ())
(3448 segments #f ())
(3449 sequentially-2 3448 ())
(3450 #f 3449 ())
(3451 segments #f ())
(3452 sequentially 3451 ())
(3453 loop 3452 ())
(3454 #f 3452 ())
(3455 loop 3454 ())
(3456 segments #f ())
(3457 continuation-data 3456 ())
(3458 #f 3457 ())
(3459 segments #f ())
(3460 make-label 3459 ())
(3461 segments #f ())
(3462 code-vector-set2! 3461 ())
(3463 segments #f ())
(3464 insert-label! 3463 ())
(3465 segments #f ())
(3466 label-reference 3465 ())
(3467 #f 3466 ())
(3468 segments #f ())
(3469 bytes->segment 3468 ())
(3470 #f 3469 ())
(3471 #f 3470 ())
(3472 segments #f ())
(3473 instruction-using-label 3472 ())
(3474 segments #f ())
(3475 optional-label-reference 3474 ())
(3476 segments #f ())
(3477 using-optional-label 3476 ())
(3478 segments #f ())
(3479 computed-goto-instruction 3478 ())
(3480 #f 3479 ())
(3481 loop##515 3480 ())
(3482 segments #f ())
(3483 attach-label 3482 ())
(3484 #f 3483 ())
(3485 #f 3484 ())
(3486 segments #f ())
(3487 note-source-code 3486 ())
(3488 #f 3487 ())
(3489 segments #f ())
(3490 note-environment 3489 ())
(3491 #f 3490 ())
(3492 segments #f ())
(3493 segments #f ())
(3494 optimizer #f ())
(3495 apply-optimizers 3494 ())
(3496 #f 3495 ())
(3497 optimizer #f ())
(3498 get-optimizer 3497 ())
(3499 #f 3498 ())
(3500 #f 3499 ())
(3501 #f 3500 ())
(3502 optimizer #f ())
(3503 set-optimizer! 3502 ())
(3504 optimizer #f ())
(3505 flat-environments #f ())
(3506 clear-var-set! 3505 ())
(3507 flat-environments #f ())
(3508 clean-var-list 3507 ())
(3509 flat-environments #f ())
(3510 set-difference! 3509 ())
(3511 flat-environments #f ())
(3512 set-union! 3511 ())
(3513 #f 3512 ())
(3514 flat-environments #f ())
(3515 set-add-element! 3514 ())
(3516 flat-environments #f ())
(3517 flat-environments #f ())
(3518 install-set! 3517 ())
(3519 #f 3518 ())
(3520 flat-environments #f ())
(3521 install-new-set! 3520 ())
(3522 flat-environments #f ())
(3523 unassigned-check-primop 3522 ())
(3524 flat-environments #f ())
(3525 flat-environments #f ())
(3526 cell-set!-primop 3525 ())
(3527 flat-environments #f ())
(3528 flat-environments #f ())
(3529 cell-ref-primop 3528 ())
(3530 flat-environments #f ())
(3531 flat-environments #f ())
(3532 make-cell-primop 3531 ())
(3533 flat-environments #f ())
(3534 flat-environments #f ())
(3535 flat-environments #f ())
(3536 flat-environments #f ())
(3537 flat-environments #f ())
(3538 flat-environments #f ())
(3539 flat-environments #f ())
(3540 flat-environments #f ())
(3541 flat-environments #f ())
(3542 flat-environments #f ())
(3543 flat-environments #f ())
(3544 flat-environments #f ())
(3545 flat-environments #f ())
(3546 flat-environments #f ())
(3547 make-primop-call 3546 ())
(3548 flat-environments #f ())
(3549 make-cell-set! 3548 ())
(3550 flat-environments #f ())
(3551 really-make-cell-ref 3550 ())
(3552 flat-environments #f ())
(3553 make-cell-ref 3552 ())
(3554 flat-environments #f ())
(3555 make-unassigned-cell 3554 ())
(3556 flat-environments #f ())
(3557 make-make-cell 3556 ())
(3558 flat-environments #f ())
(3559 mark-letrec-sets 3558 ())
(3560 #f 3559 ())
(3561 flat-environments #f ())
(3562 #f 3561 ())
(3563 flat-environments #f ())
(3564 #f 3563 ())
(3565 flat-environments #f ())
(3566 #f 3565 ())
(3567 flat-environments #f ())
(3568 #f 3567 ())
(3569 flat-environments #f ())
(3570 #f 3569 ())
(3571 flat-environments #f ())
(3572 #f 3571 ())
(3573 flat-environments #f ())
(3574 #f 3573 ())
(3575 flat-environments #f ())
(3576 flat-environments #f ())
(3577 flat-environments #f ())
(3578 flat-environments #f ())
(3579 flat-environments #f ())
(3580 flat-environments #f ())
(3581 no-sets 3580 ())
(3582 flat-environments #f ())
(3583 define-set-marker 3582 ())
(3584 flat-environments #f ())
(3585 #f 3584 ())
(3586 flat-environments #f ())
(3587 mark-set-variables! 3586 ())
(3588 flat-environments #f ())
(3589 assigned? 3588 ())
(3590 flat-environments #f ())
(3591 #f 3590 ())
(3592 #f 3591 ())
(3593 flat-environments #f ())
(3594 flatten-impure-letrec 3593 ())
(3595 #f 3594 ())
(3596 #f 3594 ())
(3597 flat-environments #f ())
(3598 flatten-pure-letrec 3597 ())
(3599 flat-environments #f ())
(3600 flatten-letrec 3599 ())
(3601 #f 3600 ())
(3602 flat-environments #f ())
(3603 #f 3602 ())
(3604 flat-environments #f ())
(3605 #f 3604 ())
(3606 flat-environments #f ())
(3607 #f 3606 ())
(3608 flat-environments #f ())
(3609 #f 3608 ())
(3610 flat-environments #f ())
(3611 #f 3610 ())
(3612 flat-environments #f ())
(3613 #f 3612 ())
(3614 flat-environments #f ())
(3615 add-cells 3614 ())
(3616 loop##523 3615 ())
(3617 flat-environments #f ())
(3618 convert-lambda-body 3617 ())
(3619 flat-environments #f ())
(3620 flatten-lambda 3619 ())
(3621 flat-environments #f ())
(3622 #f 3621 ())
(3623 flat-environments #f ())
(3624 #f 3623 ())
(3625 flat-environments #f ())
(3626 flat-environments #f ())
(3627 flat-environments #f ())
(3628 flat-environments #f ())
(3629 no-free-vars 3628 ())
(3630 flat-environments #f ())
(3631 flatten-list 3630 ())
(3632 #f 3631 ())
(3633 flat-environments #f ())
(3634 define-flattener 3633 ())
(3635 flat-environments #f ())
(3636 #f 3635 ())
(3637 flat-environments #f ())
(3638 flatten-node 3637 ())
(3639 flat-environments #f ())
(3640 flatten-form 3639 ())
(3641 flat-environments #f ())
(3642 #f 3641 ())
(3643 #f 3642 ())
(3644 reconstruction #f ())
(3645 constant-type 3644 ())
(3646 reconstruction #f ())
(3647 reconstruction #f ())
(3648 reconstruction #f ())
(3649 reconstruct-apply 3648 ())
(3650 #f 3649 ())
(3651 reconstruction #f ())
(3652 #f 3651 ())
(3653 reconstruction #f ())
(3654 #f 3653 ())
(3655 #f 3654 ())
(3656 reconstruction #f ())
(3657 #f 3656 ())
(3658 reconstruction #f ())
(3659 define-primop-reconstructor 3658 ())
(3660 reconstruction #f ())
(3661 reconstruction #f ())
(3662 reconstruction #f ())
(3663 reconstruction #f ())
(3664 reconstruction #f ())
(3665 #f 3664 ())
(3666 reconstruction #f ())
(3667 #f 3666 ())
(3668 reconstruction #f ())
(3669 node->type 3668 ())
(3670 reconstruction #f ())
(3671 #f 3670 ())
(3672 reconstruction #f ())
(3673 reconstruct-letrec 3672 ())
(3674 #f 3673 ())
(3675 reconstruction #f ())
(3676 #f 3675 ())
(3677 reconstruction #f ())
(3678 #f 3677 ())
(3679 reconstruction #f ())
(3680 #f 3679 ())
(3681 reconstruction #f ())
(3682 #f 3681 ())
(3683 loop##524 3682 ())
(3684 reconstruction #f ())
(3685 reconstruction #f ())
(3686 fork-constraints 3685 ())
(3687 #f 3686 ())
(3688 reconstruction #f ())
(3689 #f 3688 ())
(3690 #f 3689 ())
(3691 reconstruction #f ())
(3692 #f 3691 ())
(3693 reconstruction #f ())
(3694 #f 3693 ())
(3695 reconstruction #f ())
(3696 #f 3695 ())
(3697 reconstruction #f ())
(3698 #f 3697 ())
(3699 reconstruction #f ())
(3700 reconstruct-call 3699 ())
(3701 lose 3700 ())
(3702 #f 3701 ())
(3703 loop 3700 ())
(3704 reconstruction #f ())
(3705 proc->reconstructor 3704 ())
(3706 reconstruction #f ())
(3707 #f 3706 ())
(3708 reconstruction #f ())
(3709 reconstruct-name 3708 ())
(3710 reconstruction #f ())
(3711 #f 3710 ())
(3712 reconstruction #f ())
(3713 careful-codomain 3712 ())
(3714 reconstruction #f ())
(3715 reconstruct-lambda 3714 ())
(3716 #f 3715 ())
(3717 reconstruction #f ())
(3718 #f 3717 ())
(3719 reconstruction #f ())
(3720 #f 3719 ())
(3721 reconstruction #f ())
(3722 define-reconstructor 3721 ())
(3723 reconstruction #f ())
(3724 #f 3723 ())
(3725 reconstruction #f ())
(3726 examine 3725 ())
(3727 reconstruction #f ())
(3728 reconstruct 3727 ())
(3729 reconstruction #f ())
(3730 reconstruct-type 3729 ())
(3731 reconstruction #f ())
(3732 node-type 3731 ())
(3733 compiler #f ())
(3734 compiler #f ())
(3735 loop 3734 ())
(3736 compiler #f ())
(3737 compiler #f ())
(3738 compiler #f ())
(3739 define-one-or-two 3738 ())
(3740 #f 3739 ())
(3741 #f 3739 ())
(3742 compiler #f ())
(3743 #f 3742 ())
(3744 #f 3742 ())
(3745 compiler #f ())
(3746 define-one-or-two 3745 ())
(3747 #f 3746 ())
(3748 #f 3746 ())
(3749 compiler #f ())
(3750 compiler #f ())
(3751 compiler #f ())
(3752 define=< 3751 ())
(3753 #f 3752 ())
(3754 #f 3752 ())
(3755 compiler #f ())
(3756 define+* 3755 ())
(3757 #f 3756 ())
(3758 #f 3756 ())
(3759 compiler #f ())
(3760 define-char-io 3759 ())
(3761 #f 3760 ())
(3762 #f 3760 ())
(3763 compiler #f ())
(3764 define-char-io 3763 ())
(3765 #f 3764 ())
(3766 #f 3764 ())
(3767 compiler #f ())
(3768 n-ary-constructor 3767 ())
(3769 #f 3768 ())
(3770 #f 3768 ())
(3771 compiler #f ())
(3772 #f 3771 ())
(3773 compiler #f ())
(3774 #f 3773 ())
(3775 #f 3774 ())
(3776 #f 3773 ())
(3777 compiler #f ())
(3778 #f 3777 ())
(3779 #f 3777 ())
(3780 compiler #f ())
(3781 #f 3780 ())
(3782 #f 3781 ())
(3783 #f 3781 ())
(3784 #f 3780 ())
(3785 compiler #f ())
(3786 #f 3785 ())
(3787 #f 3786 ())
(3788 #f 3787 ())
(3789 #f 3787 ())
(3790 #f 3786 ())
(3791 #f 3785 ())
(3792 #f 3791 ())
(3793 #f 3791 ())
(3794 compiler #f ())
(3795 #f 3794 ())
(3796 #f 3795 ())
(3797 #f 3795 ())
(3798 #f 3794 ())
(3799 compiler #f ())
(3800 compiler #f ())
(3801 compiler #f ())
(3802 compiler #f ())
(3803 compiler #f ())
(3804 compiler #f ())
(3805 compiler #f ())
(3806 compiler #f ())
(3807 #f 3806 ())
(3808 compiler #f ())
(3809 #f 3808 ())
(3810 compiler #f ())
(3811 #f 3810 ())
(3812 compiler #f ())
(3813 #f 3812 ())
(3814 #f 3812 ())
(3815 compiler #f ())
(3816 compiler #f ())
(3817 compiler #f ())
(3818 compiler #f ())
(3819 loop##528 3818 ())
(3820 compiler #f ())
(3821 compiler #f ())
(3822 #f 3821 ())
(3823 compiler #f ())
(3824 #f 3823 ())
(3825 compiler #f ())
(3826 #f 3825 ())
(3827 compiler #f ())
(3828 compiler #f ())
(3829 compiler #f ())
(3830 compiler #f ())
(3831 compiler #f ())
(3832 compiler #f ())
(3833 compiler #f ())
(3834 compiler #f ())
(3835 compiler #f ())
(3836 compiler #f ())
(3837 #f 3836 ())
(3838 compiler #f ())
(3839 compiler #f ())
(3840 compiler #f ())
(3841 compiler #f ())
(3842 compiler #f ())
(3843 #f 3842 ())
(3844 #f 3843 ())
(3845 #f 3844 ())
(3846 #f 3843 ())
(3847 compiler #f ())
(3848 compiler #f ())
(3849 #f 3848 ())
(3850 loop 3849 ())
(3851 compiler #f ())
(3852 #f 3851 ())
(3853 compiler #f ())
(3854 #f 3853 ())
(3855 compiler #f ())
(3856 #f 3855 ())
(3857 compiler #f ())
(3858 #f 3857 ())
(3859 compiler #f ())
(3860 #f 3859 ())
(3861 compiler #f ())
(3862 #f 3861 ())
(3863 compiler #f ())
(3864 #f 3863 ())
(3865 compiler #f ())
(3866 #f 3865 ())
(3867 compiler #f ())
(3868 diagnose-call-error 3867 ())
(3869 #f 3868 ())
(3870 compiler #f ())
(3871 type-check 3870 ())
(3872 #f 3871 ())
(3873 compiler #f ())
(3874 compile 3873 ())
(3875 compiler #f ())
(3876 compile-expression 3875 ())
(3877 compiler #f ())
(3878 define-compilator 3877 ())
(3879 compiler #f ())
(3880 return-cont? 3879 ())
(3881 compiler #f ())
(3882 deliver-value 3881 ())
(3883 compiler #f ())
(3884 ignore-values-cont? 3883 ())
(3885 compiler #f ())
(3886 small-integer? 3885 ())
(3887 compiler #f ())
(3888 integer-literal-instruction 3887 ())
(3889 compiler #f ())
(3890 stack-indirect-instruction 3889 ())
(3891 compiler #f ())
(3892 compile-constant 3891 ())
(3893 compiler #f ())
(3894 stack-ref-instruction 3893 ())
(3895 compiler #f ())
(3896 index->offset 3895 ())
(3897 compiler #f ())
(3898 compile-local-name 3897 ())
(3899 compiler #f ())
(3900 push+stack-indirect-instruction 3899 ())
(3901 compiler #f ())
(3902 constant-with-push 3901 ())
(3903 compiler #f ())
(3904 push+stack-ref-instruction 3903 ())
(3905 compiler #f ())
(3906 lexical-ref-with-push 3905 ())
(3907 compiler #f ())
(3908 name-node-binding 3907 ())
(3909 compiler #f ())
(3910 maybe-compile-with-push 3909 ())
(3911 compiler #f ())
(3912 fixup-source 3911 ())
(3913 compiler #f ())
(3914 really-push-continuation 3913 ())
(3915 compiler #f ())
(3916 push-continuation 3915 ())
(3917 compiler #f ())
(3918 maybe-push-continuation 3917 ())
(3919 compiler #f ())
(3920 pre-push 3919 ())
(3921 compiler #f ())
(3922 make-cont 3921 ())
(3923 compiler #f ())
(3924 named-cont 3923 ())
(3925 compiler #f ())
(3926 fall-through-cont 3925 ())
(3927 compiler #f ())
(3928 compile-argument 3927 ())
(3929 compiler #f ())
(3930 really-push-arguments 3929 ())
(3931 recur 3930 ())
(3932 #f 3931 ())
(3933 #f 3931 ())
(3934 compiler #f ())
(3935 push-arguments 3934 ())
(3936 compiler #f ())
(3937 call-instruction 3936 ())
(3938 compiler #f ())
(3939 compile-unknown-call 3938 ())
(3940 #f 3939 ())
(3941 #f 3939 ())
(3942 compiler #f ())
(3943 compile-name-call 3942 ())
(3944 compiler #f ())
(3945 generate-trap 3944 ())
(3946 compiler #f ())
(3947 set-frame-locations! 3946 ())
(3948 loop 3947 ())
(3949 compiler #f ())
(3950 push-all-with-names 3949 ())
(3951 compiler #f ())
(3952 compile-inline-body 3951 ())
(3953 compiler #f ())
(3954 name-node->symbol 3953 ())
(3955 compiler #f ())
(3956 compile-redex 3955 ())
(3957 compiler #f ())
(3958 compile-call 3957 ())
(3959 compiler #f ())
(3960 set-lexical-offsets! 3959 ())
(3961 loop 3960 ())
(3962 compiler #f ())
(3963 lambda-protocol 3962 ())
(3964 compiler #f ())
(3965 return-cont 3964 ())
(3966 compiler #f ())
(3967 compile-lambda-code 3966 ())
(3968 compiler #f ())
(3969 compile-lambda 3968 ())
(3970 compiler #f ())
(3971 unflatten-form 3970 ())
(3972 compiler #f ())
(3973 letrec-template-maker 3972 ())
(3974 #f 3973 ())
(3975 #f 3974 ())
(3976 #f 3975 ())
(3977 #f 3975 ())
(3978 compiler #f ())
(3979 push-continuation-no-protocol 3978 ())
(3980 compiler #f ())
(3981 push-all-but-last 3980 ())
(3982 compiler #f ())
(3983 push-argument 3982 ())
(3984 #f 3983 ())
(3985 #f 3983 ())
(3986 compiler #f ())
(3987 stack-set!-instruction 3986 ())
(3988 compiler #f ())
(3989 plain-fall-through-cont 3988 ())
(3990 compiler #f ())
(3991 fall-through-cont? 3990 ())
(3992 compiler #f ())
(3993 ignore-values-cont 3992 ())
(3994 compiler #f ())
(3995 accept-values-cont 3994 ())
(3996 compiler #f ())
(3997 accept-values-cont? 3996 ())
(3998 compiler #f ())
(3999 cont-name 3998 ())
(4000 compiler #f ())
(4001 set-type-check?! 4000 ())
(4002 compiler #f ())
(4003 add-variable 4002 ())
(4004 compiler #f ())
(4005 get-variables-locations 4004 ())
(4006 loop 4005 ())
(4007 compiler #f ())
(4008 figure-env-data 4007 ())
(4009 loop 4008 ())
(4010 compiler #f ())
(4011 flat-environment-code 4010 ())
(4012 #f 4011 ())
(4013 #f 4012 ())
(4014 #f 4011 ())
(4015 compiler #f ())
(4016 one-byte->two-byte 4015 ())
(4017 loop 4016 ())
(4018 compiler #f ())
(4019 finish-flat-env 4018 ())
(4020 #f 4019 ())
(4021 compiler #f ())
(4022 compile-recursive-environment 4021 ())
(4023 #f 4022 ())
(4024 #f 4022 ())
(4025 compiler #f ())
(4026 compile-environment 4025 ())
(4027 #f 4026 ())
(4028 compiler #f ())
(4029 really-compile-flat-lambda 4028 ())
(4030 #f 4029 ())
(4031 #f 4030 ())
(4032 #f 4029 ())
(4033 compiler #f ())
(4034 compile-flat-lambda 4033 ())
(4035 #f 4034 ())
(4036 #f 4034 ())
(4037 compiler #f ())
(4038 primop-closed-template 4037 ())
(4039 #f 4038 ())
(4040 #f 4038 ())
(4041 compiler #f ())
(4042 direct-compilator 4041 ())
(4043 #f 4042 ())
(4044 compiler #f ())
(4045 direct-closed-compilator 4044 ())
(4046 #f 4045 ())
(4047 compiler #f ())
(4048 nargs->domain 4047 ())
(4049 loop##537 4048 ())
(4050 compiler #f ())
(4051 get-primop-type 4050 ())
(4052 #f 4051 ())
(4053 compiler #f ())
(4054 simple-compilator 4053 ())
(4055 #f 4054 ())
(4056 compiler #f ())
(4057 simple-closed-compilator 4056 ())
(4058 #f 4057 ())
(4059 compiler #f ())
(4060 define-simple-primitive 4059 ())
(4061 compiler #f ())
(4062 symbol-append 4061 ())
(4063 compiler #f ())
(4064 define-stob-predicate 4063 ())
(4065 compiler #f ())
(4066 define-data-struct-primitives 4065 ())
(4067 def-prim 4066 ())
(4068 loop##539 4066 ())
(4069 compiler #f ())
(4070 define-vector-primitives 4069 ())
(4071 def-prim 4070 ())
(4072 compiler #f ())
(4073 thunk-node? 4072 ())
(4074 compiler #f ())
(4075 thunk-body 4074 ())
(4076 compiler #f ())
(4077 n-ary-primitive-compilator 4076 ())
(4078 #f 4077 ())
(4079 compiler #f ())
(4080 define-n-ary-compiler-primitive 4079 ())
(4081 compiler #f ())
(4082 evaluate-arguments-for-effect 4081 ())
(4083 loop##542 4082 ())
(4084 compiler #f ())
(4085 call-on-arg-and-id 4084 ())
(4086 compiler #f ())
(4087 push-and-compile 4086 ())
(4088 compiler #f ())
(4089 call-on-args 4088 ())
(4090 loop 4089 ())
(4091 compiler #f ())
(4092 empty-segment? 4091 ())
(4093 compiler #f ())
(4094 make-dispatch-protocol 4093 ())
(4095 loop 4094 ())
(4096 compiler #f ())
(4097 compile-definition 4096 ())
(4098 compiler #f ())
(4099 call-template-inst 4098 ())
(4100 compiler #f ())
(4101 compile-form 4100 ())
(4102 compiler #f ())
(4103 compile-forms-loop 4102 ())
(4104 compiler #f ())
(4105 compile-forms 4104 ())
(4106 #f 4105 ())
(4107 compiler #f ())
(4108 template-call 4107 ())
(4109 #f 4108 ())
(4110 #f 4108 ())
(4111 compiler #f ())
(4112 append-templates 4111 ())
(4113 #f 4112 ())
(4114 compiler #f ())
(4115 make-startup-procedure 4114 ())
(4116 compiler #f ())
(4117 evaluation #f ())
(4118 compile-and-run 4117 ())
(4119 #f 4118 ())
(4120 #f 4119 ())
(4121 evaluation #f ())
(4122 really-load-into 4121 ())
(4123 evaluation #f ())
(4124 load 4123 ())
(4125 evaluation #f ())
(4126 eval-from-file 4125 ())
(4127 evaluation #f ())
(4128 load-into 4127 ())
(4129 evaluation #f ())
(4130 eval 4129 ())
(4131 scheme #f ())
(4132 display-conditions #f ())
(4133 limited-write 4132 ())
(4134 recur 4133 ())
(4135 #f 4134 ())
(4136 #f 4135 ())
(4137 display-conditions #f ())
(4138 &disclose-condition 4137 ())
(4139 display-conditions #f ())
(4140 display-conditions #f ())
(4141 display-conditions #f ())
(4142 display-conditions #f ())
(4143 display-conditions #f ())
(4144 really-display-condition 4143 ())
(4145 #f 4144 ())
(4146 display-conditions #f ())
(4147 display-condition 4146 ())
(4148 #f 4147 ())
(4149 mini-command #f ())
(4150 read-string 4149 ())
(4151 loop 4150 ())
(4152 mini-command #f ())
(4153 mini-load 4152 ())
(4154 mini-command #f ())
(4155 command-processor 4154 ())
(4156 loop 4155 ())
(4157 #f 4156 ())
(4158 #f 4157 ())
(4159 #f 4158 ())
(4160 #f 4157 ())
(4161 #f 4160 ())
(4162 #f 4160 ())
(4163 #f 4160 ())
(4164 #f 4163 ())
(4165 #f 4160 ())
(4166 enum-case #f ())
(4167 scheduler #f ())
(4168 decrement-counter! 4167 ())
(4169 scheduler #f ())
(4170 increment-counter! 4169 ())
(4171 scheduler #f ())
(4172 scheduler #f ())
(4173 make-counter 4172 ())
(4174 scheduler #f ())
(4175 round-robin-event-handler 4174 ())
(4176 thread-event-handler 4175 ())
(4177 #f 4176 ())
(4178 #f 4176 ())
(4179 asynchronous-event-handler 4175 ())
(4180 next-thread 4175 ())
(4181 #f 4180 ())
(4182 scheduler #f ())
(4183 run-threads-with-housekeeper 4182 ())
(4184 #f 4183 ())
(4185 loop 4184 ())
(4186 #f 4185 ())
(4187 #f 4186 ())
(4188 #f 4186 ())
(4189 #f 4185 ())
(4190 #f 4183 ())
(4191 scheduler #f ())
(4192 run-threads 4191 ())
(4193 #f 4192 ())
(4194 loop 4193 ())
(4195 #f 4194 ())
(4196 #f 4195 ())
(4197 #f 4195 ())
(4198 #f 4194 ())
(4199 #f 4192 ())
(4200 root-scheduler #f ())
(4201 spawn-output-forcers 4200 ())
(4202 root-scheduler #f ())
(4203 call-when-deadlocked! 4202 ())
(4204 root-scheduler #f ())
(4205 root-scheduler #f ())
(4206 root-scheduler #f ())
(4207 root-scheduler #f ())
(4208 root-scheduler #f ())
(4209 do-some-waiting 4208 ())
(4210 #f 4209 ())
(4211 root-scheduler #f ())
(4212 root-wait 4211 ())
(4213 #f 4212 ())
(4214 root-scheduler #f ())
(4215 scheme-exit-now 4214 ())
(4216 root-scheduler #f ())
(4217 root-scheduler #f ())
(4218 cheap-display-condition 4217 ())
(4219 #f 4218 ())
(4220 root-scheduler #f ())
(4221 root-handler 4220 ())
(4222 root-scheduler #f ())
(4223 make-root-event-handler 4222 ())
(4224 #f 4223 ())
(4225 #f 4223 ())
(4226 root-scheduler #f ())
(4227 root-scheduler 4226 ())
(4228 #f 4227 ())
(4229 #f 4228 ())
(4230 #f 4228 ())
(4231 usual-resumer #f ())
(4232 usual-resumer #f ())
(4233 initialize-rts 4232 ())
(4234 #f 4233 ())
(4235 #f 4234 ())
(4236 #f 4235 ())
(4237 #f 4236 ())
(4238 usual-resumer #f ())
(4239 usual-resumer 4238 ())
(4240 #f 4239 ())
(4241 #f 4240 ())
(4242 initial-system #f ())
(4243 make-tower 4242 ())
(4244 initial-system #f ())
(4245 make-initial-package 4244 ())
(4246 #f 4245 ())
(4247 initial-system #f ())
(4248 initialize-interaction-environment! 4247 ())
(4249 initial-system #f ())
(4250 make-built-in-structures 4249 ())
(4251 #f 4250 ())
(4252 #f 4250 ())
(4253 initial-system #f ())
(4254 start 4253 ())
(4255 #f 4254 ())
(4256 #f 4255 ())
(4257 #f 4256 ())
(4258 usual-macros #f ())
(4259 find-free-names-in-syntax-rules 4258 ())
(4260 meta-variables 4259 ())
(4261 free-names 4259 ())
(4262 loop##562 4259 ())
(4263 usual-macros #f ())
(4264 usual-macros #f ())
(4265 segment-tail 4264 ())
(4266 loop 4265 ())
(4267 usual-macros #f ())
(4268 segment-depth 4267 ())
(4269 usual-macros #f ())
(4270 segment-template? 4269 ())
(4271 usual-macros #f ())
(4272 segment-pattern? 4271 ())
(4273 usual-macros #f ())
(4274 process-rules 4273 ())
(4275 make-transformer 4274 ())
(4276 process-rule 4274 ())
(4277 #f 4276 ())
(4278 process-match 4274 ())
(4279 process-segment-match 4274 ())
(4280 process-pattern 4274 ())
(4281 #f 4280 ())
(4282 process-template 4274 ())
(4283 loop##566 4282 ())
(4284 meta-variables 4274 ())
(4285 free-meta-variables 4274 ())
(4286 usual-macros #f ())
(4287 #f 4286 ())
(4288 usual-macros #f ())
(4289 #f 4288 ())
(4290 expand-quasiquote 4289 ())
(4291 finalize-quasiquote 4289 ())
(4292 descend-quasiquote 4289 ())
(4293 descend-quasiquote-pair 4289 ())
(4294 #f 4293 ())
(4295 #f 4294 ())
(4296 descend-quasiquote-vector 4289 ())
(4297 #f 4296 ())
(4298 interesting-to-quasiquote? 4289 ())
(4299 usual-macros #f ())
(4300 case-clause? 4299 ())
(4301 usual-macros #f ())
(4302 #f 4301 ())
(4303 #f 4302 ())
(4304 #f 4302 ())
(4305 usual-macros #f ())
(4306 #f 4305 ())
(4307 usual-macros #f ())
(4308 specs? 4307 ())
(4309 usual-macros #f ())
(4310 #f 4309 ())
(4311 usual-macros #f ())
(4312 #f 4311 ())
(4313 usual-macros #f ())
(4314 do-spec? 4313 ())
(4315 usual-macros #f ())
(4316 #f 4315 ())
(4317 #f 4316 ())
(4318 usual-macros #f ())
(4319 #f 4318 ())
(4320 recur 4319 ())
(4321 usual-macros #f ())
(4322 #f 4321 ())
(4323 usual-macros #f ())
(4324 usual-transform 4323 ())
(4325 usual-macros #f ())
(4326 define-usual-macro 4325 ())
(4327 usual-macros #f ())
(4328 strong #f ())
(4329 pop-vertex-edge! 4328 ())
(4330 strong #f ())
(4331 follow-edge 4330 ())
(4332 strong #f ())
(4333 unwind-stack 4332 ())
(4334 loop 4333 ())
(4335 strong #f ())
(4336 end-vertex 4335 ())
(4337 #f 4336 ())
(4338 #f 4336 ())
(4339 strong #f ())
(4340 get-strong 4339 ())
(4341 strong #f ())
(4342 do-vertex 4341 ())
(4343 strong #f ())
(4344 make-vertices 4343 ())
(4345 maybe-slot 4344 ())
(4346 #f 4344 ())
(4347 #f 4344 ())
(4348 strong #f ())
(4349 make-vertex 4348 ())
(4350 strong #f ())
(4351 vertex? 4350 ())
(4352 strong #f ())
(4353 vertex-data 4352 ())
(4354 strong #f ())
(4355 set-vertex-edges! 4354 ())
(4356 strong #f ())
(4357 vertex-edges 4356 ())
(4358 strong #f ())
(4359 set-vertex-stack! 4358 ())
(4360 strong #f ())
(4361 vertex-stack 4360 ())
(4362 strong #f ())
(4363 set-vertex-index! 4362 ())
(4364 strong #f ())
(4365 vertex-index 4364 ())
(4366 strong #f ())
(4367 set-vertex-parent! 4366 ())
(4368 strong #f ())
(4369 vertex-parent 4368 ())
(4370 strong #f ())
(4371 set-vertex-lowpoint! 4370 ())
(4372 strong #f ())
(4373 vertex-lowpoint 4372 ())
(4374 strong #f ())
(4375 really-make-vertex 4374 ())
(4376 strong #f ())
(4377 strong #f ())
(4378 find-next-vertex 4377 ())
(4379 loop##588 4378 ())
(4380 strong #f ())
(4381 strongly-connected-components 4380 ())
(4382 loop 4381 ())
(4383 #f 4382 ())
(4384 #f 4382 ())
(4385 #f 4382 ())
(4386 usages #f ())
(4387 insert-aliases 4386 ())
(4388 loop 4387 ())
(4389 usages #f ())
(4390 make-form 4389 ())
(4391 usages #f ())
(4392 #f 4391 ())
(4393 usages #f ())
(4394 form? 4393 ())
(4395 usages #f ())
(4396 form-node 4395 ())
(4397 usages #f ())
(4398 set-form-aliases! 4397 ())
(4399 usages #f ())
(4400 form-aliases 4399 ())
(4401 usages #f ())
(4402 set-form-unaliased?! 4401 ())
(4403 usages #f ())
(4404 form-unaliased? 4403 ())
(4405 usages #f ())
(4406 set-form-free! 4405 ())
(4407 usages #f ())
(4408 form-free 4407 ())
(4409 usages #f ())
(4410 set-form-temp! 4409 ())
(4411 usages #f ())
(4412 form-temp 4411 ())
(4413 usages #f ())
(4414 really-make-form 4413 ())
(4415 usages #f ())
(4416 usages #f ())
(4417 topologically-sort 4416 ())
(4418 #f 4417 ())
(4419 #f 4418 ())
(4420 #f 4418 ())
(4421 usages #f ())
(4422 maybe-make-aliased 4421 ())
(4423 usages #f ())
(4424 stuff-count 4423 ())
(4425 #f 4424 ())
(4426 usages #f ())
(4427 sort-forms 4426 ())
(4428 #f 4427 ())
(4429 #f 4427 ())
(4430 usages #f ())
(4431 usages #f ())
(4432 usages #f ())
(4433 usages #f ())
(4434 usages #f ())
(4435 usages #f ())
(4436 usages #f ())
(4437 usages #f ())
(4438 usages #f ())
(4439 usages #f ())
(4440 usage-incrementator 4439 ())
(4441 #f 4440 ())
(4442 usages #f ())
(4443 package-usage? 4442 ())
(4444 usages #f ())
(4445 make-package-usage 4444 ())
(4446 usages #f ())
(4447 make-usage 4446 ())
(4448 usages #f ())
(4449 usage? 4448 ())
(4450 usages #f ())
(4451 usage-name-node 4450 ())
(4452 usages #f ())
(4453 set-reference! 4452 ())
(4454 usages #f ())
(4455 usage-reference-count 4454 ())
(4456 usages #f ())
(4457 set-operator! 4456 ())
(4458 usages #f ())
(4459 usage-operator-count 4458 ())
(4460 usages #f ())
(4461 set-assignment! 4460 ())
(4462 usages #f ())
(4463 usage-assignment-count 4462 ())
(4464 usages #f ())
(4465 really-make-usage 4464 ())
(4466 usages #f ())
(4467 usages #f ())
(4468 #f 4467 ())
(4469 usages #f ())
(4470 #f 4469 ())
(4471 usages #f ())
(4472 #f 4471 ())
(4473 usages #f ())
(4474 #f 4473 ())
(4475 usages #f ())
(4476 #f 4475 ())
(4477 usages #f ())
(4478 #f 4477 ())
(4479 usages #f ())
(4480 analyze-letrec 4479 ())
(4481 #f 4480 ())
(4482 usages #f ())
(4483 #f 4482 ())
(4484 usages #f ())
(4485 #f 4484 ())
(4486 usages #f ())
(4487 #f 4486 ())
(4488 #f 4487 ())
(4489 usages #f ())
(4490 #f 4489 ())
(4491 usages #f ())
(4492 add-if-free 4491 ())
(4493 usages #f ())
(4494 #f 4493 ())
(4495 usages #f ())
(4496 usages #f ())
(4497 usages #f ())
(4498 usages #f ())
(4499 usages #f ())
(4500 usages #f ())
(4501 nothing 4500 ())
(4502 usages #f ())
(4503 define-usage-analyzer 4502 ())
(4504 usages #f ())
(4505 #f 4504 ())
(4506 usages #f ())
(4507 analyze-nodes 4506 ())
(4508 #f 4507 ())
(4509 usages #f ())
(4510 analyze 4509 ())
(4511 usages #f ())
(4512 find-node-usages 4511 ())
(4513 #f 4512 ())
(4514 #f 4512 ())
(4515 usages #f ())
(4516 maybe-update-known-type 4515 ())
(4517 usages #f ())
(4518 find-usages 4517 ())
(4519 #f 4518 ())
(4520 #f 4518 ())
(4521 #f 4520 ())
(4522 #f 4518 ())
(4523 inline #f ())
(4524 inline #f ())
(4525 inline #f ())
(4526 inline #f ())
(4527 inline #f ())
(4528 inline #f ())
(4529 get-qualified-env 4528 ())
(4530 inline #f ())
(4531 qualified->name 4530 ())
(4532 recur 4531 ())
(4533 inline #f ())
(4534 inline #f ())
(4535 inline #f ())
(4536 reconstitute-name 4535 ())
(4537 inline #f ())
(4538 reconstitute 4537 ())
(4539 label 4538 ())
(4540 inline #f ())
(4541 make-substitution 4540 ())
(4542 #f 4541 ())
(4543 inline #f ())
(4544 inline-transform 4543 ())
(4545 #f 4544 ())
(4546 #f 4544 ())
(4547 inline #f ())
(4548 remove-bindings 4547 ())
(4549 label 4548 ())
(4550 inline #f ())
(4551 unused-name 4550 ())
(4552 loop##613 4551 ())
(4553 #f 4552 ())
(4554 inline #f ())
(4555 clean-lookup 4554 ())
(4556 inline #f ())
(4557 clean-lambda 4556 ())
(4558 #f 4557 ())
(4559 recur 4557 ())
(4560 inline #f ())
(4561 clean-node 4560 ())
(4562 #f 4561 ())
(4563 #f 4561 ())
(4564 inline #f ())
(4565 make-inline-transform 4564 ())
(4566 #f 4565 ())
(4567 #f 4565 ())
(4568 loop##614 4567 ())
(4569 for-reification #f ())
(4570 package-define-static! 4569 ())
(4571 for-reification #f ())
(4572 transform 4571 ())
(4573 for-reification #f ())
(4574 package 4573 ())
(4575 loop##615 4574 ())
(4576 for-reification #f ())
(4577 simple-interface 4576 ())
(4578 #f 4577 ())
(4579 for-reification #f ())
(4580 primop 4579 ())
(4581 for-reification #f ())
(4582 operator 4581 ())
(4583 vm-data #f ())
(4584 remove-stob-tag 4583 ())
(4585 vm-data #f ())
(4586 add-stob-tag 4585 ())
(4587 vm-data #f ())
(4588 b-vector-header? 4587 ())
(4589 vm-data #f ())
(4590 d-vector-header? 4589 ())
(4591 vm-data #f ())
(4592 header-length-in-a-units 4591 ())
(4593 vm-data #f ())
(4594 header-length-in-cells 4593 ())
(4595 vm-data #f ())
(4596 header-length-in-bytes 4595 ())
(4597 vm-data #f ())
(4598 immutable-header? 4597 ())
(4599 vm-data #f ())
(4600 header-type 4599 ())
(4601 vm-data #f ())
(4602 make-header-immutable 4601 ())
(4603 vm-data #f ())
(4604 vm-data #f ())
(4605 make-header 4604 ())
(4606 vm-data #f ())
(4607 vm-data #f ())
(4608 vm-data #f ())
(4609 vm-data #f ())
(4610 vm-data #f ())
(4611 vm-data #f ())
(4612 extract-char 4611 ())
(4613 vm-data #f ())
(4614 enter-char 4613 ())
(4615 vm-data #f ())
(4616 vm-boolean? 4615 ())
(4617 vm-data #f ())
(4618 extract-boolean 4617 ())
(4619 vm-data #f ())
(4620 enter-boolean 4619 ())
(4621 vm-data #f ())
(4622 false? 4621 ())
(4623 vm-data #f ())
(4624 vm-data #f ())
(4625 vm-data #f ())
(4626 vm-data #f ())
(4627 vm-data #f ())
(4628 vm-data #f ())
(4629 vm-data #f ())
(4630 vm-data #f ())
(4631 vm-data #f ())
(4632 vm-data #f ())
(4633 vm-data #f ())
(4634 vm-data #f ())
(4635 immediate-predicate 4634 ())
(4636 #f 4635 ())
(4637 vm-data #f ())
(4638 vm-data #f ())
(4639 vm-data #f ())
(4640 make-tag&immediate-type 4639 ())
(4641 vm-data #f ())
(4642 tag&immediate-type 4641 ())
(4643 vm-data #f ())
(4644 immediate-info 4643 ())
(4645 vm-data #f ())
(4646 immediate-type 4645 ())
(4647 vm-data #f ())
(4648 make-immediate 4647 ())
(4649 vm-data #f ())
(4650 vm-data #f ())
(4651 vm-data #f ())
(4652 vm-data #f ())
(4653 vm-data #f ())
(4654 fixnum-bitwise-not 4653 ())
(4655 vm-data #f ())
(4656 vm-data #f ())
(4657 vm-data #f ())
(4658 vm-data #f ())
(4659 vm-data #f ())
(4660 vm-data #f ())
(4661 fixnum->stob 4660 ())
(4662 vm-data #f ())
(4663 descriptor->fixnum 4662 ())
(4664 vm-data #f ())
(4665 extract-fixnum 4664 ())
(4666 vm-data #f ())
(4667 enter-fixnum 4666 ())
(4668 vm-data #f ())
(4669 too-small-for-fixnum? 4668 ())
(4670 vm-data #f ())
(4671 too-big-for-fixnum? 4670 ())
(4672 vm-data #f ())
(4673 vm-data #f ())
(4674 vm-data #f ())
(4675 vm-data #f ())
(4676 stob? 4675 ())
(4677 vm-data #f ())
(4678 header? 4677 ())
(4679 vm-data #f ())
(4680 immediate? 4679 ())
(4681 vm-data #f ())
(4682 fixnum? 4681 ())
(4683 vm-data #f ())
(4684 vm-data #f ())
(4685 vm-data #f ())
(4686 vm-data #f ())
(4687 set-descriptor-tag 4686 ())
(4688 vm-data #f ())
(4689 unsigned-descriptor-data 4688 ())
(4690 vm-data #f ())
(4691 descriptor-data 4690 ())
(4692 vm-data #f ())
(4693 descriptor-tag 4692 ())
(4694 vm-data #f ())
(4695 make-descriptor 4694 ())
(4696 vm-data #f ())
(4697 vm-data #f ())
(4698 vm-data #f ())
(4699 bytes->a-units 4698 ())
(4700 vm-data #f ())
(4701 a-units->cells 4700 ())
(4702 vm-data #f ())
(4703 cells->a-units 4702 ())
(4704 vm-data #f ())
(4705 vm-data #f ())
(4706 vm-data #f ())
(4707 cells->bytes 4706 ())
(4708 vm-data #f ())
(4709 bytes->cells 4708 ())
(4710 vm-data #f ())
(4711 vm-data #f ())
(4712 vm-data #f ())
(4713 vm-data #f ())
(4714 vm-data #f ())
(4715 vm-data #f ())
(4716 vm-data #f ())
(4717 low-bits 4716 ())
(4718 vm-data #f ())
(4719 adjoin-bits 4718 ())
(4720 vm-data #f ())
(4721 vm-data #f ())
(4722 arithmetic-shift-right 4721 ())
(4723 types #f ())
(4724 types #f ())
(4725 types #f ())
(4726 types #f ())
(4727 types #f ())
(4728 types #f ())
(4729 types #f ())
(4730 types #f ())
(4731 types #f ())
(4732 types #f ())
(4733 types #f ())
(4734 types #f ())
(4735 types #f ())
(4736 types #f ())
(4737 types #f ())
(4738 types #f ())
(4739 types #f ())
(4740 types #f ())
(4741 types #f ())
(4742 types #f ())
(4743 types #f ())
(4744 types #f ())
(4745 procedure 4744 ())
(4746 types #f ())
(4747 types #f ())
(4748 types #f ())
(4749 types #f ())
(4750 defpackage #f ())
(4751 note-name! 4750 ())
(4752 defpackage #f ())
(4753 set-verify-later! 4752 ())
(4754 defpackage #f ())
(4755 verify-later! 4754 ())
(4756 defpackage #f ())
(4757 *verify-later!* 4756 ())
(4758 defpackage #f ())
(4759 defpackage #f ())
(4760 loser 4759 ())
(4761 defpackage #f ())
(4762 make-a-package 4761 ())
(4763 scan-package #f ())
(4764 check-structure 4763 ())
(4765 #f 4764 ())
(4766 scan-package #f ())
(4767 package-optimizer-names 4766 ())
(4768 #f 4767 ())
(4769 #f 4767 ())
(4770 scan-package #f ())
(4771 read-files 4770 ())
(4772 #f 4771 ())
(4773 scan-package #f ())
(4774 package-source 4773 ())
(4775 #f 4774 ())
(4776 scan-package #f ())
(4777 collect-packages 4776 ())
(4778 recur 4777 ())
(4779 #f 4778 ())
(4780 compile-packages #f ())
(4781 compile-packages #f ())
(4782 compile-packages #f ())
(4783 make-define-primitive-node 4782 ())
(4784 compile-packages #f ())
(4785 define-primitives 4784 ())
(4786 #f 4785 ())
(4787 #f 4785 ())
(4788 compile-packages #f ())
(4789 define-usual-transform 4788 ())
(4790 compile-packages #f ())
(4791 expand-package 4790 ())
(4792 #f 4791 ())
(4793 #f 4792 ())
(4794 #f 4792 ())
(4795 #f 4792 ())
(4796 #f 4795 ())
(4797 #f 4796 ())
(4798 #f 4791 ())
(4799 compile-packages #f ())
(4800 compile-package 4799 ())
(4801 module-system #f ())
(4802 analysis #f ())
(4803 analysis #f ())
(4804 analysis #f ())
(4805 analysis #f ())
(4806 analysis #f ())
(4807 analysis #f ())
(4808 package-lookup-type 4807 ())
(4809 analysis #f ())
(4810 analysis #f ())
(4811 require 4810 ())
(4812 analysis #f ())
(4813 simple-literal? 4812 ())
(4814 analysis #f ())
(4815 analysis #f ())
(4816 analysis #f ())
(4817 primitive-proc? 4816 ())
(4818 analysis #f ())
(4819 really-simple-call? 4818 ())
(4820 analysis #f ())
(4821 static-value 4820 ())
(4822 analysis #f ())
(4823 #f 4822 ())
(4824 analysis #f ())
(4825 #f 4824 ())
(4826 loop 4825 ())
(4827 analysis #f ())
(4828 #f 4827 ())
(4829 analysis #f ())
(4830 #f 4829 ())
(4831 analysis #f ())
(4832 #f 4831 ())
(4833 analysis #f ())
(4834 #f 4833 ())
(4835 analysis #f ())
(4836 #f 4835 ())
(4837 analysis #f ())
(4838 #f 4837 ())
(4839 analysis #f ())
(4840 #f 4839 ())
(4841 analysis #f ())
(4842 #f 4841 ())
(4843 analysis #f ())
(4844 #f 4843 ())
(4845 analysis #f ())
(4846 #f 4845 ())
(4847 analysis #f ())
(4848 #f 4847 ())
(4849 analysis #f ())
(4850 define-analyzer 4849 ())
(4851 analysis #f ())
(4852 #f 4851 ())
(4853 analysis #f ())
(4854 simple-list? 4853 ())
(4855 analysis #f ())
(4856 simple? 4855 ())
(4857 analysis #f ())
(4858 analysis #f ())
(4859 simple-lambda? 4858 ())
(4860 #f 4859 ())
(4861 analysis #f ())
(4862 inlinable-rhs? 4861 ())
(4863 analysis #f ())
(4864 analyze-form 4863 ())
(4865 analysis #f ())
(4866 analyze-forms 4865 ())
(4867 #f 4866 ())
(4868 analysis #f ())
(4869 #f 4868 ())
(4870 ensures-loaded #f ())
(4871 ensure-loaded 4870 ())
(4872 #f 4871 ())
(4873 #f 4872 ())
(4874 #f 4871 ())
(4875 #f #f ())
(4876 #f 4875 ())
(4877 get-location 4876 ())
(4878 #f 4876 ())
(4879 #f 4876 ())
(4880 #f 4876 ())
(4881 #f 4876 ())
(4882 #f 4876 ())
(4883 name 4882 ())
(4884 #f 4883 ())
(4885 #f 4876 ())
(4886 loop 4885 ())
(4887 #f 4885 ())
(4888 #f 4885 ())
(4889 #f 4885 ())
(4890 #f 4885 ())
(4891 #f 4876 ())
(4892 mem? 4891 ())
(4893 every? 4891 ())
(4894 #f 4891 ())
(4895 #f 4891 ())
(4896 #f 4876 ())
(4897 mem? 4896 ())
(4898 loop##629 4896 ())
(4899 #f 4876 ())
(4900 #f 4876 ())
(4901 #f 4876 ())
(4902 #f 4876 ())
(4903 #f 4876 ())
(4904 #f 4903 ())
(4905 #f 4876 ())
(4906 #f 4876 ())
(4907 #f 4876 ())
(4908 #f 4876 ())
(4909 #f 4876 ())
(4910 loop 4909 ())
(4911 #f 4909 ())
(4912 #f 4909 ())
(4913 #f 4909 ())
(4914 #f 4909 ())
(4915 #f 4876 ())
(4916 #f 4876 ())
(4917 #f 4876 ())
(4918 #f 4876 ())
(4919 #f 4876 ())
(4920 loop 4919 ())
(4921 #f 4876 ())
(4922 loop 4921 ())
(4923 #f 4876 ())
(4924 loop 4923 ())
(4925 #f 4876 ())
(4926 loop 4925 ())
(4927 #f 4876 ())
(4928 loop 4927 ())
(4929 #f 4876 ())
(4930 loop 4929 ())
(4931 #f 4876 ())
(4932 loop 4931 ())
(4933 #f 4876 ())
(4934 loop 4933 ())
(4935 #f 4876 ())
(4936 loop 4935 ())
(4937 #f 4876 ())
(4938 loop 4937 ())
(4939 #f 4876 ())
(4940 loop 4939 ())
(4941 #f 4876 ())
(4942 #f 4876 ())
(4943 #f 4876 ())
(4944 #f 4876 ())
(4945 #f 4876 ())
(4946 #f 4876 ())
(4947 #f 4876 ())
(4948 loop 4947 ())
(4949 #f 4876 ())
(4950 #f 4876 ())
(4951 #f 4876 ())
(4952 #f 4876 ())
(4953 #f 4876 ())
(4954 #f 4953 ())
(4955 #f 4876 ())
(4956 #f 4955 ())
(4957 #f 4955 ())
(4958 #f 4876 ())
(4959 #f 4876 ())
(4960 #f 4959 ())
(4961 parse-package-clauses 4876 ())
(4962 loop 4961 ())
(4963 #f 4876 ())
(4964 #f 4963 ())
(4965 #f 4964 ())
(4966 #f 4963 ())
(4967 #f 4876 ())
(4968 #f 4876 ())
(4969 #f 4876 ())
(4970 loop 4969 ())
(4971 #f 4876 ())
(4972 #f 4876 ())
(4973 #f 4876 ())
(4974 #f 4876 ())
(4975 loop 4974 ())
(4976 #f 4974 ())
(4977 #f 4974 ())
(4978 #f 4876 ())
(4979 #f 4876 ())
(4980 #f 4876 ())
(4981 #f #f ())
-
